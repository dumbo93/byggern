
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800200  00000c44  00000cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800250  00800250  00000d28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000143b  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a91  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dbb  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000344  00000000  00000000  00003b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00003ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000829  00000000  00000000  00004328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004b51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8b c0       	rjmp	.+278    	; 0x124 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e4       	ldi	r30, 0x44	; 68
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 35       	cpi	r26, 0x50	; 80
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e5       	ldi	r26, 0x50	; 80
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 36       	cpi	r26, 0x62	; 98
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a4 d0       	rcall	.+328    	; 0x268 <main>
 120:	8f c5       	rjmp	.+2846   	; 0xc40 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_3>:
	
}
#endif

#if defined(__AVR_ATmega2560__)
ISR(INT2_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
 14a:	8c e2       	ldi	r24, 0x2C	; 44
 14c:	26 d0       	rcall	.+76     	; 0x19a <MCP_read>

	if (interrupt & MCP_RX0IF){
 14e:	80 ff       	sbrs	r24, 0
 150:	08 c0       	rjmp	.+16     	; 0x162 <__vector_3+0x3e>
		interrupt_flag = RX0;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 50 02 	sts	0x0250, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	8c e2       	ldi	r24, 0x2C	; 44
 15e:	2f d0       	rcall	.+94     	; 0x1be <MCP_bit_modify>
 160:	09 c0       	rjmp	.+18     	; 0x174 <__vector_3+0x50>
	}
	else if (interrupt & MCP_RX1IF){
 162:	81 ff       	sbrs	r24, 1
 164:	07 c0       	rjmp	.+14     	; 0x174 <__vector_3+0x50>
		interrupt_flag = RX1;
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	80 93 50 02 	sts	0x0250, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	8c e2       	ldi	r24, 0x2C	; 44
 172:	25 d0       	rcall	.+74     	; 0x1be <MCP_bit_modify>
	}
	
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0b be       	out	0x3b, r0	; 59
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <MCP_read>:
	SPI_transmit_receive(MCP_READ_STATUS);
	uint8_t status = SPI_transmit_receive(0);
	SPI_set_ss(1);
	
	return status;
}
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	2f d0       	rcall	.+94     	; 0x202 <SPI_set_ss>
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	23 d0       	rcall	.+70     	; 0x1ee <SPI_transmit_receive>
 1a8:	8c 2f       	mov	r24, r28
 1aa:	21 d0       	rcall	.+66     	; 0x1ee <SPI_transmit_receive>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	1f d0       	rcall	.+62     	; 0x1ee <SPI_transmit_receive>
 1b0:	c8 2f       	mov	r28, r24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	25 d0       	rcall	.+74     	; 0x202 <SPI_set_ss>
 1b8:	8c 2f       	mov	r24, r28
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <MCP_bit_modify>:

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	18 2f       	mov	r17, r24
 1c6:	d6 2f       	mov	r29, r22
 1c8:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	19 d0       	rcall	.+50     	; 0x202 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	0d d0       	rcall	.+26     	; 0x1ee <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 1d4:	81 2f       	mov	r24, r17
 1d6:	0b d0       	rcall	.+22     	; 0x1ee <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 1d8:	8d 2f       	mov	r24, r29
 1da:	09 d0       	rcall	.+18     	; 0x1ee <SPI_transmit_receive>
	SPI_transmit_receive(data);
 1dc:	8c 2f       	mov	r24, r28
 1de:	07 d0       	rcall	.+14     	; 0x1ee <SPI_transmit_receive>
	
	SPI_set_ss(1);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e d0       	rcall	.+28     	; 0x202 <SPI_set_ss>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	08 95       	ret

000001ee <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 1ee:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
 1f0:	0d b4       	in	r0, 0x2d	; 45
 1f2:	07 fe       	sbrs	r0, 7
 1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <SPI_transmit_receive+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	82 e4       	ldi	r24, 0x42	; 66
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <SPI_transmit_receive+0xa>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <SPI_transmit_receive+0x10>
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
 1fe:	8e b5       	in	r24, 0x2e	; 46
	
}
 200:	08 95       	ret

00000202 <SPI_set_ss>:
		clear_bit(PORTB, PB4);
	}
	#endif
	
	#if defined(__AVR_ATmega2560__)
	if (val == 1){
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	91 05       	cpc	r25, r1
 206:	11 f4       	brne	.+4      	; 0x20c <SPI_set_ss+0xa>
		set_bit(PORTB, PB7);
 208:	2f 9a       	sbi	0x05, 7	; 5
 20a:	08 95       	ret
	}
	else if (val == 0){
 20c:	89 2b       	or	r24, r25
 20e:	09 f4       	brne	.+2      	; 0x212 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB7);
 210:	2f 98       	cbi	0x05, 7	; 5
 212:	08 95       	ret

00000214 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 214:	e0 ec       	ldi	r30, 0xC0	; 192
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	90 81       	ld	r25, Z
 21a:	95 ff       	sbrs	r25, 5
 21c:	fd cf       	rjmp	.-6      	; 0x218 <UART_Transmit+0x4>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 21e:	80 93 c6 00 	sts	0x00C6, r24
 222:	08 95       	ret

00000224 <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
 224:	e0 ec       	ldi	r30, 0xC0	; 192
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 23       	and	r24, r24
 22c:	ec f7       	brge	.-6      	; 0x228 <UART_Recieve+0x4>
	
	//Get and return received data from buffer
	return UDR0;  
 22e:	80 91 c6 00 	lds	r24, 0x00C6
 232:	08 95       	ret

00000234 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 234:	e5 ec       	ldi	r30, 0xC5	; 197
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	20 81       	ld	r18, Z
 23a:	92 2b       	or	r25, r18
 23c:	90 83       	st	Z, r25
	UBRR0L |= (unsigned char)ubrr;
 23e:	e4 ec       	ldi	r30, 0xC4	; 196
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	89 2b       	or	r24, r25
 246:	80 83       	st	Z, r24
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 248:	e1 ec       	ldi	r30, 0xC1	; 193
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 61       	ori	r24, 0x18	; 24
 250:	80 83       	st	Z, r24
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 252:	e2 ec       	ldi	r30, 0xC2	; 194
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	8e 60       	ori	r24, 0x0E	; 14
 25a:	80 83       	st	Z, r24
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 25c:	62 e1       	ldi	r22, 0x12	; 18
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	8a e0       	ldi	r24, 0x0A	; 10
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	89 c0       	rjmp	.+274    	; 0x378 <fdevopen>
 266:	08 95       	ret

00000268 <main>:
#include <util/delay.h>
//#include <stdio.h>
#include <avr/interrupt.h>

int main( void ){
	cli();
 268:	f8 94       	cli
	// Initializations
	UART_Init( MYUBRR );
 26a:	87 e6       	ldi	r24, 0x67	; 103
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	e2 df       	rcall	.-60     	; 0x234 <UART_Init>
	////printf("MCP\n");
	//CAN_init();
	////printf("CAN\n");
	//COUNTER_init();
	
	ADC_init_2560();
 270:	41 d0       	rcall	.+130    	; 0x2f4 <ADC_init_2560>
	//printf("COUNTER\n");
	printf("\n\n\nInit done\n");
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	db d0       	rcall	.+438    	; 0x42e <puts>
	sei();
 278:	78 94       	sei
		//printf("Received id: %d \n", receive.id);
		//printf("Received length: %d  \n", receive.length);
		//SERVO_set_position(receive.data[0]);
		
		value = IR_read();
		printf("Avg IR signal: %d\n", value);
 27a:	c3 e1       	ldi	r28, 0x13	; 19
 27c:	d2 e0       	ldi	r29, 0x02	; 2
		//printf("\n\nReceived message (x, y): (%d, %d) \n",receive.data[0], receive.data[1]);
		//printf("Received id: %d \n", receive.id);
		//printf("Received length: %d  \n", receive.length);
		//SERVO_set_position(receive.data[0]);
		
		value = IR_read();
 27e:	50 d0       	rcall	.+160    	; 0x320 <IR_read>
		printf("Avg IR signal: %d\n", value);
 280:	1f 92       	push	r1
 282:	8f 93       	push	r24
 284:	df 93       	push	r29
 286:	cf 93       	push	r28
 288:	c1 d0       	rcall	.+386    	; 0x40c <printf>
		COUNT_SCORE_get();
 28a:	0e d0       	rcall	.+28     	; 0x2a8 <COUNT_SCORE_get>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	9f ef       	ldi	r25, 0xFF	; 255
 28e:	21 ee       	ldi	r18, 0xE1	; 225
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	91 50       	subi	r25, 0x01	; 1
 294:	20 40       	sbci	r18, 0x00	; 0
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x2a>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x34>
 29c:	00 00       	nop
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	eb cf       	rjmp	.-42     	; 0x27e <main+0x16>

000002a8 <COUNT_SCORE_get>:
 *  Author: ingunnjv
 */ 
#include "drivers/ir.h"
#include "count_score.h"

int COUNT_SCORE_get(){
 2a8:	cf 93       	push	r28
	static int score;
	static uint8_t prev_value;
	
	int value = IR_read();
 2aa:	3a d0       	rcall	.+116    	; 0x320 <IR_read>
 2ac:	c8 2f       	mov	r28, r24
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
	
	if (value != prev_value){
 2b2:	40 91 53 02 	lds	r20, 0x0253
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	42 17       	cp	r20, r18
 2ba:	53 07       	cpc	r21, r19
 2bc:	b9 f0       	breq	.+46     	; 0x2ec <COUNT_SCORE_get+0x44>
		if (value == 0){
 2be:	23 2b       	or	r18, r19
 2c0:	a9 f4       	brne	.+42     	; 0x2ec <COUNT_SCORE_get+0x44>
			score++;
 2c2:	20 91 51 02 	lds	r18, 0x0251
 2c6:	30 91 52 02 	lds	r19, 0x0252
 2ca:	2f 5f       	subi	r18, 0xFF	; 255
 2cc:	3f 4f       	sbci	r19, 0xFF	; 255
 2ce:	30 93 52 02 	sts	0x0252, r19
 2d2:	20 93 51 02 	sts	0x0251, r18
			printf("SCORE!! New score is: %d\n", score);
 2d6:	3f 93       	push	r19
 2d8:	2f 93       	push	r18
 2da:	26 e2       	ldi	r18, 0x26	; 38
 2dc:	32 e0       	ldi	r19, 0x02	; 2
 2de:	3f 93       	push	r19
 2e0:	2f 93       	push	r18
 2e2:	94 d0       	rcall	.+296    	; 0x40c <printf>
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
		}
	}
	prev_value = value;
 2ec:	c0 93 53 02 	sts	0x0253, r28
}
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <ADC_init_2560>:
#include <avr/io.h>

void ADC_init_2560()
{
	// Enable ADC and set prescaler to 128 (ADPS2:0 = 111)
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 2f4:	ea e7       	ldi	r30, 0x7A	; 122
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	87 68       	ori	r24, 0x87	; 135
 2fc:	80 83       	st	Z, r24
 2fe:	08 95       	ret

00000300 <ADC_read_2560>:
}

uint8_t ADC_read_2560()
{
	// Reference selection: AVCC w/ external capacitor at AREF. Left adjust result
	ADMUX |= (1 << REFS0) | (1 << ADLAR);
 300:	ec e7       	ldi	r30, 0x7C	; 124
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	80 66       	ori	r24, 0x60	; 96
 308:	80 83       	st	Z, r24
	// Select analog input: MUX5:0 = 00000. Initially zero, so not necessary to set
	// Start conversion
	ADCSRA |= (1 << ADSC);
 30a:	ea e7       	ldi	r30, 0x7A	; 122
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	80 64       	ori	r24, 0x40	; 64
 312:	80 83       	st	Z, r24
	// Wait until conversion is complete
	while(ADCSRA & (1 << ADSC));
 314:	80 81       	ld	r24, Z
 316:	86 fd       	sbrc	r24, 6
 318:	fd cf       	rjmp	.-6      	; 0x314 <ADC_read_2560+0x14>
	// Read converted data
	return ADCH;
 31a:	80 91 79 00 	lds	r24, 0x0079
 31e:	08 95       	ret

00000320 <IR_read>:

#include "ir.h"
#include "adc_2560.h"

uint8_t IR_read()
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
	static uint8_t values[4];
	values[0] = ADC_read_2560();
 324:	ed df       	rcall	.-38     	; 0x300 <ADC_read_2560>
 326:	c4 e5       	ldi	r28, 0x54	; 84
 328:	d2 e0       	ldi	r29, 0x02	; 2
 32a:	88 83       	st	Y, r24
	printf("ADC value: %d\n", values[0]);
 32c:	1f 92       	push	r1
 32e:	8f 93       	push	r24
 330:	80 e4       	ldi	r24, 0x40	; 64
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	9f 93       	push	r25
 336:	8f 93       	push	r24
 338:	69 d0       	rcall	.+210    	; 0x40c <printf>
	int avg = 0;
	for (int i = 3; i >= 0; i--){
		avg = avg + values[i];
 33a:	e7 e5       	ldi	r30, 0x57	; 87
 33c:	f2 e0       	ldi	r31, 0x02	; 2
 33e:	20 81       	ld	r18, Z
		if (i != 0){
			values[i] = values[i - 1];
 340:	a6 e5       	ldi	r26, 0x56	; 86
 342:	b2 e0       	ldi	r27, 0x02	; 2
 344:	8c 91       	ld	r24, X
 346:	80 83       	st	Z, r24
	static uint8_t values[4];
	values[0] = ADC_read_2560();
	printf("ADC value: %d\n", values[0]);
	int avg = 0;
	for (int i = 3; i >= 0; i--){
		avg = avg + values[i];
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	82 0f       	add	r24, r18
 34c:	91 1d       	adc	r25, r1
		if (i != 0){
			values[i] = values[i - 1];
 34e:	e5 e5       	ldi	r30, 0x55	; 85
 350:	f2 e0       	ldi	r31, 0x02	; 2
 352:	20 81       	ld	r18, Z
 354:	2c 93       	st	X, r18
	static uint8_t values[4];
	values[0] = ADC_read_2560();
	printf("ADC value: %d\n", values[0]);
	int avg = 0;
	for (int i = 3; i >= 0; i--){
		avg = avg + values[i];
 356:	82 0f       	add	r24, r18
 358:	91 1d       	adc	r25, r1
		if (i != 0){
			values[i] = values[i - 1];
 35a:	28 81       	ld	r18, Y
 35c:	20 83       	st	Z, r18
	static uint8_t values[4];
	values[0] = ADC_read_2560();
	printf("ADC value: %d\n", values[0]);
	int avg = 0;
	for (int i = 3; i >= 0; i--){
		avg = avg + values[i];
 35e:	82 0f       	add	r24, r18
 360:	91 1d       	adc	r25, r1
		if (i != 0){
			values[i] = values[i - 1];
		}
	}
	avg = avg / 4;
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	95 95       	asr	r25
 370:	87 95       	ror	r24
	return avg;
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <fdevopen>:
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
 382:	8b 01       	movw	r16, r22
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	31 f4       	brne	.+12     	; 0x394 <fdevopen+0x1c>
 388:	61 15       	cp	r22, r1
 38a:	71 05       	cpc	r23, r1
 38c:	19 f4       	brne	.+6      	; 0x394 <fdevopen+0x1c>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	37 c0       	rjmp	.+110    	; 0x402 <fdevopen+0x8a>
 394:	6e e0       	ldi	r22, 0x0E	; 14
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	63 d2       	rcall	.+1222   	; 0x864 <calloc>
 39e:	fc 01       	movw	r30, r24
 3a0:	00 97       	sbiw	r24, 0x00	; 0
 3a2:	a9 f3       	breq	.-22     	; 0x38e <fdevopen+0x16>
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	83 83       	std	Z+3, r24	; 0x03
 3a8:	01 15       	cp	r16, r1
 3aa:	11 05       	cpc	r17, r1
 3ac:	71 f0       	breq	.+28     	; 0x3ca <fdevopen+0x52>
 3ae:	13 87       	std	Z+11, r17	; 0x0b
 3b0:	02 87       	std	Z+10, r16	; 0x0a
 3b2:	81 e8       	ldi	r24, 0x81	; 129
 3b4:	83 83       	std	Z+3, r24	; 0x03
 3b6:	80 91 58 02 	lds	r24, 0x0258
 3ba:	90 91 59 02 	lds	r25, 0x0259
 3be:	89 2b       	or	r24, r25
 3c0:	21 f4       	brne	.+8      	; 0x3ca <fdevopen+0x52>
 3c2:	f0 93 59 02 	sts	0x0259, r31
 3c6:	e0 93 58 02 	sts	0x0258, r30
 3ca:	20 97       	sbiw	r28, 0x00	; 0
 3cc:	c9 f0       	breq	.+50     	; 0x400 <fdevopen+0x88>
 3ce:	d1 87       	std	Z+9, r29	; 0x09
 3d0:	c0 87       	std	Z+8, r28	; 0x08
 3d2:	83 81       	ldd	r24, Z+3	; 0x03
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	83 83       	std	Z+3, r24	; 0x03
 3d8:	80 91 5a 02 	lds	r24, 0x025A
 3dc:	90 91 5b 02 	lds	r25, 0x025B
 3e0:	89 2b       	or	r24, r25
 3e2:	71 f4       	brne	.+28     	; 0x400 <fdevopen+0x88>
 3e4:	f0 93 5b 02 	sts	0x025B, r31
 3e8:	e0 93 5a 02 	sts	0x025A, r30
 3ec:	80 91 5c 02 	lds	r24, 0x025C
 3f0:	90 91 5d 02 	lds	r25, 0x025D
 3f4:	89 2b       	or	r24, r25
 3f6:	21 f4       	brne	.+8      	; 0x400 <fdevopen+0x88>
 3f8:	f0 93 5d 02 	sts	0x025D, r31
 3fc:	e0 93 5c 02 	sts	0x025C, r30
 400:	cf 01       	movw	r24, r30
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	08 95       	ret

0000040c <printf>:
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	fe 01       	movw	r30, r28
 416:	36 96       	adiw	r30, 0x06	; 6
 418:	61 91       	ld	r22, Z+
 41a:	71 91       	ld	r23, Z+
 41c:	af 01       	movw	r20, r30
 41e:	80 91 5a 02 	lds	r24, 0x025A
 422:	90 91 5b 02 	lds	r25, 0x025B
 426:	30 d0       	rcall	.+96     	; 0x488 <vfprintf>
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <puts>:
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	e0 91 5a 02 	lds	r30, 0x025A
 43a:	f0 91 5b 02 	lds	r31, 0x025B
 43e:	23 81       	ldd	r18, Z+3	; 0x03
 440:	21 ff       	sbrs	r18, 1
 442:	1b c0       	rjmp	.+54     	; 0x47a <puts+0x4c>
 444:	ec 01       	movw	r28, r24
 446:	00 e0       	ldi	r16, 0x00	; 0
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	89 91       	ld	r24, Y+
 44c:	60 91 5a 02 	lds	r22, 0x025A
 450:	70 91 5b 02 	lds	r23, 0x025B
 454:	db 01       	movw	r26, r22
 456:	18 96       	adiw	r26, 0x08	; 8
 458:	ed 91       	ld	r30, X+
 45a:	fc 91       	ld	r31, X
 45c:	19 97       	sbiw	r26, 0x09	; 9
 45e:	88 23       	and	r24, r24
 460:	31 f0       	breq	.+12     	; 0x46e <puts+0x40>
 462:	19 95       	eicall
 464:	89 2b       	or	r24, r25
 466:	89 f3       	breq	.-30     	; 0x44a <puts+0x1c>
 468:	0f ef       	ldi	r16, 0xFF	; 255
 46a:	1f ef       	ldi	r17, 0xFF	; 255
 46c:	ee cf       	rjmp	.-36     	; 0x44a <puts+0x1c>
 46e:	8a e0       	ldi	r24, 0x0A	; 10
 470:	19 95       	eicall
 472:	89 2b       	or	r24, r25
 474:	11 f4       	brne	.+4      	; 0x47a <puts+0x4c>
 476:	c8 01       	movw	r24, r16
 478:	02 c0       	rjmp	.+4      	; 0x47e <puts+0x50>
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	9f ef       	ldi	r25, 0xFF	; 255
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <vfprintf>:
 488:	2f 92       	push	r2
 48a:	3f 92       	push	r3
 48c:	4f 92       	push	r4
 48e:	5f 92       	push	r5
 490:	6f 92       	push	r6
 492:	7f 92       	push	r7
 494:	8f 92       	push	r8
 496:	9f 92       	push	r9
 498:	af 92       	push	r10
 49a:	bf 92       	push	r11
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	2c 97       	sbiw	r28, 0x0c	; 12
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	7c 01       	movw	r14, r24
 4be:	6b 01       	movw	r12, r22
 4c0:	8a 01       	movw	r16, r20
 4c2:	fc 01       	movw	r30, r24
 4c4:	17 82       	std	Z+7, r1	; 0x07
 4c6:	16 82       	std	Z+6, r1	; 0x06
 4c8:	83 81       	ldd	r24, Z+3	; 0x03
 4ca:	81 ff       	sbrs	r24, 1
 4cc:	b0 c1       	rjmp	.+864    	; 0x82e <vfprintf+0x3a6>
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	4c 01       	movw	r8, r24
 4d4:	f7 01       	movw	r30, r14
 4d6:	93 81       	ldd	r25, Z+3	; 0x03
 4d8:	f6 01       	movw	r30, r12
 4da:	93 fd       	sbrc	r25, 3
 4dc:	85 91       	lpm	r24, Z+
 4de:	93 ff       	sbrs	r25, 3
 4e0:	81 91       	ld	r24, Z+
 4e2:	6f 01       	movw	r12, r30
 4e4:	88 23       	and	r24, r24
 4e6:	09 f4       	brne	.+2      	; 0x4ea <vfprintf+0x62>
 4e8:	9e c1       	rjmp	.+828    	; 0x826 <vfprintf+0x39e>
 4ea:	85 32       	cpi	r24, 0x25	; 37
 4ec:	39 f4       	brne	.+14     	; 0x4fc <vfprintf+0x74>
 4ee:	93 fd       	sbrc	r25, 3
 4f0:	85 91       	lpm	r24, Z+
 4f2:	93 ff       	sbrs	r25, 3
 4f4:	81 91       	ld	r24, Z+
 4f6:	6f 01       	movw	r12, r30
 4f8:	85 32       	cpi	r24, 0x25	; 37
 4fa:	21 f4       	brne	.+8      	; 0x504 <vfprintf+0x7c>
 4fc:	b7 01       	movw	r22, r14
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0f d3       	rcall	.+1566   	; 0xb20 <fputc>
 502:	e8 cf       	rjmp	.-48     	; 0x4d4 <vfprintf+0x4c>
 504:	51 2c       	mov	r5, r1
 506:	31 2c       	mov	r3, r1
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	20 32       	cpi	r18, 0x20	; 32
 50c:	a0 f4       	brcc	.+40     	; 0x536 <vfprintf+0xae>
 50e:	8b 32       	cpi	r24, 0x2B	; 43
 510:	69 f0       	breq	.+26     	; 0x52c <vfprintf+0xa4>
 512:	30 f4       	brcc	.+12     	; 0x520 <vfprintf+0x98>
 514:	80 32       	cpi	r24, 0x20	; 32
 516:	59 f0       	breq	.+22     	; 0x52e <vfprintf+0xa6>
 518:	83 32       	cpi	r24, 0x23	; 35
 51a:	69 f4       	brne	.+26     	; 0x536 <vfprintf+0xae>
 51c:	20 61       	ori	r18, 0x10	; 16
 51e:	2c c0       	rjmp	.+88     	; 0x578 <vfprintf+0xf0>
 520:	8d 32       	cpi	r24, 0x2D	; 45
 522:	39 f0       	breq	.+14     	; 0x532 <vfprintf+0xaa>
 524:	80 33       	cpi	r24, 0x30	; 48
 526:	39 f4       	brne	.+14     	; 0x536 <vfprintf+0xae>
 528:	21 60       	ori	r18, 0x01	; 1
 52a:	26 c0       	rjmp	.+76     	; 0x578 <vfprintf+0xf0>
 52c:	22 60       	ori	r18, 0x02	; 2
 52e:	24 60       	ori	r18, 0x04	; 4
 530:	23 c0       	rjmp	.+70     	; 0x578 <vfprintf+0xf0>
 532:	28 60       	ori	r18, 0x08	; 8
 534:	21 c0       	rjmp	.+66     	; 0x578 <vfprintf+0xf0>
 536:	27 fd       	sbrc	r18, 7
 538:	27 c0       	rjmp	.+78     	; 0x588 <vfprintf+0x100>
 53a:	30 ed       	ldi	r19, 0xD0	; 208
 53c:	38 0f       	add	r19, r24
 53e:	3a 30       	cpi	r19, 0x0A	; 10
 540:	78 f4       	brcc	.+30     	; 0x560 <vfprintf+0xd8>
 542:	26 ff       	sbrs	r18, 6
 544:	06 c0       	rjmp	.+12     	; 0x552 <vfprintf+0xca>
 546:	fa e0       	ldi	r31, 0x0A	; 10
 548:	5f 9e       	mul	r5, r31
 54a:	30 0d       	add	r19, r0
 54c:	11 24       	eor	r1, r1
 54e:	53 2e       	mov	r5, r19
 550:	13 c0       	rjmp	.+38     	; 0x578 <vfprintf+0xf0>
 552:	8a e0       	ldi	r24, 0x0A	; 10
 554:	38 9e       	mul	r3, r24
 556:	30 0d       	add	r19, r0
 558:	11 24       	eor	r1, r1
 55a:	33 2e       	mov	r3, r19
 55c:	20 62       	ori	r18, 0x20	; 32
 55e:	0c c0       	rjmp	.+24     	; 0x578 <vfprintf+0xf0>
 560:	8e 32       	cpi	r24, 0x2E	; 46
 562:	21 f4       	brne	.+8      	; 0x56c <vfprintf+0xe4>
 564:	26 fd       	sbrc	r18, 6
 566:	5f c1       	rjmp	.+702    	; 0x826 <vfprintf+0x39e>
 568:	20 64       	ori	r18, 0x40	; 64
 56a:	06 c0       	rjmp	.+12     	; 0x578 <vfprintf+0xf0>
 56c:	8c 36       	cpi	r24, 0x6C	; 108
 56e:	11 f4       	brne	.+4      	; 0x574 <vfprintf+0xec>
 570:	20 68       	ori	r18, 0x80	; 128
 572:	02 c0       	rjmp	.+4      	; 0x578 <vfprintf+0xf0>
 574:	88 36       	cpi	r24, 0x68	; 104
 576:	41 f4       	brne	.+16     	; 0x588 <vfprintf+0x100>
 578:	f6 01       	movw	r30, r12
 57a:	93 fd       	sbrc	r25, 3
 57c:	85 91       	lpm	r24, Z+
 57e:	93 ff       	sbrs	r25, 3
 580:	81 91       	ld	r24, Z+
 582:	6f 01       	movw	r12, r30
 584:	81 11       	cpse	r24, r1
 586:	c1 cf       	rjmp	.-126    	; 0x50a <vfprintf+0x82>
 588:	98 2f       	mov	r25, r24
 58a:	9f 7d       	andi	r25, 0xDF	; 223
 58c:	95 54       	subi	r25, 0x45	; 69
 58e:	93 30       	cpi	r25, 0x03	; 3
 590:	28 f4       	brcc	.+10     	; 0x59c <vfprintf+0x114>
 592:	0c 5f       	subi	r16, 0xFC	; 252
 594:	1f 4f       	sbci	r17, 0xFF	; 255
 596:	ff e3       	ldi	r31, 0x3F	; 63
 598:	f9 83       	std	Y+1, r31	; 0x01
 59a:	0d c0       	rjmp	.+26     	; 0x5b6 <vfprintf+0x12e>
 59c:	83 36       	cpi	r24, 0x63	; 99
 59e:	31 f0       	breq	.+12     	; 0x5ac <vfprintf+0x124>
 5a0:	83 37       	cpi	r24, 0x73	; 115
 5a2:	71 f0       	breq	.+28     	; 0x5c0 <vfprintf+0x138>
 5a4:	83 35       	cpi	r24, 0x53	; 83
 5a6:	09 f0       	breq	.+2      	; 0x5aa <vfprintf+0x122>
 5a8:	57 c0       	rjmp	.+174    	; 0x658 <vfprintf+0x1d0>
 5aa:	21 c0       	rjmp	.+66     	; 0x5ee <vfprintf+0x166>
 5ac:	f8 01       	movw	r30, r16
 5ae:	80 81       	ld	r24, Z
 5b0:	89 83       	std	Y+1, r24	; 0x01
 5b2:	0e 5f       	subi	r16, 0xFE	; 254
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
 5b6:	44 24       	eor	r4, r4
 5b8:	43 94       	inc	r4
 5ba:	51 2c       	mov	r5, r1
 5bc:	54 01       	movw	r10, r8
 5be:	14 c0       	rjmp	.+40     	; 0x5e8 <vfprintf+0x160>
 5c0:	38 01       	movw	r6, r16
 5c2:	f2 e0       	ldi	r31, 0x02	; 2
 5c4:	6f 0e       	add	r6, r31
 5c6:	71 1c       	adc	r7, r1
 5c8:	f8 01       	movw	r30, r16
 5ca:	a0 80       	ld	r10, Z
 5cc:	b1 80       	ldd	r11, Z+1	; 0x01
 5ce:	26 ff       	sbrs	r18, 6
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <vfprintf+0x150>
 5d2:	65 2d       	mov	r22, r5
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <vfprintf+0x154>
 5d8:	6f ef       	ldi	r22, 0xFF	; 255
 5da:	7f ef       	ldi	r23, 0xFF	; 255
 5dc:	c5 01       	movw	r24, r10
 5de:	2c 87       	std	Y+12, r18	; 0x0c
 5e0:	94 d2       	rcall	.+1320   	; 0xb0a <strnlen>
 5e2:	2c 01       	movw	r4, r24
 5e4:	83 01       	movw	r16, r6
 5e6:	2c 85       	ldd	r18, Y+12	; 0x0c
 5e8:	2f 77       	andi	r18, 0x7F	; 127
 5ea:	22 2e       	mov	r2, r18
 5ec:	16 c0       	rjmp	.+44     	; 0x61a <vfprintf+0x192>
 5ee:	38 01       	movw	r6, r16
 5f0:	f2 e0       	ldi	r31, 0x02	; 2
 5f2:	6f 0e       	add	r6, r31
 5f4:	71 1c       	adc	r7, r1
 5f6:	f8 01       	movw	r30, r16
 5f8:	a0 80       	ld	r10, Z
 5fa:	b1 80       	ldd	r11, Z+1	; 0x01
 5fc:	26 ff       	sbrs	r18, 6
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <vfprintf+0x17e>
 600:	65 2d       	mov	r22, r5
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <vfprintf+0x182>
 606:	6f ef       	ldi	r22, 0xFF	; 255
 608:	7f ef       	ldi	r23, 0xFF	; 255
 60a:	c5 01       	movw	r24, r10
 60c:	2c 87       	std	Y+12, r18	; 0x0c
 60e:	6b d2       	rcall	.+1238   	; 0xae6 <strnlen_P>
 610:	2c 01       	movw	r4, r24
 612:	2c 85       	ldd	r18, Y+12	; 0x0c
 614:	20 68       	ori	r18, 0x80	; 128
 616:	22 2e       	mov	r2, r18
 618:	83 01       	movw	r16, r6
 61a:	23 fc       	sbrc	r2, 3
 61c:	19 c0       	rjmp	.+50     	; 0x650 <vfprintf+0x1c8>
 61e:	83 2d       	mov	r24, r3
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	48 16       	cp	r4, r24
 624:	59 06       	cpc	r5, r25
 626:	a0 f4       	brcc	.+40     	; 0x650 <vfprintf+0x1c8>
 628:	b7 01       	movw	r22, r14
 62a:	80 e2       	ldi	r24, 0x20	; 32
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	78 d2       	rcall	.+1264   	; 0xb20 <fputc>
 630:	3a 94       	dec	r3
 632:	f5 cf       	rjmp	.-22     	; 0x61e <vfprintf+0x196>
 634:	f5 01       	movw	r30, r10
 636:	27 fc       	sbrc	r2, 7
 638:	85 91       	lpm	r24, Z+
 63a:	27 fe       	sbrs	r2, 7
 63c:	81 91       	ld	r24, Z+
 63e:	5f 01       	movw	r10, r30
 640:	b7 01       	movw	r22, r14
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	6d d2       	rcall	.+1242   	; 0xb20 <fputc>
 646:	31 10       	cpse	r3, r1
 648:	3a 94       	dec	r3
 64a:	f1 e0       	ldi	r31, 0x01	; 1
 64c:	4f 1a       	sub	r4, r31
 64e:	51 08       	sbc	r5, r1
 650:	41 14       	cp	r4, r1
 652:	51 04       	cpc	r5, r1
 654:	79 f7       	brne	.-34     	; 0x634 <vfprintf+0x1ac>
 656:	de c0       	rjmp	.+444    	; 0x814 <vfprintf+0x38c>
 658:	84 36       	cpi	r24, 0x64	; 100
 65a:	11 f0       	breq	.+4      	; 0x660 <vfprintf+0x1d8>
 65c:	89 36       	cpi	r24, 0x69	; 105
 65e:	31 f5       	brne	.+76     	; 0x6ac <vfprintf+0x224>
 660:	f8 01       	movw	r30, r16
 662:	27 ff       	sbrs	r18, 7
 664:	07 c0       	rjmp	.+14     	; 0x674 <vfprintf+0x1ec>
 666:	60 81       	ld	r22, Z
 668:	71 81       	ldd	r23, Z+1	; 0x01
 66a:	82 81       	ldd	r24, Z+2	; 0x02
 66c:	93 81       	ldd	r25, Z+3	; 0x03
 66e:	0c 5f       	subi	r16, 0xFC	; 252
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	08 c0       	rjmp	.+16     	; 0x684 <vfprintf+0x1fc>
 674:	60 81       	ld	r22, Z
 676:	71 81       	ldd	r23, Z+1	; 0x01
 678:	88 27       	eor	r24, r24
 67a:	77 fd       	sbrc	r23, 7
 67c:	80 95       	com	r24
 67e:	98 2f       	mov	r25, r24
 680:	0e 5f       	subi	r16, 0xFE	; 254
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	2f 76       	andi	r18, 0x6F	; 111
 686:	b2 2e       	mov	r11, r18
 688:	97 ff       	sbrs	r25, 7
 68a:	09 c0       	rjmp	.+18     	; 0x69e <vfprintf+0x216>
 68c:	90 95       	com	r25
 68e:	80 95       	com	r24
 690:	70 95       	com	r23
 692:	61 95       	neg	r22
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	20 68       	ori	r18, 0x80	; 128
 69c:	b2 2e       	mov	r11, r18
 69e:	2a e0       	ldi	r18, 0x0A	; 10
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	a4 01       	movw	r20, r8
 6a4:	6f d2       	rcall	.+1246   	; 0xb84 <__ultoa_invert>
 6a6:	a8 2e       	mov	r10, r24
 6a8:	a8 18       	sub	r10, r8
 6aa:	43 c0       	rjmp	.+134    	; 0x732 <vfprintf+0x2aa>
 6ac:	85 37       	cpi	r24, 0x75	; 117
 6ae:	29 f4       	brne	.+10     	; 0x6ba <vfprintf+0x232>
 6b0:	2f 7e       	andi	r18, 0xEF	; 239
 6b2:	b2 2e       	mov	r11, r18
 6b4:	2a e0       	ldi	r18, 0x0A	; 10
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	25 c0       	rjmp	.+74     	; 0x704 <vfprintf+0x27c>
 6ba:	f2 2f       	mov	r31, r18
 6bc:	f9 7f       	andi	r31, 0xF9	; 249
 6be:	bf 2e       	mov	r11, r31
 6c0:	8f 36       	cpi	r24, 0x6F	; 111
 6c2:	c1 f0       	breq	.+48     	; 0x6f4 <vfprintf+0x26c>
 6c4:	18 f4       	brcc	.+6      	; 0x6cc <vfprintf+0x244>
 6c6:	88 35       	cpi	r24, 0x58	; 88
 6c8:	79 f0       	breq	.+30     	; 0x6e8 <vfprintf+0x260>
 6ca:	ad c0       	rjmp	.+346    	; 0x826 <vfprintf+0x39e>
 6cc:	80 37       	cpi	r24, 0x70	; 112
 6ce:	19 f0       	breq	.+6      	; 0x6d6 <vfprintf+0x24e>
 6d0:	88 37       	cpi	r24, 0x78	; 120
 6d2:	21 f0       	breq	.+8      	; 0x6dc <vfprintf+0x254>
 6d4:	a8 c0       	rjmp	.+336    	; 0x826 <vfprintf+0x39e>
 6d6:	2f 2f       	mov	r18, r31
 6d8:	20 61       	ori	r18, 0x10	; 16
 6da:	b2 2e       	mov	r11, r18
 6dc:	b4 fe       	sbrs	r11, 4
 6de:	0d c0       	rjmp	.+26     	; 0x6fa <vfprintf+0x272>
 6e0:	8b 2d       	mov	r24, r11
 6e2:	84 60       	ori	r24, 0x04	; 4
 6e4:	b8 2e       	mov	r11, r24
 6e6:	09 c0       	rjmp	.+18     	; 0x6fa <vfprintf+0x272>
 6e8:	24 ff       	sbrs	r18, 4
 6ea:	0a c0       	rjmp	.+20     	; 0x700 <vfprintf+0x278>
 6ec:	9f 2f       	mov	r25, r31
 6ee:	96 60       	ori	r25, 0x06	; 6
 6f0:	b9 2e       	mov	r11, r25
 6f2:	06 c0       	rjmp	.+12     	; 0x700 <vfprintf+0x278>
 6f4:	28 e0       	ldi	r18, 0x08	; 8
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <vfprintf+0x27c>
 6fa:	20 e1       	ldi	r18, 0x10	; 16
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <vfprintf+0x27c>
 700:	20 e1       	ldi	r18, 0x10	; 16
 702:	32 e0       	ldi	r19, 0x02	; 2
 704:	f8 01       	movw	r30, r16
 706:	b7 fe       	sbrs	r11, 7
 708:	07 c0       	rjmp	.+14     	; 0x718 <vfprintf+0x290>
 70a:	60 81       	ld	r22, Z
 70c:	71 81       	ldd	r23, Z+1	; 0x01
 70e:	82 81       	ldd	r24, Z+2	; 0x02
 710:	93 81       	ldd	r25, Z+3	; 0x03
 712:	0c 5f       	subi	r16, 0xFC	; 252
 714:	1f 4f       	sbci	r17, 0xFF	; 255
 716:	06 c0       	rjmp	.+12     	; 0x724 <vfprintf+0x29c>
 718:	60 81       	ld	r22, Z
 71a:	71 81       	ldd	r23, Z+1	; 0x01
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 5f       	subi	r16, 0xFE	; 254
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	a4 01       	movw	r20, r8
 726:	2e d2       	rcall	.+1116   	; 0xb84 <__ultoa_invert>
 728:	a8 2e       	mov	r10, r24
 72a:	a8 18       	sub	r10, r8
 72c:	fb 2d       	mov	r31, r11
 72e:	ff 77       	andi	r31, 0x7F	; 127
 730:	bf 2e       	mov	r11, r31
 732:	b6 fe       	sbrs	r11, 6
 734:	0b c0       	rjmp	.+22     	; 0x74c <vfprintf+0x2c4>
 736:	2b 2d       	mov	r18, r11
 738:	2e 7f       	andi	r18, 0xFE	; 254
 73a:	a5 14       	cp	r10, r5
 73c:	50 f4       	brcc	.+20     	; 0x752 <vfprintf+0x2ca>
 73e:	b4 fe       	sbrs	r11, 4
 740:	0a c0       	rjmp	.+20     	; 0x756 <vfprintf+0x2ce>
 742:	b2 fc       	sbrc	r11, 2
 744:	08 c0       	rjmp	.+16     	; 0x756 <vfprintf+0x2ce>
 746:	2b 2d       	mov	r18, r11
 748:	2e 7e       	andi	r18, 0xEE	; 238
 74a:	05 c0       	rjmp	.+10     	; 0x756 <vfprintf+0x2ce>
 74c:	7a 2c       	mov	r7, r10
 74e:	2b 2d       	mov	r18, r11
 750:	03 c0       	rjmp	.+6      	; 0x758 <vfprintf+0x2d0>
 752:	7a 2c       	mov	r7, r10
 754:	01 c0       	rjmp	.+2      	; 0x758 <vfprintf+0x2d0>
 756:	75 2c       	mov	r7, r5
 758:	24 ff       	sbrs	r18, 4
 75a:	0d c0       	rjmp	.+26     	; 0x776 <vfprintf+0x2ee>
 75c:	fe 01       	movw	r30, r28
 75e:	ea 0d       	add	r30, r10
 760:	f1 1d       	adc	r31, r1
 762:	80 81       	ld	r24, Z
 764:	80 33       	cpi	r24, 0x30	; 48
 766:	11 f4       	brne	.+4      	; 0x76c <vfprintf+0x2e4>
 768:	29 7e       	andi	r18, 0xE9	; 233
 76a:	09 c0       	rjmp	.+18     	; 0x77e <vfprintf+0x2f6>
 76c:	22 ff       	sbrs	r18, 2
 76e:	06 c0       	rjmp	.+12     	; 0x77c <vfprintf+0x2f4>
 770:	73 94       	inc	r7
 772:	73 94       	inc	r7
 774:	04 c0       	rjmp	.+8      	; 0x77e <vfprintf+0x2f6>
 776:	82 2f       	mov	r24, r18
 778:	86 78       	andi	r24, 0x86	; 134
 77a:	09 f0       	breq	.+2      	; 0x77e <vfprintf+0x2f6>
 77c:	73 94       	inc	r7
 77e:	23 fd       	sbrc	r18, 3
 780:	12 c0       	rjmp	.+36     	; 0x7a6 <vfprintf+0x31e>
 782:	20 ff       	sbrs	r18, 0
 784:	06 c0       	rjmp	.+12     	; 0x792 <vfprintf+0x30a>
 786:	5a 2c       	mov	r5, r10
 788:	73 14       	cp	r7, r3
 78a:	18 f4       	brcc	.+6      	; 0x792 <vfprintf+0x30a>
 78c:	53 0c       	add	r5, r3
 78e:	57 18       	sub	r5, r7
 790:	73 2c       	mov	r7, r3
 792:	73 14       	cp	r7, r3
 794:	60 f4       	brcc	.+24     	; 0x7ae <vfprintf+0x326>
 796:	b7 01       	movw	r22, r14
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	2c 87       	std	Y+12, r18	; 0x0c
 79e:	c0 d1       	rcall	.+896    	; 0xb20 <fputc>
 7a0:	73 94       	inc	r7
 7a2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7a4:	f6 cf       	rjmp	.-20     	; 0x792 <vfprintf+0x30a>
 7a6:	73 14       	cp	r7, r3
 7a8:	10 f4       	brcc	.+4      	; 0x7ae <vfprintf+0x326>
 7aa:	37 18       	sub	r3, r7
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <vfprintf+0x328>
 7ae:	31 2c       	mov	r3, r1
 7b0:	24 ff       	sbrs	r18, 4
 7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <vfprintf+0x34e>
 7b4:	b7 01       	movw	r22, r14
 7b6:	80 e3       	ldi	r24, 0x30	; 48
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	2c 87       	std	Y+12, r18	; 0x0c
 7bc:	b1 d1       	rcall	.+866    	; 0xb20 <fputc>
 7be:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c0:	22 ff       	sbrs	r18, 2
 7c2:	16 c0       	rjmp	.+44     	; 0x7f0 <vfprintf+0x368>
 7c4:	21 ff       	sbrs	r18, 1
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <vfprintf+0x346>
 7c8:	88 e5       	ldi	r24, 0x58	; 88
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <vfprintf+0x34a>
 7ce:	88 e7       	ldi	r24, 0x78	; 120
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	b7 01       	movw	r22, r14
 7d4:	0c c0       	rjmp	.+24     	; 0x7ee <vfprintf+0x366>
 7d6:	82 2f       	mov	r24, r18
 7d8:	86 78       	andi	r24, 0x86	; 134
 7da:	51 f0       	breq	.+20     	; 0x7f0 <vfprintf+0x368>
 7dc:	21 fd       	sbrc	r18, 1
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <vfprintf+0x35c>
 7e0:	80 e2       	ldi	r24, 0x20	; 32
 7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <vfprintf+0x35e>
 7e4:	8b e2       	ldi	r24, 0x2B	; 43
 7e6:	27 fd       	sbrc	r18, 7
 7e8:	8d e2       	ldi	r24, 0x2D	; 45
 7ea:	b7 01       	movw	r22, r14
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	98 d1       	rcall	.+816    	; 0xb20 <fputc>
 7f0:	a5 14       	cp	r10, r5
 7f2:	30 f4       	brcc	.+12     	; 0x800 <vfprintf+0x378>
 7f4:	b7 01       	movw	r22, r14
 7f6:	80 e3       	ldi	r24, 0x30	; 48
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	92 d1       	rcall	.+804    	; 0xb20 <fputc>
 7fc:	5a 94       	dec	r5
 7fe:	f8 cf       	rjmp	.-16     	; 0x7f0 <vfprintf+0x368>
 800:	aa 94       	dec	r10
 802:	f4 01       	movw	r30, r8
 804:	ea 0d       	add	r30, r10
 806:	f1 1d       	adc	r31, r1
 808:	80 81       	ld	r24, Z
 80a:	b7 01       	movw	r22, r14
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	88 d1       	rcall	.+784    	; 0xb20 <fputc>
 810:	a1 10       	cpse	r10, r1
 812:	f6 cf       	rjmp	.-20     	; 0x800 <vfprintf+0x378>
 814:	33 20       	and	r3, r3
 816:	09 f4       	brne	.+2      	; 0x81a <vfprintf+0x392>
 818:	5d ce       	rjmp	.-838    	; 0x4d4 <vfprintf+0x4c>
 81a:	b7 01       	movw	r22, r14
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	7f d1       	rcall	.+766    	; 0xb20 <fputc>
 822:	3a 94       	dec	r3
 824:	f7 cf       	rjmp	.-18     	; 0x814 <vfprintf+0x38c>
 826:	f7 01       	movw	r30, r14
 828:	86 81       	ldd	r24, Z+6	; 0x06
 82a:	97 81       	ldd	r25, Z+7	; 0x07
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x3aa>
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	2c 96       	adiw	r28, 0x0c	; 12
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	de bf       	out	0x3e, r29	; 62
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	cd bf       	out	0x3d, r28	; 61
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	ff 90       	pop	r15
 848:	ef 90       	pop	r14
 84a:	df 90       	pop	r13
 84c:	cf 90       	pop	r12
 84e:	bf 90       	pop	r11
 850:	af 90       	pop	r10
 852:	9f 90       	pop	r9
 854:	8f 90       	pop	r8
 856:	7f 90       	pop	r7
 858:	6f 90       	pop	r6
 85a:	5f 90       	pop	r5
 85c:	4f 90       	pop	r4
 85e:	3f 90       	pop	r3
 860:	2f 90       	pop	r2
 862:	08 95       	ret

00000864 <calloc>:
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	86 9f       	mul	r24, r22
 86e:	80 01       	movw	r16, r0
 870:	87 9f       	mul	r24, r23
 872:	10 0d       	add	r17, r0
 874:	96 9f       	mul	r25, r22
 876:	10 0d       	add	r17, r0
 878:	11 24       	eor	r1, r1
 87a:	c8 01       	movw	r24, r16
 87c:	0d d0       	rcall	.+26     	; 0x898 <malloc>
 87e:	ec 01       	movw	r28, r24
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	21 f0       	breq	.+8      	; 0x88c <calloc+0x28>
 884:	a8 01       	movw	r20, r16
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	38 d1       	rcall	.+624    	; 0xafc <memset>
 88c:	ce 01       	movw	r24, r28
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	1f 91       	pop	r17
 894:	0f 91       	pop	r16
 896:	08 95       	ret

00000898 <malloc>:
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	91 05       	cpc	r25, r1
 8a0:	10 f4       	brcc	.+4      	; 0x8a6 <malloc+0xe>
 8a2:	82 e0       	ldi	r24, 0x02	; 2
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	e0 91 60 02 	lds	r30, 0x0260
 8aa:	f0 91 61 02 	lds	r31, 0x0261
 8ae:	20 e0       	ldi	r18, 0x00	; 0
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	a0 e0       	ldi	r26, 0x00	; 0
 8b4:	b0 e0       	ldi	r27, 0x00	; 0
 8b6:	30 97       	sbiw	r30, 0x00	; 0
 8b8:	39 f1       	breq	.+78     	; 0x908 <malloc+0x70>
 8ba:	40 81       	ld	r20, Z
 8bc:	51 81       	ldd	r21, Z+1	; 0x01
 8be:	48 17       	cp	r20, r24
 8c0:	59 07       	cpc	r21, r25
 8c2:	b8 f0       	brcs	.+46     	; 0x8f2 <malloc+0x5a>
 8c4:	48 17       	cp	r20, r24
 8c6:	59 07       	cpc	r21, r25
 8c8:	71 f4       	brne	.+28     	; 0x8e6 <malloc+0x4e>
 8ca:	82 81       	ldd	r24, Z+2	; 0x02
 8cc:	93 81       	ldd	r25, Z+3	; 0x03
 8ce:	10 97       	sbiw	r26, 0x00	; 0
 8d0:	29 f0       	breq	.+10     	; 0x8dc <malloc+0x44>
 8d2:	13 96       	adiw	r26, 0x03	; 3
 8d4:	9c 93       	st	X, r25
 8d6:	8e 93       	st	-X, r24
 8d8:	12 97       	sbiw	r26, 0x02	; 2
 8da:	2c c0       	rjmp	.+88     	; 0x934 <malloc+0x9c>
 8dc:	90 93 61 02 	sts	0x0261, r25
 8e0:	80 93 60 02 	sts	0x0260, r24
 8e4:	27 c0       	rjmp	.+78     	; 0x934 <malloc+0x9c>
 8e6:	21 15       	cp	r18, r1
 8e8:	31 05       	cpc	r19, r1
 8ea:	31 f0       	breq	.+12     	; 0x8f8 <malloc+0x60>
 8ec:	42 17       	cp	r20, r18
 8ee:	53 07       	cpc	r21, r19
 8f0:	18 f0       	brcs	.+6      	; 0x8f8 <malloc+0x60>
 8f2:	a9 01       	movw	r20, r18
 8f4:	db 01       	movw	r26, r22
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <malloc+0x62>
 8f8:	ef 01       	movw	r28, r30
 8fa:	9a 01       	movw	r18, r20
 8fc:	bd 01       	movw	r22, r26
 8fe:	df 01       	movw	r26, r30
 900:	02 80       	ldd	r0, Z+2	; 0x02
 902:	f3 81       	ldd	r31, Z+3	; 0x03
 904:	e0 2d       	mov	r30, r0
 906:	d7 cf       	rjmp	.-82     	; 0x8b6 <malloc+0x1e>
 908:	21 15       	cp	r18, r1
 90a:	31 05       	cpc	r19, r1
 90c:	f9 f0       	breq	.+62     	; 0x94c <malloc+0xb4>
 90e:	28 1b       	sub	r18, r24
 910:	39 0b       	sbc	r19, r25
 912:	24 30       	cpi	r18, 0x04	; 4
 914:	31 05       	cpc	r19, r1
 916:	80 f4       	brcc	.+32     	; 0x938 <malloc+0xa0>
 918:	8a 81       	ldd	r24, Y+2	; 0x02
 91a:	9b 81       	ldd	r25, Y+3	; 0x03
 91c:	61 15       	cp	r22, r1
 91e:	71 05       	cpc	r23, r1
 920:	21 f0       	breq	.+8      	; 0x92a <malloc+0x92>
 922:	fb 01       	movw	r30, r22
 924:	93 83       	std	Z+3, r25	; 0x03
 926:	82 83       	std	Z+2, r24	; 0x02
 928:	04 c0       	rjmp	.+8      	; 0x932 <malloc+0x9a>
 92a:	90 93 61 02 	sts	0x0261, r25
 92e:	80 93 60 02 	sts	0x0260, r24
 932:	fe 01       	movw	r30, r28
 934:	32 96       	adiw	r30, 0x02	; 2
 936:	44 c0       	rjmp	.+136    	; 0x9c0 <malloc+0x128>
 938:	fe 01       	movw	r30, r28
 93a:	e2 0f       	add	r30, r18
 93c:	f3 1f       	adc	r31, r19
 93e:	81 93       	st	Z+, r24
 940:	91 93       	st	Z+, r25
 942:	22 50       	subi	r18, 0x02	; 2
 944:	31 09       	sbc	r19, r1
 946:	39 83       	std	Y+1, r19	; 0x01
 948:	28 83       	st	Y, r18
 94a:	3a c0       	rjmp	.+116    	; 0x9c0 <malloc+0x128>
 94c:	20 91 5e 02 	lds	r18, 0x025E
 950:	30 91 5f 02 	lds	r19, 0x025F
 954:	23 2b       	or	r18, r19
 956:	41 f4       	brne	.+16     	; 0x968 <malloc+0xd0>
 958:	20 91 02 02 	lds	r18, 0x0202
 95c:	30 91 03 02 	lds	r19, 0x0203
 960:	30 93 5f 02 	sts	0x025F, r19
 964:	20 93 5e 02 	sts	0x025E, r18
 968:	20 91 00 02 	lds	r18, 0x0200
 96c:	30 91 01 02 	lds	r19, 0x0201
 970:	21 15       	cp	r18, r1
 972:	31 05       	cpc	r19, r1
 974:	41 f4       	brne	.+16     	; 0x986 <malloc+0xee>
 976:	2d b7       	in	r18, 0x3d	; 61
 978:	3e b7       	in	r19, 0x3e	; 62
 97a:	40 91 04 02 	lds	r20, 0x0204
 97e:	50 91 05 02 	lds	r21, 0x0205
 982:	24 1b       	sub	r18, r20
 984:	35 0b       	sbc	r19, r21
 986:	e0 91 5e 02 	lds	r30, 0x025E
 98a:	f0 91 5f 02 	lds	r31, 0x025F
 98e:	e2 17       	cp	r30, r18
 990:	f3 07       	cpc	r31, r19
 992:	a0 f4       	brcc	.+40     	; 0x9bc <malloc+0x124>
 994:	2e 1b       	sub	r18, r30
 996:	3f 0b       	sbc	r19, r31
 998:	28 17       	cp	r18, r24
 99a:	39 07       	cpc	r19, r25
 99c:	78 f0       	brcs	.+30     	; 0x9bc <malloc+0x124>
 99e:	ac 01       	movw	r20, r24
 9a0:	4e 5f       	subi	r20, 0xFE	; 254
 9a2:	5f 4f       	sbci	r21, 0xFF	; 255
 9a4:	24 17       	cp	r18, r20
 9a6:	35 07       	cpc	r19, r21
 9a8:	48 f0       	brcs	.+18     	; 0x9bc <malloc+0x124>
 9aa:	4e 0f       	add	r20, r30
 9ac:	5f 1f       	adc	r21, r31
 9ae:	50 93 5f 02 	sts	0x025F, r21
 9b2:	40 93 5e 02 	sts	0x025E, r20
 9b6:	81 93       	st	Z+, r24
 9b8:	91 93       	st	Z+, r25
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <malloc+0x128>
 9bc:	e0 e0       	ldi	r30, 0x00	; 0
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	cf 01       	movw	r24, r30
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	08 95       	ret

000009c8 <free>:
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	00 97       	sbiw	r24, 0x00	; 0
 9ce:	09 f4       	brne	.+2      	; 0x9d2 <free+0xa>
 9d0:	87 c0       	rjmp	.+270    	; 0xae0 <free+0x118>
 9d2:	fc 01       	movw	r30, r24
 9d4:	32 97       	sbiw	r30, 0x02	; 2
 9d6:	13 82       	std	Z+3, r1	; 0x03
 9d8:	12 82       	std	Z+2, r1	; 0x02
 9da:	c0 91 60 02 	lds	r28, 0x0260
 9de:	d0 91 61 02 	lds	r29, 0x0261
 9e2:	20 97       	sbiw	r28, 0x00	; 0
 9e4:	81 f4       	brne	.+32     	; 0xa06 <free+0x3e>
 9e6:	20 81       	ld	r18, Z
 9e8:	31 81       	ldd	r19, Z+1	; 0x01
 9ea:	28 0f       	add	r18, r24
 9ec:	39 1f       	adc	r19, r25
 9ee:	80 91 5e 02 	lds	r24, 0x025E
 9f2:	90 91 5f 02 	lds	r25, 0x025F
 9f6:	82 17       	cp	r24, r18
 9f8:	93 07       	cpc	r25, r19
 9fa:	79 f5       	brne	.+94     	; 0xa5a <free+0x92>
 9fc:	f0 93 5f 02 	sts	0x025F, r31
 a00:	e0 93 5e 02 	sts	0x025E, r30
 a04:	6d c0       	rjmp	.+218    	; 0xae0 <free+0x118>
 a06:	de 01       	movw	r26, r28
 a08:	20 e0       	ldi	r18, 0x00	; 0
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	ae 17       	cp	r26, r30
 a0e:	bf 07       	cpc	r27, r31
 a10:	50 f4       	brcc	.+20     	; 0xa26 <free+0x5e>
 a12:	12 96       	adiw	r26, 0x02	; 2
 a14:	4d 91       	ld	r20, X+
 a16:	5c 91       	ld	r21, X
 a18:	13 97       	sbiw	r26, 0x03	; 3
 a1a:	9d 01       	movw	r18, r26
 a1c:	41 15       	cp	r20, r1
 a1e:	51 05       	cpc	r21, r1
 a20:	09 f1       	breq	.+66     	; 0xa64 <free+0x9c>
 a22:	da 01       	movw	r26, r20
 a24:	f3 cf       	rjmp	.-26     	; 0xa0c <free+0x44>
 a26:	b3 83       	std	Z+3, r27	; 0x03
 a28:	a2 83       	std	Z+2, r26	; 0x02
 a2a:	40 81       	ld	r20, Z
 a2c:	51 81       	ldd	r21, Z+1	; 0x01
 a2e:	84 0f       	add	r24, r20
 a30:	95 1f       	adc	r25, r21
 a32:	8a 17       	cp	r24, r26
 a34:	9b 07       	cpc	r25, r27
 a36:	71 f4       	brne	.+28     	; 0xa54 <free+0x8c>
 a38:	8d 91       	ld	r24, X+
 a3a:	9c 91       	ld	r25, X
 a3c:	11 97       	sbiw	r26, 0x01	; 1
 a3e:	84 0f       	add	r24, r20
 a40:	95 1f       	adc	r25, r21
 a42:	02 96       	adiw	r24, 0x02	; 2
 a44:	91 83       	std	Z+1, r25	; 0x01
 a46:	80 83       	st	Z, r24
 a48:	12 96       	adiw	r26, 0x02	; 2
 a4a:	8d 91       	ld	r24, X+
 a4c:	9c 91       	ld	r25, X
 a4e:	13 97       	sbiw	r26, 0x03	; 3
 a50:	93 83       	std	Z+3, r25	; 0x03
 a52:	82 83       	std	Z+2, r24	; 0x02
 a54:	21 15       	cp	r18, r1
 a56:	31 05       	cpc	r19, r1
 a58:	29 f4       	brne	.+10     	; 0xa64 <free+0x9c>
 a5a:	f0 93 61 02 	sts	0x0261, r31
 a5e:	e0 93 60 02 	sts	0x0260, r30
 a62:	3e c0       	rjmp	.+124    	; 0xae0 <free+0x118>
 a64:	d9 01       	movw	r26, r18
 a66:	13 96       	adiw	r26, 0x03	; 3
 a68:	fc 93       	st	X, r31
 a6a:	ee 93       	st	-X, r30
 a6c:	12 97       	sbiw	r26, 0x02	; 2
 a6e:	4d 91       	ld	r20, X+
 a70:	5d 91       	ld	r21, X+
 a72:	a4 0f       	add	r26, r20
 a74:	b5 1f       	adc	r27, r21
 a76:	ea 17       	cp	r30, r26
 a78:	fb 07       	cpc	r31, r27
 a7a:	79 f4       	brne	.+30     	; 0xa9a <free+0xd2>
 a7c:	80 81       	ld	r24, Z
 a7e:	91 81       	ldd	r25, Z+1	; 0x01
 a80:	84 0f       	add	r24, r20
 a82:	95 1f       	adc	r25, r21
 a84:	02 96       	adiw	r24, 0x02	; 2
 a86:	d9 01       	movw	r26, r18
 a88:	11 96       	adiw	r26, 0x01	; 1
 a8a:	9c 93       	st	X, r25
 a8c:	8e 93       	st	-X, r24
 a8e:	82 81       	ldd	r24, Z+2	; 0x02
 a90:	93 81       	ldd	r25, Z+3	; 0x03
 a92:	13 96       	adiw	r26, 0x03	; 3
 a94:	9c 93       	st	X, r25
 a96:	8e 93       	st	-X, r24
 a98:	12 97       	sbiw	r26, 0x02	; 2
 a9a:	e0 e0       	ldi	r30, 0x00	; 0
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	8a 81       	ldd	r24, Y+2	; 0x02
 aa0:	9b 81       	ldd	r25, Y+3	; 0x03
 aa2:	00 97       	sbiw	r24, 0x00	; 0
 aa4:	19 f0       	breq	.+6      	; 0xaac <free+0xe4>
 aa6:	fe 01       	movw	r30, r28
 aa8:	ec 01       	movw	r28, r24
 aaa:	f9 cf       	rjmp	.-14     	; 0xa9e <free+0xd6>
 aac:	ce 01       	movw	r24, r28
 aae:	02 96       	adiw	r24, 0x02	; 2
 ab0:	28 81       	ld	r18, Y
 ab2:	39 81       	ldd	r19, Y+1	; 0x01
 ab4:	82 0f       	add	r24, r18
 ab6:	93 1f       	adc	r25, r19
 ab8:	20 91 5e 02 	lds	r18, 0x025E
 abc:	30 91 5f 02 	lds	r19, 0x025F
 ac0:	28 17       	cp	r18, r24
 ac2:	39 07       	cpc	r19, r25
 ac4:	69 f4       	brne	.+26     	; 0xae0 <free+0x118>
 ac6:	30 97       	sbiw	r30, 0x00	; 0
 ac8:	29 f4       	brne	.+10     	; 0xad4 <free+0x10c>
 aca:	10 92 61 02 	sts	0x0261, r1
 ace:	10 92 60 02 	sts	0x0260, r1
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <free+0x110>
 ad4:	13 82       	std	Z+3, r1	; 0x03
 ad6:	12 82       	std	Z+2, r1	; 0x02
 ad8:	d0 93 5f 02 	sts	0x025F, r29
 adc:	c0 93 5e 02 	sts	0x025E, r28
 ae0:	df 91       	pop	r29
 ae2:	cf 91       	pop	r28
 ae4:	08 95       	ret

00000ae6 <strnlen_P>:
 ae6:	fc 01       	movw	r30, r24
 ae8:	05 90       	lpm	r0, Z+
 aea:	61 50       	subi	r22, 0x01	; 1
 aec:	70 40       	sbci	r23, 0x00	; 0
 aee:	01 10       	cpse	r0, r1
 af0:	d8 f7       	brcc	.-10     	; 0xae8 <strnlen_P+0x2>
 af2:	80 95       	com	r24
 af4:	90 95       	com	r25
 af6:	8e 0f       	add	r24, r30
 af8:	9f 1f       	adc	r25, r31
 afa:	08 95       	ret

00000afc <memset>:
 afc:	dc 01       	movw	r26, r24
 afe:	01 c0       	rjmp	.+2      	; 0xb02 <memset+0x6>
 b00:	6d 93       	st	X+, r22
 b02:	41 50       	subi	r20, 0x01	; 1
 b04:	50 40       	sbci	r21, 0x00	; 0
 b06:	e0 f7       	brcc	.-8      	; 0xb00 <memset+0x4>
 b08:	08 95       	ret

00000b0a <strnlen>:
 b0a:	fc 01       	movw	r30, r24
 b0c:	61 50       	subi	r22, 0x01	; 1
 b0e:	70 40       	sbci	r23, 0x00	; 0
 b10:	01 90       	ld	r0, Z+
 b12:	01 10       	cpse	r0, r1
 b14:	d8 f7       	brcc	.-10     	; 0xb0c <strnlen+0x2>
 b16:	80 95       	com	r24
 b18:	90 95       	com	r25
 b1a:	8e 0f       	add	r24, r30
 b1c:	9f 1f       	adc	r25, r31
 b1e:	08 95       	ret

00000b20 <fputc>:
 b20:	0f 93       	push	r16
 b22:	1f 93       	push	r17
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	18 2f       	mov	r17, r24
 b2a:	09 2f       	mov	r16, r25
 b2c:	eb 01       	movw	r28, r22
 b2e:	8b 81       	ldd	r24, Y+3	; 0x03
 b30:	81 fd       	sbrc	r24, 1
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <fputc+0x1a>
 b34:	8f ef       	ldi	r24, 0xFF	; 255
 b36:	9f ef       	ldi	r25, 0xFF	; 255
 b38:	20 c0       	rjmp	.+64     	; 0xb7a <fputc+0x5a>
 b3a:	82 ff       	sbrs	r24, 2
 b3c:	10 c0       	rjmp	.+32     	; 0xb5e <fputc+0x3e>
 b3e:	4e 81       	ldd	r20, Y+6	; 0x06
 b40:	5f 81       	ldd	r21, Y+7	; 0x07
 b42:	2c 81       	ldd	r18, Y+4	; 0x04
 b44:	3d 81       	ldd	r19, Y+5	; 0x05
 b46:	42 17       	cp	r20, r18
 b48:	53 07       	cpc	r21, r19
 b4a:	7c f4       	brge	.+30     	; 0xb6a <fputc+0x4a>
 b4c:	e8 81       	ld	r30, Y
 b4e:	f9 81       	ldd	r31, Y+1	; 0x01
 b50:	9f 01       	movw	r18, r30
 b52:	2f 5f       	subi	r18, 0xFF	; 255
 b54:	3f 4f       	sbci	r19, 0xFF	; 255
 b56:	39 83       	std	Y+1, r19	; 0x01
 b58:	28 83       	st	Y, r18
 b5a:	10 83       	st	Z, r17
 b5c:	06 c0       	rjmp	.+12     	; 0xb6a <fputc+0x4a>
 b5e:	e8 85       	ldd	r30, Y+8	; 0x08
 b60:	f9 85       	ldd	r31, Y+9	; 0x09
 b62:	81 2f       	mov	r24, r17
 b64:	19 95       	eicall
 b66:	89 2b       	or	r24, r25
 b68:	29 f7       	brne	.-54     	; 0xb34 <fputc+0x14>
 b6a:	2e 81       	ldd	r18, Y+6	; 0x06
 b6c:	3f 81       	ldd	r19, Y+7	; 0x07
 b6e:	2f 5f       	subi	r18, 0xFF	; 255
 b70:	3f 4f       	sbci	r19, 0xFF	; 255
 b72:	3f 83       	std	Y+7, r19	; 0x07
 b74:	2e 83       	std	Y+6, r18	; 0x06
 b76:	81 2f       	mov	r24, r17
 b78:	90 2f       	mov	r25, r16
 b7a:	df 91       	pop	r29
 b7c:	cf 91       	pop	r28
 b7e:	1f 91       	pop	r17
 b80:	0f 91       	pop	r16
 b82:	08 95       	ret

00000b84 <__ultoa_invert>:
 b84:	fa 01       	movw	r30, r20
 b86:	aa 27       	eor	r26, r26
 b88:	28 30       	cpi	r18, 0x08	; 8
 b8a:	51 f1       	breq	.+84     	; 0xbe0 <__ultoa_invert+0x5c>
 b8c:	20 31       	cpi	r18, 0x10	; 16
 b8e:	81 f1       	breq	.+96     	; 0xbf0 <__ultoa_invert+0x6c>
 b90:	e8 94       	clt
 b92:	6f 93       	push	r22
 b94:	6e 7f       	andi	r22, 0xFE	; 254
 b96:	6e 5f       	subi	r22, 0xFE	; 254
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	af 4f       	sbci	r26, 0xFF	; 255
 ba0:	b1 e0       	ldi	r27, 0x01	; 1
 ba2:	3e d0       	rcall	.+124    	; 0xc20 <__ultoa_invert+0x9c>
 ba4:	b4 e0       	ldi	r27, 0x04	; 4
 ba6:	3c d0       	rcall	.+120    	; 0xc20 <__ultoa_invert+0x9c>
 ba8:	67 0f       	add	r22, r23
 baa:	78 1f       	adc	r23, r24
 bac:	89 1f       	adc	r24, r25
 bae:	9a 1f       	adc	r25, r26
 bb0:	a1 1d       	adc	r26, r1
 bb2:	68 0f       	add	r22, r24
 bb4:	79 1f       	adc	r23, r25
 bb6:	8a 1f       	adc	r24, r26
 bb8:	91 1d       	adc	r25, r1
 bba:	a1 1d       	adc	r26, r1
 bbc:	6a 0f       	add	r22, r26
 bbe:	71 1d       	adc	r23, r1
 bc0:	81 1d       	adc	r24, r1
 bc2:	91 1d       	adc	r25, r1
 bc4:	a1 1d       	adc	r26, r1
 bc6:	20 d0       	rcall	.+64     	; 0xc08 <__ultoa_invert+0x84>
 bc8:	09 f4       	brne	.+2      	; 0xbcc <__ultoa_invert+0x48>
 bca:	68 94       	set
 bcc:	3f 91       	pop	r19
 bce:	2a e0       	ldi	r18, 0x0A	; 10
 bd0:	26 9f       	mul	r18, r22
 bd2:	11 24       	eor	r1, r1
 bd4:	30 19       	sub	r19, r0
 bd6:	30 5d       	subi	r19, 0xD0	; 208
 bd8:	31 93       	st	Z+, r19
 bda:	de f6       	brtc	.-74     	; 0xb92 <__ultoa_invert+0xe>
 bdc:	cf 01       	movw	r24, r30
 bde:	08 95       	ret
 be0:	46 2f       	mov	r20, r22
 be2:	47 70       	andi	r20, 0x07	; 7
 be4:	40 5d       	subi	r20, 0xD0	; 208
 be6:	41 93       	st	Z+, r20
 be8:	b3 e0       	ldi	r27, 0x03	; 3
 bea:	0f d0       	rcall	.+30     	; 0xc0a <__ultoa_invert+0x86>
 bec:	c9 f7       	brne	.-14     	; 0xbe0 <__ultoa_invert+0x5c>
 bee:	f6 cf       	rjmp	.-20     	; 0xbdc <__ultoa_invert+0x58>
 bf0:	46 2f       	mov	r20, r22
 bf2:	4f 70       	andi	r20, 0x0F	; 15
 bf4:	40 5d       	subi	r20, 0xD0	; 208
 bf6:	4a 33       	cpi	r20, 0x3A	; 58
 bf8:	18 f0       	brcs	.+6      	; 0xc00 <__ultoa_invert+0x7c>
 bfa:	49 5d       	subi	r20, 0xD9	; 217
 bfc:	31 fd       	sbrc	r19, 1
 bfe:	40 52       	subi	r20, 0x20	; 32
 c00:	41 93       	st	Z+, r20
 c02:	02 d0       	rcall	.+4      	; 0xc08 <__ultoa_invert+0x84>
 c04:	a9 f7       	brne	.-22     	; 0xbf0 <__ultoa_invert+0x6c>
 c06:	ea cf       	rjmp	.-44     	; 0xbdc <__ultoa_invert+0x58>
 c08:	b4 e0       	ldi	r27, 0x04	; 4
 c0a:	a6 95       	lsr	r26
 c0c:	97 95       	ror	r25
 c0e:	87 95       	ror	r24
 c10:	77 95       	ror	r23
 c12:	67 95       	ror	r22
 c14:	ba 95       	dec	r27
 c16:	c9 f7       	brne	.-14     	; 0xc0a <__ultoa_invert+0x86>
 c18:	00 97       	sbiw	r24, 0x00	; 0
 c1a:	61 05       	cpc	r22, r1
 c1c:	71 05       	cpc	r23, r1
 c1e:	08 95       	ret
 c20:	9b 01       	movw	r18, r22
 c22:	ac 01       	movw	r20, r24
 c24:	0a 2e       	mov	r0, r26
 c26:	06 94       	lsr	r0
 c28:	57 95       	ror	r21
 c2a:	47 95       	ror	r20
 c2c:	37 95       	ror	r19
 c2e:	27 95       	ror	r18
 c30:	ba 95       	dec	r27
 c32:	c9 f7       	brne	.-14     	; 0xc26 <__ultoa_invert+0xa2>
 c34:	62 0f       	add	r22, r18
 c36:	73 1f       	adc	r23, r19
 c38:	84 1f       	adc	r24, r20
 c3a:	95 1f       	adc	r25, r21
 c3c:	a0 1d       	adc	r26, r0
 c3e:	08 95       	ret

00000c40 <_exit>:
 c40:	f8 94       	cli

00000c42 <__stop_program>:
 c42:	ff cf       	rjmp	.-2      	; 0xc42 <__stop_program>
