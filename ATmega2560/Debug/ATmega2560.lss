
ATmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800200  00000dd2  00000e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008002b8  008002b8  00000f1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eeb  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074f  00000000  00000000  00001f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000958  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  00003024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000063b  00000000  00000000  0000363e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003c79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c1       	rjmp	.+634    	; 0x288 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ed       	ldi	r30, 0xD2	; 210
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 3b       	cpi	r26, 0xB8	; 184
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 eb       	ldi	r26, 0xB8	; 184
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 3c       	cpi	r26, 0xC3	; 195
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	89 d1       	rcall	.+786    	; 0x432 <main>
 120:	56 c6       	rjmp	.+3244   	; 0xdce <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:


void CAN_init()
{
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
 124:	63 e0       	ldi	r22, 0x03	; 3
 126:	8b e2       	ldi	r24, 0x2B	; 43
 128:	12 d1       	rcall	.+548    	; 0x34e <MCP_write>
	GICR |= (1 << INT0);
	#endif

	#if defined(__AVR_ATmega2560__)
	// Falling edge of INT2 generates interrupt request
	EICRA |= (1 << ISC21) | (1 << ISC20);
 12a:	e9 e6       	ldi	r30, 0x69	; 105
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 63       	ori	r24, 0x30	; 48
 132:	80 83       	st	Z, r24
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
 134:	ea 9a       	sbi	0x1d, 2	; 29
	#endif
	
	//Set to loop-back mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
 136:	40 e4       	ldi	r20, 0x40	; 64
 138:	60 ee       	ldi	r22, 0xE0	; 224
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	27 c1       	rjmp	.+590    	; 0x38c <MCP_bit_modify>
 13e:	08 95       	ret

00000140 <CAN_msg_send>:
}

void CAN_msg_send(can_msg *message)
{
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
 14e:	fc 01       	movw	r30, r24
 150:	60 81       	ld	r22, Z
 152:	71 81       	ldd	r23, Z+1	; 0x01
 154:	76 95       	lsr	r23
 156:	67 95       	ror	r22
 158:	76 95       	lsr	r23
 15a:	67 95       	ror	r22
 15c:	76 95       	lsr	r23
 15e:	67 95       	ror	r22
 160:	81 e3       	ldi	r24, 0x31	; 49
 162:	f5 d0       	rcall	.+490    	; 0x34e <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
 164:	f7 01       	movw	r30, r14
 166:	60 81       	ld	r22, Z
 168:	62 95       	swap	r22
 16a:	66 0f       	add	r22, r22
 16c:	60 7e       	andi	r22, 0xE0	; 224
 16e:	82 e3       	ldi	r24, 0x32	; 50
 170:	ee d0       	rcall	.+476    	; 0x34e <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	83 e3       	ldi	r24, 0x33	; 51
 176:	eb d0       	rcall	.+470    	; 0x34e <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	84 e3       	ldi	r24, 0x34	; 52
 17c:	e8 d0       	rcall	.+464    	; 0x34e <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
 17e:	f7 01       	movw	r30, r14
 180:	62 81       	ldd	r22, Z+2	; 0x02
 182:	85 e3       	ldi	r24, 0x35	; 53
 184:	e4 d0       	rcall	.+456    	; 0x34e <MCP_write>
	
	for (int i = 0; i < message->length; i++){
 186:	f7 01       	movw	r30, r14
 188:	82 81       	ldd	r24, Z+2	; 0x02
 18a:	88 23       	and	r24, r24
 18c:	91 f0       	breq	.+36     	; 0x1b2 <CAN_msg_send+0x72>
 18e:	87 01       	movw	r16, r14
 190:	0d 5f       	subi	r16, 0xFD	; 253
 192:	1f 4f       	sbci	r17, 0xFF	; 255
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
 198:	f8 01       	movw	r30, r16
 19a:	61 91       	ld	r22, Z+
 19c:	8f 01       	movw	r16, r30
 19e:	8c 2f       	mov	r24, r28
 1a0:	8a 5c       	subi	r24, 0xCA	; 202
 1a2:	d5 d0       	rcall	.+426    	; 0x34e <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	f7 01       	movw	r30, r14
 1a8:	22 81       	ldd	r18, Z+2	; 0x02
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	c2 17       	cp	r28, r18
 1ae:	d3 07       	cpc	r29, r19
 1b0:	9c f3       	brlt	.-26     	; 0x198 <CAN_msg_send+0x58>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
 1b2:	81 e8       	ldi	r24, 0x81	; 129
 1b4:	df d0       	rcall	.+446    	; 0x374 <MCP_request_to_send>
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	08 95       	ret

000001c4 <CAN_msg_receive>:

void CAN_msg_receive(can_msg *msg, uint8_t reg)
{
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	7c 01       	movw	r14, r24
 1d6:	c6 2f       	mov	r28, r22

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	86 0f       	add	r24, r22
 1dc:	99 d0       	rcall	.+306    	; 0x310 <MCP_read>
 1de:	d8 2f       	mov	r29, r24
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	8c 0f       	add	r24, r28
 1e4:	95 d0       	rcall	.+298    	; 0x310 <MCP_read>
 1e6:	48 2f       	mov	r20, r24
 1e8:	42 95       	swap	r20
 1ea:	46 95       	lsr	r20
 1ec:	47 70       	andi	r20, 0x07	; 7
 1ee:	2d 2f       	mov	r18, r29
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	c9 01       	movw	r24, r18
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	84 2b       	or	r24, r20
 202:	f7 01       	movw	r30, r14
 204:	91 83       	std	Z+1, r25	; 0x01
 206:	80 83       	st	Z, r24
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
 208:	85 e0       	ldi	r24, 0x05	; 5
 20a:	8c 0f       	add	r24, r28
 20c:	81 d0       	rcall	.+258    	; 0x310 <MCP_read>
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	f7 01       	movw	r30, r14
 212:	82 83       	std	Z+2, r24	; 0x02
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
 214:	88 23       	and	r24, r24
 216:	f1 f0       	breq	.+60     	; 0x254 <CAN_msg_receive+0x90>
 218:	0f 2e       	mov	r0, r31
 21a:	f6 e0       	ldi	r31, 0x06	; 6
 21c:	df 2e       	mov	r13, r31
 21e:	f0 2d       	mov	r31, r0
 220:	dc 0e       	add	r13, r28
 222:	87 01       	movw	r16, r14
 224:	0d 5f       	subi	r16, 0xFD	; 253
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	0f 2e       	mov	r0, r31
 22a:	fe e0       	ldi	r31, 0x0E	; 14
 22c:	cf 2e       	mov	r12, r31
 22e:	f0 2d       	mov	r31, r0
 230:	cc 0e       	add	r12, r28
{

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0
	while( (i < msg->length) && (i < 8) ){
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
 236:	8d 2d       	mov	r24, r13
 238:	6b d0       	rcall	.+214    	; 0x310 <MCP_read>
 23a:	f8 01       	movw	r30, r16
 23c:	81 93       	st	Z+, r24
 23e:	8f 01       	movw	r16, r30
		i++;
 240:	21 96       	adiw	r28, 0x01	; 1

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
 242:	f7 01       	movw	r30, r14
 244:	22 81       	ldd	r18, Z+2	; 0x02
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	c2 17       	cp	r28, r18
 24a:	d3 07       	cpc	r29, r19
 24c:	1c f4       	brge	.+6      	; 0x254 <CAN_msg_receive+0x90>
 24e:	d3 94       	inc	r13
 250:	dc 10       	cpse	r13, r12
 252:	f1 cf       	rjmp	.-30     	; 0x236 <CAN_msg_receive+0x72>
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
		i++;
	}	
	
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	08 95       	ret

00000266 <CAN_handle_interrupt>:

void CAN_handle_interrupt(can_msg *msg)
{
	switch(interrupt_flag){
 266:	20 91 b8 02 	lds	r18, 0x02B8
 26a:	21 30       	cpi	r18, 0x01	; 1
 26c:	19 f0       	breq	.+6      	; 0x274 <CAN_handle_interrupt+0xe>
 26e:	22 30       	cpi	r18, 0x02	; 2
 270:	31 f0       	breq	.+12     	; 0x27e <CAN_handle_interrupt+0x18>
 272:	08 95       	ret
		case no_flag:
			break;
		case RX0:
			CAN_msg_receive(msg, MCP_RXB0CTRL);
 274:	60 e6       	ldi	r22, 0x60	; 96
 276:	a6 df       	rcall	.-180    	; 0x1c4 <CAN_msg_receive>
			interrupt_flag = no_flag;
 278:	10 92 b8 02 	sts	0x02B8, r1
			break;
 27c:	08 95       	ret
		case RX1:
			CAN_msg_receive(msg, MCP_RXB1CTRL);
 27e:	60 e7       	ldi	r22, 0x70	; 112
 280:	a1 df       	rcall	.-190    	; 0x1c4 <CAN_msg_receive>
			interrupt_flag = no_flag;
 282:	10 92 b8 02 	sts	0x02B8, r1
 286:	08 95       	ret

00000288 <__vector_3>:
	
}
#endif

#if defined(__AVR_ATmega2560__)
ISR(INT2_vect){
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	0b b6       	in	r0, 0x3b	; 59
 294:	0f 92       	push	r0
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
 2ae:	8c e2       	ldi	r24, 0x2C	; 44
 2b0:	2f d0       	rcall	.+94     	; 0x310 <MCP_read>

	if (interrupt & MCP_RX0IF){
 2b2:	80 ff       	sbrs	r24, 0
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <__vector_3+0x3e>
		interrupt_flag = RX0;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 b8 02 	sts	0x02B8, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	8c e2       	ldi	r24, 0x2C	; 44
 2c2:	64 d0       	rcall	.+200    	; 0x38c <MCP_bit_modify>
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <__vector_3+0x50>
	}
	else if (interrupt & MCP_RX1IF){
 2c6:	81 ff       	sbrs	r24, 1
 2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <__vector_3+0x50>
		interrupt_flag = RX1;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	80 93 b8 02 	sts	0x02B8, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	8c e2       	ldi	r24, 0x2C	; 44
 2d6:	5a d0       	rcall	.+180    	; 0x38c <MCP_bit_modify>
	}
	
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0b be       	out	0x3b, r0	; 59
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <MCP_reset>:
	SPI_transmit_receive(MCP_READ_STATUS);
	uint8_t status = SPI_transmit_receive(0);
	SPI_set_ss(1);
	
	return status;
}
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	67 d0       	rcall	.+206    	; 0x3d2 <SPI_set_ss>
 304:	80 ec       	ldi	r24, 0xC0	; 192
 306:	5f d0       	rcall	.+190    	; 0x3c6 <SPI_transmit_receive>
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	62 c0       	rjmp	.+196    	; 0x3d2 <SPI_set_ss>
 30e:	08 95       	ret

00000310 <MCP_read>:
 310:	cf 93       	push	r28
 312:	c8 2f       	mov	r28, r24
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	5c d0       	rcall	.+184    	; 0x3d2 <SPI_set_ss>
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	54 d0       	rcall	.+168    	; 0x3c6 <SPI_transmit_receive>
 31e:	8c 2f       	mov	r24, r28
 320:	52 d0       	rcall	.+164    	; 0x3c6 <SPI_transmit_receive>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	50 d0       	rcall	.+160    	; 0x3c6 <SPI_transmit_receive>
 326:	c8 2f       	mov	r28, r24
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	52 d0       	rcall	.+164    	; 0x3d2 <SPI_set_ss>
 32e:	8c 2f       	mov	r24, r28
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <MCP_init>:
 334:	e4 df       	rcall	.-56     	; 0x2fe <MCP_reset>
 336:	8e e0       	ldi	r24, 0x0E	; 14
 338:	eb df       	rcall	.-42     	; 0x310 <MCP_read>
 33a:	80 7e       	andi	r24, 0xE0	; 224
 33c:	80 38       	cpi	r24, 0x80	; 128
 33e:	29 f0       	breq	.+10     	; 0x34a <MCP_init+0x16>
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	92 e0       	ldi	r25, 0x02	; 2
 344:	3b d1       	rcall	.+630    	; 0x5bc <puts>
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret

0000034e <MCP_write>:
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	d8 2f       	mov	r29, r24
 354:	c6 2f       	mov	r28, r22
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	3b d0       	rcall	.+118    	; 0x3d2 <SPI_set_ss>
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	33 d0       	rcall	.+102    	; 0x3c6 <SPI_transmit_receive>
 360:	8d 2f       	mov	r24, r29
 362:	31 d0       	rcall	.+98     	; 0x3c6 <SPI_transmit_receive>
 364:	8c 2f       	mov	r24, r28
 366:	2f d0       	rcall	.+94     	; 0x3c6 <SPI_transmit_receive>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	32 d0       	rcall	.+100    	; 0x3d2 <SPI_set_ss>
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <MCP_request_to_send>:
 374:	cf 93       	push	r28
 376:	c8 2f       	mov	r28, r24
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	2a d0       	rcall	.+84     	; 0x3d2 <SPI_set_ss>
 37e:	8c 2f       	mov	r24, r28
 380:	22 d0       	rcall	.+68     	; 0x3c6 <SPI_transmit_receive>
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	25 d0       	rcall	.+74     	; 0x3d2 <SPI_set_ss>
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <MCP_bit_modify>:

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	18 2f       	mov	r17, r24
 394:	d6 2f       	mov	r29, r22
 396:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	1a d0       	rcall	.+52     	; 0x3d2 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 39e:	85 e0       	ldi	r24, 0x05	; 5
 3a0:	12 d0       	rcall	.+36     	; 0x3c6 <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 3a2:	81 2f       	mov	r24, r17
 3a4:	10 d0       	rcall	.+32     	; 0x3c6 <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 3a6:	8d 2f       	mov	r24, r29
 3a8:	0e d0       	rcall	.+28     	; 0x3c6 <SPI_transmit_receive>
	SPI_transmit_receive(data);
 3aa:	8c 2f       	mov	r24, r28
 3ac:	0c d0       	rcall	.+24     	; 0x3c6 <SPI_transmit_receive>
	
	SPI_set_ss(1);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0f d0       	rcall	.+30     	; 0x3d2 <SPI_set_ss>
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	08 95       	ret

000003bc <SPI_init>:
#include <avr/io.h>

void SPI_init( void )
{
	// Enable SPI, Master, set clock rate
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 3bc:	81 e5       	ldi	r24, 0x51	; 81
 3be:	8c bd       	out	0x2c, r24	; 44
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB = (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
	#endif
	#if defined(__AVR_ATmega2560__)
	DDRB = (1 << DDB2)|(1 << DDB1)|(1 << DDB0);
 3c0:	87 e0       	ldi	r24, 0x07	; 7
 3c2:	84 b9       	out	0x04, r24	; 4
 3c4:	08 95       	ret

000003c6 <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 3c6:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
 3c8:	0d b4       	in	r0, 0x2d	; 45
 3ca:	07 fe       	sbrs	r0, 7
 3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <SPI_transmit_receive+0x2>
	//printf("Hello from SPI transmit receive 2\n");
	
	return SPDR;
 3ce:	8e b5       	in	r24, 0x2e	; 46
}
 3d0:	08 95       	ret

000003d2 <SPI_set_ss>:
		clear_bit(PORTB, PB4);
	}
	#endif
	
	#if defined(__AVR_ATmega2560__)
	if (val == 1){
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	91 05       	cpc	r25, r1
 3d6:	11 f4       	brne	.+4      	; 0x3dc <SPI_set_ss+0xa>
		set_bit(PORTB, PB0);
 3d8:	28 9a       	sbi	0x05, 0	; 5
 3da:	08 95       	ret
	}
	else if (val == 0){
 3dc:	89 2b       	or	r24, r25
 3de:	09 f4       	brne	.+2      	; 0x3e2 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB0);
 3e0:	28 98       	cbi	0x05, 0	; 5
 3e2:	08 95       	ret

000003e4 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 3e4:	e0 ec       	ldi	r30, 0xC0	; 192
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	90 81       	ld	r25, Z
 3ea:	95 ff       	sbrs	r25, 5
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <UART_Transmit+0x4>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 3ee:	80 93 c6 00 	sts	0x00C6, r24
 3f2:	08 95       	ret

000003f4 <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A) & (1<<RXC0));  
 3f4:	80 91 c0 00 	lds	r24, 0x00C0
	
	//Get and return received data from buffer
	return UDR0;  
 3f8:	80 91 c6 00 	lds	r24, 0x00C6
 3fc:	08 95       	ret

000003fe <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 3fe:	e5 ec       	ldi	r30, 0xC5	; 197
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	20 81       	ld	r18, Z
 404:	92 2b       	or	r25, r18
 406:	90 83       	st	Z, r25
	UBRR0L |= (unsigned char)ubrr;
 408:	e4 ec       	ldi	r30, 0xC4	; 196
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	90 81       	ld	r25, Z
 40e:	89 2b       	or	r24, r25
 410:	80 83       	st	Z, r24
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 412:	e1 ec       	ldi	r30, 0xC1	; 193
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	88 61       	ori	r24, 0x18	; 24
 41a:	80 83       	st	Z, r24
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 41c:	e2 ec       	ldi	r30, 0xC2	; 194
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	8e 60       	ori	r24, 0x0E	; 14
 424:	80 83       	st	Z, r24
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 426:	6a ef       	ldi	r22, 0xFA	; 250
 428:	71 e0       	ldi	r23, 0x01	; 1
 42a:	82 ef       	ldi	r24, 0xF2	; 242
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	6b c0       	rjmp	.+214    	; 0x506 <fdevopen>
 430:	08 95       	ret

00000432 <main>:
#include <avr/io.h>
#include <util/delay.h>
//#include <stdio.h>
#include <avr/interrupt.h>

int main( void ){
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	66 97       	sbiw	r28, 0x16	; 22
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
	cli();
 446:	f8 94       	cli
	// Initializations
	UART_Init( MYUBRR );
 448:	87 e6       	ldi	r24, 0x67	; 103
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	d8 df       	rcall	.-80     	; 0x3fe <UART_Init>
	SPI_init();
 44e:	b6 df       	rcall	.-148    	; 0x3bc <SPI_init>
	MCP_init();
 450:	71 df       	rcall	.-286    	; 0x334 <MCP_init>
	CAN_init();
 452:	68 de       	rcall	.-816    	; 0x124 <CAN_init>
	printf("\n\n\nInit done\n");
 454:	87 e3       	ldi	r24, 0x37	; 55
 456:	92 e0       	ldi	r25, 0x02	; 2
 458:	b1 d0       	rcall	.+354    	; 0x5bc <puts>
	sei();
 45a:	78 94       	sei
	can_msg send = {.id = 3, .length = 1, .data[0] = 200};
 45c:	fe 01       	movw	r30, r28
 45e:	31 96       	adiw	r30, 0x01	; 1
 460:	8b e0       	ldi	r24, 0x0B	; 11
 462:	df 01       	movw	r26, r30
 464:	1d 92       	st	X+, r1
 466:	8a 95       	dec	r24
 468:	e9 f7       	brne	.-6      	; 0x464 <main+0x32>
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	9a 83       	std	Y+2, r25	; 0x02
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	8b 83       	std	Y+3, r24	; 0x03
 476:	88 ec       	ldi	r24, 0xC8	; 200
 478:	8c 83       	std	Y+4, r24	; 0x04
		CAN_msg_send(&send);
		//printf("Message sent\n");
		_delay_us(200);
		CAN_handle_interrupt(&receive);
		//printf("Message received\n");
		printf("\n\nSent message: %d \t Received message: %d \n", send.data[0], receive.data[0]);
 47a:	0f 2e       	mov	r0, r31
 47c:	f4 e4       	ldi	r31, 0x44	; 68
 47e:	cf 2e       	mov	r12, r31
 480:	f2 e0       	ldi	r31, 0x02	; 2
 482:	df 2e       	mov	r13, r31
 484:	f0 2d       	mov	r31, r0
		printf("Sent id: %d \t Received id: %d \n", send.id, receive.id);
 486:	0f 2e       	mov	r0, r31
 488:	f0 e7       	ldi	r31, 0x70	; 112
 48a:	ef 2e       	mov	r14, r31
 48c:	f2 e0       	ldi	r31, 0x02	; 2
 48e:	ff 2e       	mov	r15, r31
 490:	f0 2d       	mov	r31, r0
		printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
 492:	00 e9       	ldi	r16, 0x90	; 144
 494:	12 e0       	ldi	r17, 0x02	; 2
	can_msg send = {.id = 3, .length = 1, .data[0] = 200};
	can_msg receive;
	
	while(1){
		//printf("While loop\n");
		CAN_msg_send(&send);
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	52 de       	rcall	.-860    	; 0x140 <CAN_msg_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	8f e1       	ldi	r24, 0x1F	; 31
 49e:	93 e0       	ldi	r25, 0x03	; 3
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <main+0x6e>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x74>
 4a6:	00 00       	nop
		//printf("Message sent\n");
		_delay_us(200);
		CAN_handle_interrupt(&receive);
 4a8:	ce 01       	movw	r24, r28
 4aa:	0c 96       	adiw	r24, 0x0c	; 12
 4ac:	dc de       	rcall	.-584    	; 0x266 <CAN_handle_interrupt>
		//printf("Message received\n");
		printf("\n\nSent message: %d \t Received message: %d \n", send.data[0], receive.data[0]);
 4ae:	8f 85       	ldd	r24, Y+15	; 0x0f
 4b0:	1f 92       	push	r1
 4b2:	8f 93       	push	r24
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	1f 92       	push	r1
 4b8:	8f 93       	push	r24
 4ba:	df 92       	push	r13
 4bc:	cf 92       	push	r12
 4be:	6d d0       	rcall	.+218    	; 0x59a <printf>
		printf("Sent id: %d \t Received id: %d \n", send.id, receive.id);
 4c0:	8d 85       	ldd	r24, Y+13	; 0x0d
 4c2:	8f 93       	push	r24
 4c4:	8c 85       	ldd	r24, Y+12	; 0x0c
 4c6:	8f 93       	push	r24
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	8f 93       	push	r24
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	8f 93       	push	r24
 4d0:	ff 92       	push	r15
 4d2:	ef 92       	push	r14
 4d4:	62 d0       	rcall	.+196    	; 0x59a <printf>
		printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
 4d6:	8e 85       	ldd	r24, Y+14	; 0x0e
 4d8:	1f 92       	push	r1
 4da:	8f 93       	push	r24
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	1f 92       	push	r1
 4e0:	8f 93       	push	r24
 4e2:	1f 93       	push	r17
 4e4:	0f 93       	push	r16
 4e6:	59 d0       	rcall	.+178    	; 0x59a <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	a7 ea       	ldi	r26, 0xA7	; 167
 4ec:	b1 e6       	ldi	r27, 0x61	; 97
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	a0 40       	sbci	r26, 0x00	; 0
 4f2:	b0 40       	sbci	r27, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0xbc>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0xc6>
 4f8:	00 00       	nop
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	f8 94       	cli
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	0f be       	out	0x3f, r0	; 63
 502:	cd bf       	out	0x3d, r28	; 61
 504:	c8 cf       	rjmp	.-112    	; 0x496 <main+0x64>

00000506 <fdevopen>:
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	ec 01       	movw	r28, r24
 510:	8b 01       	movw	r16, r22
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	31 f4       	brne	.+12     	; 0x522 <fdevopen+0x1c>
 516:	61 15       	cp	r22, r1
 518:	71 05       	cpc	r23, r1
 51a:	19 f4       	brne	.+6      	; 0x522 <fdevopen+0x1c>
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	37 c0       	rjmp	.+110    	; 0x590 <fdevopen+0x8a>
 522:	6e e0       	ldi	r22, 0x0E	; 14
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	63 d2       	rcall	.+1222   	; 0x9f2 <calloc>
 52c:	fc 01       	movw	r30, r24
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	a9 f3       	breq	.-22     	; 0x51c <fdevopen+0x16>
 532:	80 e8       	ldi	r24, 0x80	; 128
 534:	83 83       	std	Z+3, r24	; 0x03
 536:	01 15       	cp	r16, r1
 538:	11 05       	cpc	r17, r1
 53a:	71 f0       	breq	.+28     	; 0x558 <fdevopen+0x52>
 53c:	13 87       	std	Z+11, r17	; 0x0b
 53e:	02 87       	std	Z+10, r16	; 0x0a
 540:	81 e8       	ldi	r24, 0x81	; 129
 542:	83 83       	std	Z+3, r24	; 0x03
 544:	80 91 b9 02 	lds	r24, 0x02B9
 548:	90 91 ba 02 	lds	r25, 0x02BA
 54c:	89 2b       	or	r24, r25
 54e:	21 f4       	brne	.+8      	; 0x558 <fdevopen+0x52>
 550:	f0 93 ba 02 	sts	0x02BA, r31
 554:	e0 93 b9 02 	sts	0x02B9, r30
 558:	20 97       	sbiw	r28, 0x00	; 0
 55a:	c9 f0       	breq	.+50     	; 0x58e <fdevopen+0x88>
 55c:	d1 87       	std	Z+9, r29	; 0x09
 55e:	c0 87       	std	Z+8, r28	; 0x08
 560:	83 81       	ldd	r24, Z+3	; 0x03
 562:	82 60       	ori	r24, 0x02	; 2
 564:	83 83       	std	Z+3, r24	; 0x03
 566:	80 91 bb 02 	lds	r24, 0x02BB
 56a:	90 91 bc 02 	lds	r25, 0x02BC
 56e:	89 2b       	or	r24, r25
 570:	71 f4       	brne	.+28     	; 0x58e <fdevopen+0x88>
 572:	f0 93 bc 02 	sts	0x02BC, r31
 576:	e0 93 bb 02 	sts	0x02BB, r30
 57a:	80 91 bd 02 	lds	r24, 0x02BD
 57e:	90 91 be 02 	lds	r25, 0x02BE
 582:	89 2b       	or	r24, r25
 584:	21 f4       	brne	.+8      	; 0x58e <fdevopen+0x88>
 586:	f0 93 be 02 	sts	0x02BE, r31
 58a:	e0 93 bd 02 	sts	0x02BD, r30
 58e:	cf 01       	movw	r24, r30
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <printf>:
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	fe 01       	movw	r30, r28
 5a4:	36 96       	adiw	r30, 0x06	; 6
 5a6:	61 91       	ld	r22, Z+
 5a8:	71 91       	ld	r23, Z+
 5aa:	af 01       	movw	r20, r30
 5ac:	80 91 bb 02 	lds	r24, 0x02BB
 5b0:	90 91 bc 02 	lds	r25, 0x02BC
 5b4:	30 d0       	rcall	.+96     	; 0x616 <vfprintf>
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <puts>:
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	e0 91 bb 02 	lds	r30, 0x02BB
 5c8:	f0 91 bc 02 	lds	r31, 0x02BC
 5cc:	23 81       	ldd	r18, Z+3	; 0x03
 5ce:	21 ff       	sbrs	r18, 1
 5d0:	1b c0       	rjmp	.+54     	; 0x608 <puts+0x4c>
 5d2:	ec 01       	movw	r28, r24
 5d4:	00 e0       	ldi	r16, 0x00	; 0
 5d6:	10 e0       	ldi	r17, 0x00	; 0
 5d8:	89 91       	ld	r24, Y+
 5da:	60 91 bb 02 	lds	r22, 0x02BB
 5de:	70 91 bc 02 	lds	r23, 0x02BC
 5e2:	db 01       	movw	r26, r22
 5e4:	18 96       	adiw	r26, 0x08	; 8
 5e6:	ed 91       	ld	r30, X+
 5e8:	fc 91       	ld	r31, X
 5ea:	19 97       	sbiw	r26, 0x09	; 9
 5ec:	88 23       	and	r24, r24
 5ee:	31 f0       	breq	.+12     	; 0x5fc <puts+0x40>
 5f0:	19 95       	eicall
 5f2:	89 2b       	or	r24, r25
 5f4:	89 f3       	breq	.-30     	; 0x5d8 <puts+0x1c>
 5f6:	0f ef       	ldi	r16, 0xFF	; 255
 5f8:	1f ef       	ldi	r17, 0xFF	; 255
 5fa:	ee cf       	rjmp	.-36     	; 0x5d8 <puts+0x1c>
 5fc:	8a e0       	ldi	r24, 0x0A	; 10
 5fe:	19 95       	eicall
 600:	89 2b       	or	r24, r25
 602:	11 f4       	brne	.+4      	; 0x608 <puts+0x4c>
 604:	c8 01       	movw	r24, r16
 606:	02 c0       	rjmp	.+4      	; 0x60c <puts+0x50>
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <vfprintf>:
 616:	2f 92       	push	r2
 618:	3f 92       	push	r3
 61a:	4f 92       	push	r4
 61c:	5f 92       	push	r5
 61e:	6f 92       	push	r6
 620:	7f 92       	push	r7
 622:	8f 92       	push	r8
 624:	9f 92       	push	r9
 626:	af 92       	push	r10
 628:	bf 92       	push	r11
 62a:	cf 92       	push	r12
 62c:	df 92       	push	r13
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	2c 97       	sbiw	r28, 0x0c	; 12
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
 64a:	7c 01       	movw	r14, r24
 64c:	6b 01       	movw	r12, r22
 64e:	8a 01       	movw	r16, r20
 650:	fc 01       	movw	r30, r24
 652:	17 82       	std	Z+7, r1	; 0x07
 654:	16 82       	std	Z+6, r1	; 0x06
 656:	83 81       	ldd	r24, Z+3	; 0x03
 658:	81 ff       	sbrs	r24, 1
 65a:	b0 c1       	rjmp	.+864    	; 0x9bc <vfprintf+0x3a6>
 65c:	ce 01       	movw	r24, r28
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	4c 01       	movw	r8, r24
 662:	f7 01       	movw	r30, r14
 664:	93 81       	ldd	r25, Z+3	; 0x03
 666:	f6 01       	movw	r30, r12
 668:	93 fd       	sbrc	r25, 3
 66a:	85 91       	lpm	r24, Z+
 66c:	93 ff       	sbrs	r25, 3
 66e:	81 91       	ld	r24, Z+
 670:	6f 01       	movw	r12, r30
 672:	88 23       	and	r24, r24
 674:	09 f4       	brne	.+2      	; 0x678 <vfprintf+0x62>
 676:	9e c1       	rjmp	.+828    	; 0x9b4 <vfprintf+0x39e>
 678:	85 32       	cpi	r24, 0x25	; 37
 67a:	39 f4       	brne	.+14     	; 0x68a <vfprintf+0x74>
 67c:	93 fd       	sbrc	r25, 3
 67e:	85 91       	lpm	r24, Z+
 680:	93 ff       	sbrs	r25, 3
 682:	81 91       	ld	r24, Z+
 684:	6f 01       	movw	r12, r30
 686:	85 32       	cpi	r24, 0x25	; 37
 688:	21 f4       	brne	.+8      	; 0x692 <vfprintf+0x7c>
 68a:	b7 01       	movw	r22, r14
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0f d3       	rcall	.+1566   	; 0xcae <fputc>
 690:	e8 cf       	rjmp	.-48     	; 0x662 <vfprintf+0x4c>
 692:	51 2c       	mov	r5, r1
 694:	31 2c       	mov	r3, r1
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	20 32       	cpi	r18, 0x20	; 32
 69a:	a0 f4       	brcc	.+40     	; 0x6c4 <vfprintf+0xae>
 69c:	8b 32       	cpi	r24, 0x2B	; 43
 69e:	69 f0       	breq	.+26     	; 0x6ba <vfprintf+0xa4>
 6a0:	30 f4       	brcc	.+12     	; 0x6ae <vfprintf+0x98>
 6a2:	80 32       	cpi	r24, 0x20	; 32
 6a4:	59 f0       	breq	.+22     	; 0x6bc <vfprintf+0xa6>
 6a6:	83 32       	cpi	r24, 0x23	; 35
 6a8:	69 f4       	brne	.+26     	; 0x6c4 <vfprintf+0xae>
 6aa:	20 61       	ori	r18, 0x10	; 16
 6ac:	2c c0       	rjmp	.+88     	; 0x706 <vfprintf+0xf0>
 6ae:	8d 32       	cpi	r24, 0x2D	; 45
 6b0:	39 f0       	breq	.+14     	; 0x6c0 <vfprintf+0xaa>
 6b2:	80 33       	cpi	r24, 0x30	; 48
 6b4:	39 f4       	brne	.+14     	; 0x6c4 <vfprintf+0xae>
 6b6:	21 60       	ori	r18, 0x01	; 1
 6b8:	26 c0       	rjmp	.+76     	; 0x706 <vfprintf+0xf0>
 6ba:	22 60       	ori	r18, 0x02	; 2
 6bc:	24 60       	ori	r18, 0x04	; 4
 6be:	23 c0       	rjmp	.+70     	; 0x706 <vfprintf+0xf0>
 6c0:	28 60       	ori	r18, 0x08	; 8
 6c2:	21 c0       	rjmp	.+66     	; 0x706 <vfprintf+0xf0>
 6c4:	27 fd       	sbrc	r18, 7
 6c6:	27 c0       	rjmp	.+78     	; 0x716 <vfprintf+0x100>
 6c8:	30 ed       	ldi	r19, 0xD0	; 208
 6ca:	38 0f       	add	r19, r24
 6cc:	3a 30       	cpi	r19, 0x0A	; 10
 6ce:	78 f4       	brcc	.+30     	; 0x6ee <vfprintf+0xd8>
 6d0:	26 ff       	sbrs	r18, 6
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <vfprintf+0xca>
 6d4:	fa e0       	ldi	r31, 0x0A	; 10
 6d6:	5f 9e       	mul	r5, r31
 6d8:	30 0d       	add	r19, r0
 6da:	11 24       	eor	r1, r1
 6dc:	53 2e       	mov	r5, r19
 6de:	13 c0       	rjmp	.+38     	; 0x706 <vfprintf+0xf0>
 6e0:	8a e0       	ldi	r24, 0x0A	; 10
 6e2:	38 9e       	mul	r3, r24
 6e4:	30 0d       	add	r19, r0
 6e6:	11 24       	eor	r1, r1
 6e8:	33 2e       	mov	r3, r19
 6ea:	20 62       	ori	r18, 0x20	; 32
 6ec:	0c c0       	rjmp	.+24     	; 0x706 <vfprintf+0xf0>
 6ee:	8e 32       	cpi	r24, 0x2E	; 46
 6f0:	21 f4       	brne	.+8      	; 0x6fa <vfprintf+0xe4>
 6f2:	26 fd       	sbrc	r18, 6
 6f4:	5f c1       	rjmp	.+702    	; 0x9b4 <vfprintf+0x39e>
 6f6:	20 64       	ori	r18, 0x40	; 64
 6f8:	06 c0       	rjmp	.+12     	; 0x706 <vfprintf+0xf0>
 6fa:	8c 36       	cpi	r24, 0x6C	; 108
 6fc:	11 f4       	brne	.+4      	; 0x702 <vfprintf+0xec>
 6fe:	20 68       	ori	r18, 0x80	; 128
 700:	02 c0       	rjmp	.+4      	; 0x706 <vfprintf+0xf0>
 702:	88 36       	cpi	r24, 0x68	; 104
 704:	41 f4       	brne	.+16     	; 0x716 <vfprintf+0x100>
 706:	f6 01       	movw	r30, r12
 708:	93 fd       	sbrc	r25, 3
 70a:	85 91       	lpm	r24, Z+
 70c:	93 ff       	sbrs	r25, 3
 70e:	81 91       	ld	r24, Z+
 710:	6f 01       	movw	r12, r30
 712:	81 11       	cpse	r24, r1
 714:	c1 cf       	rjmp	.-126    	; 0x698 <vfprintf+0x82>
 716:	98 2f       	mov	r25, r24
 718:	9f 7d       	andi	r25, 0xDF	; 223
 71a:	95 54       	subi	r25, 0x45	; 69
 71c:	93 30       	cpi	r25, 0x03	; 3
 71e:	28 f4       	brcc	.+10     	; 0x72a <vfprintf+0x114>
 720:	0c 5f       	subi	r16, 0xFC	; 252
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	ff e3       	ldi	r31, 0x3F	; 63
 726:	f9 83       	std	Y+1, r31	; 0x01
 728:	0d c0       	rjmp	.+26     	; 0x744 <vfprintf+0x12e>
 72a:	83 36       	cpi	r24, 0x63	; 99
 72c:	31 f0       	breq	.+12     	; 0x73a <vfprintf+0x124>
 72e:	83 37       	cpi	r24, 0x73	; 115
 730:	71 f0       	breq	.+28     	; 0x74e <vfprintf+0x138>
 732:	83 35       	cpi	r24, 0x53	; 83
 734:	09 f0       	breq	.+2      	; 0x738 <vfprintf+0x122>
 736:	57 c0       	rjmp	.+174    	; 0x7e6 <vfprintf+0x1d0>
 738:	21 c0       	rjmp	.+66     	; 0x77c <vfprintf+0x166>
 73a:	f8 01       	movw	r30, r16
 73c:	80 81       	ld	r24, Z
 73e:	89 83       	std	Y+1, r24	; 0x01
 740:	0e 5f       	subi	r16, 0xFE	; 254
 742:	1f 4f       	sbci	r17, 0xFF	; 255
 744:	44 24       	eor	r4, r4
 746:	43 94       	inc	r4
 748:	51 2c       	mov	r5, r1
 74a:	54 01       	movw	r10, r8
 74c:	14 c0       	rjmp	.+40     	; 0x776 <vfprintf+0x160>
 74e:	38 01       	movw	r6, r16
 750:	f2 e0       	ldi	r31, 0x02	; 2
 752:	6f 0e       	add	r6, r31
 754:	71 1c       	adc	r7, r1
 756:	f8 01       	movw	r30, r16
 758:	a0 80       	ld	r10, Z
 75a:	b1 80       	ldd	r11, Z+1	; 0x01
 75c:	26 ff       	sbrs	r18, 6
 75e:	03 c0       	rjmp	.+6      	; 0x766 <vfprintf+0x150>
 760:	65 2d       	mov	r22, r5
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0x154>
 766:	6f ef       	ldi	r22, 0xFF	; 255
 768:	7f ef       	ldi	r23, 0xFF	; 255
 76a:	c5 01       	movw	r24, r10
 76c:	2c 87       	std	Y+12, r18	; 0x0c
 76e:	94 d2       	rcall	.+1320   	; 0xc98 <strnlen>
 770:	2c 01       	movw	r4, r24
 772:	83 01       	movw	r16, r6
 774:	2c 85       	ldd	r18, Y+12	; 0x0c
 776:	2f 77       	andi	r18, 0x7F	; 127
 778:	22 2e       	mov	r2, r18
 77a:	16 c0       	rjmp	.+44     	; 0x7a8 <vfprintf+0x192>
 77c:	38 01       	movw	r6, r16
 77e:	f2 e0       	ldi	r31, 0x02	; 2
 780:	6f 0e       	add	r6, r31
 782:	71 1c       	adc	r7, r1
 784:	f8 01       	movw	r30, r16
 786:	a0 80       	ld	r10, Z
 788:	b1 80       	ldd	r11, Z+1	; 0x01
 78a:	26 ff       	sbrs	r18, 6
 78c:	03 c0       	rjmp	.+6      	; 0x794 <vfprintf+0x17e>
 78e:	65 2d       	mov	r22, r5
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x182>
 794:	6f ef       	ldi	r22, 0xFF	; 255
 796:	7f ef       	ldi	r23, 0xFF	; 255
 798:	c5 01       	movw	r24, r10
 79a:	2c 87       	std	Y+12, r18	; 0x0c
 79c:	6b d2       	rcall	.+1238   	; 0xc74 <strnlen_P>
 79e:	2c 01       	movw	r4, r24
 7a0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7a2:	20 68       	ori	r18, 0x80	; 128
 7a4:	22 2e       	mov	r2, r18
 7a6:	83 01       	movw	r16, r6
 7a8:	23 fc       	sbrc	r2, 3
 7aa:	19 c0       	rjmp	.+50     	; 0x7de <vfprintf+0x1c8>
 7ac:	83 2d       	mov	r24, r3
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	48 16       	cp	r4, r24
 7b2:	59 06       	cpc	r5, r25
 7b4:	a0 f4       	brcc	.+40     	; 0x7de <vfprintf+0x1c8>
 7b6:	b7 01       	movw	r22, r14
 7b8:	80 e2       	ldi	r24, 0x20	; 32
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	78 d2       	rcall	.+1264   	; 0xcae <fputc>
 7be:	3a 94       	dec	r3
 7c0:	f5 cf       	rjmp	.-22     	; 0x7ac <vfprintf+0x196>
 7c2:	f5 01       	movw	r30, r10
 7c4:	27 fc       	sbrc	r2, 7
 7c6:	85 91       	lpm	r24, Z+
 7c8:	27 fe       	sbrs	r2, 7
 7ca:	81 91       	ld	r24, Z+
 7cc:	5f 01       	movw	r10, r30
 7ce:	b7 01       	movw	r22, r14
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	6d d2       	rcall	.+1242   	; 0xcae <fputc>
 7d4:	31 10       	cpse	r3, r1
 7d6:	3a 94       	dec	r3
 7d8:	f1 e0       	ldi	r31, 0x01	; 1
 7da:	4f 1a       	sub	r4, r31
 7dc:	51 08       	sbc	r5, r1
 7de:	41 14       	cp	r4, r1
 7e0:	51 04       	cpc	r5, r1
 7e2:	79 f7       	brne	.-34     	; 0x7c2 <vfprintf+0x1ac>
 7e4:	de c0       	rjmp	.+444    	; 0x9a2 <vfprintf+0x38c>
 7e6:	84 36       	cpi	r24, 0x64	; 100
 7e8:	11 f0       	breq	.+4      	; 0x7ee <vfprintf+0x1d8>
 7ea:	89 36       	cpi	r24, 0x69	; 105
 7ec:	31 f5       	brne	.+76     	; 0x83a <vfprintf+0x224>
 7ee:	f8 01       	movw	r30, r16
 7f0:	27 ff       	sbrs	r18, 7
 7f2:	07 c0       	rjmp	.+14     	; 0x802 <vfprintf+0x1ec>
 7f4:	60 81       	ld	r22, Z
 7f6:	71 81       	ldd	r23, Z+1	; 0x01
 7f8:	82 81       	ldd	r24, Z+2	; 0x02
 7fa:	93 81       	ldd	r25, Z+3	; 0x03
 7fc:	0c 5f       	subi	r16, 0xFC	; 252
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	08 c0       	rjmp	.+16     	; 0x812 <vfprintf+0x1fc>
 802:	60 81       	ld	r22, Z
 804:	71 81       	ldd	r23, Z+1	; 0x01
 806:	88 27       	eor	r24, r24
 808:	77 fd       	sbrc	r23, 7
 80a:	80 95       	com	r24
 80c:	98 2f       	mov	r25, r24
 80e:	0e 5f       	subi	r16, 0xFE	; 254
 810:	1f 4f       	sbci	r17, 0xFF	; 255
 812:	2f 76       	andi	r18, 0x6F	; 111
 814:	b2 2e       	mov	r11, r18
 816:	97 ff       	sbrs	r25, 7
 818:	09 c0       	rjmp	.+18     	; 0x82c <vfprintf+0x216>
 81a:	90 95       	com	r25
 81c:	80 95       	com	r24
 81e:	70 95       	com	r23
 820:	61 95       	neg	r22
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8f 4f       	sbci	r24, 0xFF	; 255
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	20 68       	ori	r18, 0x80	; 128
 82a:	b2 2e       	mov	r11, r18
 82c:	2a e0       	ldi	r18, 0x0A	; 10
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	a4 01       	movw	r20, r8
 832:	6f d2       	rcall	.+1246   	; 0xd12 <__ultoa_invert>
 834:	a8 2e       	mov	r10, r24
 836:	a8 18       	sub	r10, r8
 838:	43 c0       	rjmp	.+134    	; 0x8c0 <vfprintf+0x2aa>
 83a:	85 37       	cpi	r24, 0x75	; 117
 83c:	29 f4       	brne	.+10     	; 0x848 <vfprintf+0x232>
 83e:	2f 7e       	andi	r18, 0xEF	; 239
 840:	b2 2e       	mov	r11, r18
 842:	2a e0       	ldi	r18, 0x0A	; 10
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	25 c0       	rjmp	.+74     	; 0x892 <vfprintf+0x27c>
 848:	f2 2f       	mov	r31, r18
 84a:	f9 7f       	andi	r31, 0xF9	; 249
 84c:	bf 2e       	mov	r11, r31
 84e:	8f 36       	cpi	r24, 0x6F	; 111
 850:	c1 f0       	breq	.+48     	; 0x882 <vfprintf+0x26c>
 852:	18 f4       	brcc	.+6      	; 0x85a <vfprintf+0x244>
 854:	88 35       	cpi	r24, 0x58	; 88
 856:	79 f0       	breq	.+30     	; 0x876 <vfprintf+0x260>
 858:	ad c0       	rjmp	.+346    	; 0x9b4 <vfprintf+0x39e>
 85a:	80 37       	cpi	r24, 0x70	; 112
 85c:	19 f0       	breq	.+6      	; 0x864 <vfprintf+0x24e>
 85e:	88 37       	cpi	r24, 0x78	; 120
 860:	21 f0       	breq	.+8      	; 0x86a <vfprintf+0x254>
 862:	a8 c0       	rjmp	.+336    	; 0x9b4 <vfprintf+0x39e>
 864:	2f 2f       	mov	r18, r31
 866:	20 61       	ori	r18, 0x10	; 16
 868:	b2 2e       	mov	r11, r18
 86a:	b4 fe       	sbrs	r11, 4
 86c:	0d c0       	rjmp	.+26     	; 0x888 <vfprintf+0x272>
 86e:	8b 2d       	mov	r24, r11
 870:	84 60       	ori	r24, 0x04	; 4
 872:	b8 2e       	mov	r11, r24
 874:	09 c0       	rjmp	.+18     	; 0x888 <vfprintf+0x272>
 876:	24 ff       	sbrs	r18, 4
 878:	0a c0       	rjmp	.+20     	; 0x88e <vfprintf+0x278>
 87a:	9f 2f       	mov	r25, r31
 87c:	96 60       	ori	r25, 0x06	; 6
 87e:	b9 2e       	mov	r11, r25
 880:	06 c0       	rjmp	.+12     	; 0x88e <vfprintf+0x278>
 882:	28 e0       	ldi	r18, 0x08	; 8
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	05 c0       	rjmp	.+10     	; 0x892 <vfprintf+0x27c>
 888:	20 e1       	ldi	r18, 0x10	; 16
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	02 c0       	rjmp	.+4      	; 0x892 <vfprintf+0x27c>
 88e:	20 e1       	ldi	r18, 0x10	; 16
 890:	32 e0       	ldi	r19, 0x02	; 2
 892:	f8 01       	movw	r30, r16
 894:	b7 fe       	sbrs	r11, 7
 896:	07 c0       	rjmp	.+14     	; 0x8a6 <vfprintf+0x290>
 898:	60 81       	ld	r22, Z
 89a:	71 81       	ldd	r23, Z+1	; 0x01
 89c:	82 81       	ldd	r24, Z+2	; 0x02
 89e:	93 81       	ldd	r25, Z+3	; 0x03
 8a0:	0c 5f       	subi	r16, 0xFC	; 252
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <vfprintf+0x29c>
 8a6:	60 81       	ld	r22, Z
 8a8:	71 81       	ldd	r23, Z+1	; 0x01
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 5f       	subi	r16, 0xFE	; 254
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	a4 01       	movw	r20, r8
 8b4:	2e d2       	rcall	.+1116   	; 0xd12 <__ultoa_invert>
 8b6:	a8 2e       	mov	r10, r24
 8b8:	a8 18       	sub	r10, r8
 8ba:	fb 2d       	mov	r31, r11
 8bc:	ff 77       	andi	r31, 0x7F	; 127
 8be:	bf 2e       	mov	r11, r31
 8c0:	b6 fe       	sbrs	r11, 6
 8c2:	0b c0       	rjmp	.+22     	; 0x8da <vfprintf+0x2c4>
 8c4:	2b 2d       	mov	r18, r11
 8c6:	2e 7f       	andi	r18, 0xFE	; 254
 8c8:	a5 14       	cp	r10, r5
 8ca:	50 f4       	brcc	.+20     	; 0x8e0 <vfprintf+0x2ca>
 8cc:	b4 fe       	sbrs	r11, 4
 8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <vfprintf+0x2ce>
 8d0:	b2 fc       	sbrc	r11, 2
 8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <vfprintf+0x2ce>
 8d4:	2b 2d       	mov	r18, r11
 8d6:	2e 7e       	andi	r18, 0xEE	; 238
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <vfprintf+0x2ce>
 8da:	7a 2c       	mov	r7, r10
 8dc:	2b 2d       	mov	r18, r11
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <vfprintf+0x2d0>
 8e0:	7a 2c       	mov	r7, r10
 8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <vfprintf+0x2d0>
 8e4:	75 2c       	mov	r7, r5
 8e6:	24 ff       	sbrs	r18, 4
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <vfprintf+0x2ee>
 8ea:	fe 01       	movw	r30, r28
 8ec:	ea 0d       	add	r30, r10
 8ee:	f1 1d       	adc	r31, r1
 8f0:	80 81       	ld	r24, Z
 8f2:	80 33       	cpi	r24, 0x30	; 48
 8f4:	11 f4       	brne	.+4      	; 0x8fa <vfprintf+0x2e4>
 8f6:	29 7e       	andi	r18, 0xE9	; 233
 8f8:	09 c0       	rjmp	.+18     	; 0x90c <vfprintf+0x2f6>
 8fa:	22 ff       	sbrs	r18, 2
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <vfprintf+0x2f4>
 8fe:	73 94       	inc	r7
 900:	73 94       	inc	r7
 902:	04 c0       	rjmp	.+8      	; 0x90c <vfprintf+0x2f6>
 904:	82 2f       	mov	r24, r18
 906:	86 78       	andi	r24, 0x86	; 134
 908:	09 f0       	breq	.+2      	; 0x90c <vfprintf+0x2f6>
 90a:	73 94       	inc	r7
 90c:	23 fd       	sbrc	r18, 3
 90e:	12 c0       	rjmp	.+36     	; 0x934 <vfprintf+0x31e>
 910:	20 ff       	sbrs	r18, 0
 912:	06 c0       	rjmp	.+12     	; 0x920 <vfprintf+0x30a>
 914:	5a 2c       	mov	r5, r10
 916:	73 14       	cp	r7, r3
 918:	18 f4       	brcc	.+6      	; 0x920 <vfprintf+0x30a>
 91a:	53 0c       	add	r5, r3
 91c:	57 18       	sub	r5, r7
 91e:	73 2c       	mov	r7, r3
 920:	73 14       	cp	r7, r3
 922:	60 f4       	brcc	.+24     	; 0x93c <vfprintf+0x326>
 924:	b7 01       	movw	r22, r14
 926:	80 e2       	ldi	r24, 0x20	; 32
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	2c 87       	std	Y+12, r18	; 0x0c
 92c:	c0 d1       	rcall	.+896    	; 0xcae <fputc>
 92e:	73 94       	inc	r7
 930:	2c 85       	ldd	r18, Y+12	; 0x0c
 932:	f6 cf       	rjmp	.-20     	; 0x920 <vfprintf+0x30a>
 934:	73 14       	cp	r7, r3
 936:	10 f4       	brcc	.+4      	; 0x93c <vfprintf+0x326>
 938:	37 18       	sub	r3, r7
 93a:	01 c0       	rjmp	.+2      	; 0x93e <vfprintf+0x328>
 93c:	31 2c       	mov	r3, r1
 93e:	24 ff       	sbrs	r18, 4
 940:	11 c0       	rjmp	.+34     	; 0x964 <vfprintf+0x34e>
 942:	b7 01       	movw	r22, r14
 944:	80 e3       	ldi	r24, 0x30	; 48
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	2c 87       	std	Y+12, r18	; 0x0c
 94a:	b1 d1       	rcall	.+866    	; 0xcae <fputc>
 94c:	2c 85       	ldd	r18, Y+12	; 0x0c
 94e:	22 ff       	sbrs	r18, 2
 950:	16 c0       	rjmp	.+44     	; 0x97e <vfprintf+0x368>
 952:	21 ff       	sbrs	r18, 1
 954:	03 c0       	rjmp	.+6      	; 0x95c <vfprintf+0x346>
 956:	88 e5       	ldi	r24, 0x58	; 88
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	02 c0       	rjmp	.+4      	; 0x960 <vfprintf+0x34a>
 95c:	88 e7       	ldi	r24, 0x78	; 120
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	b7 01       	movw	r22, r14
 962:	0c c0       	rjmp	.+24     	; 0x97c <vfprintf+0x366>
 964:	82 2f       	mov	r24, r18
 966:	86 78       	andi	r24, 0x86	; 134
 968:	51 f0       	breq	.+20     	; 0x97e <vfprintf+0x368>
 96a:	21 fd       	sbrc	r18, 1
 96c:	02 c0       	rjmp	.+4      	; 0x972 <vfprintf+0x35c>
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	01 c0       	rjmp	.+2      	; 0x974 <vfprintf+0x35e>
 972:	8b e2       	ldi	r24, 0x2B	; 43
 974:	27 fd       	sbrc	r18, 7
 976:	8d e2       	ldi	r24, 0x2D	; 45
 978:	b7 01       	movw	r22, r14
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	98 d1       	rcall	.+816    	; 0xcae <fputc>
 97e:	a5 14       	cp	r10, r5
 980:	30 f4       	brcc	.+12     	; 0x98e <vfprintf+0x378>
 982:	b7 01       	movw	r22, r14
 984:	80 e3       	ldi	r24, 0x30	; 48
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	92 d1       	rcall	.+804    	; 0xcae <fputc>
 98a:	5a 94       	dec	r5
 98c:	f8 cf       	rjmp	.-16     	; 0x97e <vfprintf+0x368>
 98e:	aa 94       	dec	r10
 990:	f4 01       	movw	r30, r8
 992:	ea 0d       	add	r30, r10
 994:	f1 1d       	adc	r31, r1
 996:	80 81       	ld	r24, Z
 998:	b7 01       	movw	r22, r14
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	88 d1       	rcall	.+784    	; 0xcae <fputc>
 99e:	a1 10       	cpse	r10, r1
 9a0:	f6 cf       	rjmp	.-20     	; 0x98e <vfprintf+0x378>
 9a2:	33 20       	and	r3, r3
 9a4:	09 f4       	brne	.+2      	; 0x9a8 <vfprintf+0x392>
 9a6:	5d ce       	rjmp	.-838    	; 0x662 <vfprintf+0x4c>
 9a8:	b7 01       	movw	r22, r14
 9aa:	80 e2       	ldi	r24, 0x20	; 32
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	7f d1       	rcall	.+766    	; 0xcae <fputc>
 9b0:	3a 94       	dec	r3
 9b2:	f7 cf       	rjmp	.-18     	; 0x9a2 <vfprintf+0x38c>
 9b4:	f7 01       	movw	r30, r14
 9b6:	86 81       	ldd	r24, Z+6	; 0x06
 9b8:	97 81       	ldd	r25, Z+7	; 0x07
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <vfprintf+0x3aa>
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	2c 96       	adiw	r28, 0x0c	; 12
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	de bf       	out	0x3e, r29	; 62
 9c8:	0f be       	out	0x3f, r0	; 63
 9ca:	cd bf       	out	0x3d, r28	; 61
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	ff 90       	pop	r15
 9d6:	ef 90       	pop	r14
 9d8:	df 90       	pop	r13
 9da:	cf 90       	pop	r12
 9dc:	bf 90       	pop	r11
 9de:	af 90       	pop	r10
 9e0:	9f 90       	pop	r9
 9e2:	8f 90       	pop	r8
 9e4:	7f 90       	pop	r7
 9e6:	6f 90       	pop	r6
 9e8:	5f 90       	pop	r5
 9ea:	4f 90       	pop	r4
 9ec:	3f 90       	pop	r3
 9ee:	2f 90       	pop	r2
 9f0:	08 95       	ret

000009f2 <calloc>:
 9f2:	0f 93       	push	r16
 9f4:	1f 93       	push	r17
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	86 9f       	mul	r24, r22
 9fc:	80 01       	movw	r16, r0
 9fe:	87 9f       	mul	r24, r23
 a00:	10 0d       	add	r17, r0
 a02:	96 9f       	mul	r25, r22
 a04:	10 0d       	add	r17, r0
 a06:	11 24       	eor	r1, r1
 a08:	c8 01       	movw	r24, r16
 a0a:	0d d0       	rcall	.+26     	; 0xa26 <malloc>
 a0c:	ec 01       	movw	r28, r24
 a0e:	00 97       	sbiw	r24, 0x00	; 0
 a10:	21 f0       	breq	.+8      	; 0xa1a <calloc+0x28>
 a12:	a8 01       	movw	r20, r16
 a14:	60 e0       	ldi	r22, 0x00	; 0
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	38 d1       	rcall	.+624    	; 0xc8a <memset>
 a1a:	ce 01       	movw	r24, r28
 a1c:	df 91       	pop	r29
 a1e:	cf 91       	pop	r28
 a20:	1f 91       	pop	r17
 a22:	0f 91       	pop	r16
 a24:	08 95       	ret

00000a26 <malloc>:
 a26:	cf 93       	push	r28
 a28:	df 93       	push	r29
 a2a:	82 30       	cpi	r24, 0x02	; 2
 a2c:	91 05       	cpc	r25, r1
 a2e:	10 f4       	brcc	.+4      	; 0xa34 <malloc+0xe>
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	e0 91 c1 02 	lds	r30, 0x02C1
 a38:	f0 91 c2 02 	lds	r31, 0x02C2
 a3c:	20 e0       	ldi	r18, 0x00	; 0
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	a0 e0       	ldi	r26, 0x00	; 0
 a42:	b0 e0       	ldi	r27, 0x00	; 0
 a44:	30 97       	sbiw	r30, 0x00	; 0
 a46:	39 f1       	breq	.+78     	; 0xa96 <malloc+0x70>
 a48:	40 81       	ld	r20, Z
 a4a:	51 81       	ldd	r21, Z+1	; 0x01
 a4c:	48 17       	cp	r20, r24
 a4e:	59 07       	cpc	r21, r25
 a50:	b8 f0       	brcs	.+46     	; 0xa80 <malloc+0x5a>
 a52:	48 17       	cp	r20, r24
 a54:	59 07       	cpc	r21, r25
 a56:	71 f4       	brne	.+28     	; 0xa74 <malloc+0x4e>
 a58:	82 81       	ldd	r24, Z+2	; 0x02
 a5a:	93 81       	ldd	r25, Z+3	; 0x03
 a5c:	10 97       	sbiw	r26, 0x00	; 0
 a5e:	29 f0       	breq	.+10     	; 0xa6a <malloc+0x44>
 a60:	13 96       	adiw	r26, 0x03	; 3
 a62:	9c 93       	st	X, r25
 a64:	8e 93       	st	-X, r24
 a66:	12 97       	sbiw	r26, 0x02	; 2
 a68:	2c c0       	rjmp	.+88     	; 0xac2 <malloc+0x9c>
 a6a:	90 93 c2 02 	sts	0x02C2, r25
 a6e:	80 93 c1 02 	sts	0x02C1, r24
 a72:	27 c0       	rjmp	.+78     	; 0xac2 <malloc+0x9c>
 a74:	21 15       	cp	r18, r1
 a76:	31 05       	cpc	r19, r1
 a78:	31 f0       	breq	.+12     	; 0xa86 <malloc+0x60>
 a7a:	42 17       	cp	r20, r18
 a7c:	53 07       	cpc	r21, r19
 a7e:	18 f0       	brcs	.+6      	; 0xa86 <malloc+0x60>
 a80:	a9 01       	movw	r20, r18
 a82:	db 01       	movw	r26, r22
 a84:	01 c0       	rjmp	.+2      	; 0xa88 <malloc+0x62>
 a86:	ef 01       	movw	r28, r30
 a88:	9a 01       	movw	r18, r20
 a8a:	bd 01       	movw	r22, r26
 a8c:	df 01       	movw	r26, r30
 a8e:	02 80       	ldd	r0, Z+2	; 0x02
 a90:	f3 81       	ldd	r31, Z+3	; 0x03
 a92:	e0 2d       	mov	r30, r0
 a94:	d7 cf       	rjmp	.-82     	; 0xa44 <malloc+0x1e>
 a96:	21 15       	cp	r18, r1
 a98:	31 05       	cpc	r19, r1
 a9a:	f9 f0       	breq	.+62     	; 0xada <malloc+0xb4>
 a9c:	28 1b       	sub	r18, r24
 a9e:	39 0b       	sbc	r19, r25
 aa0:	24 30       	cpi	r18, 0x04	; 4
 aa2:	31 05       	cpc	r19, r1
 aa4:	80 f4       	brcc	.+32     	; 0xac6 <malloc+0xa0>
 aa6:	8a 81       	ldd	r24, Y+2	; 0x02
 aa8:	9b 81       	ldd	r25, Y+3	; 0x03
 aaa:	61 15       	cp	r22, r1
 aac:	71 05       	cpc	r23, r1
 aae:	21 f0       	breq	.+8      	; 0xab8 <malloc+0x92>
 ab0:	fb 01       	movw	r30, r22
 ab2:	93 83       	std	Z+3, r25	; 0x03
 ab4:	82 83       	std	Z+2, r24	; 0x02
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <malloc+0x9a>
 ab8:	90 93 c2 02 	sts	0x02C2, r25
 abc:	80 93 c1 02 	sts	0x02C1, r24
 ac0:	fe 01       	movw	r30, r28
 ac2:	32 96       	adiw	r30, 0x02	; 2
 ac4:	44 c0       	rjmp	.+136    	; 0xb4e <malloc+0x128>
 ac6:	fe 01       	movw	r30, r28
 ac8:	e2 0f       	add	r30, r18
 aca:	f3 1f       	adc	r31, r19
 acc:	81 93       	st	Z+, r24
 ace:	91 93       	st	Z+, r25
 ad0:	22 50       	subi	r18, 0x02	; 2
 ad2:	31 09       	sbc	r19, r1
 ad4:	39 83       	std	Y+1, r19	; 0x01
 ad6:	28 83       	st	Y, r18
 ad8:	3a c0       	rjmp	.+116    	; 0xb4e <malloc+0x128>
 ada:	20 91 bf 02 	lds	r18, 0x02BF
 ade:	30 91 c0 02 	lds	r19, 0x02C0
 ae2:	23 2b       	or	r18, r19
 ae4:	41 f4       	brne	.+16     	; 0xaf6 <malloc+0xd0>
 ae6:	20 91 02 02 	lds	r18, 0x0202
 aea:	30 91 03 02 	lds	r19, 0x0203
 aee:	30 93 c0 02 	sts	0x02C0, r19
 af2:	20 93 bf 02 	sts	0x02BF, r18
 af6:	20 91 00 02 	lds	r18, 0x0200
 afa:	30 91 01 02 	lds	r19, 0x0201
 afe:	21 15       	cp	r18, r1
 b00:	31 05       	cpc	r19, r1
 b02:	41 f4       	brne	.+16     	; 0xb14 <malloc+0xee>
 b04:	2d b7       	in	r18, 0x3d	; 61
 b06:	3e b7       	in	r19, 0x3e	; 62
 b08:	40 91 04 02 	lds	r20, 0x0204
 b0c:	50 91 05 02 	lds	r21, 0x0205
 b10:	24 1b       	sub	r18, r20
 b12:	35 0b       	sbc	r19, r21
 b14:	e0 91 bf 02 	lds	r30, 0x02BF
 b18:	f0 91 c0 02 	lds	r31, 0x02C0
 b1c:	e2 17       	cp	r30, r18
 b1e:	f3 07       	cpc	r31, r19
 b20:	a0 f4       	brcc	.+40     	; 0xb4a <malloc+0x124>
 b22:	2e 1b       	sub	r18, r30
 b24:	3f 0b       	sbc	r19, r31
 b26:	28 17       	cp	r18, r24
 b28:	39 07       	cpc	r19, r25
 b2a:	78 f0       	brcs	.+30     	; 0xb4a <malloc+0x124>
 b2c:	ac 01       	movw	r20, r24
 b2e:	4e 5f       	subi	r20, 0xFE	; 254
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	24 17       	cp	r18, r20
 b34:	35 07       	cpc	r19, r21
 b36:	48 f0       	brcs	.+18     	; 0xb4a <malloc+0x124>
 b38:	4e 0f       	add	r20, r30
 b3a:	5f 1f       	adc	r21, r31
 b3c:	50 93 c0 02 	sts	0x02C0, r21
 b40:	40 93 bf 02 	sts	0x02BF, r20
 b44:	81 93       	st	Z+, r24
 b46:	91 93       	st	Z+, r25
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <malloc+0x128>
 b4a:	e0 e0       	ldi	r30, 0x00	; 0
 b4c:	f0 e0       	ldi	r31, 0x00	; 0
 b4e:	cf 01       	movw	r24, r30
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	08 95       	ret

00000b56 <free>:
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	00 97       	sbiw	r24, 0x00	; 0
 b5c:	09 f4       	brne	.+2      	; 0xb60 <free+0xa>
 b5e:	87 c0       	rjmp	.+270    	; 0xc6e <free+0x118>
 b60:	fc 01       	movw	r30, r24
 b62:	32 97       	sbiw	r30, 0x02	; 2
 b64:	13 82       	std	Z+3, r1	; 0x03
 b66:	12 82       	std	Z+2, r1	; 0x02
 b68:	c0 91 c1 02 	lds	r28, 0x02C1
 b6c:	d0 91 c2 02 	lds	r29, 0x02C2
 b70:	20 97       	sbiw	r28, 0x00	; 0
 b72:	81 f4       	brne	.+32     	; 0xb94 <free+0x3e>
 b74:	20 81       	ld	r18, Z
 b76:	31 81       	ldd	r19, Z+1	; 0x01
 b78:	28 0f       	add	r18, r24
 b7a:	39 1f       	adc	r19, r25
 b7c:	80 91 bf 02 	lds	r24, 0x02BF
 b80:	90 91 c0 02 	lds	r25, 0x02C0
 b84:	82 17       	cp	r24, r18
 b86:	93 07       	cpc	r25, r19
 b88:	79 f5       	brne	.+94     	; 0xbe8 <free+0x92>
 b8a:	f0 93 c0 02 	sts	0x02C0, r31
 b8e:	e0 93 bf 02 	sts	0x02BF, r30
 b92:	6d c0       	rjmp	.+218    	; 0xc6e <free+0x118>
 b94:	de 01       	movw	r26, r28
 b96:	20 e0       	ldi	r18, 0x00	; 0
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	ae 17       	cp	r26, r30
 b9c:	bf 07       	cpc	r27, r31
 b9e:	50 f4       	brcc	.+20     	; 0xbb4 <free+0x5e>
 ba0:	12 96       	adiw	r26, 0x02	; 2
 ba2:	4d 91       	ld	r20, X+
 ba4:	5c 91       	ld	r21, X
 ba6:	13 97       	sbiw	r26, 0x03	; 3
 ba8:	9d 01       	movw	r18, r26
 baa:	41 15       	cp	r20, r1
 bac:	51 05       	cpc	r21, r1
 bae:	09 f1       	breq	.+66     	; 0xbf2 <free+0x9c>
 bb0:	da 01       	movw	r26, r20
 bb2:	f3 cf       	rjmp	.-26     	; 0xb9a <free+0x44>
 bb4:	b3 83       	std	Z+3, r27	; 0x03
 bb6:	a2 83       	std	Z+2, r26	; 0x02
 bb8:	40 81       	ld	r20, Z
 bba:	51 81       	ldd	r21, Z+1	; 0x01
 bbc:	84 0f       	add	r24, r20
 bbe:	95 1f       	adc	r25, r21
 bc0:	8a 17       	cp	r24, r26
 bc2:	9b 07       	cpc	r25, r27
 bc4:	71 f4       	brne	.+28     	; 0xbe2 <free+0x8c>
 bc6:	8d 91       	ld	r24, X+
 bc8:	9c 91       	ld	r25, X
 bca:	11 97       	sbiw	r26, 0x01	; 1
 bcc:	84 0f       	add	r24, r20
 bce:	95 1f       	adc	r25, r21
 bd0:	02 96       	adiw	r24, 0x02	; 2
 bd2:	91 83       	std	Z+1, r25	; 0x01
 bd4:	80 83       	st	Z, r24
 bd6:	12 96       	adiw	r26, 0x02	; 2
 bd8:	8d 91       	ld	r24, X+
 bda:	9c 91       	ld	r25, X
 bdc:	13 97       	sbiw	r26, 0x03	; 3
 bde:	93 83       	std	Z+3, r25	; 0x03
 be0:	82 83       	std	Z+2, r24	; 0x02
 be2:	21 15       	cp	r18, r1
 be4:	31 05       	cpc	r19, r1
 be6:	29 f4       	brne	.+10     	; 0xbf2 <free+0x9c>
 be8:	f0 93 c2 02 	sts	0x02C2, r31
 bec:	e0 93 c1 02 	sts	0x02C1, r30
 bf0:	3e c0       	rjmp	.+124    	; 0xc6e <free+0x118>
 bf2:	d9 01       	movw	r26, r18
 bf4:	13 96       	adiw	r26, 0x03	; 3
 bf6:	fc 93       	st	X, r31
 bf8:	ee 93       	st	-X, r30
 bfa:	12 97       	sbiw	r26, 0x02	; 2
 bfc:	4d 91       	ld	r20, X+
 bfe:	5d 91       	ld	r21, X+
 c00:	a4 0f       	add	r26, r20
 c02:	b5 1f       	adc	r27, r21
 c04:	ea 17       	cp	r30, r26
 c06:	fb 07       	cpc	r31, r27
 c08:	79 f4       	brne	.+30     	; 0xc28 <free+0xd2>
 c0a:	80 81       	ld	r24, Z
 c0c:	91 81       	ldd	r25, Z+1	; 0x01
 c0e:	84 0f       	add	r24, r20
 c10:	95 1f       	adc	r25, r21
 c12:	02 96       	adiw	r24, 0x02	; 2
 c14:	d9 01       	movw	r26, r18
 c16:	11 96       	adiw	r26, 0x01	; 1
 c18:	9c 93       	st	X, r25
 c1a:	8e 93       	st	-X, r24
 c1c:	82 81       	ldd	r24, Z+2	; 0x02
 c1e:	93 81       	ldd	r25, Z+3	; 0x03
 c20:	13 96       	adiw	r26, 0x03	; 3
 c22:	9c 93       	st	X, r25
 c24:	8e 93       	st	-X, r24
 c26:	12 97       	sbiw	r26, 0x02	; 2
 c28:	e0 e0       	ldi	r30, 0x00	; 0
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	8a 81       	ldd	r24, Y+2	; 0x02
 c2e:	9b 81       	ldd	r25, Y+3	; 0x03
 c30:	00 97       	sbiw	r24, 0x00	; 0
 c32:	19 f0       	breq	.+6      	; 0xc3a <free+0xe4>
 c34:	fe 01       	movw	r30, r28
 c36:	ec 01       	movw	r28, r24
 c38:	f9 cf       	rjmp	.-14     	; 0xc2c <free+0xd6>
 c3a:	ce 01       	movw	r24, r28
 c3c:	02 96       	adiw	r24, 0x02	; 2
 c3e:	28 81       	ld	r18, Y
 c40:	39 81       	ldd	r19, Y+1	; 0x01
 c42:	82 0f       	add	r24, r18
 c44:	93 1f       	adc	r25, r19
 c46:	20 91 bf 02 	lds	r18, 0x02BF
 c4a:	30 91 c0 02 	lds	r19, 0x02C0
 c4e:	28 17       	cp	r18, r24
 c50:	39 07       	cpc	r19, r25
 c52:	69 f4       	brne	.+26     	; 0xc6e <free+0x118>
 c54:	30 97       	sbiw	r30, 0x00	; 0
 c56:	29 f4       	brne	.+10     	; 0xc62 <free+0x10c>
 c58:	10 92 c2 02 	sts	0x02C2, r1
 c5c:	10 92 c1 02 	sts	0x02C1, r1
 c60:	02 c0       	rjmp	.+4      	; 0xc66 <free+0x110>
 c62:	13 82       	std	Z+3, r1	; 0x03
 c64:	12 82       	std	Z+2, r1	; 0x02
 c66:	d0 93 c0 02 	sts	0x02C0, r29
 c6a:	c0 93 bf 02 	sts	0x02BF, r28
 c6e:	df 91       	pop	r29
 c70:	cf 91       	pop	r28
 c72:	08 95       	ret

00000c74 <strnlen_P>:
 c74:	fc 01       	movw	r30, r24
 c76:	05 90       	lpm	r0, Z+
 c78:	61 50       	subi	r22, 0x01	; 1
 c7a:	70 40       	sbci	r23, 0x00	; 0
 c7c:	01 10       	cpse	r0, r1
 c7e:	d8 f7       	brcc	.-10     	; 0xc76 <strnlen_P+0x2>
 c80:	80 95       	com	r24
 c82:	90 95       	com	r25
 c84:	8e 0f       	add	r24, r30
 c86:	9f 1f       	adc	r25, r31
 c88:	08 95       	ret

00000c8a <memset>:
 c8a:	dc 01       	movw	r26, r24
 c8c:	01 c0       	rjmp	.+2      	; 0xc90 <memset+0x6>
 c8e:	6d 93       	st	X+, r22
 c90:	41 50       	subi	r20, 0x01	; 1
 c92:	50 40       	sbci	r21, 0x00	; 0
 c94:	e0 f7       	brcc	.-8      	; 0xc8e <memset+0x4>
 c96:	08 95       	ret

00000c98 <strnlen>:
 c98:	fc 01       	movw	r30, r24
 c9a:	61 50       	subi	r22, 0x01	; 1
 c9c:	70 40       	sbci	r23, 0x00	; 0
 c9e:	01 90       	ld	r0, Z+
 ca0:	01 10       	cpse	r0, r1
 ca2:	d8 f7       	brcc	.-10     	; 0xc9a <strnlen+0x2>
 ca4:	80 95       	com	r24
 ca6:	90 95       	com	r25
 ca8:	8e 0f       	add	r24, r30
 caa:	9f 1f       	adc	r25, r31
 cac:	08 95       	ret

00000cae <fputc>:
 cae:	0f 93       	push	r16
 cb0:	1f 93       	push	r17
 cb2:	cf 93       	push	r28
 cb4:	df 93       	push	r29
 cb6:	18 2f       	mov	r17, r24
 cb8:	09 2f       	mov	r16, r25
 cba:	eb 01       	movw	r28, r22
 cbc:	8b 81       	ldd	r24, Y+3	; 0x03
 cbe:	81 fd       	sbrc	r24, 1
 cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <fputc+0x1a>
 cc2:	8f ef       	ldi	r24, 0xFF	; 255
 cc4:	9f ef       	ldi	r25, 0xFF	; 255
 cc6:	20 c0       	rjmp	.+64     	; 0xd08 <fputc+0x5a>
 cc8:	82 ff       	sbrs	r24, 2
 cca:	10 c0       	rjmp	.+32     	; 0xcec <fputc+0x3e>
 ccc:	4e 81       	ldd	r20, Y+6	; 0x06
 cce:	5f 81       	ldd	r21, Y+7	; 0x07
 cd0:	2c 81       	ldd	r18, Y+4	; 0x04
 cd2:	3d 81       	ldd	r19, Y+5	; 0x05
 cd4:	42 17       	cp	r20, r18
 cd6:	53 07       	cpc	r21, r19
 cd8:	7c f4       	brge	.+30     	; 0xcf8 <fputc+0x4a>
 cda:	e8 81       	ld	r30, Y
 cdc:	f9 81       	ldd	r31, Y+1	; 0x01
 cde:	9f 01       	movw	r18, r30
 ce0:	2f 5f       	subi	r18, 0xFF	; 255
 ce2:	3f 4f       	sbci	r19, 0xFF	; 255
 ce4:	39 83       	std	Y+1, r19	; 0x01
 ce6:	28 83       	st	Y, r18
 ce8:	10 83       	st	Z, r17
 cea:	06 c0       	rjmp	.+12     	; 0xcf8 <fputc+0x4a>
 cec:	e8 85       	ldd	r30, Y+8	; 0x08
 cee:	f9 85       	ldd	r31, Y+9	; 0x09
 cf0:	81 2f       	mov	r24, r17
 cf2:	19 95       	eicall
 cf4:	89 2b       	or	r24, r25
 cf6:	29 f7       	brne	.-54     	; 0xcc2 <fputc+0x14>
 cf8:	2e 81       	ldd	r18, Y+6	; 0x06
 cfa:	3f 81       	ldd	r19, Y+7	; 0x07
 cfc:	2f 5f       	subi	r18, 0xFF	; 255
 cfe:	3f 4f       	sbci	r19, 0xFF	; 255
 d00:	3f 83       	std	Y+7, r19	; 0x07
 d02:	2e 83       	std	Y+6, r18	; 0x06
 d04:	81 2f       	mov	r24, r17
 d06:	90 2f       	mov	r25, r16
 d08:	df 91       	pop	r29
 d0a:	cf 91       	pop	r28
 d0c:	1f 91       	pop	r17
 d0e:	0f 91       	pop	r16
 d10:	08 95       	ret

00000d12 <__ultoa_invert>:
 d12:	fa 01       	movw	r30, r20
 d14:	aa 27       	eor	r26, r26
 d16:	28 30       	cpi	r18, 0x08	; 8
 d18:	51 f1       	breq	.+84     	; 0xd6e <__ultoa_invert+0x5c>
 d1a:	20 31       	cpi	r18, 0x10	; 16
 d1c:	81 f1       	breq	.+96     	; 0xd7e <__ultoa_invert+0x6c>
 d1e:	e8 94       	clt
 d20:	6f 93       	push	r22
 d22:	6e 7f       	andi	r22, 0xFE	; 254
 d24:	6e 5f       	subi	r22, 0xFE	; 254
 d26:	7f 4f       	sbci	r23, 0xFF	; 255
 d28:	8f 4f       	sbci	r24, 0xFF	; 255
 d2a:	9f 4f       	sbci	r25, 0xFF	; 255
 d2c:	af 4f       	sbci	r26, 0xFF	; 255
 d2e:	b1 e0       	ldi	r27, 0x01	; 1
 d30:	3e d0       	rcall	.+124    	; 0xdae <__ultoa_invert+0x9c>
 d32:	b4 e0       	ldi	r27, 0x04	; 4
 d34:	3c d0       	rcall	.+120    	; 0xdae <__ultoa_invert+0x9c>
 d36:	67 0f       	add	r22, r23
 d38:	78 1f       	adc	r23, r24
 d3a:	89 1f       	adc	r24, r25
 d3c:	9a 1f       	adc	r25, r26
 d3e:	a1 1d       	adc	r26, r1
 d40:	68 0f       	add	r22, r24
 d42:	79 1f       	adc	r23, r25
 d44:	8a 1f       	adc	r24, r26
 d46:	91 1d       	adc	r25, r1
 d48:	a1 1d       	adc	r26, r1
 d4a:	6a 0f       	add	r22, r26
 d4c:	71 1d       	adc	r23, r1
 d4e:	81 1d       	adc	r24, r1
 d50:	91 1d       	adc	r25, r1
 d52:	a1 1d       	adc	r26, r1
 d54:	20 d0       	rcall	.+64     	; 0xd96 <__ultoa_invert+0x84>
 d56:	09 f4       	brne	.+2      	; 0xd5a <__ultoa_invert+0x48>
 d58:	68 94       	set
 d5a:	3f 91       	pop	r19
 d5c:	2a e0       	ldi	r18, 0x0A	; 10
 d5e:	26 9f       	mul	r18, r22
 d60:	11 24       	eor	r1, r1
 d62:	30 19       	sub	r19, r0
 d64:	30 5d       	subi	r19, 0xD0	; 208
 d66:	31 93       	st	Z+, r19
 d68:	de f6       	brtc	.-74     	; 0xd20 <__ultoa_invert+0xe>
 d6a:	cf 01       	movw	r24, r30
 d6c:	08 95       	ret
 d6e:	46 2f       	mov	r20, r22
 d70:	47 70       	andi	r20, 0x07	; 7
 d72:	40 5d       	subi	r20, 0xD0	; 208
 d74:	41 93       	st	Z+, r20
 d76:	b3 e0       	ldi	r27, 0x03	; 3
 d78:	0f d0       	rcall	.+30     	; 0xd98 <__ultoa_invert+0x86>
 d7a:	c9 f7       	brne	.-14     	; 0xd6e <__ultoa_invert+0x5c>
 d7c:	f6 cf       	rjmp	.-20     	; 0xd6a <__ultoa_invert+0x58>
 d7e:	46 2f       	mov	r20, r22
 d80:	4f 70       	andi	r20, 0x0F	; 15
 d82:	40 5d       	subi	r20, 0xD0	; 208
 d84:	4a 33       	cpi	r20, 0x3A	; 58
 d86:	18 f0       	brcs	.+6      	; 0xd8e <__ultoa_invert+0x7c>
 d88:	49 5d       	subi	r20, 0xD9	; 217
 d8a:	31 fd       	sbrc	r19, 1
 d8c:	40 52       	subi	r20, 0x20	; 32
 d8e:	41 93       	st	Z+, r20
 d90:	02 d0       	rcall	.+4      	; 0xd96 <__ultoa_invert+0x84>
 d92:	a9 f7       	brne	.-22     	; 0xd7e <__ultoa_invert+0x6c>
 d94:	ea cf       	rjmp	.-44     	; 0xd6a <__ultoa_invert+0x58>
 d96:	b4 e0       	ldi	r27, 0x04	; 4
 d98:	a6 95       	lsr	r26
 d9a:	97 95       	ror	r25
 d9c:	87 95       	ror	r24
 d9e:	77 95       	ror	r23
 da0:	67 95       	ror	r22
 da2:	ba 95       	dec	r27
 da4:	c9 f7       	brne	.-14     	; 0xd98 <__ultoa_invert+0x86>
 da6:	00 97       	sbiw	r24, 0x00	; 0
 da8:	61 05       	cpc	r22, r1
 daa:	71 05       	cpc	r23, r1
 dac:	08 95       	ret
 dae:	9b 01       	movw	r18, r22
 db0:	ac 01       	movw	r20, r24
 db2:	0a 2e       	mov	r0, r26
 db4:	06 94       	lsr	r0
 db6:	57 95       	ror	r21
 db8:	47 95       	ror	r20
 dba:	37 95       	ror	r19
 dbc:	27 95       	ror	r18
 dbe:	ba 95       	dec	r27
 dc0:	c9 f7       	brne	.-14     	; 0xdb4 <__ultoa_invert+0xa2>
 dc2:	62 0f       	add	r22, r18
 dc4:	73 1f       	adc	r23, r19
 dc6:	84 1f       	adc	r24, r20
 dc8:	95 1f       	adc	r25, r21
 dca:	a0 1d       	adc	r26, r0
 dcc:	08 95       	ret

00000dce <_exit>:
 dce:	f8 94       	cli

00000dd0 <__stop_program>:
 dd0:	ff cf       	rjmp	.-2      	; 0xdd0 <__stop_program>
