
latch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000145  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d3  00000000  00000000  000002b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000168  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000169  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:


int main(void)
{
	// port A is output
	DDRA = 0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	// port E is output (contains pin PE1, which is ALE)
	// ALE = Address Latch Enable
	DDRE = 0xFF;
  8c:	86 b9       	out	0x06, r24	; 6
	PORTE |= (1 <<PE1);
  8e:	39 9a       	sbi	0x07, 1	; 7
	
	while(1)
	{
		// test the latch by setting each pin (AD0-AD7) and ALE (enable)
		PORTA |= (1 << PA0)|(1 << PA1)|(1 << PA2)|(1 << PA3)|(1 << PA4)|(1 << PA5)|(1 << PA6)|(1 << PA7);
  90:	9b b3       	in	r25, 0x1b	; 27
  92:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	3f ef       	ldi	r19, 0xFF	; 255
  98:	9e e0       	ldi	r25, 0x0E	; 14
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	30 40       	sbci	r19, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x12>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x1c>
  a4:	00 00       	nop

		
		_delay_ms(1000);
		
		PORTA &= ~(1 << PA0);
  a6:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &= ~(1 << PA1);
  a8:	d9 98       	cbi	0x1b, 1	; 27
		PORTA &= ~(1 << PA2);
  aa:	da 98       	cbi	0x1b, 2	; 27
		PORTA &= ~(1 << PA3);
  ac:	db 98       	cbi	0x1b, 3	; 27
		PORTA &= ~(1 << PA4);
  ae:	dc 98       	cbi	0x1b, 4	; 27
		PORTA &= ~(1 << PA5);
  b0:	dd 98       	cbi	0x1b, 5	; 27
		PORTA &= ~(1 << PA6);
  b2:	de 98       	cbi	0x1b, 6	; 27
		PORTA &= ~(1 << PA7);
  b4:	df 98       	cbi	0x1b, 7	; 27
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	3f ef       	ldi	r19, 0xFF	; 255
  ba:	9e e0       	ldi	r25, 0x0E	; 14
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x34>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x3e>
  c6:	00 00       	nop
  c8:	e3 cf       	rjmp	.-58     	; 0x90 <main+0x8>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
