
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d6  00800100  00002aa6  00002b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  008003d6  008003d6  00002e10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000498  00000000  00000000  00002e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003f92  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000193f  00000000  00000000  00007296  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b62  00000000  00000000  00008bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ba4  00000000  00000000  0000a738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d30  00000000  00000000  0000b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002111  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000388  00000000  00000000  0000e11d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__ctors_end>
       4:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_1>
       8:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
       c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      10:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      14:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      18:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      1c:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_7>
      20:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      24:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      28:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_10>
      2c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      30:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      34:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_13>
      38:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      3c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      40:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      44:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      48:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      4c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      50:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      54:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      58:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      5c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      60:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      64:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      68:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      6c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	0c 0c       	add	r0, r12
      72:	0c 0c       	add	r0, r12
      74:	0c 0c       	add	r0, r12
      76:	0c 0c       	add	r0, r12
      78:	0c 0c       	add	r0, r12
      7a:	0c 0c       	add	r0, r12
      7c:	0c 0c       	add	r0, r12
      7e:	0c 0c       	add	r0, r12
      80:	0c 0c       	add	r0, r12
      82:	0c 0c       	add	r0, r12
      84:	0c 0c       	add	r0, r12
      86:	0c 0c       	add	r0, r12
      88:	0c 0c       	add	r0, r12
      8a:	0c 0c       	add	r0, r12
      8c:	0c 0c       	add	r0, r12
      8e:	0c 0c       	add	r0, r12
      90:	09 09       	sbc	r16, r9
      92:	09 0c       	add	r0, r9
      94:	0c 0c       	add	r0, r12
      96:	0c 0c       	add	r0, r12
      98:	0c 0c       	add	r0, r12
      9a:	0c 0c       	add	r0, r12
      9c:	0c 0c       	add	r0, r12
      9e:	0c 0c       	add	r0, r12
      a0:	0c 0c       	add	r0, r12
      a2:	0c 0c       	add	r0, r12
      a4:	0c 0c       	add	r0, r12
      a6:	0c 0c       	add	r0, r12
      a8:	0c 0c       	add	r0, r12
      aa:	0c 0c       	add	r0, r12
      ac:	0c 0c       	add	r0, r12
      ae:	0c 09       	sbc	r16, r12
      b0:	09 09       	sbc	r16, r9
      b2:	0c 0c       	add	r0, r12
      b4:	0c 0c       	add	r0, r12
      b6:	0c 0c       	add	r0, r12
      b8:	0c 0c       	add	r0, r12
      ba:	0c 0c       	add	r0, r12
      bc:	0c 0c       	add	r0, r12
      be:	00 00       	nop
      c0:	32 32       	cpi	r19, 0x22	; 34
      c2:	32 23       	and	r19, r18
      c4:	0f 32       	cpi	r16, 0x2F	; 47
      c6:	23 0f       	add	r18, r19
      c8:	41 32       	cpi	r20, 0x21	; 33
      ca:	32 32       	cpi	r19, 0x22	; 34
      cc:	32 23       	and	r19, r18
      ce:	0f 32       	cpi	r16, 0x2F	; 47
      d0:	23 0f       	add	r18, r19
      d2:	41 32       	cpi	r20, 0x21	; 33
      d4:	32 1e       	adc	r3, r18
      d6:	0f 32       	cpi	r16, 0x2F	; 47
      d8:	20 11       	cpse	r18, r0
      da:	0c 0c       	add	r0, r12
      dc:	19 20       	and	r1, r9
      de:	19 32       	cpi	r17, 0x29	; 41
      e0:	20 11       	cpse	r18, r0
      e2:	0c 0c       	add	r0, r12
      e4:	19 23       	and	r17, r25
      e6:	19 32       	cpi	r17, 0x29	; 41
      e8:	23 0c       	add	r2, r3
      ea:	32 25       	eor	r19, r2
      ec:	0c 41       	sbci	r16, 0x1C	; 28
      ee:	32 32       	cpi	r19, 0x22	; 34
      f0:	1e 0f       	add	r17, r30
      f2:	32 20       	and	r3, r2
      f4:	11 0c       	add	r1, r1
      f6:	0c 19       	sub	r16, r12
      f8:	20 19       	sub	r18, r0
      fa:	32 20       	and	r3, r2
      fc:	11 0c       	add	r1, r1
      fe:	0c 19       	sub	r16, r12
     100:	23 19       	sub	r18, r3
     102:	32 25       	eor	r19, r2
     104:	0c 32       	cpi	r16, 0x2C	; 44
     106:	25 0c       	add	r2, r5
     108:	41 41       	sbci	r20, 0x11	; 17
     10a:	00 00       	nop
     10c:	00 00       	nop
	...

00000110 <frequency>:
     110:	00 c0 24 44 00 c0 24 44 00 00 00 00 00 c0 24 44     ..$D..$D......$D
     120:	00 00 00 00 00 c0 02 44 00 c0 24 44 00 00 00 00     .......D..$D....
     130:	00 00 44 44 00 00 00 00 00 00 00 00 00 00 00 00     ..DD............
     140:	00 00 c4 43 00 00 00 00 00 00 00 00 00 00 00 00     ...C............
     150:	00 c0 02 44 00 00 00 00 00 00 00 00 00 00 c4 43     ...D...........C
	...
     168:	00 00 a5 43 00 00 00 00 00 00 00 00 00 00 dc 43     ...C...........C
     178:	00 00 00 00 00 00 f7 43 00 00 00 00 00 00 e9 43     .......C.......C
     188:	00 00 dc 43 00 00 00 00 00 00 c4 43 00 c0 24 44     ...C.......C..$D
     198:	00 00 44 44 00 00 5c 44 00 00 00 00 00 80 2e 44     ..DD..\D.......D
     1a8:	00 00 44 44 00 00 00 00 00 c0 24 44 00 00 00 00     ..DD......$D....
     1b8:	00 c0 02 44 00 c0 12 44 00 00 f7 43 00 00 00 00     ...D...D...C....
     1c8:	00 00 00 00 00 c0 02 44 00 00 00 00 00 00 00 00     .......D........
     1d8:	00 00 c4 43 00 00 00 00 00 00 00 00 00 00 a5 43     ...C...........C
	...
     1f0:	00 00 dc 43 00 00 00 00 00 00 f7 43 00 00 00 00     ...C.......C....
     200:	00 00 e9 43 00 00 dc 43 00 00 00 00 00 00 c4 43     ...C...C.......C
     210:	00 c0 24 44 00 00 44 44 00 00 5c 44 00 00 00 00     ..$D..DD..\D....
     220:	00 80 2e 44 00 00 44 44 00 00 00 00 00 c0 24 44     ...D..DD......$D
     230:	00 00 00 00 00 c0 02 44 00 c0 12 44 00 00 f7 43     .......D...D...C
	...
     250:	00 00 dc 43 00 00 dc 43 00 00 dc 43 00 80 ae 43     ...C...C...C...C
     260:	00 c0 02 44 00 00 dc 43 00 80 ae 43 00 c0 02 44     ...D...C...C...D
     270:	00 00 dc 43 00 00 00 00 00 c0 24 44 00 c0 24 44     ...C......$D..$D
     280:	00 c0 24 44 00 80 2e 44 00 c0 02 44 00 80 cf 43     ..$D...D...D...C
     290:	00 80 ae 43 00 c0 02 44 00 00 dc 43 00 00 00 00     ...C...D...C....
     2a0:	00 00 5c 44 00 00 dc 43 00 00 dc 43 00 00 5c 44     ..\D...C...C..\D
     2b0:	00 c0 4f 44 00 00 44 44 00 00 39 44 00 80 2e 44     ..OD..DD..9D...D
     2c0:	00 00 39 44 00 00 00 00 00 00 e9 43 00 80 1b 44     ..9D.......C...D
     2d0:	00 c0 12 44 00 80 0a 44 00 c0 02 44 00 00 f7 43     ...D...D...D...C
     2e0:	00 c0 02 44 00 00 00 00 00 80 ae 43 00 80 cf 43     ...D.......C...C
     2f0:	00 80 ae 43 00 00 dc 43 00 c0 02 44 00 00 dc 43     ...C...C...D...C
     300:	00 c0 02 44 00 c0 24 44 00 00 00 00 00 00 5c 44     ...D..$D......\D
     310:	00 00 dc 43 00 00 dc 43 00 00 5c 44 00 c0 4f 44     ...C...C..\D..OD
     320:	00 00 44 44 00 00 39 44 00 80 2e 44 00 00 39 44     ..DD..9D...D..9D
     330:	00 00 00 00 00 00 e9 43 00 80 1b 44 00 c0 12 44     .......C...D...D
     340:	00 80 0a 44 00 c0 02 44 00 00 f7 43 00 c0 02 44     ...D...D...C...D
     350:	00 00 00 00 00 80 ae 43 00 80 cf 43 00 80 ae 43     .......C...C...C
     360:	00 c0 02 44 00 00 dc 43 00 80 ae 43 00 c0 02 44     ...D...C...C...D
     370:	00 00 dc 43 00 00 00 00 00 00 00 00 00 00 00 00     ...C............
	...

00000390 <font5>:
     390:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     3a0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     3b0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     3c0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     3d0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     3e0:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     3f0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     400:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     410:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     420:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     430:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     440:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     450:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     460:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     470:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     480:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     490:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     4a0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     4b0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     4c0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     4d0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     4e0:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     4f0:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     500:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     510:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     520:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     530:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     540:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     550:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     560:	00 00 41 36 08 00 02 01 03 02 01 00                 ..A6........

0000056c <__ctors_end>:
     56c:	11 24       	eor	r1, r1
     56e:	1f be       	out	0x3f, r1	; 63
     570:	cf ef       	ldi	r28, 0xFF	; 255
     572:	d4 e0       	ldi	r29, 0x04	; 4
     574:	de bf       	out	0x3e, r29	; 62
     576:	cd bf       	out	0x3d, r28	; 61

00000578 <__do_copy_data>:
     578:	13 e0       	ldi	r17, 0x03	; 3
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b1 e0       	ldi	r27, 0x01	; 1
     57e:	e6 ea       	ldi	r30, 0xA6	; 166
     580:	fa e2       	ldi	r31, 0x2A	; 42
     582:	02 c0       	rjmp	.+4      	; 0x588 <__do_copy_data+0x10>
     584:	05 90       	lpm	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	a6 3d       	cpi	r26, 0xD6	; 214
     58a:	b1 07       	cpc	r27, r17
     58c:	d9 f7       	brne	.-10     	; 0x584 <__do_copy_data+0xc>

0000058e <__do_clear_bss>:
     58e:	24 e0       	ldi	r18, 0x04	; 4
     590:	a6 ed       	ldi	r26, 0xD6	; 214
     592:	b3 e0       	ldi	r27, 0x03	; 3
     594:	01 c0       	rjmp	.+2      	; 0x598 <.do_clear_bss_start>

00000596 <.do_clear_bss_loop>:
     596:	1d 92       	st	X+, r1

00000598 <.do_clear_bss_start>:
     598:	a2 30       	cpi	r26, 0x02	; 2
     59a:	b2 07       	cpc	r27, r18
     59c:	e1 f7       	brne	.-8      	; 0x596 <.do_clear_bss_loop>
     59e:	0e 94 36 0c 	call	0x186c	; 0x186c <main>
     5a2:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <_exit>

000005a6 <__bad_interrupt>:
     5a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005aa <CAN_init>:
enum interrupt_flags interrupt_flag = no_flag; 


int CAN_init()
{
	MCP_init();
     5aa:	0e 94 1d 04 	call	0x83a	; 0x83a <MCP_init>
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     5ae:	40 e6       	ldi	r20, 0x60	; 96
     5b0:	60 e6       	ldi	r22, 0x60	; 96
     5b2:	80 e6       	ldi	r24, 0x60	; 96
     5b4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     5b8:	40 e6       	ldi	r20, 0x60	; 96
     5ba:	60 e6       	ldi	r22, 0x60	; 96
     5bc:	80 e7       	ldi	r24, 0x70	; 112
     5be:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     5c2:	44 e0       	ldi	r20, 0x04	; 4
     5c4:	64 e0       	ldi	r22, 0x04	; 4
     5c6:	80 e6       	ldi	r24, 0x60	; 96
     5c8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     5cc:	44 e0       	ldi	r20, 0x04	; 4
     5ce:	64 e0       	ldi	r22, 0x04	; 4
     5d0:	80 e7       	ldi	r24, 0x70	; 112
     5d2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	60 ee       	ldi	r22, 0xE0	; 224
     5da:	8f e0       	ldi	r24, 0x0F	; 15
     5dc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     5e0:	8e e0       	ldi	r24, 0x0E	; 14
     5e2:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     5e6:	80 7e       	andi	r24, 0xE0	; 224
     5e8:	61 f4       	brne	.+24     	; 0x602 <CAN_init+0x58>
		return 1;
	}
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
     5ea:	63 e0       	ldi	r22, 0x03	; 3
     5ec:	8b e2       	ldi	r24, 0x2B	; 43
     5ee:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Low INT0 generates interrupt request
	MCUCR |= (0 << ISC01) | (0 << ISC00);
     5f2:	85 b7       	in	r24, 0x35	; 53
     5f4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     5f6:	8b b7       	in	r24, 0x3b	; 59
     5f8:	80 64       	ori	r24, 0x40	; 64
     5fa:	8b bf       	out	0x3b, r24	; 59
	// Low INT2 generates interrupt request
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	08 95       	ret
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
	
	uint8_t value = MCP_read(MCP_CANSTAT);
	if ((value & MODE_MASK) != MODE_NORMAL){
		return 1;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
}
     606:	08 95       	ret

00000608 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
     616:	fc 01       	movw	r30, r24
     618:	60 81       	ld	r22, Z
     61a:	71 81       	ldd	r23, Z+1	; 0x01
     61c:	76 95       	lsr	r23
     61e:	67 95       	ror	r22
     620:	76 95       	lsr	r23
     622:	67 95       	ror	r22
     624:	76 95       	lsr	r23
     626:	67 95       	ror	r22
     628:	81 e3       	ldi	r24, 0x31	; 49
     62a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
     62e:	f7 01       	movw	r30, r14
     630:	60 81       	ld	r22, Z
     632:	62 95       	swap	r22
     634:	66 0f       	add	r22, r22
     636:	60 7e       	andi	r22, 0xE0	; 224
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	83 e3       	ldi	r24, 0x33	; 51
     642:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	84 e3       	ldi	r24, 0x34	; 52
     64a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
     64e:	f7 01       	movw	r30, r14
     650:	62 81       	ldd	r22, Z+2	; 0x02
     652:	85 e3       	ldi	r24, 0x35	; 53
     654:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
     658:	f7 01       	movw	r30, r14
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	88 23       	and	r24, r24
     65e:	99 f0       	breq	.+38     	; 0x686 <CAN_msg_send+0x7e>
     660:	87 01       	movw	r16, r14
     662:	0d 5f       	subi	r16, 0xFD	; 253
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	c0 e0       	ldi	r28, 0x00	; 0
     668:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
     66a:	f8 01       	movw	r30, r16
     66c:	61 91       	ld	r22, Z+
     66e:	8f 01       	movw	r16, r30
     670:	8c 2f       	mov	r24, r28
     672:	8a 5c       	subi	r24, 0xCA	; 202
     674:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	f7 01       	movw	r30, r14
     67c:	22 81       	ldd	r18, Z+2	; 0x02
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	c2 17       	cp	r28, r18
     682:	d3 07       	cpc	r29, r19
     684:	94 f3       	brlt	.-28     	; 0x66a <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
     686:	81 e8       	ldi	r24, 0x81	; 129
     688:	0e 94 43 04 	call	0x886	; 0x886 <MCP_request_to_send>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <CAN_msg_receive>:

void CAN_msg_receive(can_msg *msg, uint8_t reg)
{
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	7c 01       	movw	r14, r24
     6ac:	c6 2f       	mov	r28, r22
	// RXBnSIDH and RXBnSIDL (id)
	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	86 0f       	add	r24, r22
     6b2:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6b6:	d8 2f       	mov	r29, r24
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	8c 0f       	add	r24, r28
     6bc:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6c0:	48 2f       	mov	r20, r24
     6c2:	42 95       	swap	r20
     6c4:	46 95       	lsr	r20
     6c6:	47 70       	andi	r20, 0x07	; 7
     6c8:	2d 2f       	mov	r18, r29
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	c9 01       	movw	r24, r18
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	84 2b       	or	r24, r20
     6dc:	f7 01       	movw	r30, r14
     6de:	91 83       	std	Z+1, r25	; 0x01
     6e0:	80 83       	st	Z, r24
	// bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
	msg->length = (MCP_read(reg + 5) & 0x0F ); 
     6e2:	85 e0       	ldi	r24, 0x05	; 5
     6e4:	8c 0f       	add	r24, r28
     6e6:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6ea:	8f 70       	andi	r24, 0x0F	; 15
     6ec:	f7 01       	movw	r30, r14
     6ee:	82 83       	std	Z+2, r24	; 0x02
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     6f0:	88 23       	and	r24, r24
     6f2:	f9 f0       	breq	.+62     	; 0x732 <CAN_msg_receive+0x98>
     6f4:	0f 2e       	mov	r0, r31
     6f6:	f6 e0       	ldi	r31, 0x06	; 6
     6f8:	df 2e       	mov	r13, r31
     6fa:	f0 2d       	mov	r31, r0
     6fc:	dc 0e       	add	r13, r28
     6fe:	87 01       	movw	r16, r14
     700:	0d 5f       	subi	r16, 0xFD	; 253
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	0f 2e       	mov	r0, r31
     706:	fe e0       	ldi	r31, 0x0E	; 14
     708:	cf 2e       	mov	r12, r31
     70a:	f0 2d       	mov	r31, r0
     70c:	cc 0e       	add	r12, r28
	// RXBnSIDH and RXBnSIDL (id)
	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5);
	// bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
	msg->length = (MCP_read(reg + 5) & 0x0F ); 
		
	int i = 0;
     70e:	c0 e0       	ldi	r28, 0x00	; 0
     710:	d0 e0       	ldi	r29, 0x00	; 0
	while( (i < msg->length) && (i < 8) ){
		//RXBnDM (receive buffer)
		msg->data[i] = MCP_read(reg + 6 + i);	
     712:	8d 2d       	mov	r24, r13
     714:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     718:	f8 01       	movw	r30, r16
     71a:	81 93       	st	Z+, r24
     71c:	8f 01       	movw	r16, r30
		i++;
     71e:	21 96       	adiw	r28, 0x01	; 1
	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5);
	// bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
	msg->length = (MCP_read(reg + 5) & 0x0F ); 
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     720:	f7 01       	movw	r30, r14
     722:	22 81       	ldd	r18, Z+2	; 0x02
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	c2 17       	cp	r28, r18
     728:	d3 07       	cpc	r29, r19
     72a:	1c f4       	brge	.+6      	; 0x732 <CAN_msg_receive+0x98>
     72c:	d3 94       	inc	r13
     72e:	dc 10       	cpse	r13, r12
     730:	f0 cf       	rjmp	.-32     	; 0x712 <CAN_msg_receive+0x78>
		//RXBnDM (receive buffer)
		msg->data[i] = MCP_read(reg + 6 + i);	
		i++;
	}	
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	08 95       	ret

00000744 <CAN_handle_interrupt>:

void CAN_handle_interrupt(can_msg *msg)
{
	switch(interrupt_flag){
     744:	20 91 d6 03 	lds	r18, 0x03D6
     748:	21 30       	cpi	r18, 0x01	; 1
     74a:	41 f0       	breq	.+16     	; 0x75c <CAN_handle_interrupt+0x18>
     74c:	18 f0       	brcs	.+6      	; 0x754 <CAN_handle_interrupt+0x10>
     74e:	22 30       	cpi	r18, 0x02	; 2
     750:	59 f0       	breq	.+22     	; 0x768 <CAN_handle_interrupt+0x24>
     752:	08 95       	ret
		case no_flag:
			msg->data[0] = CAN_NO_MESSAGE;
     754:	2a e0       	ldi	r18, 0x0A	; 10
     756:	fc 01       	movw	r30, r24
     758:	23 83       	std	Z+3, r18	; 0x03
			break;
     75a:	08 95       	ret
		case RX0:
			CAN_msg_receive(msg, MCP_RXB0CTRL);
     75c:	60 e6       	ldi	r22, 0x60	; 96
     75e:	0e 94 4d 03 	call	0x69a	; 0x69a <CAN_msg_receive>
			interrupt_flag = no_flag;
     762:	10 92 d6 03 	sts	0x03D6, r1
			break;
     766:	08 95       	ret
		case RX1:
			CAN_msg_receive(msg, MCP_RXB1CTRL);
     768:	60 e7       	ldi	r22, 0x70	; 112
     76a:	0e 94 4d 03 	call	0x69a	; 0x69a <CAN_msg_receive>
			interrupt_flag = no_flag;
     76e:	10 92 d6 03 	sts	0x03D6, r1
     772:	08 95       	ret

00000774 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
     796:	8c e2       	ldi	r24, 0x2C	; 44
     798:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>

	if (interrupt & MCP_RX0IF){
     79c:	80 ff       	sbrs	r24, 0
     79e:	09 c0       	rjmp	.+18     	; 0x7b2 <__vector_1+0x3e>
		interrupt_flag = RX0;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 d6 03 	sts	0x03D6, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	8c e2       	ldi	r24, 0x2C	; 44
     7ac:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
     7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
     7b2:	81 ff       	sbrs	r24, 1
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__vector_1+0x52>
		interrupt_flag = RX1;
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	80 93 d6 03 	sts	0x03D6, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	62 e0       	ldi	r22, 0x02	; 2
     7c0:	8c e2       	ldi	r24, 0x2C	; 44
     7c2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	}
}
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
     7f0:	80 ec       	ldi	r24, 0xC0	; 192
     7f2:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f6:	85 ef       	ldi	r24, 0xF5	; 245
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <MCP_reset+0x12>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <MCP_reset+0x18>
     800:	00 00       	nop
	_delay_us(200);
	SPI_set_ss(1);
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
     80a:	08 95       	ret

0000080c <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
     80c:	cf 93       	push	r28
     80e:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	// Send 8-bit address
	SPI_transmit_receive(address);
     81e:	8c 2f       	mov	r24, r28
     820:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
     82a:	c8 2f       	mov	r28, r24
	SPI_set_ss(1);
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	return received;
}
     834:	8c 2f       	mov	r24, r28
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <MCP_init>:
#include <util/delay.h>


uint8_t MCP_init( void )
{
	SPI_init();
     83a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <SPI_init>
	MCP_reset();
     83e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <MCP_reset>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     842:	8e e0       	ldi	r24, 0x0E	; 14
     844:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
	
	if ((value & MODE_MASK) != MODE_CONFIG){
     848:	98 2f       	mov	r25, r24
     84a:	90 7e       	andi	r25, 0xE0	; 224
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 38       	cpi	r25, 0x80	; 128
     850:	09 f4       	brne	.+2      	; 0x854 <MCP_init+0x1a>
     852:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
     854:	08 95       	ret

00000856 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	d8 2f       	mov	r29, r24
     85c:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(address);
     86c:	8d 2f       	mov	r24, r29
     86e:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(data);
     872:	8c 2f       	mov	r24, r28
     874:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_set_ss(1);
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <MCP_request_to_send>:

// RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
     892:	8c 2f       	mov	r24, r28
     894:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_set_ss(1);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
}
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	18 2f       	mov	r17, r24
     8ac:	d6 2f       	mov	r29, r22
     8ae:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
     8be:	81 2f       	mov	r24, r17
     8c0:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(mask);
     8c4:	8d 2f       	mov	r24, r29
     8c6:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(data);
     8ca:	8c 2f       	mov	r24, r28
     8cc:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	
	SPI_set_ss(1);
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	08 95       	ret

000008e0 <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
     8e0:	87 b3       	in	r24, 0x17	; 23
     8e2:	80 6b       	ori	r24, 0xB0	; 176
     8e4:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
     8e6:	81 e1       	ldi	r24, 0x11	; 17
     8e8:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
     8ea:	6e 9a       	sbi	0x0d, 6	; 13
     8ec:	08 95       	ret

000008ee <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
     8ee:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1 << SPIF)));
     8f0:	77 9b       	sbis	0x0e, 7	; 14
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <SPI_transmit_receive+0x2>
     8f4:	85 ef       	ldi	r24, 0xF5	; 245
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <SPI_transmit_receive+0xa>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <SPI_transmit_receive+0x10>
     8fe:	00 00       	nop
	_delay_us(200);
	
	return SPDR;
     900:	8f b1       	in	r24, 0x0f	; 15
	
}
     902:	08 95       	ret

00000904 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	91 05       	cpc	r25, r1
     908:	11 f4       	brne	.+4      	; 0x90e <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     90a:	c4 9a       	sbi	0x18, 4	; 24
     90c:	08 95       	ret
	}
	else if (val == 0){
     90e:	89 2b       	or	r24, r25
     910:	09 f4       	brne	.+2      	; 0x914 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     912:	c4 98       	cbi	0x18, 4	; 24
     914:	08 95       	ret

00000916 <UART_Transmit>:
}

void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
     916:	5d 9b       	sbis	0x0b, 5	; 11
     918:	fe cf       	rjmp	.-4      	; 0x916 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
     91a:	8c b9       	out	0x0c, r24	; 12
     91c:	08 95       	ret

0000091e <UART_Recieve>:
}

unsigned char UART_Recieve (void)
{
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
     91e:	5f 9b       	sbis	0x0b, 7	; 11
     920:	fe cf       	rjmp	.-4      	; 0x91e <UART_Recieve>

	// Get and return received data from buffer
	return UDR0;  
     922:	8c b1       	in	r24, 0x0c	; 12
     924:	08 95       	ret

00000926 <UART_Init>:


void UART_Init( unsigned int ubrr )
{
	// Set baud rate
	UBRR0H |= (unsigned char)(ubrr>>8);
     926:	20 b5       	in	r18, 0x20	; 32
     928:	92 2b       	or	r25, r18
     92a:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
     92c:	99 b1       	in	r25, 0x09	; 9
     92e:	89 2b       	or	r24, r25
     930:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     932:	8a b1       	in	r24, 0x0a	; 10
     934:	88 61       	ori	r24, 0x18	; 24
     936:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     938:	80 b5       	in	r24, 0x20	; 32
     93a:	8e 68       	ori	r24, 0x8E	; 142
     93c:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
     93e:	6f e8       	ldi	r22, 0x8F	; 143
     940:	74 e0       	ldi	r23, 0x04	; 4
     942:	8b e8       	ldi	r24, 0x8B	; 139
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <fdevopen>
     94a:	08 95       	ret

0000094c <BUZZ_init>:
int current_song;

void BUZZ_init(void)
{	
	//Timer3 - ctc mode
	TCCR3A &= ~(1 << COM3A1) & ~(1 << COM3A0) & ~(1 << WGM31) & ~(1 << WGM30);
     94c:	eb e8       	ldi	r30, 0x8B	; 139
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	8c 73       	andi	r24, 0x3C	; 60
     954:	80 83       	st	Z, r24
	TCCR3B &= ~(1 << WGM33);
     956:	ea e8       	ldi	r30, 0x8A	; 138
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8f 7e       	andi	r24, 0xEF	; 239
     95e:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32);
     960:	80 81       	ld	r24, Z
     962:	88 60       	ori	r24, 0x08	; 8
     964:	80 83       	st	Z, r24
	
	//Set the compare match interrupt enable
	ETIMSK |= (1 << OCIE3A);
     966:	ed e7       	ldi	r30, 0x7D	; 125
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	80 61       	ori	r24, 0x10	; 16
     96e:	80 83       	st	Z, r24
	
	FREQUENCY_GENERATOR_init();
     970:	0e 94 c1 05 	call	0xb82	; 0xb82 <FREQUENCY_GENERATOR_init>
     974:	08 95       	ret

00000976 <BUZZ_stop_song>:
	BUZZ_start_note(pgm_read_float(&frequency[current_song][0]),pgm_read_byte(&duration[current_song][0]));
}

void BUZZ_stop_song()
{
	TCCR3B &= ~(1 << CS32) & ~(1 << CS31) & ~(1 << CS30);
     976:	ea e8       	ldi	r30, 0x8A	; 138
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	88 7f       	andi	r24, 0xF8	; 248
     97e:	80 83       	st	Z, r24
	FREQUENCY_GENERATOR_start(0);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 cf 05 	call	0xb9e	; 0xb9e <FREQUENCY_GENERATOR_start>
	current_song = 2;	
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	90 93 eb 03 	sts	0x03EB, r25
     98e:	80 93 ea 03 	sts	0x03EA, r24
     992:	08 95       	ret

00000994 <BUZZ_start_note>:
}

void BUZZ_start_note(float freq, uint8_t dur)
{
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	6b 01       	movw	r12, r22
     99e:	7c 01       	movw	r14, r24
	uint8_t match;
	OCR3A = dur*49152000/(64000);
     9a0:	a4 2f       	mov	r26, r20
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	4e ee       	ldi	r20, 0xEE	; 238
     9aa:	52 e0       	ldi	r21, 0x02	; 2
     9ac:	0e 94 a9 10 	call	0x2152	; 0x2152 <__muluhisi3>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	3a ef       	ldi	r19, 0xFA	; 250
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodsi4>
     9bc:	30 93 87 00 	sts	0x0087, r19
     9c0:	20 93 86 00 	sts	0x0086, r18

	if (freq == 0){
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	a9 01       	movw	r20, r18
     9ca:	c7 01       	movw	r24, r14
     9cc:	b6 01       	movw	r22, r12
     9ce:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__cmpsf2>
     9d2:	88 23       	and	r24, r24
     9d4:	a1 f0       	breq	.+40     	; 0x9fe <BUZZ_start_note+0x6a>
		match = 0;
	}
	else {
		match = 4915200/(64*2*freq);
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	53 e4       	ldi	r21, 0x43	; 67
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	0e 94 13 10 	call	0x2026	; 0x2026 <__mulsf3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	86 e9       	ldi	r24, 0x96	; 150
     9f0:	9a e4       	ldi	r25, 0x4A	; 74
     9f2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__divsf3>
     9f6:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__fixunssfsi>
     9fa:	86 2f       	mov	r24, r22
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <BUZZ_start_note+0x6c>
{
	uint8_t match;
	OCR3A = dur*49152000/(64000);

	if (freq == 0){
		match = 0;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		match = 4915200/(64*2*freq);
	}
	FREQUENCY_GENERATOR_play(match);
     a00:	0e 94 dd 05 	call	0xbba	; 0xbba <FREQUENCY_GENERATOR_play>
}
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	08 95       	ret

00000a0e <BUZZ_start_song>:
	
	FREQUENCY_GENERATOR_init();
}

void BUZZ_start_song(int song)
{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	ec 01       	movw	r28, r24
	number = 0;
     a14:	10 92 d8 03 	sts	0x03D8, r1
     a18:	10 92 d7 03 	sts	0x03D7, r1
	FREQUENCY_GENERATOR_start(1);
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <FREQUENCY_GENERATOR_start>
	
	// Set prescaler to 64
	TCCR3B &= ~(1 << CS32);
     a22:	ea e8       	ldi	r30, 0x8A	; 138
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8b 7f       	andi	r24, 0xFB	; 251
     a2a:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS31) | (1 << CS30);
     a2c:	80 81       	ld	r24, Z
     a2e:	83 60       	ori	r24, 0x03	; 3
     a30:	80 83       	st	Z, r24
	current_song = song;
     a32:	d0 93 eb 03 	sts	0x03EB, r29
     a36:	c0 93 ea 03 	sts	0x03EA, r28
	
	BUZZ_start_note(pgm_read_float(&frequency[current_song][0]),pgm_read_byte(&duration[current_song][0]));
     a3a:	80 e5       	ldi	r24, 0x50	; 80
     a3c:	8c 9f       	mul	r24, r28
     a3e:	f0 01       	movw	r30, r0
     a40:	8d 9f       	mul	r24, r29
     a42:	f0 0d       	add	r31, r0
     a44:	11 24       	eor	r1, r1
     a46:	e0 59       	subi	r30, 0x90	; 144
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	44 91       	lpm	r20, Z
     a4c:	80 e4       	ldi	r24, 0x40	; 64
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	c8 9f       	mul	r28, r24
     a52:	f0 01       	movw	r30, r0
     a54:	c9 9f       	mul	r28, r25
     a56:	f0 0d       	add	r31, r0
     a58:	d8 9f       	mul	r29, r24
     a5a:	f0 0d       	add	r31, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	e0 5f       	subi	r30, 0xF0	; 240
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	65 91       	lpm	r22, Z+
     a64:	75 91       	lpm	r23, Z+
     a66:	85 91       	lpm	r24, Z+
     a68:	94 91       	lpm	r25, Z
     a6a:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <__vector_7>:
	FREQUENCY_GENERATOR_play(match);
}


ISR(TIMER3_COMPA_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
	if (current_song != 2){
     a96:	80 91 ea 03 	lds	r24, 0x03EA
     a9a:	90 91 eb 03 	lds	r25, 0x03EB
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	91 05       	cpc	r25, r1
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <__vector_7+0x32>
     aa4:	57 c0       	rjmp	.+174    	; 0xb54 <__vector_7+0xe0>
		number++;
     aa6:	20 91 d7 03 	lds	r18, 0x03D7
     aaa:	30 91 d8 03 	lds	r19, 0x03D8
     aae:	2f 5f       	subi	r18, 0xFF	; 255
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	30 93 d8 03 	sts	0x03D8, r19
     ab6:	20 93 d7 03 	sts	0x03D7, r18
		switch(current_song){
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	19 f0       	breq	.+6      	; 0xac4 <__vector_7+0x50>
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	49 f0       	breq	.+18     	; 0xad4 <__vector_7+0x60>
     ac2:	0f c0       	rjmp	.+30     	; 0xae2 <__vector_7+0x6e>
			case 0: // mario
				if (number == 78){
     ac4:	2e 34       	cpi	r18, 0x4E	; 78
     ac6:	31 05       	cpc	r19, r1
     ac8:	61 f4       	brne	.+24     	; 0xae2 <__vector_7+0x6e>
					number = 0;
     aca:	10 92 d8 03 	sts	0x03D8, r1
     ace:	10 92 d7 03 	sts	0x03D7, r1
     ad2:	07 c0       	rjmp	.+14     	; 0xae2 <__vector_7+0x6e>
				}
				break;
		
			case 1: // star wars
				if (number == 74){
     ad4:	2a 34       	cpi	r18, 0x4A	; 74
     ad6:	31 05       	cpc	r19, r1
     ad8:	21 f4       	brne	.+8      	; 0xae2 <__vector_7+0x6e>
					number = 0;
     ada:	10 92 d8 03 	sts	0x03D8, r1
     ade:	10 92 d7 03 	sts	0x03D7, r1
				break;
		
			default:
				break;
		}
		printf("NUmber: %d\n", number);
     ae2:	80 91 d8 03 	lds	r24, 0x03D8
     ae6:	8f 93       	push	r24
     ae8:	80 91 d7 03 	lds	r24, 0x03D7
     aec:	8f 93       	push	r24
     aee:	88 e7       	ldi	r24, 0x78	; 120
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	9f 93       	push	r25
     af4:	8f 93       	push	r24
     af6:	0e 94 44 11 	call	0x2288	; 0x2288 <printf>
		BUZZ_start_note(pgm_read_float(&frequency[current_song][number]), pgm_read_byte(&duration[current_song][number]));
     afa:	20 91 ea 03 	lds	r18, 0x03EA
     afe:	30 91 eb 03 	lds	r19, 0x03EB
     b02:	80 91 d7 03 	lds	r24, 0x03D7
     b06:	90 91 d8 03 	lds	r25, 0x03D8
     b0a:	40 e5       	ldi	r20, 0x50	; 80
     b0c:	42 9f       	mul	r20, r18
     b0e:	f0 01       	movw	r30, r0
     b10:	43 9f       	mul	r20, r19
     b12:	f0 0d       	add	r31, r0
     b14:	11 24       	eor	r1, r1
     b16:	e8 0f       	add	r30, r24
     b18:	f9 1f       	adc	r31, r25
     b1a:	e0 59       	subi	r30, 0x90	; 144
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	44 91       	lpm	r20, Z
     b20:	50 e5       	ldi	r21, 0x50	; 80
     b22:	52 9f       	mul	r21, r18
     b24:	f0 01       	movw	r30, r0
     b26:	53 9f       	mul	r21, r19
     b28:	f0 0d       	add	r31, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	8e 0f       	add	r24, r30
     b2e:	9f 1f       	adc	r25, r31
     b30:	fc 01       	movw	r30, r24
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	e0 5f       	subi	r30, 0xF0	; 240
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	65 91       	lpm	r22, Z+
     b40:	75 91       	lpm	r23, Z+
     b42:	85 91       	lpm	r24, Z+
     b44:	94 91       	lpm	r25, Z
     b46:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <__vector_7+0xec>
	}
	else{
		BUZZ_start_note(0, 50);
     b54:	42 e3       	ldi	r20, 0x32	; 50
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	cb 01       	movw	r24, r22
     b5c:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
	}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <FREQUENCY_GENERATOR_init>:


void FREQUENCY_GENERATOR_init(void)
{
	//Timer0-ctc mode and prescaler=64
	TCCR0 |= (1<<WGM01);
     b82:	83 b7       	in	r24, 0x33	; 51
     b84:	88 60       	ori	r24, 0x08	; 8
     b86:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<WGM00);
     b88:	83 b7       	in	r24, 0x33	; 51
     b8a:	8f 7b       	andi	r24, 0xBF	; 191
     b8c:	83 bf       	out	0x33, r24	; 51
	// Compare output mode: toggle OC0 on compare match
	TCCR0 |= (1 << COM00);
     b8e:	83 b7       	in	r24, 0x33	; 51
     b90:	80 61       	ori	r24, 0x10	; 16
     b92:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << COM01);
     b94:	83 b7       	in	r24, 0x33	; 51
     b96:	8f 7d       	andi	r24, 0xDF	; 223
     b98:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1 << PB0);
     b9a:	b8 9a       	sbi	0x17, 0	; 23
     b9c:	08 95       	ret

00000b9e <FREQUENCY_GENERATOR_start>:

}

void FREQUENCY_GENERATOR_start(uint8_t start)
{
	if (start > 0){
     b9e:	88 23       	and	r24, r24
     ba0:	39 f0       	breq	.+14     	; 0xbb0 <FREQUENCY_GENERATOR_start+0x12>
		// prescaler=64
		TCCR0 |= (1<<CS01) | (1<<CS00);
     ba2:	83 b7       	in	r24, 0x33	; 51
     ba4:	83 60       	ori	r24, 0x03	; 3
     ba6:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~(1<<CS02);
     ba8:	83 b7       	in	r24, 0x33	; 51
     baa:	8b 7f       	andi	r24, 0xFB	; 251
     bac:	83 bf       	out	0x33, r24	; 51
     bae:	08 95       	ret
	}
	else{
		TCCR0 &= ~(1<<CS02) & ~(1<<CS01) & ~(1<<CS00);
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	88 7f       	andi	r24, 0xF8	; 248
     bb4:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     bb6:	12 be       	out	0x32, r1	; 50
     bb8:	08 95       	ret

00000bba <FREQUENCY_GENERATOR_play>:
	}
}

void FREQUENCY_GENERATOR_play(uint8_t match)
{
     bba:	cf 93       	push	r28
     bbc:	c8 2f       	mov	r28, r24
	if (match > 0){
     bbe:	88 23       	and	r24, r24
     bc0:	69 f0       	breq	.+26     	; 0xbdc <FREQUENCY_GENERATOR_play+0x22>
		FREQUENCY_GENERATOR_start(0);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <FREQUENCY_GENERATOR_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc8:	89 e9       	ldi	r24, 0x99	; 153
     bca:	99 e0       	ldi	r25, 0x09	; 9
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <FREQUENCY_GENERATOR_play+0x12>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <FREQUENCY_GENERATOR_play+0x18>
		_delay_ms(2);
		OCR0 = match;
     bd2:	c1 bf       	out	0x31, r28	; 49
		FREQUENCY_GENERATOR_start(1);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <FREQUENCY_GENERATOR_start>
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <FREQUENCY_GENERATOR_play+0x28>
	}
	else{
		FREQUENCY_GENERATOR_start(0);
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 cf 05 	call	0xb9e	; 0xb9e <FREQUENCY_GENERATOR_start>
	}
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	MCUCR |= (1 << SRE);
     be6:	85 b7       	in	r24, 0x35	; 53
     be8:	80 68       	ori	r24, 0x80	; 128
     bea:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     bec:	80 b7       	in	r24, 0x30	; 48
     bee:	80 62       	ori	r24, 0x20	; 32
     bf0:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	DDRD &= ~(1 << PD3);
     bf2:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	08 95       	ret

00000bfa <ADC_read>:
{
	// Start address for the ADC
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; 
	
	// Bitwise OR
	if (channel > 3){ return 0; }
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	70 f4       	brcc	.+28     	; 0xc1a <ADC_read+0x20>
	*ext_adc = 0x04 | channel; 
     bfe:	84 60       	ori	r24, 0x04	; 4
     c00:	80 93 00 14 	sts	0x1400, r24
	
	// Wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
     c04:	83 99       	sbic	0x10, 3	; 16
     c06:	fe cf       	rjmp	.-4      	; 0xc04 <ADC_read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c08:	85 ef       	ldi	r24, 0xF5	; 245
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <ADC_read+0x12>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <ADC_read+0x18>
     c12:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
     c14:	80 91 00 14 	lds	r24, 0x1400
     c18:	08 95       	ret
{
	// Start address for the ADC
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; 
	
	// Bitwise OR
	if (channel > 3){ return 0; }
     c1a:	80 e0       	ldi	r24, 0x00	; 0
	// Wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
}
     c1c:	08 95       	ret

00000c1e <EEPROM_write>:
#include <avr/interrupt.h>


void EEPROM_write(uint8_t data, unsigned int address)
{
	cli();
     c1e:	f8 94       	cli
	
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     c20:	e1 99       	sbic	0x1c, 1	; 28
     c22:	fe cf       	rjmp	.-4      	; 0xc20 <EEPROM_write+0x2>
	
	// Set up address and data registers
	EEAR = address;
     c24:	7f bb       	out	0x1f, r23	; 31
     c26:	6e bb       	out	0x1e, r22	; 30
	EEDR = data;
     c28:	8d bb       	out	0x1d, r24	; 29
	
	// Write logical one to Master Write Enable
	EECR |= (1 << EEMWE);
     c2a:	e2 9a       	sbi	0x1c, 2	; 28
	
	// Start eeprom write
	EECR |= (1 << EEWE);
     c2c:	e1 9a       	sbi	0x1c, 1	; 28
	
	sei();
     c2e:	78 94       	sei
     c30:	08 95       	ret

00000c32 <EEPROM_read>:
}

uint8_t EEPROM_read(unsigned int address)
{
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     c32:	e1 99       	sbic	0x1c, 1	; 28
     c34:	fe cf       	rjmp	.-4      	; 0xc32 <EEPROM_read>
	
	// Set up address register
	EEAR = address;
     c36:	9f bb       	out	0x1f, r25	; 31
     c38:	8e bb       	out	0x1e, r24	; 30
	
	// Start eeprom read
	EECR |= (1 << EERE);
     c3a:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     c3c:	8d b3       	in	r24, 0x1d	; 29
     c3e:	08 95       	ret

00000c40 <SEND2CAN_init>:
uint8_t send2can_interrupt_flag = 0;

void SEND2CAN_init()
{
	// CTC mode, prescaler = 1024
	TCCR2 |= (1 << WGM21) | (1 << CS22) | (1 << CS21) | (1 << CS20);
     c40:	87 b5       	in	r24, 0x27	; 39
     c42:	8f 60       	ori	r24, 0x0F	; 15
     c44:	87 bd       	out	0x27, r24	; 39
	// Synchronous mode
	ASSR &= ~(1 << AS2);
     c46:	86 b5       	in	r24, 0x26	; 38
     c48:	87 7f       	andi	r24, 0xF7	; 247
     c4a:	86 bd       	out	0x26, r24	; 38
	
	// Enable interrupt
	TIMSK |= (1 << OCIE2);
     c4c:	89 b7       	in	r24, 0x39	; 57
     c4e:	80 61       	ori	r24, 0x10	; 16
     c50:	89 bf       	out	0x39, r24	; 57
	
	// Compare match = 240 (f = 20 Hz)
	OCR2 = 0xF0;
     c52:	80 ef       	ldi	r24, 0xF0	; 240
     c54:	82 bd       	out	0x22, r24	; 34
     c56:	08 95       	ret

00000c58 <SEND2CAN_send_joy_pos_x>:
		send2can_interrupt_flag = 0;
	}
}

void SEND2CAN_send_joy_pos_x()
{
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	2b 97       	sbiw	r28, 0x0b	; 11
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
	static JOY_position_t prev_joy_pos;
	can_msg msg;
	
	JOY_position_t joy_pos = JOY_read_adc();
     c74:	0e 94 2c 07 	call	0xe58	; 0xe58 <JOY_read_adc>
     c78:	6b 01       	movw	r12, r22
     c7a:	7c 01       	movw	r14, r24
	if(abs(joy_pos.x - prev_joy_pos.x) > 5){
     c7c:	80 91 e1 03 	lds	r24, 0x03E1
     c80:	90 91 e2 03 	lds	r25, 0x03E2
     c84:	97 01       	movw	r18, r14
     c86:	28 1b       	sub	r18, r24
     c88:	39 0b       	sbc	r19, r25
     c8a:	c9 01       	movw	r24, r18
     c8c:	99 23       	and	r25, r25
     c8e:	24 f4       	brge	.+8      	; 0xc98 <SEND2CAN_send_joy_pos_x+0x40>
     c90:	88 27       	eor	r24, r24
     c92:	99 27       	eor	r25, r25
     c94:	82 1b       	sub	r24, r18
     c96:	93 0b       	sbc	r25, r19
     c98:	06 97       	sbiw	r24, 0x06	; 6
     c9a:	a4 f0       	brlt	.+40     	; 0xcc4 <SEND2CAN_send_joy_pos_x+0x6c>
		msg.id = JOYSTICK_ID;
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_JOY_POS_X;
     ca4:	1c 82       	std	Y+4, r1	; 0x04
		msg.data[1] = joy_pos.x;
     ca6:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     cac:	ce 01       	movw	r24, r28
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
		prev_joy_pos = joy_pos;
     cb4:	c0 92 df 03 	sts	0x03DF, r12
     cb8:	d0 92 e0 03 	sts	0x03E0, r13
     cbc:	e0 92 e1 03 	sts	0x03E1, r14
     cc0:	f0 92 e2 03 	sts	0x03E2, r15
	}
}
     cc4:	2b 96       	adiw	r28, 0x0b	; 11
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	08 95       	ret

00000cde <SEND2CAN_send_slider_pos>:

void SEND2CAN_send_slider_pos()
{
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2b 97       	sbiw	r28, 0x0b	; 11
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
	static TOUCH_slider_pos_t prev_slider_pos;
	can_msg msg;
	
	TOUCH_slider_pos_t slider_pos = TOUCH_get_slider_position();
     cfa:	0e 94 8d 09 	call	0x131a	; 0x131a <TOUCH_get_slider_position>
     cfe:	6b 01       	movw	r12, r22
     d00:	7c 01       	movw	r14, r24
	if(abs(slider_pos.right_slider - prev_slider_pos.right_slider) > 5){
     d02:	80 91 dd 03 	lds	r24, 0x03DD
     d06:	90 91 de 03 	lds	r25, 0x03DE
     d0a:	97 01       	movw	r18, r14
     d0c:	28 1b       	sub	r18, r24
     d0e:	39 0b       	sbc	r19, r25
     d10:	c9 01       	movw	r24, r18
     d12:	99 23       	and	r25, r25
     d14:	24 f4       	brge	.+8      	; 0xd1e <SEND2CAN_send_slider_pos+0x40>
     d16:	88 27       	eor	r24, r24
     d18:	99 27       	eor	r25, r25
     d1a:	82 1b       	sub	r24, r18
     d1c:	93 0b       	sbc	r25, r19
     d1e:	06 97       	sbiw	r24, 0x06	; 6
     d20:	a4 f0       	brlt	.+40     	; 0xd4a <SEND2CAN_send_slider_pos+0x6c>
		msg.id = SLIDER_ID;
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9a 83       	std	Y+2, r25	; 0x02
     d28:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_SLIDER_POS_R;
     d2a:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = slider_pos.right_slider;
     d2c:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
		prev_slider_pos = slider_pos;
     d3a:	c0 92 db 03 	sts	0x03DB, r12
     d3e:	d0 92 dc 03 	sts	0x03DC, r13
     d42:	e0 92 dd 03 	sts	0x03DD, r14
     d46:	f0 92 de 03 	sts	0x03DE, r15
	}
	
}
     d4a:	2b 96       	adiw	r28, 0x0b	; 11
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	08 95       	ret

00000d64 <SEND2CAN_touch_button_pressed>:

void SEND2CAN_touch_button_pressed()
{
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	2b 97       	sbiw	r28, 0x0b	; 11
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
	static int prev_button_pressed;
	can_msg msg;
	
	int button_pressed = TOUCH_button();
     d7c:	0e 94 6d 09 	call	0x12da	; 0x12da <TOUCH_button>
     d80:	8c 01       	movw	r16, r24
	if(button_pressed == 1 && prev_button_pressed == 0){
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	a1 f4       	brne	.+40     	; 0xdb0 <SEND2CAN_touch_button_pressed+0x4c>
     d88:	80 91 d9 03 	lds	r24, 0x03D9
     d8c:	90 91 da 03 	lds	r25, 0x03DA
     d90:	89 2b       	or	r24, r25
     d92:	71 f4       	brne	.+28     	; 0xdb0 <SEND2CAN_touch_button_pressed+0x4c>
		msg.id = TOUCH_BUTTON_ID;
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_TOUCH_BUTTON;
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = button_pressed;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8d 83       	std	Y+5, r24	; 0x05
		msg.length = 2;
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
	}
	prev_button_pressed = button_pressed;
     db0:	10 93 da 03 	sts	0x03DA, r17
     db4:	00 93 d9 03 	sts	0x03D9, r16
}
     db8:	2b 96       	adiw	r28, 0x0b	; 11
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <SEND2CAN_send_messages>:
	OCR2 = 0xF0;
}

void SEND2CAN_send_messages()
{
	if (send2can_interrupt_flag){
     dce:	80 91 e3 03 	lds	r24, 0x03E3
     dd2:	88 23       	and	r24, r24
     dd4:	41 f0       	breq	.+16     	; 0xde6 <SEND2CAN_send_messages+0x18>
		SEND2CAN_send_joy_pos_x();
     dd6:	0e 94 2c 06 	call	0xc58	; 0xc58 <SEND2CAN_send_joy_pos_x>
		SEND2CAN_send_slider_pos();
     dda:	0e 94 6f 06 	call	0xcde	; 0xcde <SEND2CAN_send_slider_pos>
		SEND2CAN_touch_button_pressed();
     dde:	0e 94 b2 06 	call	0xd64	; 0xd64 <SEND2CAN_touch_button_pressed>
		send2can_interrupt_flag = 0;
     de2:	10 92 e3 03 	sts	0x03E3, r1
     de6:	08 95       	ret

00000de8 <SEND2CAN_send_speed>:
	}
	prev_button_pressed = button_pressed;
}

void SEND2CAN_send_speed(int speed)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	2b 97       	sbiw	r28, 0x0b	; 11
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	msg.id = GAME_SPEED_ID;
     dfc:	25 e0       	ldi	r18, 0x05	; 5
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	3a 83       	std	Y+2, r19	; 0x02
     e02:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_SPEED;
     e04:	96 e0       	ldi	r25, 0x06	; 6
     e06:	9c 83       	std	Y+4, r25	; 0x04
	msg.data[1] = (uint8_t)speed;
     e08:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
}
     e16:	2b 96       	adiw	r28, 0x0b	; 11
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <__vector_10>:

ISR(TIMER2_COMP_vect)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	8f 93       	push	r24
	send2can_interrupt_flag = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 93 e3 03 	sts	0x03E3, r24
}
     e3a:	8f 91       	pop	r24
     e3c:	0f 90       	pop	r0
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	0f 90       	pop	r0
     e42:	1f 90       	pop	r1
     e44:	18 95       	reti

00000e46 <JOY_button>:
	neutral_pos = JOY_read_adc();
}

int JOY_button()
{
	return !(test_bit(PINB, PINB3));
     e46:	86 b3       	in	r24, 0x16	; 22
     e48:	86 95       	lsr	r24
     e4a:	86 95       	lsr	r24
     e4c:	86 95       	lsr	r24
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	89 27       	eor	r24, r25
}
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	08 95       	ret

00000e58 <JOY_read_adc>:

JOY_position_t JOY_read_adc( void )
{
     e58:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <ADC_read>
     e60:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e62:	8c ec       	ldi	r24, 0xCC	; 204
     e64:	94 e0       	ldi	r25, 0x04	; 4
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <JOY_read_adc+0xe>
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <JOY_read_adc+0x14>
     e6c:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0e 94 fd 05 	call	0xbfa	; 0xbfa <ADC_read>
     e74:	28 2f       	mov	r18, r24
	
	return pos;
     e76:	6c 2f       	mov	r22, r28
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	82 2f       	mov	r24, r18
     e7c:	90 e0       	ldi	r25, 0x00	; 0
}
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <JOY_calibrate>:
	set_bit(PORTB, PB3);
}

void JOY_calibrate( void )
{
	neutral_pos = JOY_read_adc();
     e82:	0e 94 2c 07 	call	0xe58	; 0xe58 <JOY_read_adc>
     e86:	60 93 ec 03 	sts	0x03EC, r22
     e8a:	70 93 ed 03 	sts	0x03ED, r23
     e8e:	80 93 ee 03 	sts	0x03EE, r24
     e92:	90 93 ef 03 	sts	0x03EF, r25
     e96:	08 95       	ret

00000e98 <JOY_init>:
JOY_position_t neutral_pos; 


void JOY_init( void )
{
	JOY_calibrate();
     e98:	0e 94 41 07 	call	0xe82	; 0xe82 <JOY_calibrate>
	
	// Initialize PORT B, pin 3 (joystick button) as input
	clear_bit(DDRB, PINB3);
     e9c:	bb 98       	cbi	0x17, 3	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB3);
     e9e:	c3 9a       	sbi	0x18, 3	; 24
     ea0:	08 95       	ret

00000ea2 <JOY_get_position>:
	
	return pos;
}

JOY_position_t JOY_get_position()
{
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
	JOY_position_t current_pos = JOY_read_adc();
     ea8:	0e 94 2c 07 	call	0xe58	; 0xe58 <JOY_read_adc>
     eac:	8b 01       	movw	r16, r22
     eae:	9c 01       	movw	r18, r24
	
	JOY_position_t pos_percentage;
	pos_percentage.y = (current_pos.y - neutral_pos.y) * 100 / neutral_pos.y;
     eb0:	60 91 ec 03 	lds	r22, 0x03EC
     eb4:	70 91 ed 03 	lds	r23, 0x03ED
     eb8:	a8 01       	movw	r20, r16
     eba:	46 1b       	sub	r20, r22
     ebc:	57 0b       	sbc	r21, r23
     ebe:	e4 e6       	ldi	r30, 0x64	; 100
     ec0:	e4 9f       	mul	r30, r20
     ec2:	c0 01       	movw	r24, r0
     ec4:	e5 9f       	mul	r30, r21
     ec6:	90 0d       	add	r25, r0
     ec8:	11 24       	eor	r1, r1
     eca:	0e 94 76 10 	call	0x20ec	; 0x20ec <__divmodhi4>
     ece:	c6 2f       	mov	r28, r22
     ed0:	f7 2f       	mov	r31, r23
	pos_percentage.x = (current_pos.x - neutral_pos.x) * 100 / neutral_pos.x;
     ed2:	60 91 ee 03 	lds	r22, 0x03EE
     ed6:	70 91 ef 03 	lds	r23, 0x03EF
     eda:	26 1b       	sub	r18, r22
     edc:	37 0b       	sbc	r19, r23
     ede:	e2 9f       	mul	r30, r18
     ee0:	c0 01       	movw	r24, r0
     ee2:	e3 9f       	mul	r30, r19
     ee4:	90 0d       	add	r25, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	0e 94 76 10 	call	0x20ec	; 0x20ec <__divmodhi4>
     eec:	9b 01       	movw	r18, r22
     eee:	6c 39       	cpi	r22, 0x9C	; 156
     ef0:	4f ef       	ldi	r20, 0xFF	; 255
     ef2:	74 07       	cpc	r23, r20
     ef4:	14 f4       	brge	.+4      	; 0xefa <JOY_get_position+0x58>
     ef6:	2c e9       	ldi	r18, 0x9C	; 156
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	8c 2f       	mov	r24, r28
     efc:	9f 2f       	mov	r25, r31
     efe:	8c 39       	cpi	r24, 0x9C	; 156
     f00:	4f ef       	ldi	r20, 0xFF	; 255
     f02:	94 07       	cpc	r25, r20
     f04:	14 f4       	brge	.+4      	; 0xf0a <JOY_get_position+0x68>
     f06:	8c e9       	ldi	r24, 0x9C	; 156
     f08:	9f ef       	ldi	r25, 0xFF	; 255
     f0a:	ac 01       	movw	r20, r24
     f0c:	85 36       	cpi	r24, 0x65	; 101
     f0e:	91 05       	cpc	r25, r1
     f10:	14 f0       	brlt	.+4      	; 0xf16 <JOY_get_position+0x74>
     f12:	44 e6       	ldi	r20, 0x64	; 100
     f14:	50 e0       	ldi	r21, 0x00	; 0
	else if (pos_percentage.x < -100) { pos_percentage.x = -100; }
	
	if (pos_percentage.y > 100) { pos_percentage.y = 100; }
	else if (pos_percentage.y < -100) { pos_percentage.y = -100; }

	return pos_percentage;
     f16:	ba 01       	movw	r22, r20
     f18:	25 36       	cpi	r18, 0x65	; 101
     f1a:	31 05       	cpc	r19, r1
     f1c:	14 f0       	brlt	.+4      	; 0xf22 <JOY_get_position+0x80>
     f1e:	24 e6       	ldi	r18, 0x64	; 100
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	c9 01       	movw	r24, r18
}
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <JOY_get_direction>:

JOY_direction_t JOY_get_direction()
{
	JOY_position_t current_pos = JOY_get_position();
     f2c:	0e 94 51 07 	call	0xea2	; 0xea2 <JOY_get_position>
     f30:	9b 01       	movw	r18, r22
     f32:	ac 01       	movw	r20, r24
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
     f34:	fc 01       	movw	r30, r24
     f36:	7d 96       	adiw	r30, 0x1d	; 29
     f38:	fb 97       	sbiw	r30, 0x3b	; 59
     f3a:	20 f4       	brcc	.+8      	; 0xf44 <JOY_get_direction+0x18>
     f3c:	fb 01       	movw	r30, r22
     f3e:	7d 96       	adiw	r30, 0x1d	; 29
     f40:	fb 97       	sbiw	r30, 0x3b	; 59
     f42:	d8 f0       	brcs	.+54     	; 0xf7a <JOY_get_direction+0x4e>
		return NEUTRAL;
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
     f44:	dc 01       	movw	r26, r24
     f46:	55 23       	and	r21, r21
     f48:	24 f4       	brge	.+8      	; 0xf52 <JOY_get_direction+0x26>
     f4a:	aa 27       	eor	r26, r26
     f4c:	bb 27       	eor	r27, r27
     f4e:	a8 1b       	sub	r26, r24
     f50:	b9 0b       	sbc	r27, r25
     f52:	fb 01       	movw	r30, r22
     f54:	33 23       	and	r19, r19
     f56:	24 f4       	brge	.+8      	; 0xf60 <JOY_get_direction+0x34>
     f58:	ee 27       	eor	r30, r30
     f5a:	ff 27       	eor	r31, r31
     f5c:	e6 1b       	sub	r30, r22
     f5e:	f7 0b       	sbc	r31, r23
     f60:	ea 17       	cp	r30, r26
     f62:	fb 07       	cpc	r31, r27
     f64:	2c f4       	brge	.+10     	; 0xf70 <JOY_get_direction+0x44>
		if (current_pos.x > 0) { return RIGHT; }
     f66:	14 16       	cp	r1, r20
     f68:	15 06       	cpc	r1, r21
     f6a:	4c f4       	brge	.+18     	; 0xf7e <JOY_get_direction+0x52>
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	08 95       	ret
		else { return LEFT; }
	}
	else {
		if (current_pos.y > 0) { return UP; }
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	34 f4       	brge	.+12     	; 0xf82 <JOY_get_direction+0x56>
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	08 95       	ret
JOY_direction_t JOY_get_direction()
{
	JOY_position_t current_pos = JOY_get_position();
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
		return NEUTRAL;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	08 95       	ret
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
		if (current_pos.x > 0) { return RIGHT; }
		else { return LEFT; }
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	08 95       	ret
	}
	else {
		if (current_pos.y > 0) { return UP; }
		else { return DOWN; }
     f82:	84 e0       	ldi	r24, 0x04	; 4
	}
     f84:	08 95       	ret

00000f86 <OLED_goto_column>:
}


void OLED_goto_column( uint8_t column )
{
	if (column < NUM_COLUMNS){
     f86:	88 23       	and	r24, r24
     f88:	8c f0       	brlt	.+34     	; 0xfac <OLED_goto_column+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     f8a:	e0 91 16 01 	lds	r30, 0x0116
     f8e:	f0 91 17 01 	lds	r31, 0x0117
     f92:	91 e2       	ldi	r25, 0x21	; 33
     f94:	90 83       	st	Z, r25
     f96:	e0 91 16 01 	lds	r30, 0x0116
     f9a:	f0 91 17 01 	lds	r31, 0x0117
     f9e:	80 83       	st	Z, r24
     fa0:	e0 91 16 01 	lds	r30, 0x0116
     fa4:	f0 91 17 01 	lds	r31, 0x0117
     fa8:	8f e7       	ldi	r24, 0x7F	; 127
     faa:	80 83       	st	Z, r24
     fac:	08 95       	ret

00000fae <OLED_goto_line>:
	}
}

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	98 f4       	brcc	.+38     	; 0xfd8 <OLED_goto_line+0x2a>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     fb2:	e0 91 16 01 	lds	r30, 0x0116
     fb6:	f0 91 17 01 	lds	r31, 0x0117
     fba:	92 e2       	ldi	r25, 0x22	; 34
     fbc:	90 83       	st	Z, r25

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
		OLED_write_command(SET_PAGE_ADDRESS);
		line = l;
     fbe:	80 93 e6 03 	sts	0x03E6, r24
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     fc2:	e0 91 16 01 	lds	r30, 0x0116
     fc6:	f0 91 17 01 	lds	r31, 0x0117
     fca:	80 83       	st	Z, r24
     fcc:	e0 91 16 01 	lds	r30, 0x0116
     fd0:	f0 91 17 01 	lds	r31, 0x0117
     fd4:	87 e0       	ldi	r24, 0x07	; 7
     fd6:	80 83       	st	Z, r24
     fd8:	08 95       	ret

00000fda <OLED_pos>:
		OLED_write_command(7);
	}
}

void OLED_pos(uint8_t row, uint8_t column)
{
     fda:	cf 93       	push	r28
     fdc:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
     fde:	0e 94 d7 07 	call	0xfae	; 0xfae <OLED_goto_line>
	OLED_goto_column(column);
     fe2:	8c 2f       	mov	r24, r28
     fe4:	0e 94 c3 07 	call	0xf86	; 0xf86 <OLED_goto_column>
}
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <OLED_print_char>:
	}
}

void OLED_print_char( char character )
{	
	if ((character) == '\n'){
     fec:	8a 30       	cpi	r24, 0x0A	; 10
     fee:	39 f4       	brne	.+14     	; 0xffe <OLED_print_char+0x12>
		OLED_pos((line + 1), 0);
     ff0:	80 91 e6 03 	lds	r24, 0x03E6
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
     ffc:	08 95       	ret
     ffe:	e8 2f       	mov	r30, r24
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	b0 97       	sbiw	r30, 0x20	; 32
    1004:	cf 01       	movw	r24, r30
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	e8 0f       	add	r30, r24
    1010:	f9 1f       	adc	r31, r25
    1012:	e0 57       	subi	r30, 0x70	; 112
    1014:	fc 4f       	sbci	r31, 0xFC	; 252
	}
}

void OLED_print_char( char character )
{	
	if ((character) == '\n'){
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
			OLED_write_data(pgm_read_byte(&font5[character - ' '][i]));
    101a:	24 91       	lpm	r18, Z
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
    101c:	a0 91 14 01 	lds	r26, 0x0114
    1020:	b0 91 15 01 	lds	r27, 0x0115
    1024:	2c 93       	st	X, r18
{	
	if ((character) == '\n'){
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	31 96       	adiw	r30, 0x01	; 1
    102a:	85 30       	cpi	r24, 0x05	; 5
    102c:	91 05       	cpc	r25, r1
    102e:	a9 f7       	brne	.-22     	; 0x101a <OLED_print_char+0x2e>
    1030:	08 95       	ret

00001032 <OLED_home>:
	OLED_goto_column(column);
}

void OLED_home( void )
{
	OLED_pos(0, 0);
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
    103a:	08 95       	ret

0000103c <OLED_clear_line>:
}


void OLED_clear_line( uint8_t line )
{
	OLED_pos(line, 0);
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
    1042:	80 e0       	ldi	r24, 0x00	; 0
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
    1044:	e0 91 14 01 	lds	r30, 0x0114
    1048:	f0 91 15 01 	lds	r31, 0x0115
    104c:	10 82       	st	Z, r1

void OLED_clear_line( uint8_t line )
{
	OLED_pos(line, 0);
	
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	80 38       	cpi	r24, 0x80	; 128
    1052:	c1 f7       	brne	.-16     	; 0x1044 <OLED_clear_line+0x8>
		// Write 8 bits to each column
		OLED_write_data(0x00);
	}
}
    1054:	08 95       	ret

00001056 <OLED_reset>:

void OLED_reset( void )
{
    1056:	cf 93       	push	r28
	for (uint8_t line = 0; line < NUM_LINES; line++){
    1058:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(line);
    105a:	8c 2f       	mov	r24, r28
    105c:	0e 94 1e 08 	call	0x103c	; 0x103c <OLED_clear_line>
	}
}

void OLED_reset( void )
{
	for (uint8_t line = 0; line < NUM_LINES; line++){
    1060:	cf 5f       	subi	r28, 0xFF	; 255
    1062:	c8 30       	cpi	r28, 0x08	; 8
    1064:	d1 f7       	brne	.-12     	; 0x105a <OLED_reset+0x4>
		OLED_clear_line(line);
	}
	OLED_home();
    1066:	0e 94 19 08 	call	0x1032	; 0x1032 <OLED_home>
}
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <OLED_init>:
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    106e:	e0 91 16 01 	lds	r30, 0x0116
    1072:	f0 91 17 01 	lds	r31, 0x0117
    1076:	8e ea       	ldi	r24, 0xAE	; 174
    1078:	80 83       	st	Z, r24
    107a:	e0 91 16 01 	lds	r30, 0x0116
    107e:	f0 91 17 01 	lds	r31, 0x0117
    1082:	81 ea       	ldi	r24, 0xA1	; 161
    1084:	80 83       	st	Z, r24
    1086:	e0 91 16 01 	lds	r30, 0x0116
    108a:	f0 91 17 01 	lds	r31, 0x0117
    108e:	8a ed       	ldi	r24, 0xDA	; 218
    1090:	80 83       	st	Z, r24
    1092:	e0 91 16 01 	lds	r30, 0x0116
    1096:	f0 91 17 01 	lds	r31, 0x0117
    109a:	82 e1       	ldi	r24, 0x12	; 18
    109c:	80 83       	st	Z, r24
    109e:	e0 91 16 01 	lds	r30, 0x0116
    10a2:	f0 91 17 01 	lds	r31, 0x0117
    10a6:	88 ec       	ldi	r24, 0xC8	; 200
    10a8:	80 83       	st	Z, r24
    10aa:	e0 91 16 01 	lds	r30, 0x0116
    10ae:	f0 91 17 01 	lds	r31, 0x0117
    10b2:	88 ea       	ldi	r24, 0xA8	; 168
    10b4:	80 83       	st	Z, r24
    10b6:	e0 91 16 01 	lds	r30, 0x0116
    10ba:	f0 91 17 01 	lds	r31, 0x0117
    10be:	8f e3       	ldi	r24, 0x3F	; 63
    10c0:	80 83       	st	Z, r24
    10c2:	e0 91 16 01 	lds	r30, 0x0116
    10c6:	f0 91 17 01 	lds	r31, 0x0117
    10ca:	85 ed       	ldi	r24, 0xD5	; 213
    10cc:	80 83       	st	Z, r24
    10ce:	e0 91 16 01 	lds	r30, 0x0116
    10d2:	f0 91 17 01 	lds	r31, 0x0117
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	80 83       	st	Z, r24
    10da:	e0 91 16 01 	lds	r30, 0x0116
    10de:	f0 91 17 01 	lds	r31, 0x0117
    10e2:	81 e8       	ldi	r24, 0x81	; 129
    10e4:	80 83       	st	Z, r24
    10e6:	e0 91 16 01 	lds	r30, 0x0116
    10ea:	f0 91 17 01 	lds	r31, 0x0117
    10ee:	80 e5       	ldi	r24, 0x50	; 80
    10f0:	80 83       	st	Z, r24
    10f2:	e0 91 16 01 	lds	r30, 0x0116
    10f6:	f0 91 17 01 	lds	r31, 0x0117
    10fa:	89 ed       	ldi	r24, 0xD9	; 217
    10fc:	80 83       	st	Z, r24
    10fe:	e0 91 16 01 	lds	r30, 0x0116
    1102:	f0 91 17 01 	lds	r31, 0x0117
    1106:	81 e2       	ldi	r24, 0x21	; 33
    1108:	80 83       	st	Z, r24
    110a:	e0 91 16 01 	lds	r30, 0x0116
    110e:	f0 91 17 01 	lds	r31, 0x0117
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	80 83       	st	Z, r24
    1116:	e0 91 16 01 	lds	r30, 0x0116
    111a:	f0 91 17 01 	lds	r31, 0x0117
    111e:	10 82       	st	Z, r1
    1120:	e0 91 16 01 	lds	r30, 0x0116
    1124:	f0 91 17 01 	lds	r31, 0x0117
    1128:	8b ed       	ldi	r24, 0xDB	; 219
    112a:	80 83       	st	Z, r24
    112c:	e0 91 16 01 	lds	r30, 0x0116
    1130:	f0 91 17 01 	lds	r31, 0x0117
    1134:	80 e3       	ldi	r24, 0x30	; 48
    1136:	80 83       	st	Z, r24
    1138:	e0 91 16 01 	lds	r30, 0x0116
    113c:	f0 91 17 01 	lds	r31, 0x0117
    1140:	8d ea       	ldi	r24, 0xAD	; 173
    1142:	80 83       	st	Z, r24
    1144:	e0 91 16 01 	lds	r30, 0x0116
    1148:	f0 91 17 01 	lds	r31, 0x0117
    114c:	10 82       	st	Z, r1
    114e:	e0 91 16 01 	lds	r30, 0x0116
    1152:	f0 91 17 01 	lds	r31, 0x0117
    1156:	84 ea       	ldi	r24, 0xA4	; 164
    1158:	80 83       	st	Z, r24
    115a:	e0 91 16 01 	lds	r30, 0x0116
    115e:	f0 91 17 01 	lds	r31, 0x0117
    1162:	86 ea       	ldi	r24, 0xA6	; 166
    1164:	80 83       	st	Z, r24
    1166:	e0 91 16 01 	lds	r30, 0x0116
    116a:	f0 91 17 01 	lds	r31, 0x0117
    116e:	8f ea       	ldi	r24, 0xAF	; 175
    1170:	80 83       	st	Z, r24
	OLED_write_command(ENTIRE_DISPLAY_ON);			  // Out  follows  RAM  content

	OLED_write_command(SET_NORMAL_DISPLAY);
	OLED_write_command(DISPLAY_ON);
	
	OLED_reset();
    1172:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    1176:	e0 91 16 01 	lds	r30, 0x0116
    117a:	f0 91 17 01 	lds	r31, 0x0117
    117e:	83 ed       	ldi	r24, 0xD3	; 211
    1180:	80 83       	st	Z, r24
    1182:	e0 91 16 01 	lds	r30, 0x0116
    1186:	f0 91 17 01 	lds	r31, 0x0117
    118a:	10 82       	st	Z, r1
    118c:	08 95       	ret

0000118e <OLED_set_contrast>:
    118e:	e0 91 16 01 	lds	r30, 0x0116
    1192:	f0 91 17 01 	lds	r31, 0x0117
    1196:	91 e8       	ldi	r25, 0x81	; 129
    1198:	90 83       	st	Z, r25
    119a:	e0 91 16 01 	lds	r30, 0x0116
    119e:	f0 91 17 01 	lds	r31, 0x0117
    11a2:	80 83       	st	Z, r24
    11a4:	08 95       	ret

000011a6 <OLED_invert_screen>:
}

void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
    11a6:	80 91 e4 03 	lds	r24, 0x03E4
    11aa:	90 91 e5 03 	lds	r25, 0x03E5
    11ae:	89 2b       	or	r24, r25
    11b0:	69 f4       	brne	.+26     	; 0x11cc <OLED_invert_screen+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    11b2:	e0 91 16 01 	lds	r30, 0x0116
    11b6:	f0 91 17 01 	lds	r31, 0x0117
    11ba:	87 ea       	ldi	r24, 0xA7	; 167
    11bc:	80 83       	st	Z, r24
void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	90 93 e5 03 	sts	0x03E5, r25
    11c6:	80 93 e4 03 	sts	0x03E4, r24
    11ca:	08 95       	ret
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    11cc:	e0 91 16 01 	lds	r30, 0x0116
    11d0:	f0 91 17 01 	lds	r31, 0x0117
    11d4:	86 ea       	ldi	r24, 0xA6	; 166
    11d6:	80 83       	st	Z, r24
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
		}else{
		OLED_write_command(SET_NORMAL_DISPLAY);
		inverted = 0;
    11d8:	10 92 e5 03 	sts	0x03E5, r1
    11dc:	10 92 e4 03 	sts	0x03E4, r1
    11e0:	08 95       	ret

000011e2 <OLED_printf>:
			OLED_write_data(pgm_read_byte(&font5[character - ' '][i]));
		}
	}
}

void OLED_printf(const char* fmt, ...){
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	fe 01       	movw	r30, r28
    11ec:	35 96       	adiw	r30, 0x05	; 5
    11ee:	61 91       	ld	r22, Z+
    11f0:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, fmt);
	vfprintf(&oled_stdout, fmt, args);
    11f2:	af 01       	movw	r20, r30
    11f4:	86 e0       	ldi	r24, 0x06	; 6
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vfprintf>
	va_end(args);
}
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <OLED_print_arrow>:
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
    1202:	e0 91 14 01 	lds	r30, 0x0114
    1206:	f0 91 15 01 	lds	r31, 0x0115
    120a:	88 e1       	ldi	r24, 0x18	; 24
    120c:	80 83       	st	Z, r24
    120e:	e0 91 14 01 	lds	r30, 0x0114
    1212:	f0 91 15 01 	lds	r31, 0x0115
    1216:	80 83       	st	Z, r24
    1218:	e0 91 14 01 	lds	r30, 0x0114
    121c:	f0 91 15 01 	lds	r31, 0x0115
    1220:	80 83       	st	Z, r24
    1222:	e0 91 14 01 	lds	r30, 0x0114
    1226:	f0 91 15 01 	lds	r31, 0x0115
    122a:	80 83       	st	Z, r24
    122c:	e0 91 14 01 	lds	r30, 0x0114
    1230:	f0 91 15 01 	lds	r31, 0x0115
    1234:	80 83       	st	Z, r24
    1236:	e0 91 14 01 	lds	r30, 0x0114
    123a:	f0 91 15 01 	lds	r31, 0x0115
    123e:	9f ef       	ldi	r25, 0xFF	; 255
    1240:	90 83       	st	Z, r25
    1242:	e0 91 14 01 	lds	r30, 0x0114
    1246:	f0 91 15 01 	lds	r31, 0x0115
    124a:	9e e7       	ldi	r25, 0x7E	; 126
    124c:	90 83       	st	Z, r25
    124e:	e0 91 14 01 	lds	r30, 0x0114
    1252:	f0 91 15 01 	lds	r31, 0x0115
    1256:	9c e3       	ldi	r25, 0x3C	; 60
    1258:	90 83       	st	Z, r25
    125a:	e0 91 14 01 	lds	r30, 0x0114
    125e:	f0 91 15 01 	lds	r31, 0x0115
    1262:	80 83       	st	Z, r24
    1264:	e0 91 14 01 	lds	r30, 0x0114
    1268:	f0 91 15 01 	lds	r31, 0x0115
    126c:	10 82       	st	Z, r1
    126e:	08 95       	ret

00001270 <TIMER_init>:
int current_time = 0;

void TIMER_init()
{
	//CTC mode
	TCCR1B |= (1 << WGM12);
    1270:	8e b5       	in	r24, 0x2e	; 46
    1272:	88 60       	ori	r24, 0x08	; 8
    1274:	8e bd       	out	0x2e, r24	; 46
	
	// Prescaler = 256
	TCCR1B |= (1 << CS12);
    1276:	8e b5       	in	r24, 0x2e	; 46
    1278:	84 60       	ori	r24, 0x04	; 4
    127a:	8e bd       	out	0x2e, r24	; 46
	
	// Set output compare value
	OCR1A = 0x4B00;		// 19200, corresponds to match every second
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	9b e4       	ldi	r25, 0x4B	; 75
    1280:	9b bd       	out	0x2b, r25	; 43
    1282:	8a bd       	out	0x2a, r24	; 42
    1284:	08 95       	ret

00001286 <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
	current_time = current_time + 1;
    1294:	80 91 e7 03 	lds	r24, 0x03E7
    1298:	90 91 e8 03 	lds	r25, 0x03E8
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	90 93 e8 03 	sts	0x03E8, r25
    12a2:	80 93 e7 03 	sts	0x03E7, r24
}
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <TIMER_start>:

void TIMER_start()
{
	TIMSK |= (1 << OCIE1A);
    12b4:	89 b7       	in	r24, 0x39	; 57
    12b6:	80 64       	ori	r24, 0x40	; 64
    12b8:	89 bf       	out	0x39, r24	; 57
	current_time = 0;
    12ba:	10 92 e8 03 	sts	0x03E8, r1
    12be:	10 92 e7 03 	sts	0x03E7, r1
    12c2:	08 95       	ret

000012c4 <TIMER_stop>:
}

int TIMER_stop()
{
	TIMSK &= ~(1 << OCIE1A);
    12c4:	89 b7       	in	r24, 0x39	; 57
    12c6:	8f 7b       	andi	r24, 0xBF	; 191
    12c8:	89 bf       	out	0x39, r24	; 57
	return current_time;
    12ca:	80 91 e7 03 	lds	r24, 0x03E7
    12ce:	90 91 e8 03 	lds	r25, 0x03E8
    12d2:	08 95       	ret

000012d4 <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 1 and 2 as input
	clear_bit(DDRB, PINB1);
    12d4:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
    12d6:	ba 98       	cbi	0x17, 2	; 23
    12d8:	08 95       	ret

000012da <TOUCH_button>:
}

int TOUCH_button( void )
{
	if (test_bit(PINB, PB1) || test_bit(PINB, PB2)){
    12da:	b1 99       	sbic	0x16, 1	; 22
    12dc:	06 c0       	rjmp	.+12     	; 0x12ea <TOUCH_button+0x10>
    12de:	86 b3       	in	r24, 0x16	; 22
		return 1;
    12e0:	82 fb       	bst	r24, 2
    12e2:	88 27       	eor	r24, r24
    12e4:	80 f9       	bld	r24, 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	08 95       	ret
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    12ee:	08 95       	ret

000012f0 <TOUCH_read_adc>:

TOUCH_slider_pos_t TOUCH_read_adc( void )
{
    12f0:	cf 93       	push	r28
	TOUCH_slider_pos_t pos;
	pos.left_slider = ADC_read(LEFT_SLIDER_CHANNEL);
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <ADC_read>
    12f8:	c8 2f       	mov	r28, r24
    12fa:	8c ec       	ldi	r24, 0xCC	; 204
    12fc:	94 e0       	ldi	r25, 0x04	; 4
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <TOUCH_read_adc+0xe>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <TOUCH_read_adc+0x14>
    1304:	00 00       	nop
	_delay_ms(1);
	pos.right_slider = ADC_read(RIGHT_SLIDER_CHANNEL);
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	0e 94 fd 05 	call	0xbfa	; 0xbfa <ADC_read>
    130c:	28 2f       	mov	r18, r24
	
	return pos;
    130e:	6c 2f       	mov	r22, r28
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	82 2f       	mov	r24, r18
    1314:	90 e0       	ldi	r25, 0x00	; 0
}
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <TOUCH_get_slider_position>:

TOUCH_slider_pos_t TOUCH_get_slider_position( void )
{
	TOUCH_slider_pos_t current_pos = TOUCH_read_adc();
    131a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <TOUCH_read_adc>
	return current_pos;
    131e:	08 95       	ret

00001320 <HIGHSCORE_load_from_eeprom>:
		}
	}
}

highscore_info_t HIGHSCORE_load_from_eeprom(int number)
{
    1320:	8f 92       	push	r8
    1322:	9f 92       	push	r9
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	2d 97       	sbiw	r28, 0x0d	; 13
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	5c 01       	movw	r10, r24
	highscore_info_t user;
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	8b 01       	movw	r16, r22
    1350:	00 0f       	add	r16, r16
    1352:	11 1f       	adc	r17, r17
    1354:	00 0f       	add	r16, r16
    1356:	11 1f       	adc	r17, r17
    1358:	00 0f       	add	r16, r16
    135a:	11 1f       	adc	r17, r17
    135c:	06 1b       	sub	r16, r22
    135e:	17 0b       	sbc	r17, r23
    1360:	78 01       	movw	r14, r16
    1362:	c8 01       	movw	r24, r16
    1364:	0e 94 19 06 	call	0xc32	; 0xc32 <EEPROM_read>
    1368:	88 2e       	mov	r8, r24
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
    136a:	c8 01       	movw	r24, r16
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	0e 94 19 06 	call	0xc32	; 0xc32 <EEPROM_read>
	user.score = score_msb << 8 | score_lsb;
    1372:	91 2c       	mov	r9, r1
    1374:	98 2c       	mov	r9, r8
    1376:	88 24       	eor	r8, r8
    1378:	88 2a       	or	r8, r24
    137a:	8e 01       	movw	r16, r28
    137c:	0d 5f       	subi	r16, 0xFD	; 253
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	6e 01       	movw	r12, r28
    1382:	8e e0       	ldi	r24, 0x0E	; 14
    1384:	c8 0e       	add	r12, r24
    1386:	d1 1c       	adc	r13, r1
    1388:	ce 01       	movw	r24, r28
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	e8 1a       	sub	r14, r24
    138e:	f9 0a       	sbc	r15, r25
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
    1390:	c7 01       	movw	r24, r14
    1392:	80 0f       	add	r24, r16
    1394:	91 1f       	adc	r25, r17
    1396:	0e 94 19 06 	call	0xc32	; 0xc32 <EEPROM_read>
    139a:	f8 01       	movw	r30, r16
    139c:	81 93       	st	Z+, r24
    139e:	8f 01       	movw	r16, r30
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
	user.score = score_msb << 8 | score_lsb;
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    13a0:	ec 15       	cp	r30, r12
    13a2:	fd 05       	cpc	r31, r13
    13a4:	a9 f7       	brne	.-22     	; 0x1390 <HIGHSCORE_load_from_eeprom+0x70>
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
	return user;
    13a6:	9a 82       	std	Y+2, r9	; 0x02
    13a8:	89 82       	std	Y+1, r8	; 0x01
    13aa:	8d e0       	ldi	r24, 0x0D	; 13
    13ac:	fe 01       	movw	r30, r28
    13ae:	31 96       	adiw	r30, 0x01	; 1
    13b0:	d5 01       	movw	r26, r10
    13b2:	01 90       	ld	r0, Z+
    13b4:	0d 92       	st	X+, r0
    13b6:	8a 95       	dec	r24
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <HIGHSCORE_load_from_eeprom+0x92>
}
    13ba:	c5 01       	movw	r24, r10
    13bc:	2d 96       	adiw	r28, 0x0d	; 13
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	bf 90       	pop	r11
    13da:	af 90       	pop	r10
    13dc:	9f 90       	pop	r9
    13de:	8f 90       	pop	r8
    13e0:	08 95       	ret

000013e2 <HIGHSCORE_load_to_eeprom>:

void HIGHSCORE_load_to_eeprom(uint16_t score, char *name, int number)
{
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	18 2f       	mov	r17, r24
    13f4:	c6 2e       	mov	r12, r22
    13f6:	d7 2e       	mov	r13, r23
	uint8_t score_lsb = score & 0xFF;
	uint8_t score_msb = score >> 8;
	EEPROM_write(score_msb, NUM_HIGHSCORE_BYTES*number);
    13f8:	44 0f       	add	r20, r20
    13fa:	55 1f       	adc	r21, r21
    13fc:	ea 01       	movw	r28, r20
    13fe:	cc 0f       	add	r28, r28
    1400:	dd 1f       	adc	r29, r29
    1402:	cc 0f       	add	r28, r28
    1404:	dd 1f       	adc	r29, r29
    1406:	cc 0f       	add	r28, r28
    1408:	dd 1f       	adc	r29, r29
    140a:	c4 1b       	sub	r28, r20
    140c:	d5 0b       	sbc	r29, r21
    140e:	7e 01       	movw	r14, r28
    1410:	be 01       	movw	r22, r28
    1412:	89 2f       	mov	r24, r25
    1414:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_write>
	EEPROM_write(score_lsb, NUM_HIGHSCORE_BYTES*number + 1);
    1418:	be 01       	movw	r22, r28
    141a:	6f 5f       	subi	r22, 0xFF	; 255
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	81 2f       	mov	r24, r17
    1420:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_write>
    1424:	0c 2d       	mov	r16, r12
    1426:	1d 2d       	mov	r17, r13
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    1428:	c0 e0       	ldi	r28, 0x00	; 0
    142a:	d0 e0       	ldi	r29, 0x00	; 0
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	e8 0e       	add	r14, r24
    1430:	f1 1c       	adc	r15, r1
    1432:	b7 01       	movw	r22, r14
    1434:	6c 0f       	add	r22, r28
    1436:	7d 1f       	adc	r23, r29
		EEPROM_write(name[i], i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
    1438:	f8 01       	movw	r30, r16
    143a:	81 91       	ld	r24, Z+
    143c:	8f 01       	movw	r16, r30
    143e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_write>
	uint8_t score_lsb = score & 0xFF;
	uint8_t score_msb = score >> 8;
	EEPROM_write(score_msb, NUM_HIGHSCORE_BYTES*number);
	EEPROM_write(score_lsb, NUM_HIGHSCORE_BYTES*number + 1);
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    1442:	21 96       	adiw	r28, 0x01	; 1
    1444:	cb 30       	cpi	r28, 0x0B	; 11
    1446:	d1 05       	cpc	r29, r1
    1448:	a1 f7       	brne	.-24     	; 0x1432 <HIGHSCORE_load_to_eeprom+0x50>
		EEPROM_write(name[i], i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
}
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	08 95       	ret

0000145c <HIGHSCORE_add_score>:
#include <util/delay.h>
#include <stdlib.h>

// When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
    145c:	9f 92       	push	r9
    145e:	af 92       	push	r10
    1460:	bf 92       	push	r11
    1462:	cf 92       	push	r12
    1464:	df 92       	push	r13
    1466:	ef 92       	push	r14
    1468:	ff 92       	push	r15
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	6a 97       	sbiw	r28, 0x1a	; 26
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	7c 01       	movw	r14, r24
    1484:	a6 2e       	mov	r10, r22
    1486:	97 2e       	mov	r9, r23
    1488:	6a 01       	movw	r12, r20
	highscore_info_t element;
	for (int i = start; i < MAX_SCORES; i++){
    148a:	46 30       	cpi	r20, 0x06	; 6
    148c:	51 05       	cpc	r21, r1
    148e:	0c f0       	brlt	.+2      	; 0x1492 <HIGHSCORE_add_score+0x36>
    1490:	5b c0       	rjmp	.+182    	; 0x1548 <HIGHSCORE_add_score+0xec>
    1492:	8a 01       	movw	r16, r20
		element = HIGHSCORE_load_from_eeprom(i);
    1494:	0f 2e       	mov	r0, r31
    1496:	fd e0       	ldi	r31, 0x0D	; 13
    1498:	bf 2e       	mov	r11, r31
    149a:	f0 2d       	mov	r31, r0
    149c:	b8 01       	movw	r22, r16
    149e:	ce 01       	movw	r24, r28
    14a0:	0e 96       	adiw	r24, 0x0e	; 14
    14a2:	0e 94 90 09 	call	0x1320	; 0x1320 <HIGHSCORE_load_from_eeprom>
    14a6:	fe 01       	movw	r30, r28
    14a8:	3e 96       	adiw	r30, 0x0e	; 14
    14aa:	de 01       	movw	r26, r28
    14ac:	11 96       	adiw	r26, 0x01	; 1
    14ae:	8b 2d       	mov	r24, r11
    14b0:	01 90       	ld	r0, Z+
    14b2:	0d 92       	st	X+, r0
    14b4:	8a 95       	dec	r24
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <HIGHSCORE_add_score+0x54>
		if  (element.score == 0){
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	39 f4       	brne	.+14     	; 0x14ce <HIGHSCORE_add_score+0x72>
			HIGHSCORE_load_to_eeprom(score, name, i);
    14c0:	a8 01       	movw	r20, r16
    14c2:	6a 2d       	mov	r22, r10
    14c4:	79 2d       	mov	r23, r9
    14c6:	c7 01       	movw	r24, r14
    14c8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <HIGHSCORE_load_to_eeprom>
			break;
    14cc:	3d c0       	rjmp	.+122    	; 0x1548 <HIGHSCORE_add_score+0xec>
		}
		else if (element.score < score){
    14ce:	8e 15       	cp	r24, r14
    14d0:	9f 05       	cpc	r25, r15
    14d2:	78 f4       	brcc	.+30     	; 0x14f2 <HIGHSCORE_add_score+0x96>
			// Score takes this place and pushes the rest ones back in the list. Start = i + 1
			HIGHSCORE_add_score(element.score, element.name, i + 1);
    14d4:	a8 01       	movw	r20, r16
    14d6:	4f 5f       	subi	r20, 0xFF	; 255
    14d8:	5f 4f       	sbci	r21, 0xFF	; 255
    14da:	be 01       	movw	r22, r28
    14dc:	6d 5f       	subi	r22, 0xFD	; 253
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	0e 94 2e 0a 	call	0x145c	; 0x145c <HIGHSCORE_add_score>
			HIGHSCORE_load_to_eeprom(score, name, i);
    14e4:	a8 01       	movw	r20, r16
    14e6:	6a 2d       	mov	r22, r10
    14e8:	79 2d       	mov	r23, r9
    14ea:	c7 01       	movw	r24, r14
    14ec:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <HIGHSCORE_load_to_eeprom>
			break;
    14f0:	2b c0       	rjmp	.+86     	; 0x1548 <HIGHSCORE_add_score+0xec>
		}
		else if (element.score > score){
    14f2:	e8 16       	cp	r14, r24
    14f4:	f9 06       	cpc	r15, r25
    14f6:	10 f5       	brcc	.+68     	; 0x153c <HIGHSCORE_add_score+0xe0>
			if (start == 0 && i == MAX_SCORES-1){
    14f8:	c1 14       	cp	r12, r1
    14fa:	d1 04       	cpc	r13, r1
    14fc:	f9 f4       	brne	.+62     	; 0x153c <HIGHSCORE_add_score+0xe0>
    14fe:	05 30       	cpi	r16, 0x05	; 5
    1500:	11 05       	cpc	r17, r1
    1502:	e1 f4       	brne	.+56     	; 0x153c <HIGHSCORE_add_score+0xe0>
				OLED_reset();
    1504:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
				OLED_pos(4,0);
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
				OLED_printf(" %s is \n not in the top 6", name);
    1510:	9f 92       	push	r9
    1512:	af 92       	push	r10
    1514:	84 e8       	ldi	r24, 0x84	; 132
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	9f 93       	push	r25
    151a:	8f 93       	push	r24
    151c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	9f ef       	ldi	r25, 0xFF	; 255
    1524:	2c e2       	ldi	r18, 0x2C	; 44
    1526:	81 50       	subi	r24, 0x01	; 1
    1528:	90 40       	sbci	r25, 0x00	; 0
    152a:	20 40       	sbci	r18, 0x00	; 0
    152c:	e1 f7       	brne	.-8      	; 0x1526 <HIGHSCORE_add_score+0xca>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <HIGHSCORE_add_score+0xd4>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <HIGHSCORE_add_score+0xd6>
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <HIGHSCORE_add_score+0xec>

// When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
	highscore_info_t element;
	for (int i = start; i < MAX_SCORES; i++){
    153c:	0f 5f       	subi	r16, 0xFF	; 255
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
    1540:	06 30       	cpi	r16, 0x06	; 6
    1542:	11 05       	cpc	r17, r1
    1544:	09 f0       	breq	.+2      	; 0x1548 <HIGHSCORE_add_score+0xec>
    1546:	aa cf       	rjmp	.-172    	; 0x149c <HIGHSCORE_add_score+0x40>
				OLED_printf(" %s is \n not in the top 6", name);
				_delay_ms(3000);
			}
		}
	}
}
    1548:	6a 96       	adiw	r28, 0x1a	; 26
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	af 90       	pop	r10
    1568:	9f 90       	pop	r9
    156a:	08 95       	ret

0000156c <HIGHSCORE_highlight_letter>:
	}
	username[NUM_USERNAME_BYTES - 1] = '\0';
}

void HIGHSCORE_highlight_letter(int line, int prev_line)
{
    156c:	cf 93       	push	r28
    156e:	c8 2f       	mov	r28, r24
    1570:	86 2f       	mov	r24, r22
	OLED_pos(prev_line, 0);
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_printf("  ");
    1578:	2e e9       	ldi	r18, 0x9E	; 158
    157a:	32 e0       	ldi	r19, 0x02	; 2
    157c:	3f 93       	push	r19
    157e:	2f 93       	push	r18
    1580:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
	OLED_pos(line, 0);
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	8c 2f       	mov	r24, r28
    1588:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_print_arrow();
    158c:	0e 94 01 09 	call	0x1202	; 0x1202 <OLED_print_arrow>
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
}
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <HIGHSCORE_print_character_list>:

void HIGHSCORE_print_character_list(char start)
{
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	d8 2e       	mov	r13, r24
	OLED_reset();
    15a8:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
    15ac:	21 ea       	ldi	r18, 0xA1	; 161
    15ae:	32 e0       	ldi	r19, 0x02	; 2
    15b0:	3f 93       	push	r19
    15b2:	2f 93       	push	r18
    15b4:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
	for (char c = start; c < start + 7; c++){
    15b8:	cd 2d       	mov	r28, r13
    15ba:	d0 e0       	ldi	r29, 0x00	; 0
    15bc:	7e 01       	movw	r14, r28
    15be:	87 e0       	ldi	r24, 0x07	; 7
    15c0:	e8 0e       	add	r14, r24
    15c2:	f1 1c       	adc	r15, r1
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	ce 15       	cp	r28, r14
    15ca:	df 05       	cpc	r29, r15
    15cc:	ac f4       	brge	.+42     	; 0x15f8 <HIGHSCORE_print_character_list+0x60>
		OLED_goto_column(11);
		OLED_printf("%c\n", c);
    15ce:	0c eb       	ldi	r16, 0xBC	; 188
    15d0:	12 e0       	ldi	r17, 0x02	; 2
void HIGHSCORE_print_character_list(char start)
{
	OLED_reset();
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
	for (char c = start; c < start + 7; c++){
		OLED_goto_column(11);
    15d2:	8b e0       	ldi	r24, 0x0B	; 11
    15d4:	0e 94 c3 07 	call	0xf86	; 0xf86 <OLED_goto_column>
		OLED_printf("%c\n", c);
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	1f 93       	push	r17
    15de:	0f 93       	push	r16
    15e0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>

void HIGHSCORE_print_character_list(char start)
{
	OLED_reset();
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
	for (char c = start; c < start + 7; c++){
    15e4:	d3 94       	inc	r13
    15e6:	cd 2d       	mov	r28, r13
    15e8:	d0 e0       	ldi	r29, 0x00	; 0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	ce 15       	cp	r28, r14
    15f4:	df 05       	cpc	r29, r15
    15f6:	6c f3       	brlt	.-38     	; 0x15d2 <HIGHSCORE_print_character_list+0x3a>
		OLED_goto_column(11);
		OLED_printf("%c\n", c);
	}
}
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	08 95       	ret

00001608 <HIGHSCORE_get_username>:
	}
}


void HIGHSCORE_get_username(char* username)
{
    1608:	8f 92       	push	r8
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	7c 01       	movw	r14, r24
	int i = 0;
	int line = 1;
	int prev_line = 1;
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
    161e:	81 e6       	ldi	r24, 0x61	; 97
    1620:	0e 94 cc 0a 	call	0x1598	; 0x1598 <HIGHSCORE_print_character_list>
	HIGHSCORE_highlight_letter(line, prev_line);
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 b6 0a 	call	0x156c	; 0x156c <HIGHSCORE_highlight_letter>
void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
	int prev_line = 1;
	char ch = 'a';
    1630:	11 e6       	ldi	r17, 0x61	; 97

void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
	int prev_line = 1;
    1632:	bb 24       	eor	r11, r11
    1634:	b3 94       	inc	r11
    1636:	c1 2c       	mov	r12, r1


void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
    1638:	c1 e0       	ldi	r28, 0x01	; 1
    163a:	d0 e0       	ldi	r29, 0x00	; 0
}


void HIGHSCORE_get_username(char* username)
{
	int i = 0;
    163c:	81 2c       	mov	r8, r1
    163e:	91 2c       	mov	r9, r1
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
	HIGHSCORE_highlight_letter(line, prev_line);
	
	while(i < NUM_USERNAME_BYTES - 1){
		if (JOY_button()){
    1640:	0e 94 23 07 	call	0xe46	; 0xe46 <JOY_button>
    1644:	89 2b       	or	r24, r25
    1646:	59 f0       	breq	.+22     	; 0x165e <HIGHSCORE_get_username+0x56>
			while(JOY_button());
    1648:	0e 94 23 07 	call	0xe46	; 0xe46 <JOY_button>
    164c:	89 2b       	or	r24, r25
    164e:	e1 f7       	brne	.-8      	; 0x1648 <HIGHSCORE_get_username+0x40>
			username[i] = ch;
    1650:	f7 01       	movw	r30, r14
    1652:	e8 0d       	add	r30, r8
    1654:	f9 1d       	adc	r31, r9
    1656:	10 83       	st	Z, r17
			i++;
    1658:	2f ef       	ldi	r18, 0xFF	; 255
    165a:	82 1a       	sub	r8, r18
    165c:	92 0a       	sbc	r9, r18
		}
		switch(JOY_get_direction()){
    165e:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	29 f1       	breq	.+74     	; 0x16b0 <HIGHSCORE_get_username+0xa8>
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	09 f4       	brne	.+2      	; 0x166c <HIGHSCORE_get_username+0x64>
    166a:	4a c0       	rjmp	.+148    	; 0x1700 <HIGHSCORE_get_username+0xf8>
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	09 f0       	breq	.+2      	; 0x1672 <HIGHSCORE_get_username+0x6a>
    1670:	55 c0       	rjmp	.+170    	; 0x171c <HIGHSCORE_get_username+0x114>
    1672:	4b c0       	rjmp	.+150    	; 0x170a <HIGHSCORE_get_username+0x102>
			
			case UP:
				while(JOY_get_direction() == UP){
					if (ch > 'a'){
    1674:	12 36       	cpi	r17, 0x62	; 98
    1676:	40 f0       	brcs	.+16     	; 0x1688 <HIGHSCORE_get_username+0x80>
						ch--;
    1678:	11 50       	subi	r17, 0x01	; 1
						if (line == 1)
    167a:	c1 30       	cpi	r28, 0x01	; 1
    167c:	d1 05       	cpc	r29, r1
    167e:	21 f4       	brne	.+8      	; 0x1688 <HIGHSCORE_get_username+0x80>
						HIGHSCORE_print_character_list(ch);
    1680:	81 2f       	mov	r24, r17
    1682:	0e 94 cc 0a 	call	0x1598	; 0x1598 <HIGHSCORE_print_character_list>
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <HIGHSCORE_get_username+0x8c>
					}
					if (line > 1){
    1688:	c2 30       	cpi	r28, 0x02	; 2
    168a:	d1 05       	cpc	r29, r1
    168c:	1c f0       	brlt	.+6      	; 0x1694 <HIGHSCORE_get_username+0x8c>
						prev_line = line;
						line--;
    168e:	bc 2e       	mov	r11, r28
    1690:	cd 2e       	mov	r12, r29
    1692:	21 97       	sbiw	r28, 0x01	; 1
					}
					HIGHSCORE_highlight_letter(line, prev_line);
    1694:	6b 2d       	mov	r22, r11
    1696:	7c 2d       	mov	r23, r12
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 b6 0a 	call	0x156c	; 0x156c <HIGHSCORE_highlight_letter>
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	9f ef       	ldi	r25, 0xFF	; 255
    16a2:	e2 e0       	ldi	r30, 0x02	; 2
    16a4:	81 50       	subi	r24, 0x01	; 1
    16a6:	90 40       	sbci	r25, 0x00	; 0
    16a8:	e0 40       	sbci	r30, 0x00	; 0
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <HIGHSCORE_get_username+0x9c>
    16ac:	00 c0       	rjmp	.+0      	; 0x16ae <HIGHSCORE_get_username+0xa6>
    16ae:	00 c0       	rjmp	.+0      	; 0x16b0 <HIGHSCORE_get_username+0xa8>
			i++;
		}
		switch(JOY_get_direction()){
			
			case UP:
				while(JOY_get_direction() == UP){
    16b0:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	f1 f2       	breq	.-68     	; 0x1674 <HIGHSCORE_get_username+0x6c>
    16b8:	31 c0       	rjmp	.+98     	; 0x171c <HIGHSCORE_get_username+0x114>
				}
				break;
			
			case DOWN:
				while(JOY_get_direction() == DOWN){
					if (ch < 'z'){
    16ba:	1a 37       	cpi	r17, 0x7A	; 122
    16bc:	68 f4       	brcc	.+26     	; 0x16d8 <HIGHSCORE_get_username+0xd0>
						ch++;
    16be:	aa 24       	eor	r10, r10
    16c0:	a3 94       	inc	r10
    16c2:	a1 0e       	add	r10, r17
						if (line == 7)
    16c4:	c7 30       	cpi	r28, 0x07	; 7
    16c6:	d1 05       	cpc	r29, r1
    16c8:	31 f4       	brne	.+12     	; 0x16d6 <HIGHSCORE_get_username+0xce>
						HIGHSCORE_print_character_list(ch - 6);
    16ca:	8b ef       	ldi	r24, 0xFB	; 251
    16cc:	81 0f       	add	r24, r17
    16ce:	0e 94 cc 0a 	call	0x1598	; 0x1598 <HIGHSCORE_print_character_list>
				break;
			
			case DOWN:
				while(JOY_get_direction() == DOWN){
					if (ch < 'z'){
						ch++;
    16d2:	1a 2d       	mov	r17, r10
    16d4:	07 c0       	rjmp	.+14     	; 0x16e4 <HIGHSCORE_get_username+0xdc>
    16d6:	1a 2d       	mov	r17, r10
						if (line == 7)
						HIGHSCORE_print_character_list(ch - 6);
					}
					if (line < 7){
    16d8:	c7 30       	cpi	r28, 0x07	; 7
    16da:	d1 05       	cpc	r29, r1
    16dc:	1c f4       	brge	.+6      	; 0x16e4 <HIGHSCORE_get_username+0xdc>
						prev_line = line;
						line++;
    16de:	bc 2e       	mov	r11, r28
    16e0:	cd 2e       	mov	r12, r29
    16e2:	21 96       	adiw	r28, 0x01	; 1
					}
					HIGHSCORE_highlight_letter(line, prev_line);
    16e4:	6b 2d       	mov	r22, r11
    16e6:	7c 2d       	mov	r23, r12
    16e8:	ce 01       	movw	r24, r28
    16ea:	0e 94 b6 0a 	call	0x156c	; 0x156c <HIGHSCORE_highlight_letter>
    16ee:	ff ef       	ldi	r31, 0xFF	; 255
    16f0:	2f ef       	ldi	r18, 0xFF	; 255
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	f1 50       	subi	r31, 0x01	; 1
    16f6:	20 40       	sbci	r18, 0x00	; 0
    16f8:	80 40       	sbci	r24, 0x00	; 0
    16fa:	e1 f7       	brne	.-8      	; 0x16f4 <HIGHSCORE_get_username+0xec>
    16fc:	00 c0       	rjmp	.+0      	; 0x16fe <HIGHSCORE_get_username+0xf6>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <HIGHSCORE_get_username+0xf8>
					_delay_ms(200);
				}
				break;
			
			case DOWN:
				while(JOY_get_direction() == DOWN){
    1700:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	c9 f2       	breq	.-78     	; 0x16ba <HIGHSCORE_get_username+0xb2>
    1708:	09 c0       	rjmp	.+18     	; 0x171c <HIGHSCORE_get_username+0x114>
					_delay_ms(200);
				}
				break;
			
			case RIGHT:
				while(JOY_get_direction() == RIGHT);
    170a:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	e1 f3       	breq	.-8      	; 0x170a <HIGHSCORE_get_username+0x102>
				username[i] = '\0';
    1712:	f7 01       	movw	r30, r14
    1714:	e8 0d       	add	r30, r8
    1716:	f9 1d       	adc	r31, r9
    1718:	10 82       	st	Z, r1
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <HIGHSCORE_get_username+0x11e>
	int prev_line = 1;
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
	HIGHSCORE_highlight_letter(line, prev_line);
	
	while(i < NUM_USERNAME_BYTES - 1){
    171c:	9a e0       	ldi	r25, 0x0A	; 10
    171e:	89 16       	cp	r8, r25
    1720:	91 04       	cpc	r9, r1
    1722:	0c f4       	brge	.+2      	; 0x1726 <HIGHSCORE_get_username+0x11e>
    1724:	8d cf       	rjmp	.-230    	; 0x1640 <HIGHSCORE_get_username+0x38>
			
			default:
				break;
		}
	}
	username[NUM_USERNAME_BYTES - 1] = '\0';
    1726:	f7 01       	movw	r30, r14
    1728:	12 86       	std	Z+10, r1	; 0x0a
}
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	cf 90       	pop	r12
    1736:	bf 90       	pop	r11
    1738:	af 90       	pop	r10
    173a:	9f 90       	pop	r9
    173c:	8f 90       	pop	r8
    173e:	08 95       	ret

00001740 <HIGHSCORE_print>:
		OLED_printf("%c\n", c);
	}
}

void HIGHSCORE_print()
{
    1740:	9f 92       	push	r9
    1742:	af 92       	push	r10
    1744:	bf 92       	push	r11
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	6a 97       	sbiw	r28, 0x1a	; 26
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
	int max_num_highscores = 5;
	highscore_info_t user;
	OLED_reset();
    1766:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
	OLED_printf("Highscores");
    176a:	89 e7       	ldi	r24, 0x79	; 121
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
	OLED_pos(1, 0);
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_printf("#  Score");
    177e:	80 ec       	ldi	r24, 0xC0	; 192
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	9f 93       	push	r25
    1784:	8f 93       	push	r24
    1786:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
	OLED_goto_column(55);
    178a:	87 e3       	ldi	r24, 0x37	; 55
    178c:	0e 94 c3 07 	call	0xf86	; 0xf86 <OLED_goto_column>
	OLED_printf("User\n");
    1790:	89 ec       	ldi	r24, 0xC9	; 201
    1792:	92 e0       	ldi	r25, 0x02	; 2
    1794:	9f 93       	push	r25
    1796:	8f 93       	push	r24
    1798:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
	for (int i = 0; i < max_num_highscores; i++){
    17a8:	00 e0       	ldi	r16, 0x00	; 0
    17aa:	10 e0       	ldi	r17, 0x00	; 0
		user = HIGHSCORE_load_from_eeprom(i);
    17ac:	0f 2e       	mov	r0, r31
    17ae:	fd e0       	ldi	r31, 0x0D	; 13
    17b0:	9f 2e       	mov	r9, r31
    17b2:	f0 2d       	mov	r31, r0
		OLED_printf("%d  %d", i+1, user.score);
    17b4:	0f 2e       	mov	r0, r31
    17b6:	ff ec       	ldi	r31, 0xCF	; 207
    17b8:	af 2e       	mov	r10, r31
    17ba:	f2 e0       	ldi	r31, 0x02	; 2
    17bc:	bf 2e       	mov	r11, r31
    17be:	f0 2d       	mov	r31, r0
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
    17c0:	6e 01       	movw	r12, r28
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	c8 0e       	add	r12, r24
    17c6:	d1 1c       	adc	r13, r1
    17c8:	0f 2e       	mov	r0, r31
    17ca:	f6 ed       	ldi	r31, 0xD6	; 214
    17cc:	ef 2e       	mov	r14, r31
    17ce:	f2 e0       	ldi	r31, 0x02	; 2
    17d0:	ff 2e       	mov	r15, r31
    17d2:	f0 2d       	mov	r31, r0
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
		user = HIGHSCORE_load_from_eeprom(i);
    17d4:	b8 01       	movw	r22, r16
    17d6:	ce 01       	movw	r24, r28
    17d8:	0e 96       	adiw	r24, 0x0e	; 14
    17da:	0e 94 90 09 	call	0x1320	; 0x1320 <HIGHSCORE_load_from_eeprom>
    17de:	fe 01       	movw	r30, r28
    17e0:	3e 96       	adiw	r30, 0x0e	; 14
    17e2:	de 01       	movw	r26, r28
    17e4:	11 96       	adiw	r26, 0x01	; 1
    17e6:	89 2d       	mov	r24, r9
    17e8:	01 90       	ld	r0, Z+
    17ea:	0d 92       	st	X+, r0
    17ec:	8a 95       	dec	r24
    17ee:	e1 f7       	brne	.-8      	; 0x17e8 <HIGHSCORE_print+0xa8>
		OLED_printf("%d  %d", i+1, user.score);
    17f0:	0f 5f       	subi	r16, 0xFF	; 255
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	8f 93       	push	r24
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	8f 93       	push	r24
    17fc:	1f 93       	push	r17
    17fe:	0f 93       	push	r16
    1800:	bf 92       	push	r11
    1802:	af 92       	push	r10
    1804:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
		OLED_goto_column(55);
    1808:	87 e3       	ldi	r24, 0x37	; 55
    180a:	0e 94 c3 07 	call	0xf86	; 0xf86 <OLED_goto_column>
		OLED_printf("%s\n",user.name);
    180e:	df 92       	push	r13
    1810:	cf 92       	push	r12
    1812:	ff 92       	push	r15
    1814:	ef 92       	push	r14
    1816:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
	OLED_printf("Highscores");
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	05 30       	cpi	r16, 0x05	; 5
    1826:	11 05       	cpc	r17, r1
    1828:	a9 f6       	brne	.-86     	; 0x17d4 <HIGHSCORE_print+0x94>
		user = HIGHSCORE_load_from_eeprom(i);
		OLED_printf("%d  %d", i+1, user.score);
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
	}
}
    182a:	6a 96       	adiw	r28, 0x1a	; 26
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	af 90       	pop	r10
    184a:	9f 90       	pop	r9
    184c:	08 95       	ret

0000184e <HIGHSCORE_clear>:

void HIGHSCORE_clear()
{
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    1852:	c0 e0       	ldi	r28, 0x00	; 0
    1854:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_write(0, i);
    1856:	be 01       	movw	r22, r28
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_write>
	}
}

void HIGHSCORE_clear()
{
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    185e:	21 96       	adiw	r28, 0x01	; 1
    1860:	c4 35       	cpi	r28, 0x54	; 84
    1862:	d1 05       	cpc	r29, r1
    1864:	c1 f7       	brne	.-16     	; 0x1856 <HIGHSCORE_clear+0x8>
		EEPROM_write(0, i);
	}
}
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

int main( void )
{
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	66 97       	sbiw	r28, 0x16	; 22
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
	char username[NUM_USERNAME_BYTES];
	
	cli();
    1880:	f8 94       	cli
	UART_Init( MYUBRR );
    1882:	8f e1       	ldi	r24, 0x1F	; 31
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 93 04 	call	0x926	; 0x926 <UART_Init>
	ADC_init();
    188a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ADC_init>
	JOY_init();
    188e:	0e 94 4c 07 	call	0xe98	; 0xe98 <JOY_init>
	TOUCH_init();
    1892:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TOUCH_init>
	MENU_init();
    1896:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <MENU_init>
	CAN_init();
    189a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <CAN_init>
	TIMER_init();
    189e:	0e 94 38 09 	call	0x1270	; 0x1270 <TIMER_init>
	SEND2CAN_init();
    18a2:	0e 94 20 06 	call	0xc40	; 0xc40 <SEND2CAN_init>
	
	//printf("Init done\n");
	sei();
    18a6:	78 94       	sei
	STATE_OPTION_set(menu);
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
int main( void )
{
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
    18ae:	e1 2c       	mov	r14, r1
    18b0:	f1 2c       	mov	r15, r1

int main( void )
{
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
    18b2:	03 e0       	ldi	r16, 0x03	; 3
    18b4:	10 e0       	ldi	r17, 0x00	; 0
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
    18b6:	0f 2e       	mov	r0, r31
    18b8:	f3 e0       	ldi	r31, 0x03	; 3
    18ba:	cf 2e       	mov	r12, r31
    18bc:	f0 2d       	mov	r31, r0
    18be:	d1 2c       	mov	r13, r1
	//printf("Init done\n");
	sei();
	STATE_OPTION_set(menu);

	while(1){
		switch (STATE_OPTION_get()){
    18c0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <STATE_OPTION_get>
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	01 f1       	breq	.+64     	; 0x1908 <main+0x9c>
    18c8:	28 f4       	brcc	.+10     	; 0x18d4 <main+0x68>
    18ca:	88 23       	and	r24, r24
    18cc:	41 f0       	breq	.+16     	; 0x18de <main+0x72>
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	59 f0       	breq	.+22     	; 0x18e8 <main+0x7c>
    18d2:	47 c0       	rjmp	.+142    	; 0x1962 <main+0xf6>
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	d9 f0       	breq	.+54     	; 0x190e <main+0xa2>
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	29 f1       	breq	.+74     	; 0x1926 <main+0xba>
    18dc:	42 c0       	rjmp	.+132    	; 0x1962 <main+0xf6>
			case menu:
				MENU_select_item();
    18de:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <MENU_select_item>
				MENU_navigate();
    18e2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <MENU_navigate>
				break;
    18e6:	40 c0       	rjmp	.+128    	; 0x1968 <main+0xfc>
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
    18e8:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <STATE_OPTION_get_speed>
    18ec:	0e 94 f4 06 	call	0xde8	; 0xde8 <SEND2CAN_send_speed>
				MENU_print_game_screen();
    18f0:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <MENU_print_game_screen>
				remaining_lives = 3;
				score = 0;
				TIMER_start();
    18f4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <TIMER_start>
				STATE_OPTION_set(game);
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
				score = 0;
    18fe:	e1 2c       	mov	r14, r1
    1900:	f1 2c       	mov	r15, r1
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
    1902:	0c 2d       	mov	r16, r12
    1904:	1d 2d       	mov	r17, r13
				score = 0;
				TIMER_start();
				STATE_OPTION_set(game);
				break;
    1906:	30 c0       	rjmp	.+96     	; 0x1968 <main+0xfc>
			case game:
				SEND2CAN_send_messages();
    1908:	0e 94 e7 06 	call	0xdce	; 0xdce <SEND2CAN_send_messages>
				break;
    190c:	2d c0       	rjmp	.+90     	; 0x1968 <main+0xfc>
			case game_pause:
				if(JOY_button()){
    190e:	0e 94 23 07 	call	0xe46	; 0xe46 <JOY_button>
    1912:	89 2b       	or	r24, r25
    1914:	49 f1       	breq	.+82     	; 0x1968 <main+0xfc>
					STATE_OPTION_set(game);
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
					MENU_print_game_screen();
    191c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <MENU_print_game_screen>
					TIMER_start();
    1920:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <TIMER_start>
    1924:	21 c0       	rjmp	.+66     	; 0x1968 <main+0xfc>
				}
				break;
			case game_over:
				MENU_print_game_over_screen(score);
    1926:	c7 01       	movw	r24, r14
    1928:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <MENU_print_game_over_screen>
    192c:	2f ef       	ldi	r18, 0xFF	; 255
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	9b e3       	ldi	r25, 0x3B	; 59
    1932:	21 50       	subi	r18, 0x01	; 1
    1934:	80 40       	sbci	r24, 0x00	; 0
    1936:	90 40       	sbci	r25, 0x00	; 0
    1938:	e1 f7       	brne	.-8      	; 0x1932 <main+0xc6>
    193a:	00 c0       	rjmp	.+0      	; 0x193c <main+0xd0>
    193c:	00 00       	nop
				_delay_ms(4000);
				HIGHSCORE_get_username(username);
    193e:	ce 01       	movw	r24, r28
    1940:	0c 96       	adiw	r24, 0x0c	; 12
    1942:	0e 94 04 0b 	call	0x1608	; 0x1608 <HIGHSCORE_get_username>
				HIGHSCORE_add_score(score, username, 0);
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	be 01       	movw	r22, r28
    194c:	64 5f       	subi	r22, 0xF4	; 244
    194e:	7f 4f       	sbci	r23, 0xFF	; 255
    1950:	c7 01       	movw	r24, r14
    1952:	0e 94 2e 0a 	call	0x145c	; 0x145c <HIGHSCORE_add_score>
				
				STATE_OPTION_set(menu);
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
				MENU_start_menu();
    195c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <MENU_start_menu>
				break;
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <main+0xfc>
			default:
				STATE_OPTION_set(menu);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
				break;
		}
		CAN_handle_interrupt(&receive);
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 a2 03 	call	0x744	; 0x744 <CAN_handle_interrupt>
		msg_type = receive.data[0];
		switch(msg_type){
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	85 30       	cpi	r24, 0x05	; 5
    1974:	f9 f4       	brne	.+62     	; 0x19b4 <main+0x148>
			case CAN_LIVES:
				if(remaining_lives > 1 && STATE_OPTION_get() == game){
    1976:	02 30       	cpi	r16, 0x02	; 2
    1978:	11 05       	cpc	r17, r1
    197a:	8c f0       	brlt	.+34     	; 0x199e <main+0x132>
    197c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <STATE_OPTION_get>
    1980:	82 30       	cpi	r24, 0x02	; 2
    1982:	69 f4       	brne	.+26     	; 0x199e <main+0x132>
					score = score + TIMER_stop();
    1984:	0e 94 62 09 	call	0x12c4	; 0x12c4 <TIMER_stop>
    1988:	e8 0e       	add	r14, r24
    198a:	f9 1e       	adc	r15, r25
					remaining_lives = remaining_lives - 1;
    198c:	01 50       	subi	r16, 0x01	; 1
    198e:	11 09       	sbc	r17, r1
					STATE_OPTION_set(game_pause);
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
					MENU_print_pause_screen(remaining_lives);
    1996:	c8 01       	movw	r24, r16
    1998:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MENU_print_pause_screen>
    199c:	0b c0       	rjmp	.+22     	; 0x19b4 <main+0x148>
					}
					else if (STATE_OPTION_get() == game){
    199e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <STATE_OPTION_get>
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	39 f4       	brne	.+14     	; 0x19b4 <main+0x148>
					score = score + TIMER_stop();
    19a6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <TIMER_stop>
    19aa:	e8 0e       	add	r14, r24
    19ac:	f9 1e       	adc	r15, r25
					STATE_OPTION_set(game_over);
    19ae:	84 e0       	ldi	r24, 0x04	; 4
    19b0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
    19b6:	97 e1       	ldi	r25, 0x17	; 23
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <main+0x14c>
    19bc:	00 c0       	rjmp	.+0      	; 0x19be <main+0x152>
    19be:	00 00       	nop
    19c0:	7f cf       	rjmp	.-258    	; 0x18c0 <main+0x54>

000019c2 <contrast_low_func>:
#include <string.h>
#include <util/delay.h>

menu_item_info_t main_menu, play_game, highscores, settings, buzzify, mario, starwars, stop, normal_speed, fast_speed, clear_highscores, contrast_level, invert_screen, contrast_low, contrast_medium, contrast_high;

void contrast_low_func(){ OLED_set_contrast( LOW_CONTRAST ); }
    19c2:	80 e1       	ldi	r24, 0x10	; 16
    19c4:	0e 94 c7 08 	call	0x118e	; 0x118e <OLED_set_contrast>
    19c8:	08 95       	ret

000019ca <contrast_medium_func>:
void contrast_medium_func(){ OLED_set_contrast( MEDIUM_CONTRAST ); }
    19ca:	80 e5       	ldi	r24, 0x50	; 80
    19cc:	0e 94 c7 08 	call	0x118e	; 0x118e <OLED_set_contrast>
    19d0:	08 95       	ret

000019d2 <contrast_high_func>:
void contrast_high_func(){ OLED_set_contrast( HIGH_CONTRAST ); }
    19d2:	80 ef       	ldi	r24, 0xF0	; 240
    19d4:	0e 94 c7 08 	call	0x118e	; 0x118e <OLED_set_contrast>
    19d8:	08 95       	ret

000019da <normal_speed_func>:
void normal_speed_func(){ STATE_OPTION_set_speed(1); STATE_OPTION_set(game_init); }
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <STATE_OPTION_set_speed>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
    19e8:	08 95       	ret

000019ea <fast_speed_func>:
void fast_speed_func(){ STATE_OPTION_set_speed(2); STATE_OPTION_set(game_init); }
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <STATE_OPTION_set_speed>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <STATE_OPTION_set>
    19f8:	08 95       	ret

000019fa <play_mario_func>:
void play_mario_func(){ BUZZ_start_song(0); }
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 07 05 	call	0xa0e	; 0xa0e <BUZZ_start_song>
    1a02:	08 95       	ret

00001a04 <play_sw_func>:
void play_sw_func(){ BUZZ_start_song(1); }
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 07 05 	call	0xa0e	; 0xa0e <BUZZ_start_song>
    1a0c:	08 95       	ret

00001a0e <stop_music_func>:
void stop_music_func(){ BUZZ_stop_song(); }
    1a0e:	0e 94 bb 04 	call	0x976	; 0x976 <BUZZ_stop_song>
    1a12:	08 95       	ret

00001a14 <MENU_highlight_item>:
	}
}


void MENU_highlight_item( void )
{
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
	for (int i = 1; i < current_menu->child_num + 1; i++){
    1a1c:	e0 91 f2 03 	lds	r30, 0x03F2
    1a20:	f0 91 f3 03 	lds	r31, 0x03F3
    1a24:	82 89       	ldd	r24, Z+18	; 0x12
    1a26:	93 89       	ldd	r25, Z+19	; 0x13
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	02 97       	sbiw	r24, 0x02	; 2
    1a2c:	cc f0       	brlt	.+50     	; 0x1a60 <MENU_highlight_item+0x4c>
    1a2e:	c1 e0       	ldi	r28, 0x01	; 1
    1a30:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i, 0);
		OLED_printf("  ");
    1a32:	0e e9       	ldi	r16, 0x9E	; 158
    1a34:	12 e0       	ldi	r17, 0x02	; 2


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
		OLED_pos(i, 0);
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	8c 2f       	mov	r24, r28
    1a3a:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
		OLED_printf("  ");
    1a3e:	1f 93       	push	r17
    1a40:	0f 93       	push	r16
    1a42:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
}


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
    1a46:	21 96       	adiw	r28, 0x01	; 1
    1a48:	e0 91 f2 03 	lds	r30, 0x03F2
    1a4c:	f0 91 f3 03 	lds	r31, 0x03F3
    1a50:	82 89       	ldd	r24, Z+18	; 0x12
    1a52:	93 89       	ldd	r25, Z+19	; 0x13
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	c8 17       	cp	r28, r24
    1a5c:	d9 07       	cpc	r29, r25
    1a5e:	5c f3       	brlt	.-42     	; 0x1a36 <MENU_highlight_item+0x22>
		OLED_pos(i, 0);
		OLED_printf("  ");
	}
	
	OLED_pos(line, 0);
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	80 91 f0 03 	lds	r24, 0x03F0
    1a66:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_print_arrow();
    1a6a:	0e 94 01 09 	call	0x1202	; 0x1202 <OLED_print_arrow>
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	08 95       	ret

00001a78 <MENU_print_menu>:
	MENU_highlight_item();
}


void MENU_print_menu( void )
{
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
	OLED_reset();
    1a80:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
	OLED_printf("%s",current_menu->name);
    1a84:	e0 91 f2 03 	lds	r30, 0x03F2
    1a88:	f0 91 f3 03 	lds	r31, 0x03F3
    1a8c:	81 81       	ldd	r24, Z+1	; 0x01
    1a8e:	8f 93       	push	r24
    1a90:	80 81       	ld	r24, Z
    1a92:	8f 93       	push	r24
    1a94:	8a ed       	ldi	r24, 0xDA	; 218
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
	if (current_child!= NULL){
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	80 91 f4 03 	lds	r24, 0x03F4
    1aac:	90 91 f5 03 	lds	r25, 0x03F5
    1ab0:	89 2b       	or	r24, r25
    1ab2:	11 f0       	breq	.+4      	; 0x1ab8 <MENU_print_menu+0x40>
		MENU_highlight_item();
    1ab4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MENU_highlight_item>
	}
	for (int i = 0; i < current_menu->child_num; i++){
    1ab8:	e0 91 f2 03 	lds	r30, 0x03F2
    1abc:	f0 91 f3 03 	lds	r31, 0x03F3
    1ac0:	82 89       	ldd	r24, Z+18	; 0x12
    1ac2:	93 89       	ldd	r25, Z+19	; 0x13
    1ac4:	18 16       	cp	r1, r24
    1ac6:	19 06       	cpc	r1, r25
    1ac8:	7c f5       	brge	.+94     	; 0x1b28 <MENU_print_menu+0xb0>
    1aca:	c0 e0       	ldi	r28, 0x00	; 0
    1acc:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
    1ace:	0a ed       	ldi	r16, 0xDA	; 218
    1ad0:	12 e0       	ldi	r17, 0x02	; 2
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
		OLED_pos(i + 1, 10);
    1ad2:	6a e0       	ldi	r22, 0x0A	; 10
    1ad4:	8c 2f       	mov	r24, r28
    1ad6:	8f 5f       	subi	r24, 0xFF	; 255
    1ad8:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
		OLED_goto_column(10);
    1adc:	8a e0       	ldi	r24, 0x0A	; 10
    1ade:	0e 94 c3 07 	call	0xf86	; 0xf86 <OLED_goto_column>
		OLED_printf("%s", current_menu->child[i]->name);
    1ae2:	80 91 f2 03 	lds	r24, 0x03F2
    1ae6:	90 91 f3 03 	lds	r25, 0x03F3
    1aea:	fe 01       	movw	r30, r28
    1aec:	32 96       	adiw	r30, 0x02	; 2
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	e8 0f       	add	r30, r24
    1af4:	f9 1f       	adc	r31, r25
    1af6:	01 90       	ld	r0, Z+
    1af8:	f0 81       	ld	r31, Z
    1afa:	e0 2d       	mov	r30, r0
    1afc:	81 81       	ldd	r24, Z+1	; 0x01
    1afe:	8f 93       	push	r24
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 93       	push	r24
    1b04:	1f 93       	push	r17
    1b06:	0f 93       	push	r16
    1b08:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
	OLED_reset();
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
    1b0c:	21 96       	adiw	r28, 0x01	; 1
    1b0e:	e0 91 f2 03 	lds	r30, 0x03F2
    1b12:	f0 91 f3 03 	lds	r31, 0x03F3
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	82 89       	ldd	r24, Z+18	; 0x12
    1b20:	93 89       	ldd	r25, Z+19	; 0x13
    1b22:	c8 17       	cp	r28, r24
    1b24:	d9 07       	cpc	r29, r25
    1b26:	ac f2       	brlt	.-86     	; 0x1ad2 <MENU_print_menu+0x5a>
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
	}
}
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	08 95       	ret

00001b32 <MENU_start_menu>:
	MENU_start_menu();
}

void MENU_start_menu( void )
{
	current_menu = &main_menu;
    1b32:	82 e6       	ldi	r24, 0x62	; 98
    1b34:	92 e0       	ldi	r25, 0x02	; 2
    1b36:	90 93 f3 03 	sts	0x03F3, r25
    1b3a:	80 93 f2 03 	sts	0x03F2, r24
	current_child = main_menu.child[0];
    1b3e:	80 91 66 02 	lds	r24, 0x0266
    1b42:	90 91 67 02 	lds	r25, 0x0267
    1b46:	90 93 f5 03 	sts	0x03F5, r25
    1b4a:	80 93 f4 03 	sts	0x03F4, r24
	line = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	90 93 f1 03 	sts	0x03F1, r25
    1b56:	80 93 f0 03 	sts	0x03F0, r24
	MENU_print_menu();
    1b5a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <MENU_print_menu>
	MENU_highlight_item();
    1b5e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MENU_highlight_item>
    1b62:	08 95       	ret

00001b64 <MENU_init>:
int line;


void MENU_init( void )
{
	OLED_init();
    1b64:	0e 94 37 08 	call	0x106e	; 0x106e <OLED_init>
	BUZZ_init();
    1b68:	0e 94 a6 04 	call	0x94c	; 0x94c <BUZZ_init>
	MENU_start_menu();
    1b6c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <MENU_start_menu>
    1b70:	08 95       	ret

00001b72 <MENU_navigate>:



void MENU_navigate( void )
{
	switch (JOY_get_direction()){
    1b72:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    1b76:	83 30       	cpi	r24, 0x03	; 3
    1b78:	39 f1       	breq	.+78     	; 0x1bc8 <MENU_navigate+0x56>
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <MENU_navigate+0xe>
    1b7e:	47 c0       	rjmp	.+142    	; 0x1c0e <MENU_navigate+0x9c>
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <MENU_navigate+0x14>
    1b84:	69 c0       	rjmp	.+210    	; 0x1c58 <MENU_navigate+0xe6>
		case LEFT:
			while(JOY_get_direction() == LEFT){}
    1b86:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	e1 f3       	breq	.-8      	; 0x1b86 <MENU_navigate+0x14>
			if (current_menu->parent != NULL){
    1b8e:	e0 91 f2 03 	lds	r30, 0x03F2
    1b92:	f0 91 f3 03 	lds	r31, 0x03F3
    1b96:	02 80       	ldd	r0, Z+2	; 0x02
    1b98:	f3 81       	ldd	r31, Z+3	; 0x03
    1b9a:	e0 2d       	mov	r30, r0
    1b9c:	30 97       	sbiw	r30, 0x00	; 0
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <MENU_navigate+0x30>
    1ba0:	5b c0       	rjmp	.+182    	; 0x1c58 <MENU_navigate+0xe6>
				line = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	90 93 f1 03 	sts	0x03F1, r25
    1baa:	80 93 f0 03 	sts	0x03F0, r24
				current_menu = current_menu->parent;
    1bae:	f0 93 f3 03 	sts	0x03F3, r31
    1bb2:	e0 93 f2 03 	sts	0x03F2, r30
				current_child = current_menu->child[0];
    1bb6:	84 81       	ldd	r24, Z+4	; 0x04
    1bb8:	95 81       	ldd	r25, Z+5	; 0x05
    1bba:	90 93 f5 03 	sts	0x03F5, r25
    1bbe:	80 93 f4 03 	sts	0x03F4, r24
				MENU_print_menu();
    1bc2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <MENU_print_menu>
    1bc6:	08 95       	ret
			}
			break;
		case UP:
			while(JOY_get_direction() == UP){}
    1bc8:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	e1 f3       	breq	.-8      	; 0x1bc8 <MENU_navigate+0x56>
			if (line > 1){
    1bd0:	80 91 f0 03 	lds	r24, 0x03F0
    1bd4:	90 91 f1 03 	lds	r25, 0x03F1
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	91 05       	cpc	r25, r1
    1bdc:	ec f1       	brlt	.+122    	; 0x1c58 <MENU_navigate+0xe6>
				line = line - 1;
    1bde:	9c 01       	movw	r18, r24
    1be0:	21 50       	subi	r18, 0x01	; 1
    1be2:	31 09       	sbc	r19, r1
    1be4:	30 93 f1 03 	sts	0x03F1, r19
    1be8:	20 93 f0 03 	sts	0x03F0, r18
				current_child = current_menu->child[line - 1];
    1bec:	e0 91 f2 03 	lds	r30, 0x03F2
    1bf0:	f0 91 f3 03 	lds	r31, 0x03F3
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	e8 0f       	add	r30, r24
    1bfa:	f9 1f       	adc	r31, r25
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	90 93 f5 03 	sts	0x03F5, r25
    1c04:	80 93 f4 03 	sts	0x03F4, r24
				MENU_highlight_item();
    1c08:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MENU_highlight_item>
    1c0c:	08 95       	ret
			}
			break;
		case DOWN:
			while(JOY_get_direction() == DOWN){}
    1c0e:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    1c12:	84 30       	cpi	r24, 0x04	; 4
    1c14:	e1 f3       	breq	.-8      	; 0x1c0e <MENU_navigate+0x9c>
			if (line < current_menu->child_num){
    1c16:	e0 91 f2 03 	lds	r30, 0x03F2
    1c1a:	f0 91 f3 03 	lds	r31, 0x03F3
    1c1e:	80 91 f0 03 	lds	r24, 0x03F0
    1c22:	90 91 f1 03 	lds	r25, 0x03F1
    1c26:	22 89       	ldd	r18, Z+18	; 0x12
    1c28:	33 89       	ldd	r19, Z+19	; 0x13
    1c2a:	82 17       	cp	r24, r18
    1c2c:	93 07       	cpc	r25, r19
    1c2e:	a4 f4       	brge	.+40     	; 0x1c58 <MENU_navigate+0xe6>
				line = line + 1;
    1c30:	9c 01       	movw	r18, r24
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	30 93 f1 03 	sts	0x03F1, r19
    1c3a:	20 93 f0 03 	sts	0x03F0, r18
				current_child = current_menu->child[line - 1];
    1c3e:	02 96       	adiw	r24, 0x02	; 2
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	e8 0f       	add	r30, r24
    1c46:	f9 1f       	adc	r31, r25
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	90 93 f5 03 	sts	0x03F5, r25
    1c50:	80 93 f4 03 	sts	0x03F4, r24
				MENU_highlight_item();
    1c54:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MENU_highlight_item>
    1c58:	08 95       	ret

00001c5a <MENU_print_pause_screen>:
	OLED_pos(line, 0);
	OLED_print_arrow();
}

void MENU_print_pause_screen(int remaining_lives)
{
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	c8 2f       	mov	r28, r24
    1c60:	d9 2f       	mov	r29, r25
	OLED_reset();
    1c62:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
	OLED_pos(3, 10);
    1c66:	6a e0       	ldi	r22, 0x0A	; 10
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_printf("You have %d lives left", remaining_lives);
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	8d ed       	ldi	r24, 0xDD	; 221
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	9f 93       	push	r25
    1c78:	8f 93       	push	r24
    1c7a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>

	OLED_pos(5, 10);
    1c7e:	6a e0       	ldi	r22, 0x0A	; 10
    1c80:	85 e0       	ldi	r24, 0x05	; 5
    1c82:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_printf("Press joystick");
    1c86:	84 ef       	ldi	r24, 0xF4	; 244
    1c88:	92 e0       	ldi	r25, 0x02	; 2
    1c8a:	9f 93       	push	r25
    1c8c:	8f 93       	push	r24
    1c8e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0

}
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <MENU_print_game_screen>:

void MENU_print_game_screen( void )
{
	OLED_reset();
    1ca4:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
	OLED_pos(3, 30);
    1ca8:	6e e1       	ldi	r22, 0x1E	; 30
    1caa:	83 e0       	ldi	r24, 0x03	; 3
    1cac:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_printf("Play game :D");
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	93 e0       	ldi	r25, 0x03	; 3
    1cb4:	9f 93       	push	r25
    1cb6:	8f 93       	push	r24
    1cb8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	08 95       	ret

00001cc2 <MENU_print_game_over_screen>:
}

void MENU_print_game_over_screen(int score)
{
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	c8 2f       	mov	r28, r24
    1cc8:	d9 2f       	mov	r29, r25
	OLED_reset();
    1cca:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
	OLED_pos(3, 35);
    1cce:	63 e2       	ldi	r22, 0x23	; 35
    1cd0:	83 e0       	ldi	r24, 0x03	; 3
    1cd2:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_printf("Game over...");
    1cd6:	20 e1       	ldi	r18, 0x10	; 16
    1cd8:	33 e0       	ldi	r19, 0x03	; 3
    1cda:	3f 93       	push	r19
    1cdc:	2f 93       	push	r18
    1cde:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
	OLED_pos(4, 10);
    1ce2:	6a e0       	ldi	r22, 0x0A	; 10
    1ce4:	84 e0       	ldi	r24, 0x04	; 4
    1ce6:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_printf("You lasted %d seconds", score);
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	8d e1       	ldi	r24, 0x1D	; 29
    1cf0:	93 e0       	ldi	r25, 0x03	; 3
    1cf2:	9f 93       	push	r25
    1cf4:	8f 93       	push	r24
    1cf6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
}
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <MENU_print_cleared_highscores>:

void MENU_print_cleared_highscores( void )
{
	OLED_reset();
    1d0c:	0e 94 2b 08 	call	0x1056	; 0x1056 <OLED_reset>
	OLED_pos(3, 15);
    1d10:	6f e0       	ldi	r22, 0x0F	; 15
    1d12:	83 e0       	ldi	r24, 0x03	; 3
    1d14:	0e 94 ed 07 	call	0xfda	; 0xfda <OLED_pos>
	OLED_printf("Highscores cleared");
    1d18:	83 e3       	ldi	r24, 0x33	; 51
    1d1a:	93 e0       	ldi	r25, 0x03	; 3
    1d1c:	9f 93       	push	r25
    1d1e:	8f 93       	push	r24
    1d20:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <OLED_printf>
    1d24:	2f ef       	ldi	r18, 0xFF	; 255
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	9d e1       	ldi	r25, 0x1D	; 29
    1d2a:	21 50       	subi	r18, 0x01	; 1
    1d2c:	80 40       	sbci	r24, 0x00	; 0
    1d2e:	90 40       	sbci	r25, 0x00	; 0
    1d30:	e1 f7       	brne	.-8      	; 0x1d2a <MENU_print_cleared_highscores+0x1e>
    1d32:	00 c0       	rjmp	.+0      	; 0x1d34 <MENU_print_cleared_highscores+0x28>
    1d34:	00 00       	nop
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	08 95       	ret

00001d3c <MENU_select_item>:



void MENU_select_item( void )
{
	if ((JOY_button() || JOY_get_direction() == RIGHT) && current_child!= NULL){
    1d3c:	0e 94 23 07 	call	0xe46	; 0xe46 <JOY_button>
    1d40:	89 2b       	or	r24, r25
    1d42:	29 f4       	brne	.+10     	; 0x1d4e <MENU_select_item+0x12>
    1d44:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    1d48:	82 30       	cpi	r24, 0x02	; 2
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <MENU_select_item+0x12>
    1d4c:	4e c0       	rjmp	.+156    	; 0x1dea <MENU_select_item+0xae>
    1d4e:	e0 91 f4 03 	lds	r30, 0x03F4
    1d52:	f0 91 f5 03 	lds	r31, 0x03F5
    1d56:	30 97       	sbiw	r30, 0x00	; 0
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <MENU_select_item+0x20>
    1d5a:	47 c0       	rjmp	.+142    	; 0x1dea <MENU_select_item+0xae>
		if (current_child->child[0] != NULL){
    1d5c:	84 81       	ldd	r24, Z+4	; 0x04
    1d5e:	95 81       	ldd	r25, Z+5	; 0x05
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	89 f0       	breq	.+34     	; 0x1d86 <MENU_select_item+0x4a>
			current_menu = current_child;
    1d64:	f0 93 f3 03 	sts	0x03F3, r31
    1d68:	e0 93 f2 03 	sts	0x03F2, r30
			current_child = current_child->child[0];
    1d6c:	90 93 f5 03 	sts	0x03F5, r25
    1d70:	80 93 f4 03 	sts	0x03F4, r24
			line = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	90 93 f1 03 	sts	0x03F1, r25
    1d7c:	80 93 f0 03 	sts	0x03F0, r24
			MENU_print_menu();
    1d80:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <MENU_print_menu>
    1d84:	2a c0       	rjmp	.+84     	; 0x1dda <MENU_select_item+0x9e>
		}
		else if (current_child->functionPtr != NULL){
    1d86:	04 88       	ldd	r0, Z+20	; 0x14
    1d88:	f5 89       	ldd	r31, Z+21	; 0x15
    1d8a:	e0 2d       	mov	r30, r0
    1d8c:	30 97       	sbiw	r30, 0x00	; 0
    1d8e:	29 f1       	breq	.+74     	; 0x1dda <MENU_select_item+0x9e>
			current_child->functionPtr();
    1d90:	09 95       	icall
			if(current_child == &clear_highscores){
    1d92:	80 91 f4 03 	lds	r24, 0x03F4
    1d96:	90 91 f5 03 	lds	r25, 0x03F5
    1d9a:	21 e0       	ldi	r18, 0x01	; 1
    1d9c:	86 38       	cpi	r24, 0x86	; 134
    1d9e:	92 07       	cpc	r25, r18
    1da0:	29 f4       	brne	.+10     	; 0x1dac <MENU_select_item+0x70>
				MENU_print_cleared_highscores();
    1da2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <MENU_print_cleared_highscores>
				MENU_print_menu();
    1da6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <MENU_print_menu>
    1daa:	17 c0       	rjmp	.+46     	; 0x1dda <MENU_select_item+0x9e>
			}
			else if(current_child == &highscores){
    1dac:	86 53       	subi	r24, 0x36	; 54
    1dae:	92 40       	sbci	r25, 0x02	; 2
    1db0:	a1 f4       	brne	.+40     	; 0x1dda <MENU_select_item+0x9e>
				current_menu = current_child;
    1db2:	86 e3       	ldi	r24, 0x36	; 54
    1db4:	92 e0       	ldi	r25, 0x02	; 2
    1db6:	90 93 f3 03 	sts	0x03F3, r25
    1dba:	80 93 f2 03 	sts	0x03F2, r24
				current_child = current_child->child[0];
    1dbe:	80 91 3a 02 	lds	r24, 0x023A
    1dc2:	90 91 3b 02 	lds	r25, 0x023B
    1dc6:	90 93 f5 03 	sts	0x03F5, r25
    1dca:	80 93 f4 03 	sts	0x03F4, r24
				line = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	90 93 f1 03 	sts	0x03F1, r25
    1dd6:	80 93 f0 03 	sts	0x03F0, r24
			}
		}
		while(JOY_button() || JOY_get_direction() == RIGHT);
    1dda:	0e 94 23 07 	call	0xe46	; 0xe46 <JOY_button>
    1dde:	89 2b       	or	r24, r25
    1de0:	e1 f7       	brne	.-8      	; 0x1dda <MENU_select_item+0x9e>
    1de2:	0e 94 96 07 	call	0xf2c	; 0xf2c <JOY_get_direction>
    1de6:	82 30       	cpi	r24, 0x02	; 2
    1de8:	c1 f3       	breq	.-16     	; 0x1dda <MENU_select_item+0x9e>
    1dea:	08 95       	ret

00001dec <STATE_OPTION_set>:
state_t state = menu;
int speed;

void STATE_OPTION_set(state_t new_state)
{
	state = new_state;
    1dec:	80 93 e9 03 	sts	0x03E9, r24
    1df0:	08 95       	ret

00001df2 <STATE_OPTION_get>:
}

state_t STATE_OPTION_get(void)
{
	return state;
}
    1df2:	80 91 e9 03 	lds	r24, 0x03E9
    1df6:	08 95       	ret

00001df8 <STATE_OPTION_set_speed>:

void STATE_OPTION_set_speed(int new_speed)
{
	speed = new_speed;
    1df8:	90 93 f7 03 	sts	0x03F7, r25
    1dfc:	80 93 f6 03 	sts	0x03F6, r24
    1e00:	08 95       	ret

00001e02 <STATE_OPTION_get_speed>:
}

int STATE_OPTION_get_speed(void)
{
	return speed;
    1e02:	80 91 f6 03 	lds	r24, 0x03F6
    1e06:	90 91 f7 03 	lds	r25, 0x03F7
    1e0a:	08 95       	ret

00001e0c <__cmpsf2>:
    1e0c:	97 d0       	rcall	.+302    	; 0x1f3c <__fp_cmp>
    1e0e:	08 f4       	brcc	.+2      	; 0x1e12 <__cmpsf2+0x6>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	08 95       	ret

00001e14 <__divsf3>:
    1e14:	0c d0       	rcall	.+24     	; 0x1e2e <__divsf3x>
    1e16:	cd c0       	rjmp	.+410    	; 0x1fb2 <__fp_round>
    1e18:	c5 d0       	rcall	.+394    	; 0x1fa4 <__fp_pscB>
    1e1a:	40 f0       	brcs	.+16     	; 0x1e2c <__divsf3+0x18>
    1e1c:	bc d0       	rcall	.+376    	; 0x1f96 <__fp_pscA>
    1e1e:	30 f0       	brcs	.+12     	; 0x1e2c <__divsf3+0x18>
    1e20:	21 f4       	brne	.+8      	; 0x1e2a <__divsf3+0x16>
    1e22:	5f 3f       	cpi	r21, 0xFF	; 255
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <__divsf3+0x18>
    1e26:	ae c0       	rjmp	.+348    	; 0x1f84 <__fp_inf>
    1e28:	51 11       	cpse	r21, r1
    1e2a:	f7 c0       	rjmp	.+494    	; 0x201a <__fp_szero>
    1e2c:	b1 c0       	rjmp	.+354    	; 0x1f90 <__fp_nan>

00001e2e <__divsf3x>:
    1e2e:	d2 d0       	rcall	.+420    	; 0x1fd4 <__fp_split3>
    1e30:	98 f3       	brcs	.-26     	; 0x1e18 <__divsf3+0x4>

00001e32 <__divsf3_pse>:
    1e32:	99 23       	and	r25, r25
    1e34:	c9 f3       	breq	.-14     	; 0x1e28 <__divsf3+0x14>
    1e36:	55 23       	and	r21, r21
    1e38:	b1 f3       	breq	.-20     	; 0x1e26 <__divsf3+0x12>
    1e3a:	95 1b       	sub	r25, r21
    1e3c:	55 0b       	sbc	r21, r21
    1e3e:	bb 27       	eor	r27, r27
    1e40:	aa 27       	eor	r26, r26
    1e42:	62 17       	cp	r22, r18
    1e44:	73 07       	cpc	r23, r19
    1e46:	84 07       	cpc	r24, r20
    1e48:	38 f0       	brcs	.+14     	; 0x1e58 <__divsf3_pse+0x26>
    1e4a:	9f 5f       	subi	r25, 0xFF	; 255
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	22 0f       	add	r18, r18
    1e50:	33 1f       	adc	r19, r19
    1e52:	44 1f       	adc	r20, r20
    1e54:	aa 1f       	adc	r26, r26
    1e56:	a9 f3       	breq	.-22     	; 0x1e42 <__divsf3_pse+0x10>
    1e58:	33 d0       	rcall	.+102    	; 0x1ec0 <__divsf3_pse+0x8e>
    1e5a:	0e 2e       	mov	r0, r30
    1e5c:	3a f0       	brmi	.+14     	; 0x1e6c <__divsf3_pse+0x3a>
    1e5e:	e0 e8       	ldi	r30, 0x80	; 128
    1e60:	30 d0       	rcall	.+96     	; 0x1ec2 <__divsf3_pse+0x90>
    1e62:	91 50       	subi	r25, 0x01	; 1
    1e64:	50 40       	sbci	r21, 0x00	; 0
    1e66:	e6 95       	lsr	r30
    1e68:	00 1c       	adc	r0, r0
    1e6a:	ca f7       	brpl	.-14     	; 0x1e5e <__divsf3_pse+0x2c>
    1e6c:	29 d0       	rcall	.+82     	; 0x1ec0 <__divsf3_pse+0x8e>
    1e6e:	fe 2f       	mov	r31, r30
    1e70:	27 d0       	rcall	.+78     	; 0x1ec0 <__divsf3_pse+0x8e>
    1e72:	66 0f       	add	r22, r22
    1e74:	77 1f       	adc	r23, r23
    1e76:	88 1f       	adc	r24, r24
    1e78:	bb 1f       	adc	r27, r27
    1e7a:	26 17       	cp	r18, r22
    1e7c:	37 07       	cpc	r19, r23
    1e7e:	48 07       	cpc	r20, r24
    1e80:	ab 07       	cpc	r26, r27
    1e82:	b0 e8       	ldi	r27, 0x80	; 128
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <__divsf3_pse+0x56>
    1e86:	bb 0b       	sbc	r27, r27
    1e88:	80 2d       	mov	r24, r0
    1e8a:	bf 01       	movw	r22, r30
    1e8c:	ff 27       	eor	r31, r31
    1e8e:	93 58       	subi	r25, 0x83	; 131
    1e90:	5f 4f       	sbci	r21, 0xFF	; 255
    1e92:	2a f0       	brmi	.+10     	; 0x1e9e <__divsf3_pse+0x6c>
    1e94:	9e 3f       	cpi	r25, 0xFE	; 254
    1e96:	51 05       	cpc	r21, r1
    1e98:	68 f0       	brcs	.+26     	; 0x1eb4 <__divsf3_pse+0x82>
    1e9a:	74 c0       	rjmp	.+232    	; 0x1f84 <__fp_inf>
    1e9c:	be c0       	rjmp	.+380    	; 0x201a <__fp_szero>
    1e9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea0:	ec f3       	brlt	.-6      	; 0x1e9c <__divsf3_pse+0x6a>
    1ea2:	98 3e       	cpi	r25, 0xE8	; 232
    1ea4:	dc f3       	brlt	.-10     	; 0x1e9c <__divsf3_pse+0x6a>
    1ea6:	86 95       	lsr	r24
    1ea8:	77 95       	ror	r23
    1eaa:	67 95       	ror	r22
    1eac:	b7 95       	ror	r27
    1eae:	f7 95       	ror	r31
    1eb0:	9f 5f       	subi	r25, 0xFF	; 255
    1eb2:	c9 f7       	brne	.-14     	; 0x1ea6 <__divsf3_pse+0x74>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	91 1d       	adc	r25, r1
    1eb8:	96 95       	lsr	r25
    1eba:	87 95       	ror	r24
    1ebc:	97 f9       	bld	r25, 7
    1ebe:	08 95       	ret
    1ec0:	e1 e0       	ldi	r30, 0x01	; 1
    1ec2:	66 0f       	add	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	bb 1f       	adc	r27, r27
    1eca:	62 17       	cp	r22, r18
    1ecc:	73 07       	cpc	r23, r19
    1ece:	84 07       	cpc	r24, r20
    1ed0:	ba 07       	cpc	r27, r26
    1ed2:	20 f0       	brcs	.+8      	; 0x1edc <__divsf3_pse+0xaa>
    1ed4:	62 1b       	sub	r22, r18
    1ed6:	73 0b       	sbc	r23, r19
    1ed8:	84 0b       	sbc	r24, r20
    1eda:	ba 0b       	sbc	r27, r26
    1edc:	ee 1f       	adc	r30, r30
    1ede:	88 f7       	brcc	.-30     	; 0x1ec2 <__divsf3_pse+0x90>
    1ee0:	e0 95       	com	r30
    1ee2:	08 95       	ret

00001ee4 <__fixunssfsi>:
    1ee4:	7f d0       	rcall	.+254    	; 0x1fe4 <__fp_splitA>
    1ee6:	88 f0       	brcs	.+34     	; 0x1f0a <__fixunssfsi+0x26>
    1ee8:	9f 57       	subi	r25, 0x7F	; 127
    1eea:	90 f0       	brcs	.+36     	; 0x1f10 <__fixunssfsi+0x2c>
    1eec:	b9 2f       	mov	r27, r25
    1eee:	99 27       	eor	r25, r25
    1ef0:	b7 51       	subi	r27, 0x17	; 23
    1ef2:	a0 f0       	brcs	.+40     	; 0x1f1c <__fixunssfsi+0x38>
    1ef4:	d1 f0       	breq	.+52     	; 0x1f2a <__fixunssfsi+0x46>
    1ef6:	66 0f       	add	r22, r22
    1ef8:	77 1f       	adc	r23, r23
    1efa:	88 1f       	adc	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	1a f0       	brmi	.+6      	; 0x1f06 <__fixunssfsi+0x22>
    1f00:	ba 95       	dec	r27
    1f02:	c9 f7       	brne	.-14     	; 0x1ef6 <__fixunssfsi+0x12>
    1f04:	12 c0       	rjmp	.+36     	; 0x1f2a <__fixunssfsi+0x46>
    1f06:	b1 30       	cpi	r27, 0x01	; 1
    1f08:	81 f0       	breq	.+32     	; 0x1f2a <__fixunssfsi+0x46>
    1f0a:	86 d0       	rcall	.+268    	; 0x2018 <__fp_zero>
    1f0c:	b1 e0       	ldi	r27, 0x01	; 1
    1f0e:	08 95       	ret
    1f10:	83 c0       	rjmp	.+262    	; 0x2018 <__fp_zero>
    1f12:	67 2f       	mov	r22, r23
    1f14:	78 2f       	mov	r23, r24
    1f16:	88 27       	eor	r24, r24
    1f18:	b8 5f       	subi	r27, 0xF8	; 248
    1f1a:	39 f0       	breq	.+14     	; 0x1f2a <__fixunssfsi+0x46>
    1f1c:	b9 3f       	cpi	r27, 0xF9	; 249
    1f1e:	cc f3       	brlt	.-14     	; 0x1f12 <__fixunssfsi+0x2e>
    1f20:	86 95       	lsr	r24
    1f22:	77 95       	ror	r23
    1f24:	67 95       	ror	r22
    1f26:	b3 95       	inc	r27
    1f28:	d9 f7       	brne	.-10     	; 0x1f20 <__fixunssfsi+0x3c>
    1f2a:	3e f4       	brtc	.+14     	; 0x1f3a <__fixunssfsi+0x56>
    1f2c:	90 95       	com	r25
    1f2e:	80 95       	com	r24
    1f30:	70 95       	com	r23
    1f32:	61 95       	neg	r22
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	8f 4f       	sbci	r24, 0xFF	; 255
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	08 95       	ret

00001f3c <__fp_cmp>:
    1f3c:	99 0f       	add	r25, r25
    1f3e:	00 08       	sbc	r0, r0
    1f40:	55 0f       	add	r21, r21
    1f42:	aa 0b       	sbc	r26, r26
    1f44:	e0 e8       	ldi	r30, 0x80	; 128
    1f46:	fe ef       	ldi	r31, 0xFE	; 254
    1f48:	16 16       	cp	r1, r22
    1f4a:	17 06       	cpc	r1, r23
    1f4c:	e8 07       	cpc	r30, r24
    1f4e:	f9 07       	cpc	r31, r25
    1f50:	c0 f0       	brcs	.+48     	; 0x1f82 <__fp_cmp+0x46>
    1f52:	12 16       	cp	r1, r18
    1f54:	13 06       	cpc	r1, r19
    1f56:	e4 07       	cpc	r30, r20
    1f58:	f5 07       	cpc	r31, r21
    1f5a:	98 f0       	brcs	.+38     	; 0x1f82 <__fp_cmp+0x46>
    1f5c:	62 1b       	sub	r22, r18
    1f5e:	73 0b       	sbc	r23, r19
    1f60:	84 0b       	sbc	r24, r20
    1f62:	95 0b       	sbc	r25, r21
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <__fp_cmp+0x38>
    1f66:	0a 26       	eor	r0, r26
    1f68:	61 f0       	breq	.+24     	; 0x1f82 <__fp_cmp+0x46>
    1f6a:	23 2b       	or	r18, r19
    1f6c:	24 2b       	or	r18, r20
    1f6e:	25 2b       	or	r18, r21
    1f70:	21 f4       	brne	.+8      	; 0x1f7a <__fp_cmp+0x3e>
    1f72:	08 95       	ret
    1f74:	0a 26       	eor	r0, r26
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <__fp_cmp+0x3e>
    1f78:	a1 40       	sbci	r26, 0x01	; 1
    1f7a:	a6 95       	lsr	r26
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	81 1d       	adc	r24, r1
    1f80:	81 1d       	adc	r24, r1
    1f82:	08 95       	ret

00001f84 <__fp_inf>:
    1f84:	97 f9       	bld	r25, 7
    1f86:	9f 67       	ori	r25, 0x7F	; 127
    1f88:	80 e8       	ldi	r24, 0x80	; 128
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	08 95       	ret

00001f90 <__fp_nan>:
    1f90:	9f ef       	ldi	r25, 0xFF	; 255
    1f92:	80 ec       	ldi	r24, 0xC0	; 192
    1f94:	08 95       	ret

00001f96 <__fp_pscA>:
    1f96:	00 24       	eor	r0, r0
    1f98:	0a 94       	dec	r0
    1f9a:	16 16       	cp	r1, r22
    1f9c:	17 06       	cpc	r1, r23
    1f9e:	18 06       	cpc	r1, r24
    1fa0:	09 06       	cpc	r0, r25
    1fa2:	08 95       	ret

00001fa4 <__fp_pscB>:
    1fa4:	00 24       	eor	r0, r0
    1fa6:	0a 94       	dec	r0
    1fa8:	12 16       	cp	r1, r18
    1faa:	13 06       	cpc	r1, r19
    1fac:	14 06       	cpc	r1, r20
    1fae:	05 06       	cpc	r0, r21
    1fb0:	08 95       	ret

00001fb2 <__fp_round>:
    1fb2:	09 2e       	mov	r0, r25
    1fb4:	03 94       	inc	r0
    1fb6:	00 0c       	add	r0, r0
    1fb8:	11 f4       	brne	.+4      	; 0x1fbe <__fp_round+0xc>
    1fba:	88 23       	and	r24, r24
    1fbc:	52 f0       	brmi	.+20     	; 0x1fd2 <__fp_round+0x20>
    1fbe:	bb 0f       	add	r27, r27
    1fc0:	40 f4       	brcc	.+16     	; 0x1fd2 <__fp_round+0x20>
    1fc2:	bf 2b       	or	r27, r31
    1fc4:	11 f4       	brne	.+4      	; 0x1fca <__fp_round+0x18>
    1fc6:	60 ff       	sbrs	r22, 0
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <__fp_round+0x20>
    1fca:	6f 5f       	subi	r22, 0xFF	; 255
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd2:	08 95       	ret

00001fd4 <__fp_split3>:
    1fd4:	57 fd       	sbrc	r21, 7
    1fd6:	90 58       	subi	r25, 0x80	; 128
    1fd8:	44 0f       	add	r20, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	59 f0       	breq	.+22     	; 0x1ff4 <__fp_splitA+0x10>
    1fde:	5f 3f       	cpi	r21, 0xFF	; 255
    1fe0:	71 f0       	breq	.+28     	; 0x1ffe <__fp_splitA+0x1a>
    1fe2:	47 95       	ror	r20

00001fe4 <__fp_splitA>:
    1fe4:	88 0f       	add	r24, r24
    1fe6:	97 fb       	bst	r25, 7
    1fe8:	99 1f       	adc	r25, r25
    1fea:	61 f0       	breq	.+24     	; 0x2004 <__fp_splitA+0x20>
    1fec:	9f 3f       	cpi	r25, 0xFF	; 255
    1fee:	79 f0       	breq	.+30     	; 0x200e <__fp_splitA+0x2a>
    1ff0:	87 95       	ror	r24
    1ff2:	08 95       	ret
    1ff4:	12 16       	cp	r1, r18
    1ff6:	13 06       	cpc	r1, r19
    1ff8:	14 06       	cpc	r1, r20
    1ffa:	55 1f       	adc	r21, r21
    1ffc:	f2 cf       	rjmp	.-28     	; 0x1fe2 <__fp_split3+0xe>
    1ffe:	46 95       	lsr	r20
    2000:	f1 df       	rcall	.-30     	; 0x1fe4 <__fp_splitA>
    2002:	08 c0       	rjmp	.+16     	; 0x2014 <__fp_splitA+0x30>
    2004:	16 16       	cp	r1, r22
    2006:	17 06       	cpc	r1, r23
    2008:	18 06       	cpc	r1, r24
    200a:	99 1f       	adc	r25, r25
    200c:	f1 cf       	rjmp	.-30     	; 0x1ff0 <__fp_splitA+0xc>
    200e:	86 95       	lsr	r24
    2010:	71 05       	cpc	r23, r1
    2012:	61 05       	cpc	r22, r1
    2014:	08 94       	sec
    2016:	08 95       	ret

00002018 <__fp_zero>:
    2018:	e8 94       	clt

0000201a <__fp_szero>:
    201a:	bb 27       	eor	r27, r27
    201c:	66 27       	eor	r22, r22
    201e:	77 27       	eor	r23, r23
    2020:	cb 01       	movw	r24, r22
    2022:	97 f9       	bld	r25, 7
    2024:	08 95       	ret

00002026 <__mulsf3>:
    2026:	0b d0       	rcall	.+22     	; 0x203e <__mulsf3x>
    2028:	c4 cf       	rjmp	.-120    	; 0x1fb2 <__fp_round>
    202a:	b5 df       	rcall	.-150    	; 0x1f96 <__fp_pscA>
    202c:	28 f0       	brcs	.+10     	; 0x2038 <__mulsf3+0x12>
    202e:	ba df       	rcall	.-140    	; 0x1fa4 <__fp_pscB>
    2030:	18 f0       	brcs	.+6      	; 0x2038 <__mulsf3+0x12>
    2032:	95 23       	and	r25, r21
    2034:	09 f0       	breq	.+2      	; 0x2038 <__mulsf3+0x12>
    2036:	a6 cf       	rjmp	.-180    	; 0x1f84 <__fp_inf>
    2038:	ab cf       	rjmp	.-170    	; 0x1f90 <__fp_nan>
    203a:	11 24       	eor	r1, r1
    203c:	ee cf       	rjmp	.-36     	; 0x201a <__fp_szero>

0000203e <__mulsf3x>:
    203e:	ca df       	rcall	.-108    	; 0x1fd4 <__fp_split3>
    2040:	a0 f3       	brcs	.-24     	; 0x202a <__mulsf3+0x4>

00002042 <__mulsf3_pse>:
    2042:	95 9f       	mul	r25, r21
    2044:	d1 f3       	breq	.-12     	; 0x203a <__mulsf3+0x14>
    2046:	95 0f       	add	r25, r21
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	55 1f       	adc	r21, r21
    204c:	62 9f       	mul	r22, r18
    204e:	f0 01       	movw	r30, r0
    2050:	72 9f       	mul	r23, r18
    2052:	bb 27       	eor	r27, r27
    2054:	f0 0d       	add	r31, r0
    2056:	b1 1d       	adc	r27, r1
    2058:	63 9f       	mul	r22, r19
    205a:	aa 27       	eor	r26, r26
    205c:	f0 0d       	add	r31, r0
    205e:	b1 1d       	adc	r27, r1
    2060:	aa 1f       	adc	r26, r26
    2062:	64 9f       	mul	r22, r20
    2064:	66 27       	eor	r22, r22
    2066:	b0 0d       	add	r27, r0
    2068:	a1 1d       	adc	r26, r1
    206a:	66 1f       	adc	r22, r22
    206c:	82 9f       	mul	r24, r18
    206e:	22 27       	eor	r18, r18
    2070:	b0 0d       	add	r27, r0
    2072:	a1 1d       	adc	r26, r1
    2074:	62 1f       	adc	r22, r18
    2076:	73 9f       	mul	r23, r19
    2078:	b0 0d       	add	r27, r0
    207a:	a1 1d       	adc	r26, r1
    207c:	62 1f       	adc	r22, r18
    207e:	83 9f       	mul	r24, r19
    2080:	a0 0d       	add	r26, r0
    2082:	61 1d       	adc	r22, r1
    2084:	22 1f       	adc	r18, r18
    2086:	74 9f       	mul	r23, r20
    2088:	33 27       	eor	r19, r19
    208a:	a0 0d       	add	r26, r0
    208c:	61 1d       	adc	r22, r1
    208e:	23 1f       	adc	r18, r19
    2090:	84 9f       	mul	r24, r20
    2092:	60 0d       	add	r22, r0
    2094:	21 1d       	adc	r18, r1
    2096:	82 2f       	mov	r24, r18
    2098:	76 2f       	mov	r23, r22
    209a:	6a 2f       	mov	r22, r26
    209c:	11 24       	eor	r1, r1
    209e:	9f 57       	subi	r25, 0x7F	; 127
    20a0:	50 40       	sbci	r21, 0x00	; 0
    20a2:	8a f0       	brmi	.+34     	; 0x20c6 <__mulsf3_pse+0x84>
    20a4:	e1 f0       	breq	.+56     	; 0x20de <__mulsf3_pse+0x9c>
    20a6:	88 23       	and	r24, r24
    20a8:	4a f0       	brmi	.+18     	; 0x20bc <__mulsf3_pse+0x7a>
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	bb 1f       	adc	r27, r27
    20b0:	66 1f       	adc	r22, r22
    20b2:	77 1f       	adc	r23, r23
    20b4:	88 1f       	adc	r24, r24
    20b6:	91 50       	subi	r25, 0x01	; 1
    20b8:	50 40       	sbci	r21, 0x00	; 0
    20ba:	a9 f7       	brne	.-22     	; 0x20a6 <__mulsf3_pse+0x64>
    20bc:	9e 3f       	cpi	r25, 0xFE	; 254
    20be:	51 05       	cpc	r21, r1
    20c0:	70 f0       	brcs	.+28     	; 0x20de <__mulsf3_pse+0x9c>
    20c2:	60 cf       	rjmp	.-320    	; 0x1f84 <__fp_inf>
    20c4:	aa cf       	rjmp	.-172    	; 0x201a <__fp_szero>
    20c6:	5f 3f       	cpi	r21, 0xFF	; 255
    20c8:	ec f3       	brlt	.-6      	; 0x20c4 <__mulsf3_pse+0x82>
    20ca:	98 3e       	cpi	r25, 0xE8	; 232
    20cc:	dc f3       	brlt	.-10     	; 0x20c4 <__mulsf3_pse+0x82>
    20ce:	86 95       	lsr	r24
    20d0:	77 95       	ror	r23
    20d2:	67 95       	ror	r22
    20d4:	b7 95       	ror	r27
    20d6:	f7 95       	ror	r31
    20d8:	e7 95       	ror	r30
    20da:	9f 5f       	subi	r25, 0xFF	; 255
    20dc:	c1 f7       	brne	.-16     	; 0x20ce <__mulsf3_pse+0x8c>
    20de:	fe 2b       	or	r31, r30
    20e0:	88 0f       	add	r24, r24
    20e2:	91 1d       	adc	r25, r1
    20e4:	96 95       	lsr	r25
    20e6:	87 95       	ror	r24
    20e8:	97 f9       	bld	r25, 7
    20ea:	08 95       	ret

000020ec <__divmodhi4>:
    20ec:	97 fb       	bst	r25, 7
    20ee:	07 2e       	mov	r0, r23
    20f0:	16 f4       	brtc	.+4      	; 0x20f6 <__divmodhi4+0xa>
    20f2:	00 94       	com	r0
    20f4:	07 d0       	rcall	.+14     	; 0x2104 <__divmodhi4_neg1>
    20f6:	77 fd       	sbrc	r23, 7
    20f8:	09 d0       	rcall	.+18     	; 0x210c <__divmodhi4_neg2>
    20fa:	0e 94 b4 10 	call	0x2168	; 0x2168 <__udivmodhi4>
    20fe:	07 fc       	sbrc	r0, 7
    2100:	05 d0       	rcall	.+10     	; 0x210c <__divmodhi4_neg2>
    2102:	3e f4       	brtc	.+14     	; 0x2112 <__divmodhi4_exit>

00002104 <__divmodhi4_neg1>:
    2104:	90 95       	com	r25
    2106:	81 95       	neg	r24
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	08 95       	ret

0000210c <__divmodhi4_neg2>:
    210c:	70 95       	com	r23
    210e:	61 95       	neg	r22
    2110:	7f 4f       	sbci	r23, 0xFF	; 255

00002112 <__divmodhi4_exit>:
    2112:	08 95       	ret

00002114 <__divmodsi4>:
    2114:	05 2e       	mov	r0, r21
    2116:	97 fb       	bst	r25, 7
    2118:	1e f4       	brtc	.+6      	; 0x2120 <__divmodsi4+0xc>
    211a:	00 94       	com	r0
    211c:	0e 94 a1 10 	call	0x2142	; 0x2142 <__negsi2>
    2120:	57 fd       	sbrc	r21, 7
    2122:	07 d0       	rcall	.+14     	; 0x2132 <__divmodsi4_neg2>
    2124:	0e 94 c8 10 	call	0x2190	; 0x2190 <__udivmodsi4>
    2128:	07 fc       	sbrc	r0, 7
    212a:	03 d0       	rcall	.+6      	; 0x2132 <__divmodsi4_neg2>
    212c:	4e f4       	brtc	.+18     	; 0x2140 <__divmodsi4_exit>
    212e:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__negsi2>

00002132 <__divmodsi4_neg2>:
    2132:	50 95       	com	r21
    2134:	40 95       	com	r20
    2136:	30 95       	com	r19
    2138:	21 95       	neg	r18
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	4f 4f       	sbci	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255

00002140 <__divmodsi4_exit>:
    2140:	08 95       	ret

00002142 <__negsi2>:
    2142:	90 95       	com	r25
    2144:	80 95       	com	r24
    2146:	70 95       	com	r23
    2148:	61 95       	neg	r22
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	8f 4f       	sbci	r24, 0xFF	; 255
    214e:	9f 4f       	sbci	r25, 0xFF	; 255
    2150:	08 95       	ret

00002152 <__muluhisi3>:
    2152:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__umulhisi3>
    2156:	a5 9f       	mul	r26, r21
    2158:	90 0d       	add	r25, r0
    215a:	b4 9f       	mul	r27, r20
    215c:	90 0d       	add	r25, r0
    215e:	a4 9f       	mul	r26, r20
    2160:	80 0d       	add	r24, r0
    2162:	91 1d       	adc	r25, r1
    2164:	11 24       	eor	r1, r1
    2166:	08 95       	ret

00002168 <__udivmodhi4>:
    2168:	aa 1b       	sub	r26, r26
    216a:	bb 1b       	sub	r27, r27
    216c:	51 e1       	ldi	r21, 0x11	; 17
    216e:	07 c0       	rjmp	.+14     	; 0x217e <__udivmodhi4_ep>

00002170 <__udivmodhi4_loop>:
    2170:	aa 1f       	adc	r26, r26
    2172:	bb 1f       	adc	r27, r27
    2174:	a6 17       	cp	r26, r22
    2176:	b7 07       	cpc	r27, r23
    2178:	10 f0       	brcs	.+4      	; 0x217e <__udivmodhi4_ep>
    217a:	a6 1b       	sub	r26, r22
    217c:	b7 0b       	sbc	r27, r23

0000217e <__udivmodhi4_ep>:
    217e:	88 1f       	adc	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	5a 95       	dec	r21
    2184:	a9 f7       	brne	.-22     	; 0x2170 <__udivmodhi4_loop>
    2186:	80 95       	com	r24
    2188:	90 95       	com	r25
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	08 95       	ret

00002190 <__udivmodsi4>:
    2190:	a1 e2       	ldi	r26, 0x21	; 33
    2192:	1a 2e       	mov	r1, r26
    2194:	aa 1b       	sub	r26, r26
    2196:	bb 1b       	sub	r27, r27
    2198:	fd 01       	movw	r30, r26
    219a:	0d c0       	rjmp	.+26     	; 0x21b6 <__udivmodsi4_ep>

0000219c <__udivmodsi4_loop>:
    219c:	aa 1f       	adc	r26, r26
    219e:	bb 1f       	adc	r27, r27
    21a0:	ee 1f       	adc	r30, r30
    21a2:	ff 1f       	adc	r31, r31
    21a4:	a2 17       	cp	r26, r18
    21a6:	b3 07       	cpc	r27, r19
    21a8:	e4 07       	cpc	r30, r20
    21aa:	f5 07       	cpc	r31, r21
    21ac:	20 f0       	brcs	.+8      	; 0x21b6 <__udivmodsi4_ep>
    21ae:	a2 1b       	sub	r26, r18
    21b0:	b3 0b       	sbc	r27, r19
    21b2:	e4 0b       	sbc	r30, r20
    21b4:	f5 0b       	sbc	r31, r21

000021b6 <__udivmodsi4_ep>:
    21b6:	66 1f       	adc	r22, r22
    21b8:	77 1f       	adc	r23, r23
    21ba:	88 1f       	adc	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	1a 94       	dec	r1
    21c0:	69 f7       	brne	.-38     	; 0x219c <__udivmodsi4_loop>
    21c2:	60 95       	com	r22
    21c4:	70 95       	com	r23
    21c6:	80 95       	com	r24
    21c8:	90 95       	com	r25
    21ca:	9b 01       	movw	r18, r22
    21cc:	ac 01       	movw	r20, r24
    21ce:	bd 01       	movw	r22, r26
    21d0:	cf 01       	movw	r24, r30
    21d2:	08 95       	ret

000021d4 <__umulhisi3>:
    21d4:	a2 9f       	mul	r26, r18
    21d6:	b0 01       	movw	r22, r0
    21d8:	b3 9f       	mul	r27, r19
    21da:	c0 01       	movw	r24, r0
    21dc:	a3 9f       	mul	r26, r19
    21de:	70 0d       	add	r23, r0
    21e0:	81 1d       	adc	r24, r1
    21e2:	11 24       	eor	r1, r1
    21e4:	91 1d       	adc	r25, r1
    21e6:	b2 9f       	mul	r27, r18
    21e8:	70 0d       	add	r23, r0
    21ea:	81 1d       	adc	r24, r1
    21ec:	11 24       	eor	r1, r1
    21ee:	91 1d       	adc	r25, r1
    21f0:	08 95       	ret

000021f2 <fdevopen>:
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	ec 01       	movw	r28, r24
    21fc:	8b 01       	movw	r16, r22
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	31 f4       	brne	.+12     	; 0x220e <fdevopen+0x1c>
    2202:	61 15       	cp	r22, r1
    2204:	71 05       	cpc	r23, r1
    2206:	19 f4       	brne	.+6      	; 0x220e <fdevopen+0x1c>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	38 c0       	rjmp	.+112    	; 0x227e <fdevopen+0x8c>
    220e:	6e e0       	ldi	r22, 0x0E	; 14
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 2a 13 	call	0x2654	; 0x2654 <calloc>
    221a:	fc 01       	movw	r30, r24
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	a1 f3       	breq	.-24     	; 0x2208 <fdevopen+0x16>
    2220:	80 e8       	ldi	r24, 0x80	; 128
    2222:	83 83       	std	Z+3, r24	; 0x03
    2224:	01 15       	cp	r16, r1
    2226:	11 05       	cpc	r17, r1
    2228:	71 f0       	breq	.+28     	; 0x2246 <fdevopen+0x54>
    222a:	13 87       	std	Z+11, r17	; 0x0b
    222c:	02 87       	std	Z+10, r16	; 0x0a
    222e:	81 e8       	ldi	r24, 0x81	; 129
    2230:	83 83       	std	Z+3, r24	; 0x03
    2232:	80 91 f8 03 	lds	r24, 0x03F8
    2236:	90 91 f9 03 	lds	r25, 0x03F9
    223a:	89 2b       	or	r24, r25
    223c:	21 f4       	brne	.+8      	; 0x2246 <fdevopen+0x54>
    223e:	f0 93 f9 03 	sts	0x03F9, r31
    2242:	e0 93 f8 03 	sts	0x03F8, r30
    2246:	20 97       	sbiw	r28, 0x00	; 0
    2248:	c9 f0       	breq	.+50     	; 0x227c <fdevopen+0x8a>
    224a:	d1 87       	std	Z+9, r29	; 0x09
    224c:	c0 87       	std	Z+8, r28	; 0x08
    224e:	83 81       	ldd	r24, Z+3	; 0x03
    2250:	82 60       	ori	r24, 0x02	; 2
    2252:	83 83       	std	Z+3, r24	; 0x03
    2254:	80 91 fa 03 	lds	r24, 0x03FA
    2258:	90 91 fb 03 	lds	r25, 0x03FB
    225c:	89 2b       	or	r24, r25
    225e:	71 f4       	brne	.+28     	; 0x227c <fdevopen+0x8a>
    2260:	f0 93 fb 03 	sts	0x03FB, r31
    2264:	e0 93 fa 03 	sts	0x03FA, r30
    2268:	80 91 fc 03 	lds	r24, 0x03FC
    226c:	90 91 fd 03 	lds	r25, 0x03FD
    2270:	89 2b       	or	r24, r25
    2272:	21 f4       	brne	.+8      	; 0x227c <fdevopen+0x8a>
    2274:	f0 93 fd 03 	sts	0x03FD, r31
    2278:	e0 93 fc 03 	sts	0x03FC, r30
    227c:	cf 01       	movw	r24, r30
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	1f 91       	pop	r17
    2284:	0f 91       	pop	r16
    2286:	08 95       	ret

00002288 <printf>:
    2288:	a0 e0       	ldi	r26, 0x00	; 0
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ea e4       	ldi	r30, 0x4A	; 74
    228e:	f1 e1       	ldi	r31, 0x11	; 17
    2290:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__prologue_saves__+0x20>
    2294:	fe 01       	movw	r30, r28
    2296:	35 96       	adiw	r30, 0x05	; 5
    2298:	61 91       	ld	r22, Z+
    229a:	71 91       	ld	r23, Z+
    229c:	af 01       	movw	r20, r30
    229e:	80 91 fa 03 	lds	r24, 0x03FA
    22a2:	90 91 fb 03 	lds	r25, 0x03FB
    22a6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vfprintf>
    22aa:	e2 e0       	ldi	r30, 0x02	; 2
    22ac:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__epilogue_restores__+0x20>

000022b0 <vfprintf>:
    22b0:	ac e0       	ldi	r26, 0x0C	; 12
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	ee e5       	ldi	r30, 0x5E	; 94
    22b6:	f1 e1       	ldi	r31, 0x11	; 17
    22b8:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__prologue_saves__>
    22bc:	7c 01       	movw	r14, r24
    22be:	6b 01       	movw	r12, r22
    22c0:	8a 01       	movw	r16, r20
    22c2:	fc 01       	movw	r30, r24
    22c4:	17 82       	std	Z+7, r1	; 0x07
    22c6:	16 82       	std	Z+6, r1	; 0x06
    22c8:	83 81       	ldd	r24, Z+3	; 0x03
    22ca:	81 ff       	sbrs	r24, 1
    22cc:	bd c1       	rjmp	.+890    	; 0x2648 <vfprintf+0x398>
    22ce:	ce 01       	movw	r24, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	4c 01       	movw	r8, r24
    22d4:	f7 01       	movw	r30, r14
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	f6 01       	movw	r30, r12
    22da:	93 fd       	sbrc	r25, 3
    22dc:	85 91       	lpm	r24, Z+
    22de:	93 ff       	sbrs	r25, 3
    22e0:	81 91       	ld	r24, Z+
    22e2:	6f 01       	movw	r12, r30
    22e4:	88 23       	and	r24, r24
    22e6:	09 f4       	brne	.+2      	; 0x22ea <vfprintf+0x3a>
    22e8:	ab c1       	rjmp	.+854    	; 0x2640 <vfprintf+0x390>
    22ea:	85 32       	cpi	r24, 0x25	; 37
    22ec:	39 f4       	brne	.+14     	; 0x22fc <vfprintf+0x4c>
    22ee:	93 fd       	sbrc	r25, 3
    22f0:	85 91       	lpm	r24, Z+
    22f2:	93 ff       	sbrs	r25, 3
    22f4:	81 91       	ld	r24, Z+
    22f6:	6f 01       	movw	r12, r30
    22f8:	85 32       	cpi	r24, 0x25	; 37
    22fa:	29 f4       	brne	.+10     	; 0x2306 <vfprintf+0x56>
    22fc:	b7 01       	movw	r22, r14
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    2304:	e7 cf       	rjmp	.-50     	; 0x22d4 <vfprintf+0x24>
    2306:	51 2c       	mov	r5, r1
    2308:	31 2c       	mov	r3, r1
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	20 32       	cpi	r18, 0x20	; 32
    230e:	a0 f4       	brcc	.+40     	; 0x2338 <vfprintf+0x88>
    2310:	8b 32       	cpi	r24, 0x2B	; 43
    2312:	69 f0       	breq	.+26     	; 0x232e <vfprintf+0x7e>
    2314:	30 f4       	brcc	.+12     	; 0x2322 <vfprintf+0x72>
    2316:	80 32       	cpi	r24, 0x20	; 32
    2318:	59 f0       	breq	.+22     	; 0x2330 <vfprintf+0x80>
    231a:	83 32       	cpi	r24, 0x23	; 35
    231c:	69 f4       	brne	.+26     	; 0x2338 <vfprintf+0x88>
    231e:	20 61       	ori	r18, 0x10	; 16
    2320:	2c c0       	rjmp	.+88     	; 0x237a <vfprintf+0xca>
    2322:	8d 32       	cpi	r24, 0x2D	; 45
    2324:	39 f0       	breq	.+14     	; 0x2334 <vfprintf+0x84>
    2326:	80 33       	cpi	r24, 0x30	; 48
    2328:	39 f4       	brne	.+14     	; 0x2338 <vfprintf+0x88>
    232a:	21 60       	ori	r18, 0x01	; 1
    232c:	26 c0       	rjmp	.+76     	; 0x237a <vfprintf+0xca>
    232e:	22 60       	ori	r18, 0x02	; 2
    2330:	24 60       	ori	r18, 0x04	; 4
    2332:	23 c0       	rjmp	.+70     	; 0x237a <vfprintf+0xca>
    2334:	28 60       	ori	r18, 0x08	; 8
    2336:	21 c0       	rjmp	.+66     	; 0x237a <vfprintf+0xca>
    2338:	27 fd       	sbrc	r18, 7
    233a:	27 c0       	rjmp	.+78     	; 0x238a <vfprintf+0xda>
    233c:	30 ed       	ldi	r19, 0xD0	; 208
    233e:	38 0f       	add	r19, r24
    2340:	3a 30       	cpi	r19, 0x0A	; 10
    2342:	78 f4       	brcc	.+30     	; 0x2362 <vfprintf+0xb2>
    2344:	26 ff       	sbrs	r18, 6
    2346:	06 c0       	rjmp	.+12     	; 0x2354 <vfprintf+0xa4>
    2348:	fa e0       	ldi	r31, 0x0A	; 10
    234a:	5f 9e       	mul	r5, r31
    234c:	30 0d       	add	r19, r0
    234e:	11 24       	eor	r1, r1
    2350:	53 2e       	mov	r5, r19
    2352:	13 c0       	rjmp	.+38     	; 0x237a <vfprintf+0xca>
    2354:	8a e0       	ldi	r24, 0x0A	; 10
    2356:	38 9e       	mul	r3, r24
    2358:	30 0d       	add	r19, r0
    235a:	11 24       	eor	r1, r1
    235c:	33 2e       	mov	r3, r19
    235e:	20 62       	ori	r18, 0x20	; 32
    2360:	0c c0       	rjmp	.+24     	; 0x237a <vfprintf+0xca>
    2362:	8e 32       	cpi	r24, 0x2E	; 46
    2364:	21 f4       	brne	.+8      	; 0x236e <vfprintf+0xbe>
    2366:	26 fd       	sbrc	r18, 6
    2368:	6b c1       	rjmp	.+726    	; 0x2640 <vfprintf+0x390>
    236a:	20 64       	ori	r18, 0x40	; 64
    236c:	06 c0       	rjmp	.+12     	; 0x237a <vfprintf+0xca>
    236e:	8c 36       	cpi	r24, 0x6C	; 108
    2370:	11 f4       	brne	.+4      	; 0x2376 <vfprintf+0xc6>
    2372:	20 68       	ori	r18, 0x80	; 128
    2374:	02 c0       	rjmp	.+4      	; 0x237a <vfprintf+0xca>
    2376:	88 36       	cpi	r24, 0x68	; 104
    2378:	41 f4       	brne	.+16     	; 0x238a <vfprintf+0xda>
    237a:	f6 01       	movw	r30, r12
    237c:	93 fd       	sbrc	r25, 3
    237e:	85 91       	lpm	r24, Z+
    2380:	93 ff       	sbrs	r25, 3
    2382:	81 91       	ld	r24, Z+
    2384:	6f 01       	movw	r12, r30
    2386:	81 11       	cpse	r24, r1
    2388:	c1 cf       	rjmp	.-126    	; 0x230c <vfprintf+0x5c>
    238a:	98 2f       	mov	r25, r24
    238c:	9f 7d       	andi	r25, 0xDF	; 223
    238e:	95 54       	subi	r25, 0x45	; 69
    2390:	93 30       	cpi	r25, 0x03	; 3
    2392:	28 f4       	brcc	.+10     	; 0x239e <vfprintf+0xee>
    2394:	0c 5f       	subi	r16, 0xFC	; 252
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	ff e3       	ldi	r31, 0x3F	; 63
    239a:	f9 83       	std	Y+1, r31	; 0x01
    239c:	0d c0       	rjmp	.+26     	; 0x23b8 <vfprintf+0x108>
    239e:	83 36       	cpi	r24, 0x63	; 99
    23a0:	31 f0       	breq	.+12     	; 0x23ae <vfprintf+0xfe>
    23a2:	83 37       	cpi	r24, 0x73	; 115
    23a4:	71 f0       	breq	.+28     	; 0x23c2 <vfprintf+0x112>
    23a6:	83 35       	cpi	r24, 0x53	; 83
    23a8:	09 f0       	breq	.+2      	; 0x23ac <vfprintf+0xfc>
    23aa:	5b c0       	rjmp	.+182    	; 0x2462 <vfprintf+0x1b2>
    23ac:	22 c0       	rjmp	.+68     	; 0x23f2 <vfprintf+0x142>
    23ae:	f8 01       	movw	r30, r16
    23b0:	80 81       	ld	r24, Z
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	0e 5f       	subi	r16, 0xFE	; 254
    23b6:	1f 4f       	sbci	r17, 0xFF	; 255
    23b8:	44 24       	eor	r4, r4
    23ba:	43 94       	inc	r4
    23bc:	51 2c       	mov	r5, r1
    23be:	54 01       	movw	r10, r8
    23c0:	15 c0       	rjmp	.+42     	; 0x23ec <vfprintf+0x13c>
    23c2:	38 01       	movw	r6, r16
    23c4:	f2 e0       	ldi	r31, 0x02	; 2
    23c6:	6f 0e       	add	r6, r31
    23c8:	71 1c       	adc	r7, r1
    23ca:	f8 01       	movw	r30, r16
    23cc:	a0 80       	ld	r10, Z
    23ce:	b1 80       	ldd	r11, Z+1	; 0x01
    23d0:	26 ff       	sbrs	r18, 6
    23d2:	03 c0       	rjmp	.+6      	; 0x23da <vfprintf+0x12a>
    23d4:	65 2d       	mov	r22, r5
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <vfprintf+0x12e>
    23da:	6f ef       	ldi	r22, 0xFF	; 255
    23dc:	7f ef       	ldi	r23, 0xFF	; 255
    23de:	c5 01       	movw	r24, r10
    23e0:	2c 87       	std	Y+12, r18	; 0x0c
    23e2:	0e 94 7f 14 	call	0x28fe	; 0x28fe <strnlen>
    23e6:	2c 01       	movw	r4, r24
    23e8:	83 01       	movw	r16, r6
    23ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    23ec:	2f 77       	andi	r18, 0x7F	; 127
    23ee:	22 2e       	mov	r2, r18
    23f0:	17 c0       	rjmp	.+46     	; 0x2420 <vfprintf+0x170>
    23f2:	38 01       	movw	r6, r16
    23f4:	f2 e0       	ldi	r31, 0x02	; 2
    23f6:	6f 0e       	add	r6, r31
    23f8:	71 1c       	adc	r7, r1
    23fa:	f8 01       	movw	r30, r16
    23fc:	a0 80       	ld	r10, Z
    23fe:	b1 80       	ldd	r11, Z+1	; 0x01
    2400:	26 ff       	sbrs	r18, 6
    2402:	03 c0       	rjmp	.+6      	; 0x240a <vfprintf+0x15a>
    2404:	65 2d       	mov	r22, r5
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	02 c0       	rjmp	.+4      	; 0x240e <vfprintf+0x15e>
    240a:	6f ef       	ldi	r22, 0xFF	; 255
    240c:	7f ef       	ldi	r23, 0xFF	; 255
    240e:	c5 01       	movw	r24, r10
    2410:	2c 87       	std	Y+12, r18	; 0x0c
    2412:	0e 94 6d 14 	call	0x28da	; 0x28da <strnlen_P>
    2416:	2c 01       	movw	r4, r24
    2418:	2c 85       	ldd	r18, Y+12	; 0x0c
    241a:	20 68       	ori	r18, 0x80	; 128
    241c:	22 2e       	mov	r2, r18
    241e:	83 01       	movw	r16, r6
    2420:	23 fc       	sbrc	r2, 3
    2422:	1b c0       	rjmp	.+54     	; 0x245a <vfprintf+0x1aa>
    2424:	83 2d       	mov	r24, r3
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	48 16       	cp	r4, r24
    242a:	59 06       	cpc	r5, r25
    242c:	b0 f4       	brcc	.+44     	; 0x245a <vfprintf+0x1aa>
    242e:	b7 01       	movw	r22, r14
    2430:	80 e2       	ldi	r24, 0x20	; 32
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    2438:	3a 94       	dec	r3
    243a:	f4 cf       	rjmp	.-24     	; 0x2424 <vfprintf+0x174>
    243c:	f5 01       	movw	r30, r10
    243e:	27 fc       	sbrc	r2, 7
    2440:	85 91       	lpm	r24, Z+
    2442:	27 fe       	sbrs	r2, 7
    2444:	81 91       	ld	r24, Z+
    2446:	5f 01       	movw	r10, r30
    2448:	b7 01       	movw	r22, r14
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    2450:	31 10       	cpse	r3, r1
    2452:	3a 94       	dec	r3
    2454:	f1 e0       	ldi	r31, 0x01	; 1
    2456:	4f 1a       	sub	r4, r31
    2458:	51 08       	sbc	r5, r1
    245a:	41 14       	cp	r4, r1
    245c:	51 04       	cpc	r5, r1
    245e:	71 f7       	brne	.-36     	; 0x243c <vfprintf+0x18c>
    2460:	e5 c0       	rjmp	.+458    	; 0x262c <vfprintf+0x37c>
    2462:	84 36       	cpi	r24, 0x64	; 100
    2464:	11 f0       	breq	.+4      	; 0x246a <vfprintf+0x1ba>
    2466:	89 36       	cpi	r24, 0x69	; 105
    2468:	39 f5       	brne	.+78     	; 0x24b8 <vfprintf+0x208>
    246a:	f8 01       	movw	r30, r16
    246c:	27 ff       	sbrs	r18, 7
    246e:	07 c0       	rjmp	.+14     	; 0x247e <vfprintf+0x1ce>
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	0c 5f       	subi	r16, 0xFC	; 252
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	08 c0       	rjmp	.+16     	; 0x248e <vfprintf+0x1de>
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	88 27       	eor	r24, r24
    2484:	77 fd       	sbrc	r23, 7
    2486:	80 95       	com	r24
    2488:	98 2f       	mov	r25, r24
    248a:	0e 5f       	subi	r16, 0xFE	; 254
    248c:	1f 4f       	sbci	r17, 0xFF	; 255
    248e:	2f 76       	andi	r18, 0x6F	; 111
    2490:	b2 2e       	mov	r11, r18
    2492:	97 ff       	sbrs	r25, 7
    2494:	09 c0       	rjmp	.+18     	; 0x24a8 <vfprintf+0x1f8>
    2496:	90 95       	com	r25
    2498:	80 95       	com	r24
    249a:	70 95       	com	r23
    249c:	61 95       	neg	r22
    249e:	7f 4f       	sbci	r23, 0xFF	; 255
    24a0:	8f 4f       	sbci	r24, 0xFF	; 255
    24a2:	9f 4f       	sbci	r25, 0xFF	; 255
    24a4:	20 68       	ori	r18, 0x80	; 128
    24a6:	b2 2e       	mov	r11, r18
    24a8:	2a e0       	ldi	r18, 0x0A	; 10
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	a4 01       	movw	r20, r8
    24ae:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ultoa_invert>
    24b2:	a8 2e       	mov	r10, r24
    24b4:	a8 18       	sub	r10, r8
    24b6:	44 c0       	rjmp	.+136    	; 0x2540 <vfprintf+0x290>
    24b8:	85 37       	cpi	r24, 0x75	; 117
    24ba:	29 f4       	brne	.+10     	; 0x24c6 <vfprintf+0x216>
    24bc:	2f 7e       	andi	r18, 0xEF	; 239
    24be:	b2 2e       	mov	r11, r18
    24c0:	2a e0       	ldi	r18, 0x0A	; 10
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	25 c0       	rjmp	.+74     	; 0x2510 <vfprintf+0x260>
    24c6:	f2 2f       	mov	r31, r18
    24c8:	f9 7f       	andi	r31, 0xF9	; 249
    24ca:	bf 2e       	mov	r11, r31
    24cc:	8f 36       	cpi	r24, 0x6F	; 111
    24ce:	c1 f0       	breq	.+48     	; 0x2500 <vfprintf+0x250>
    24d0:	18 f4       	brcc	.+6      	; 0x24d8 <vfprintf+0x228>
    24d2:	88 35       	cpi	r24, 0x58	; 88
    24d4:	79 f0       	breq	.+30     	; 0x24f4 <vfprintf+0x244>
    24d6:	b4 c0       	rjmp	.+360    	; 0x2640 <vfprintf+0x390>
    24d8:	80 37       	cpi	r24, 0x70	; 112
    24da:	19 f0       	breq	.+6      	; 0x24e2 <vfprintf+0x232>
    24dc:	88 37       	cpi	r24, 0x78	; 120
    24de:	21 f0       	breq	.+8      	; 0x24e8 <vfprintf+0x238>
    24e0:	af c0       	rjmp	.+350    	; 0x2640 <vfprintf+0x390>
    24e2:	2f 2f       	mov	r18, r31
    24e4:	20 61       	ori	r18, 0x10	; 16
    24e6:	b2 2e       	mov	r11, r18
    24e8:	b4 fe       	sbrs	r11, 4
    24ea:	0d c0       	rjmp	.+26     	; 0x2506 <vfprintf+0x256>
    24ec:	8b 2d       	mov	r24, r11
    24ee:	84 60       	ori	r24, 0x04	; 4
    24f0:	b8 2e       	mov	r11, r24
    24f2:	09 c0       	rjmp	.+18     	; 0x2506 <vfprintf+0x256>
    24f4:	24 ff       	sbrs	r18, 4
    24f6:	0a c0       	rjmp	.+20     	; 0x250c <vfprintf+0x25c>
    24f8:	9f 2f       	mov	r25, r31
    24fa:	96 60       	ori	r25, 0x06	; 6
    24fc:	b9 2e       	mov	r11, r25
    24fe:	06 c0       	rjmp	.+12     	; 0x250c <vfprintf+0x25c>
    2500:	28 e0       	ldi	r18, 0x08	; 8
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	05 c0       	rjmp	.+10     	; 0x2510 <vfprintf+0x260>
    2506:	20 e1       	ldi	r18, 0x10	; 16
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <vfprintf+0x260>
    250c:	20 e1       	ldi	r18, 0x10	; 16
    250e:	32 e0       	ldi	r19, 0x02	; 2
    2510:	f8 01       	movw	r30, r16
    2512:	b7 fe       	sbrs	r11, 7
    2514:	07 c0       	rjmp	.+14     	; 0x2524 <vfprintf+0x274>
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	0c 5f       	subi	r16, 0xFC	; 252
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	06 c0       	rjmp	.+12     	; 0x2530 <vfprintf+0x280>
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	0e 5f       	subi	r16, 0xFE	; 254
    252e:	1f 4f       	sbci	r17, 0xFF	; 255
    2530:	a4 01       	movw	r20, r8
    2532:	0e 94 bc 14 	call	0x2978	; 0x2978 <__ultoa_invert>
    2536:	a8 2e       	mov	r10, r24
    2538:	a8 18       	sub	r10, r8
    253a:	fb 2d       	mov	r31, r11
    253c:	ff 77       	andi	r31, 0x7F	; 127
    253e:	bf 2e       	mov	r11, r31
    2540:	b6 fe       	sbrs	r11, 6
    2542:	0b c0       	rjmp	.+22     	; 0x255a <vfprintf+0x2aa>
    2544:	2b 2d       	mov	r18, r11
    2546:	2e 7f       	andi	r18, 0xFE	; 254
    2548:	a5 14       	cp	r10, r5
    254a:	50 f4       	brcc	.+20     	; 0x2560 <vfprintf+0x2b0>
    254c:	b4 fe       	sbrs	r11, 4
    254e:	0a c0       	rjmp	.+20     	; 0x2564 <vfprintf+0x2b4>
    2550:	b2 fc       	sbrc	r11, 2
    2552:	08 c0       	rjmp	.+16     	; 0x2564 <vfprintf+0x2b4>
    2554:	2b 2d       	mov	r18, r11
    2556:	2e 7e       	andi	r18, 0xEE	; 238
    2558:	05 c0       	rjmp	.+10     	; 0x2564 <vfprintf+0x2b4>
    255a:	7a 2c       	mov	r7, r10
    255c:	2b 2d       	mov	r18, r11
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <vfprintf+0x2b6>
    2560:	7a 2c       	mov	r7, r10
    2562:	01 c0       	rjmp	.+2      	; 0x2566 <vfprintf+0x2b6>
    2564:	75 2c       	mov	r7, r5
    2566:	24 ff       	sbrs	r18, 4
    2568:	0d c0       	rjmp	.+26     	; 0x2584 <vfprintf+0x2d4>
    256a:	fe 01       	movw	r30, r28
    256c:	ea 0d       	add	r30, r10
    256e:	f1 1d       	adc	r31, r1
    2570:	80 81       	ld	r24, Z
    2572:	80 33       	cpi	r24, 0x30	; 48
    2574:	11 f4       	brne	.+4      	; 0x257a <vfprintf+0x2ca>
    2576:	29 7e       	andi	r18, 0xE9	; 233
    2578:	09 c0       	rjmp	.+18     	; 0x258c <vfprintf+0x2dc>
    257a:	22 ff       	sbrs	r18, 2
    257c:	06 c0       	rjmp	.+12     	; 0x258a <vfprintf+0x2da>
    257e:	73 94       	inc	r7
    2580:	73 94       	inc	r7
    2582:	04 c0       	rjmp	.+8      	; 0x258c <vfprintf+0x2dc>
    2584:	82 2f       	mov	r24, r18
    2586:	86 78       	andi	r24, 0x86	; 134
    2588:	09 f0       	breq	.+2      	; 0x258c <vfprintf+0x2dc>
    258a:	73 94       	inc	r7
    258c:	23 fd       	sbrc	r18, 3
    258e:	13 c0       	rjmp	.+38     	; 0x25b6 <vfprintf+0x306>
    2590:	20 ff       	sbrs	r18, 0
    2592:	06 c0       	rjmp	.+12     	; 0x25a0 <vfprintf+0x2f0>
    2594:	5a 2c       	mov	r5, r10
    2596:	73 14       	cp	r7, r3
    2598:	18 f4       	brcc	.+6      	; 0x25a0 <vfprintf+0x2f0>
    259a:	53 0c       	add	r5, r3
    259c:	57 18       	sub	r5, r7
    259e:	73 2c       	mov	r7, r3
    25a0:	73 14       	cp	r7, r3
    25a2:	68 f4       	brcc	.+26     	; 0x25be <vfprintf+0x30e>
    25a4:	b7 01       	movw	r22, r14
    25a6:	80 e2       	ldi	r24, 0x20	; 32
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	2c 87       	std	Y+12, r18	; 0x0c
    25ac:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    25b0:	73 94       	inc	r7
    25b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    25b4:	f5 cf       	rjmp	.-22     	; 0x25a0 <vfprintf+0x2f0>
    25b6:	73 14       	cp	r7, r3
    25b8:	10 f4       	brcc	.+4      	; 0x25be <vfprintf+0x30e>
    25ba:	37 18       	sub	r3, r7
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <vfprintf+0x310>
    25be:	31 2c       	mov	r3, r1
    25c0:	24 ff       	sbrs	r18, 4
    25c2:	12 c0       	rjmp	.+36     	; 0x25e8 <vfprintf+0x338>
    25c4:	b7 01       	movw	r22, r14
    25c6:	80 e3       	ldi	r24, 0x30	; 48
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	2c 87       	std	Y+12, r18	; 0x0c
    25cc:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    25d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    25d2:	22 ff       	sbrs	r18, 2
    25d4:	17 c0       	rjmp	.+46     	; 0x2604 <vfprintf+0x354>
    25d6:	21 ff       	sbrs	r18, 1
    25d8:	03 c0       	rjmp	.+6      	; 0x25e0 <vfprintf+0x330>
    25da:	88 e5       	ldi	r24, 0x58	; 88
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <vfprintf+0x334>
    25e0:	88 e7       	ldi	r24, 0x78	; 120
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	b7 01       	movw	r22, r14
    25e6:	0c c0       	rjmp	.+24     	; 0x2600 <vfprintf+0x350>
    25e8:	82 2f       	mov	r24, r18
    25ea:	86 78       	andi	r24, 0x86	; 134
    25ec:	59 f0       	breq	.+22     	; 0x2604 <vfprintf+0x354>
    25ee:	21 fd       	sbrc	r18, 1
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <vfprintf+0x346>
    25f2:	80 e2       	ldi	r24, 0x20	; 32
    25f4:	01 c0       	rjmp	.+2      	; 0x25f8 <vfprintf+0x348>
    25f6:	8b e2       	ldi	r24, 0x2B	; 43
    25f8:	27 fd       	sbrc	r18, 7
    25fa:	8d e2       	ldi	r24, 0x2D	; 45
    25fc:	b7 01       	movw	r22, r14
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    2604:	a5 14       	cp	r10, r5
    2606:	38 f4       	brcc	.+14     	; 0x2616 <vfprintf+0x366>
    2608:	b7 01       	movw	r22, r14
    260a:	80 e3       	ldi	r24, 0x30	; 48
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    2612:	5a 94       	dec	r5
    2614:	f7 cf       	rjmp	.-18     	; 0x2604 <vfprintf+0x354>
    2616:	aa 94       	dec	r10
    2618:	f4 01       	movw	r30, r8
    261a:	ea 0d       	add	r30, r10
    261c:	f1 1d       	adc	r31, r1
    261e:	80 81       	ld	r24, Z
    2620:	b7 01       	movw	r22, r14
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    2628:	a1 10       	cpse	r10, r1
    262a:	f5 cf       	rjmp	.-22     	; 0x2616 <vfprintf+0x366>
    262c:	33 20       	and	r3, r3
    262e:	09 f4       	brne	.+2      	; 0x2632 <vfprintf+0x382>
    2630:	51 ce       	rjmp	.-862    	; 0x22d4 <vfprintf+0x24>
    2632:	b7 01       	movw	r22, r14
    2634:	80 e2       	ldi	r24, 0x20	; 32
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 8a 14 	call	0x2914	; 0x2914 <fputc>
    263c:	3a 94       	dec	r3
    263e:	f6 cf       	rjmp	.-20     	; 0x262c <vfprintf+0x37c>
    2640:	f7 01       	movw	r30, r14
    2642:	86 81       	ldd	r24, Z+6	; 0x06
    2644:	97 81       	ldd	r25, Z+7	; 0x07
    2646:	02 c0       	rjmp	.+4      	; 0x264c <vfprintf+0x39c>
    2648:	8f ef       	ldi	r24, 0xFF	; 255
    264a:	9f ef       	ldi	r25, 0xFF	; 255
    264c:	2c 96       	adiw	r28, 0x0c	; 12
    264e:	e2 e1       	ldi	r30, 0x12	; 18
    2650:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__epilogue_restores__>

00002654 <calloc>:
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	86 9f       	mul	r24, r22
    265e:	80 01       	movw	r16, r0
    2660:	87 9f       	mul	r24, r23
    2662:	10 0d       	add	r17, r0
    2664:	96 9f       	mul	r25, r22
    2666:	10 0d       	add	r17, r0
    2668:	11 24       	eor	r1, r1
    266a:	c8 01       	movw	r24, r16
    266c:	0e 94 46 13 	call	0x268c	; 0x268c <malloc>
    2670:	ec 01       	movw	r28, r24
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	29 f0       	breq	.+10     	; 0x2680 <calloc+0x2c>
    2676:	a8 01       	movw	r20, r16
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <memset>
    2680:	ce 01       	movw	r24, r28
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	08 95       	ret

0000268c <malloc>:
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	82 30       	cpi	r24, 0x02	; 2
    2692:	91 05       	cpc	r25, r1
    2694:	10 f4       	brcc	.+4      	; 0x269a <malloc+0xe>
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	e0 91 00 04 	lds	r30, 0x0400
    269e:	f0 91 01 04 	lds	r31, 0x0401
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	a0 e0       	ldi	r26, 0x00	; 0
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	30 97       	sbiw	r30, 0x00	; 0
    26ac:	39 f1       	breq	.+78     	; 0x26fc <malloc+0x70>
    26ae:	40 81       	ld	r20, Z
    26b0:	51 81       	ldd	r21, Z+1	; 0x01
    26b2:	48 17       	cp	r20, r24
    26b4:	59 07       	cpc	r21, r25
    26b6:	b8 f0       	brcs	.+46     	; 0x26e6 <malloc+0x5a>
    26b8:	48 17       	cp	r20, r24
    26ba:	59 07       	cpc	r21, r25
    26bc:	71 f4       	brne	.+28     	; 0x26da <malloc+0x4e>
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	10 97       	sbiw	r26, 0x00	; 0
    26c4:	29 f0       	breq	.+10     	; 0x26d0 <malloc+0x44>
    26c6:	13 96       	adiw	r26, 0x03	; 3
    26c8:	9c 93       	st	X, r25
    26ca:	8e 93       	st	-X, r24
    26cc:	12 97       	sbiw	r26, 0x02	; 2
    26ce:	2c c0       	rjmp	.+88     	; 0x2728 <malloc+0x9c>
    26d0:	90 93 01 04 	sts	0x0401, r25
    26d4:	80 93 00 04 	sts	0x0400, r24
    26d8:	27 c0       	rjmp	.+78     	; 0x2728 <malloc+0x9c>
    26da:	21 15       	cp	r18, r1
    26dc:	31 05       	cpc	r19, r1
    26de:	31 f0       	breq	.+12     	; 0x26ec <malloc+0x60>
    26e0:	42 17       	cp	r20, r18
    26e2:	53 07       	cpc	r21, r19
    26e4:	18 f0       	brcs	.+6      	; 0x26ec <malloc+0x60>
    26e6:	a9 01       	movw	r20, r18
    26e8:	db 01       	movw	r26, r22
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <malloc+0x62>
    26ec:	ef 01       	movw	r28, r30
    26ee:	9a 01       	movw	r18, r20
    26f0:	bd 01       	movw	r22, r26
    26f2:	df 01       	movw	r26, r30
    26f4:	02 80       	ldd	r0, Z+2	; 0x02
    26f6:	f3 81       	ldd	r31, Z+3	; 0x03
    26f8:	e0 2d       	mov	r30, r0
    26fa:	d7 cf       	rjmp	.-82     	; 0x26aa <malloc+0x1e>
    26fc:	21 15       	cp	r18, r1
    26fe:	31 05       	cpc	r19, r1
    2700:	f9 f0       	breq	.+62     	; 0x2740 <malloc+0xb4>
    2702:	28 1b       	sub	r18, r24
    2704:	39 0b       	sbc	r19, r25
    2706:	24 30       	cpi	r18, 0x04	; 4
    2708:	31 05       	cpc	r19, r1
    270a:	80 f4       	brcc	.+32     	; 0x272c <malloc+0xa0>
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	9b 81       	ldd	r25, Y+3	; 0x03
    2710:	61 15       	cp	r22, r1
    2712:	71 05       	cpc	r23, r1
    2714:	21 f0       	breq	.+8      	; 0x271e <malloc+0x92>
    2716:	fb 01       	movw	r30, r22
    2718:	93 83       	std	Z+3, r25	; 0x03
    271a:	82 83       	std	Z+2, r24	; 0x02
    271c:	04 c0       	rjmp	.+8      	; 0x2726 <malloc+0x9a>
    271e:	90 93 01 04 	sts	0x0401, r25
    2722:	80 93 00 04 	sts	0x0400, r24
    2726:	fe 01       	movw	r30, r28
    2728:	32 96       	adiw	r30, 0x02	; 2
    272a:	44 c0       	rjmp	.+136    	; 0x27b4 <malloc+0x128>
    272c:	fe 01       	movw	r30, r28
    272e:	e2 0f       	add	r30, r18
    2730:	f3 1f       	adc	r31, r19
    2732:	81 93       	st	Z+, r24
    2734:	91 93       	st	Z+, r25
    2736:	22 50       	subi	r18, 0x02	; 2
    2738:	31 09       	sbc	r19, r1
    273a:	39 83       	std	Y+1, r19	; 0x01
    273c:	28 83       	st	Y, r18
    273e:	3a c0       	rjmp	.+116    	; 0x27b4 <malloc+0x128>
    2740:	20 91 fe 03 	lds	r18, 0x03FE
    2744:	30 91 ff 03 	lds	r19, 0x03FF
    2748:	23 2b       	or	r18, r19
    274a:	41 f4       	brne	.+16     	; 0x275c <malloc+0xd0>
    274c:	20 91 02 01 	lds	r18, 0x0102
    2750:	30 91 03 01 	lds	r19, 0x0103
    2754:	30 93 ff 03 	sts	0x03FF, r19
    2758:	20 93 fe 03 	sts	0x03FE, r18
    275c:	20 91 00 01 	lds	r18, 0x0100
    2760:	30 91 01 01 	lds	r19, 0x0101
    2764:	21 15       	cp	r18, r1
    2766:	31 05       	cpc	r19, r1
    2768:	41 f4       	brne	.+16     	; 0x277a <malloc+0xee>
    276a:	2d b7       	in	r18, 0x3d	; 61
    276c:	3e b7       	in	r19, 0x3e	; 62
    276e:	40 91 04 01 	lds	r20, 0x0104
    2772:	50 91 05 01 	lds	r21, 0x0105
    2776:	24 1b       	sub	r18, r20
    2778:	35 0b       	sbc	r19, r21
    277a:	e0 91 fe 03 	lds	r30, 0x03FE
    277e:	f0 91 ff 03 	lds	r31, 0x03FF
    2782:	e2 17       	cp	r30, r18
    2784:	f3 07       	cpc	r31, r19
    2786:	a0 f4       	brcc	.+40     	; 0x27b0 <malloc+0x124>
    2788:	2e 1b       	sub	r18, r30
    278a:	3f 0b       	sbc	r19, r31
    278c:	28 17       	cp	r18, r24
    278e:	39 07       	cpc	r19, r25
    2790:	78 f0       	brcs	.+30     	; 0x27b0 <malloc+0x124>
    2792:	ac 01       	movw	r20, r24
    2794:	4e 5f       	subi	r20, 0xFE	; 254
    2796:	5f 4f       	sbci	r21, 0xFF	; 255
    2798:	24 17       	cp	r18, r20
    279a:	35 07       	cpc	r19, r21
    279c:	48 f0       	brcs	.+18     	; 0x27b0 <malloc+0x124>
    279e:	4e 0f       	add	r20, r30
    27a0:	5f 1f       	adc	r21, r31
    27a2:	50 93 ff 03 	sts	0x03FF, r21
    27a6:	40 93 fe 03 	sts	0x03FE, r20
    27aa:	81 93       	st	Z+, r24
    27ac:	91 93       	st	Z+, r25
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <malloc+0x128>
    27b0:	e0 e0       	ldi	r30, 0x00	; 0
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	cf 01       	movw	r24, r30
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

000027bc <free>:
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <free+0xa>
    27c4:	87 c0       	rjmp	.+270    	; 0x28d4 <free+0x118>
    27c6:	fc 01       	movw	r30, r24
    27c8:	32 97       	sbiw	r30, 0x02	; 2
    27ca:	13 82       	std	Z+3, r1	; 0x03
    27cc:	12 82       	std	Z+2, r1	; 0x02
    27ce:	c0 91 00 04 	lds	r28, 0x0400
    27d2:	d0 91 01 04 	lds	r29, 0x0401
    27d6:	20 97       	sbiw	r28, 0x00	; 0
    27d8:	81 f4       	brne	.+32     	; 0x27fa <free+0x3e>
    27da:	20 81       	ld	r18, Z
    27dc:	31 81       	ldd	r19, Z+1	; 0x01
    27de:	28 0f       	add	r18, r24
    27e0:	39 1f       	adc	r19, r25
    27e2:	80 91 fe 03 	lds	r24, 0x03FE
    27e6:	90 91 ff 03 	lds	r25, 0x03FF
    27ea:	82 17       	cp	r24, r18
    27ec:	93 07       	cpc	r25, r19
    27ee:	79 f5       	brne	.+94     	; 0x284e <free+0x92>
    27f0:	f0 93 ff 03 	sts	0x03FF, r31
    27f4:	e0 93 fe 03 	sts	0x03FE, r30
    27f8:	6d c0       	rjmp	.+218    	; 0x28d4 <free+0x118>
    27fa:	de 01       	movw	r26, r28
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	ae 17       	cp	r26, r30
    2802:	bf 07       	cpc	r27, r31
    2804:	50 f4       	brcc	.+20     	; 0x281a <free+0x5e>
    2806:	12 96       	adiw	r26, 0x02	; 2
    2808:	4d 91       	ld	r20, X+
    280a:	5c 91       	ld	r21, X
    280c:	13 97       	sbiw	r26, 0x03	; 3
    280e:	9d 01       	movw	r18, r26
    2810:	41 15       	cp	r20, r1
    2812:	51 05       	cpc	r21, r1
    2814:	09 f1       	breq	.+66     	; 0x2858 <free+0x9c>
    2816:	da 01       	movw	r26, r20
    2818:	f3 cf       	rjmp	.-26     	; 0x2800 <free+0x44>
    281a:	b3 83       	std	Z+3, r27	; 0x03
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	40 81       	ld	r20, Z
    2820:	51 81       	ldd	r21, Z+1	; 0x01
    2822:	84 0f       	add	r24, r20
    2824:	95 1f       	adc	r25, r21
    2826:	8a 17       	cp	r24, r26
    2828:	9b 07       	cpc	r25, r27
    282a:	71 f4       	brne	.+28     	; 0x2848 <free+0x8c>
    282c:	8d 91       	ld	r24, X+
    282e:	9c 91       	ld	r25, X
    2830:	11 97       	sbiw	r26, 0x01	; 1
    2832:	84 0f       	add	r24, r20
    2834:	95 1f       	adc	r25, r21
    2836:	02 96       	adiw	r24, 0x02	; 2
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
    283c:	12 96       	adiw	r26, 0x02	; 2
    283e:	8d 91       	ld	r24, X+
    2840:	9c 91       	ld	r25, X
    2842:	13 97       	sbiw	r26, 0x03	; 3
    2844:	93 83       	std	Z+3, r25	; 0x03
    2846:	82 83       	std	Z+2, r24	; 0x02
    2848:	21 15       	cp	r18, r1
    284a:	31 05       	cpc	r19, r1
    284c:	29 f4       	brne	.+10     	; 0x2858 <free+0x9c>
    284e:	f0 93 01 04 	sts	0x0401, r31
    2852:	e0 93 00 04 	sts	0x0400, r30
    2856:	3e c0       	rjmp	.+124    	; 0x28d4 <free+0x118>
    2858:	d9 01       	movw	r26, r18
    285a:	13 96       	adiw	r26, 0x03	; 3
    285c:	fc 93       	st	X, r31
    285e:	ee 93       	st	-X, r30
    2860:	12 97       	sbiw	r26, 0x02	; 2
    2862:	4d 91       	ld	r20, X+
    2864:	5d 91       	ld	r21, X+
    2866:	a4 0f       	add	r26, r20
    2868:	b5 1f       	adc	r27, r21
    286a:	ea 17       	cp	r30, r26
    286c:	fb 07       	cpc	r31, r27
    286e:	79 f4       	brne	.+30     	; 0x288e <free+0xd2>
    2870:	80 81       	ld	r24, Z
    2872:	91 81       	ldd	r25, Z+1	; 0x01
    2874:	84 0f       	add	r24, r20
    2876:	95 1f       	adc	r25, r21
    2878:	02 96       	adiw	r24, 0x02	; 2
    287a:	d9 01       	movw	r26, r18
    287c:	11 96       	adiw	r26, 0x01	; 1
    287e:	9c 93       	st	X, r25
    2880:	8e 93       	st	-X, r24
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	13 96       	adiw	r26, 0x03	; 3
    2888:	9c 93       	st	X, r25
    288a:	8e 93       	st	-X, r24
    288c:	12 97       	sbiw	r26, 0x02	; 2
    288e:	e0 e0       	ldi	r30, 0x00	; 0
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	19 f0       	breq	.+6      	; 0x28a0 <free+0xe4>
    289a:	fe 01       	movw	r30, r28
    289c:	ec 01       	movw	r28, r24
    289e:	f9 cf       	rjmp	.-14     	; 0x2892 <free+0xd6>
    28a0:	ce 01       	movw	r24, r28
    28a2:	02 96       	adiw	r24, 0x02	; 2
    28a4:	28 81       	ld	r18, Y
    28a6:	39 81       	ldd	r19, Y+1	; 0x01
    28a8:	82 0f       	add	r24, r18
    28aa:	93 1f       	adc	r25, r19
    28ac:	20 91 fe 03 	lds	r18, 0x03FE
    28b0:	30 91 ff 03 	lds	r19, 0x03FF
    28b4:	28 17       	cp	r18, r24
    28b6:	39 07       	cpc	r19, r25
    28b8:	69 f4       	brne	.+26     	; 0x28d4 <free+0x118>
    28ba:	30 97       	sbiw	r30, 0x00	; 0
    28bc:	29 f4       	brne	.+10     	; 0x28c8 <free+0x10c>
    28be:	10 92 01 04 	sts	0x0401, r1
    28c2:	10 92 00 04 	sts	0x0400, r1
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <free+0x110>
    28c8:	13 82       	std	Z+3, r1	; 0x03
    28ca:	12 82       	std	Z+2, r1	; 0x02
    28cc:	d0 93 ff 03 	sts	0x03FF, r29
    28d0:	c0 93 fe 03 	sts	0x03FE, r28
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <strnlen_P>:
    28da:	fc 01       	movw	r30, r24
    28dc:	05 90       	lpm	r0, Z+
    28de:	61 50       	subi	r22, 0x01	; 1
    28e0:	70 40       	sbci	r23, 0x00	; 0
    28e2:	01 10       	cpse	r0, r1
    28e4:	d8 f7       	brcc	.-10     	; 0x28dc <strnlen_P+0x2>
    28e6:	80 95       	com	r24
    28e8:	90 95       	com	r25
    28ea:	8e 0f       	add	r24, r30
    28ec:	9f 1f       	adc	r25, r31
    28ee:	08 95       	ret

000028f0 <memset>:
    28f0:	dc 01       	movw	r26, r24
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <memset+0x6>
    28f4:	6d 93       	st	X+, r22
    28f6:	41 50       	subi	r20, 0x01	; 1
    28f8:	50 40       	sbci	r21, 0x00	; 0
    28fa:	e0 f7       	brcc	.-8      	; 0x28f4 <memset+0x4>
    28fc:	08 95       	ret

000028fe <strnlen>:
    28fe:	fc 01       	movw	r30, r24
    2900:	61 50       	subi	r22, 0x01	; 1
    2902:	70 40       	sbci	r23, 0x00	; 0
    2904:	01 90       	ld	r0, Z+
    2906:	01 10       	cpse	r0, r1
    2908:	d8 f7       	brcc	.-10     	; 0x2900 <strnlen+0x2>
    290a:	80 95       	com	r24
    290c:	90 95       	com	r25
    290e:	8e 0f       	add	r24, r30
    2910:	9f 1f       	adc	r25, r31
    2912:	08 95       	ret

00002914 <fputc>:
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	18 2f       	mov	r17, r24
    291e:	09 2f       	mov	r16, r25
    2920:	eb 01       	movw	r28, r22
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	81 fd       	sbrc	r24, 1
    2926:	03 c0       	rjmp	.+6      	; 0x292e <fputc+0x1a>
    2928:	8f ef       	ldi	r24, 0xFF	; 255
    292a:	9f ef       	ldi	r25, 0xFF	; 255
    292c:	20 c0       	rjmp	.+64     	; 0x296e <fputc+0x5a>
    292e:	82 ff       	sbrs	r24, 2
    2930:	10 c0       	rjmp	.+32     	; 0x2952 <fputc+0x3e>
    2932:	4e 81       	ldd	r20, Y+6	; 0x06
    2934:	5f 81       	ldd	r21, Y+7	; 0x07
    2936:	2c 81       	ldd	r18, Y+4	; 0x04
    2938:	3d 81       	ldd	r19, Y+5	; 0x05
    293a:	42 17       	cp	r20, r18
    293c:	53 07       	cpc	r21, r19
    293e:	7c f4       	brge	.+30     	; 0x295e <fputc+0x4a>
    2940:	e8 81       	ld	r30, Y
    2942:	f9 81       	ldd	r31, Y+1	; 0x01
    2944:	9f 01       	movw	r18, r30
    2946:	2f 5f       	subi	r18, 0xFF	; 255
    2948:	3f 4f       	sbci	r19, 0xFF	; 255
    294a:	39 83       	std	Y+1, r19	; 0x01
    294c:	28 83       	st	Y, r18
    294e:	10 83       	st	Z, r17
    2950:	06 c0       	rjmp	.+12     	; 0x295e <fputc+0x4a>
    2952:	e8 85       	ldd	r30, Y+8	; 0x08
    2954:	f9 85       	ldd	r31, Y+9	; 0x09
    2956:	81 2f       	mov	r24, r17
    2958:	09 95       	icall
    295a:	89 2b       	or	r24, r25
    295c:	29 f7       	brne	.-54     	; 0x2928 <fputc+0x14>
    295e:	2e 81       	ldd	r18, Y+6	; 0x06
    2960:	3f 81       	ldd	r19, Y+7	; 0x07
    2962:	2f 5f       	subi	r18, 0xFF	; 255
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	3f 83       	std	Y+7, r19	; 0x07
    2968:	2e 83       	std	Y+6, r18	; 0x06
    296a:	81 2f       	mov	r24, r17
    296c:	90 2f       	mov	r25, r16
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	1f 91       	pop	r17
    2974:	0f 91       	pop	r16
    2976:	08 95       	ret

00002978 <__ultoa_invert>:
    2978:	fa 01       	movw	r30, r20
    297a:	aa 27       	eor	r26, r26
    297c:	28 30       	cpi	r18, 0x08	; 8
    297e:	51 f1       	breq	.+84     	; 0x29d4 <__ultoa_invert+0x5c>
    2980:	20 31       	cpi	r18, 0x10	; 16
    2982:	81 f1       	breq	.+96     	; 0x29e4 <__ultoa_invert+0x6c>
    2984:	e8 94       	clt
    2986:	6f 93       	push	r22
    2988:	6e 7f       	andi	r22, 0xFE	; 254
    298a:	6e 5f       	subi	r22, 0xFE	; 254
    298c:	7f 4f       	sbci	r23, 0xFF	; 255
    298e:	8f 4f       	sbci	r24, 0xFF	; 255
    2990:	9f 4f       	sbci	r25, 0xFF	; 255
    2992:	af 4f       	sbci	r26, 0xFF	; 255
    2994:	b1 e0       	ldi	r27, 0x01	; 1
    2996:	3e d0       	rcall	.+124    	; 0x2a14 <__ultoa_invert+0x9c>
    2998:	b4 e0       	ldi	r27, 0x04	; 4
    299a:	3c d0       	rcall	.+120    	; 0x2a14 <__ultoa_invert+0x9c>
    299c:	67 0f       	add	r22, r23
    299e:	78 1f       	adc	r23, r24
    29a0:	89 1f       	adc	r24, r25
    29a2:	9a 1f       	adc	r25, r26
    29a4:	a1 1d       	adc	r26, r1
    29a6:	68 0f       	add	r22, r24
    29a8:	79 1f       	adc	r23, r25
    29aa:	8a 1f       	adc	r24, r26
    29ac:	91 1d       	adc	r25, r1
    29ae:	a1 1d       	adc	r26, r1
    29b0:	6a 0f       	add	r22, r26
    29b2:	71 1d       	adc	r23, r1
    29b4:	81 1d       	adc	r24, r1
    29b6:	91 1d       	adc	r25, r1
    29b8:	a1 1d       	adc	r26, r1
    29ba:	20 d0       	rcall	.+64     	; 0x29fc <__ultoa_invert+0x84>
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <__ultoa_invert+0x48>
    29be:	68 94       	set
    29c0:	3f 91       	pop	r19
    29c2:	2a e0       	ldi	r18, 0x0A	; 10
    29c4:	26 9f       	mul	r18, r22
    29c6:	11 24       	eor	r1, r1
    29c8:	30 19       	sub	r19, r0
    29ca:	30 5d       	subi	r19, 0xD0	; 208
    29cc:	31 93       	st	Z+, r19
    29ce:	de f6       	brtc	.-74     	; 0x2986 <__ultoa_invert+0xe>
    29d0:	cf 01       	movw	r24, r30
    29d2:	08 95       	ret
    29d4:	46 2f       	mov	r20, r22
    29d6:	47 70       	andi	r20, 0x07	; 7
    29d8:	40 5d       	subi	r20, 0xD0	; 208
    29da:	41 93       	st	Z+, r20
    29dc:	b3 e0       	ldi	r27, 0x03	; 3
    29de:	0f d0       	rcall	.+30     	; 0x29fe <__ultoa_invert+0x86>
    29e0:	c9 f7       	brne	.-14     	; 0x29d4 <__ultoa_invert+0x5c>
    29e2:	f6 cf       	rjmp	.-20     	; 0x29d0 <__ultoa_invert+0x58>
    29e4:	46 2f       	mov	r20, r22
    29e6:	4f 70       	andi	r20, 0x0F	; 15
    29e8:	40 5d       	subi	r20, 0xD0	; 208
    29ea:	4a 33       	cpi	r20, 0x3A	; 58
    29ec:	18 f0       	brcs	.+6      	; 0x29f4 <__ultoa_invert+0x7c>
    29ee:	49 5d       	subi	r20, 0xD9	; 217
    29f0:	31 fd       	sbrc	r19, 1
    29f2:	40 52       	subi	r20, 0x20	; 32
    29f4:	41 93       	st	Z+, r20
    29f6:	02 d0       	rcall	.+4      	; 0x29fc <__ultoa_invert+0x84>
    29f8:	a9 f7       	brne	.-22     	; 0x29e4 <__ultoa_invert+0x6c>
    29fa:	ea cf       	rjmp	.-44     	; 0x29d0 <__ultoa_invert+0x58>
    29fc:	b4 e0       	ldi	r27, 0x04	; 4
    29fe:	a6 95       	lsr	r26
    2a00:	97 95       	ror	r25
    2a02:	87 95       	ror	r24
    2a04:	77 95       	ror	r23
    2a06:	67 95       	ror	r22
    2a08:	ba 95       	dec	r27
    2a0a:	c9 f7       	brne	.-14     	; 0x29fe <__ultoa_invert+0x86>
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	61 05       	cpc	r22, r1
    2a10:	71 05       	cpc	r23, r1
    2a12:	08 95       	ret
    2a14:	9b 01       	movw	r18, r22
    2a16:	ac 01       	movw	r20, r24
    2a18:	0a 2e       	mov	r0, r26
    2a1a:	06 94       	lsr	r0
    2a1c:	57 95       	ror	r21
    2a1e:	47 95       	ror	r20
    2a20:	37 95       	ror	r19
    2a22:	27 95       	ror	r18
    2a24:	ba 95       	dec	r27
    2a26:	c9 f7       	brne	.-14     	; 0x2a1a <__ultoa_invert+0xa2>
    2a28:	62 0f       	add	r22, r18
    2a2a:	73 1f       	adc	r23, r19
    2a2c:	84 1f       	adc	r24, r20
    2a2e:	95 1f       	adc	r25, r21
    2a30:	a0 1d       	adc	r26, r0
    2a32:	08 95       	ret

00002a34 <__prologue_saves__>:
    2a34:	2f 92       	push	r2
    2a36:	3f 92       	push	r3
    2a38:	4f 92       	push	r4
    2a3a:	5f 92       	push	r5
    2a3c:	6f 92       	push	r6
    2a3e:	7f 92       	push	r7
    2a40:	8f 92       	push	r8
    2a42:	9f 92       	push	r9
    2a44:	af 92       	push	r10
    2a46:	bf 92       	push	r11
    2a48:	cf 92       	push	r12
    2a4a:	df 92       	push	r13
    2a4c:	ef 92       	push	r14
    2a4e:	ff 92       	push	r15
    2a50:	0f 93       	push	r16
    2a52:	1f 93       	push	r17
    2a54:	cf 93       	push	r28
    2a56:	df 93       	push	r29
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	ca 1b       	sub	r28, r26
    2a5e:	db 0b       	sbc	r29, r27
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	09 94       	ijmp

00002a6c <__epilogue_restores__>:
    2a6c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a6e:	39 88       	ldd	r3, Y+17	; 0x11
    2a70:	48 88       	ldd	r4, Y+16	; 0x10
    2a72:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a74:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a76:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a78:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a7e:	b9 84       	ldd	r11, Y+9	; 0x09
    2a80:	c8 84       	ldd	r12, Y+8	; 0x08
    2a82:	df 80       	ldd	r13, Y+7	; 0x07
    2a84:	ee 80       	ldd	r14, Y+6	; 0x06
    2a86:	fd 80       	ldd	r15, Y+5	; 0x05
    2a88:	0c 81       	ldd	r16, Y+4	; 0x04
    2a8a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a8c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a8e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a90:	ce 0f       	add	r28, r30
    2a92:	d1 1d       	adc	r29, r1
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	ed 01       	movw	r28, r26
    2aa0:	08 95       	ret

00002aa2 <_exit>:
    2aa2:	f8 94       	cli

00002aa4 <__stop_program>:
    2aa4:	ff cf       	rjmp	.-2      	; 0x2aa4 <__stop_program>
