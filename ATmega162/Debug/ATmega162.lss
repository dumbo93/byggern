
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ac  00800100  00001c08  00001c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  008003ac  008003ac  00001f48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000350  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003188  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000138d  00000000  00000000  0000547c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001424  00000000  00000000  00006809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000077c  00000000  00000000  00007c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009ee  00000000  00000000  000083ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001495  00000000  00000000  00008d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  0000a22f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_1>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__vector_13>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	13 e0       	ldi	r17, 0x03	; 3
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e8 e0       	ldi	r30, 0x08	; 8
     260:	fc e1       	ldi	r31, 0x1C	; 28
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	ac 3a       	cpi	r26, 0xAC	; 172
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	23 e0       	ldi	r18, 0x03	; 3
     270:	ac ea       	ldi	r26, 0xAC	; 172
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a3 3d       	cpi	r26, 0xD3	; 211
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <main>
     282:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <CAN_init>:
enum interrupt_flags interrupt_flag = no_flag; 


int CAN_init()
{
	MCP_init();
     28a:	0e 94 8f 02 	call	0x51e	; 0x51e <MCP_init>
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     28e:	40 e6       	ldi	r20, 0x60	; 96
     290:	60 e6       	ldi	r22, 0x60	; 96
     292:	80 e6       	ldi	r24, 0x60	; 96
     294:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     298:	40 e6       	ldi	r20, 0x60	; 96
     29a:	60 e6       	ldi	r22, 0x60	; 96
     29c:	80 e7       	ldi	r24, 0x70	; 112
     29e:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     2a2:	44 e0       	ldi	r20, 0x04	; 4
     2a4:	64 e0       	ldi	r22, 0x04	; 4
     2a6:	80 e6       	ldi	r24, 0x60	; 96
     2a8:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     2ac:	44 e0       	ldi	r20, 0x04	; 4
     2ae:	64 e0       	ldi	r22, 0x04	; 4
     2b0:	80 e7       	ldi	r24, 0x70	; 112
     2b2:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	60 ee       	ldi	r22, 0xE0	; 224
     2ba:	8f e0       	ldi	r24, 0x0F	; 15
     2bc:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     2c0:	8e e0       	ldi	r24, 0x0E	; 14
     2c2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     2c6:	80 7e       	andi	r24, 0xE0	; 224
     2c8:	39 f0       	breq	.+14     	; 0x2d8 <CAN_init+0x4e>
		printf("MCP2515 is NOT in normal mode after CAN init\n");
     2ca:	8c e1       	ldi	r24, 0x1C	; 28
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <puts>
		return 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	08 95       	ret
	}
	
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
     2d8:	63 e0       	ldi	r22, 0x03	; 3
     2da:	8b e2       	ldi	r24, 0x2B	; 43
     2dc:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (0 << ISC01) | (0 << ISC00);
     2e0:	85 b7       	in	r24, 0x35	; 53
     2e2:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     2e4:	8b b7       	in	r24, 0x3b	; 59
     2e6:	80 64       	ori	r24, 0x40	; 64
     2e8:	8b bf       	out	0x3b, r24	; 59
	// Falling edge of INT2 generates interrupt request
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
}
     2ee:	08 95       	ret

000002f0 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
     2fe:	fc 01       	movw	r30, r24
     300:	60 81       	ld	r22, Z
     302:	71 81       	ldd	r23, Z+1	; 0x01
     304:	76 95       	lsr	r23
     306:	67 95       	ror	r22
     308:	76 95       	lsr	r23
     30a:	67 95       	ror	r22
     30c:	76 95       	lsr	r23
     30e:	67 95       	ror	r22
     310:	81 e3       	ldi	r24, 0x31	; 49
     312:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
     316:	f7 01       	movw	r30, r14
     318:	60 81       	ld	r22, Z
     31a:	62 95       	swap	r22
     31c:	66 0f       	add	r22, r22
     31e:	60 7e       	andi	r22, 0xE0	; 224
     320:	82 e3       	ldi	r24, 0x32	; 50
     322:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	83 e3       	ldi	r24, 0x33	; 51
     32a:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	84 e3       	ldi	r24, 0x34	; 52
     332:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
     336:	f7 01       	movw	r30, r14
     338:	62 81       	ldd	r22, Z+2	; 0x02
     33a:	85 e3       	ldi	r24, 0x35	; 53
     33c:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
     340:	f7 01       	movw	r30, r14
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	88 23       	and	r24, r24
     346:	99 f0       	breq	.+38     	; 0x36e <CAN_msg_send+0x7e>
     348:	87 01       	movw	r16, r14
     34a:	0d 5f       	subi	r16, 0xFD	; 253
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	c0 e0       	ldi	r28, 0x00	; 0
     350:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
     352:	f8 01       	movw	r30, r16
     354:	61 91       	ld	r22, Z+
     356:	8f 01       	movw	r16, r30
     358:	8c 2f       	mov	r24, r28
     35a:	8a 5c       	subi	r24, 0xCA	; 202
     35c:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
     360:	21 96       	adiw	r28, 0x01	; 1
     362:	f7 01       	movw	r30, r14
     364:	22 81       	ldd	r18, Z+2	; 0x02
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	c2 17       	cp	r28, r18
     36a:	d3 07       	cpc	r29, r19
     36c:	94 f3       	brlt	.-28     	; 0x352 <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
     36e:	81 e8       	ldi	r24, 0x81	; 129
     370:	0e 94 b9 02 	call	0x572	; 0x572 <MCP_request_to_send>
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	08 95       	ret

00000382 <CAN_msg_receive>:

void CAN_msg_receive(can_msg *msg, uint8_t reg)
{
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	7c 01       	movw	r14, r24
     394:	c6 2f       	mov	r28, r22

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	86 0f       	add	r24, r22
     39a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
     39e:	d8 2f       	mov	r29, r24
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	8c 0f       	add	r24, r28
     3a4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
     3a8:	48 2f       	mov	r20, r24
     3aa:	42 95       	swap	r20
     3ac:	46 95       	lsr	r20
     3ae:	47 70       	andi	r20, 0x07	; 7
     3b0:	2d 2f       	mov	r18, r29
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	c9 01       	movw	r24, r18
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	84 2b       	or	r24, r20
     3c4:	f7 01       	movw	r30, r14
     3c6:	91 83       	std	Z+1, r25	; 0x01
     3c8:	80 83       	st	Z, r24
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	8c 0f       	add	r24, r28
     3ce:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	f7 01       	movw	r30, r14
     3d6:	82 83       	std	Z+2, r24	; 0x02
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     3d8:	88 23       	and	r24, r24
     3da:	f9 f0       	breq	.+62     	; 0x41a <CAN_msg_receive+0x98>
     3dc:	0f 2e       	mov	r0, r31
     3de:	f6 e0       	ldi	r31, 0x06	; 6
     3e0:	df 2e       	mov	r13, r31
     3e2:	f0 2d       	mov	r31, r0
     3e4:	dc 0e       	add	r13, r28
     3e6:	87 01       	movw	r16, r14
     3e8:	0d 5f       	subi	r16, 0xFD	; 253
     3ea:	1f 4f       	sbci	r17, 0xFF	; 255
     3ec:	0f 2e       	mov	r0, r31
     3ee:	fe e0       	ldi	r31, 0x0E	; 14
     3f0:	cf 2e       	mov	r12, r31
     3f2:	f0 2d       	mov	r31, r0
     3f4:	cc 0e       	add	r12, r28
{

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
     3f6:	c0 e0       	ldi	r28, 0x00	; 0
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
	while( (i < msg->length) && (i < 8) ){
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
     3fa:	8d 2d       	mov	r24, r13
     3fc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
     400:	f8 01       	movw	r30, r16
     402:	81 93       	st	Z+, r24
     404:	8f 01       	movw	r16, r30
		i++;
     406:	21 96       	adiw	r28, 0x01	; 1

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     408:	f7 01       	movw	r30, r14
     40a:	22 81       	ldd	r18, Z+2	; 0x02
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	c2 17       	cp	r28, r18
     410:	d3 07       	cpc	r29, r19
     412:	1c f4       	brge	.+6      	; 0x41a <CAN_msg_receive+0x98>
     414:	d3 94       	inc	r13
     416:	dc 10       	cpse	r13, r12
     418:	f0 cf       	rjmp	.-32     	; 0x3fa <CAN_msg_receive+0x78>
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
		i++;
	}	
	
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	08 95       	ret

0000042c <CAN_handle_interrupt>:

void CAN_handle_interrupt(can_msg *msg)
{
	//printf("EFLG: %x\n", MCP_read(MCP_EFLG));
	//printf("RXB0CTRL: %x\n", MCP_read(MCP_RXB0CTRL));
	switch(interrupt_flag){
     42c:	20 91 ac 03 	lds	r18, 0x03AC
     430:	21 30       	cpi	r18, 0x01	; 1
     432:	41 f0       	breq	.+16     	; 0x444 <CAN_handle_interrupt+0x18>
     434:	18 f0       	brcs	.+6      	; 0x43c <CAN_handle_interrupt+0x10>
     436:	22 30       	cpi	r18, 0x02	; 2
     438:	59 f0       	breq	.+22     	; 0x450 <CAN_handle_interrupt+0x24>
     43a:	08 95       	ret
		case no_flag:
		//printf("no interrupt 1\n");
			msg->data[0] = CAN_NO_MESSAGE;
     43c:	2a e0       	ldi	r18, 0x0A	; 10
     43e:	fc 01       	movw	r30, r24
     440:	23 83       	std	Z+3, r18	; 0x03
			break;
     442:	08 95       	ret
		case RX0:
			CAN_msg_receive(msg, MCP_RXB0CTRL);
     444:	60 e6       	ldi	r22, 0x60	; 96
     446:	0e 94 c1 01 	call	0x382	; 0x382 <CAN_msg_receive>
			interrupt_flag = no_flag;
     44a:	10 92 ac 03 	sts	0x03AC, r1
			//printf("interrupt handled 1\n");
			break;
     44e:	08 95       	ret
		case RX1:
			CAN_msg_receive(msg, MCP_RXB1CTRL);
     450:	60 e7       	ldi	r22, 0x70	; 112
     452:	0e 94 c1 01 	call	0x382	; 0x382 <CAN_msg_receive>
			interrupt_flag = no_flag;
     456:	10 92 ac 03 	sts	0x03AC, r1
     45a:	08 95       	ret

0000045c <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	2f 93       	push	r18
     468:	3f 93       	push	r19
     46a:	4f 93       	push	r20
     46c:	5f 93       	push	r21
     46e:	6f 93       	push	r22
     470:	7f 93       	push	r23
     472:	8f 93       	push	r24
     474:	9f 93       	push	r25
     476:	af 93       	push	r26
     478:	bf 93       	push	r27
     47a:	ef 93       	push	r30
     47c:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
     47e:	8c e2       	ldi	r24, 0x2C	; 44
     480:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>

	if (interrupt & MCP_RX0IF){
     484:	80 ff       	sbrs	r24, 0
     486:	09 c0       	rjmp	.+18     	; 0x49a <__vector_1+0x3e>
		interrupt_flag = RX0;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 ac 03 	sts	0x03AC, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	8c e2       	ldi	r24, 0x2C	; 44
     494:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
     498:	0a c0       	rjmp	.+20     	; 0x4ae <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
     49a:	81 ff       	sbrs	r24, 1
     49c:	08 c0       	rjmp	.+16     	; 0x4ae <__vector_1+0x52>
		interrupt_flag = RX1;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	80 93 ac 03 	sts	0x03AC, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	62 e0       	ldi	r22, 0x02	; 2
     4a8:	8c e2       	ldi	r24, 0x2C	; 44
     4aa:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	}
	
}
     4ae:	ff 91       	pop	r31
     4b0:	ef 91       	pop	r30
     4b2:	bf 91       	pop	r27
     4b4:	af 91       	pop	r26
     4b6:	9f 91       	pop	r25
     4b8:	8f 91       	pop	r24
     4ba:	7f 91       	pop	r23
     4bc:	6f 91       	pop	r22
     4be:	5f 91       	pop	r21
     4c0:	4f 91       	pop	r20
     4c2:	3f 91       	pop	r19
     4c4:	2f 91       	pop	r18
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
     4d8:	80 ec       	ldi	r24, 0xC0	; 192
     4da:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4de:	82 e4       	ldi	r24, 0x42	; 66
     4e0:	8a 95       	dec	r24
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <MCP_reset+0x10>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <MCP_reset+0x16>
	_delay_us(200);
	SPI_set_ss(1);
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
     4ee:	08 95       	ret

000004f0 <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
     4f0:	cf 93       	push	r28
     4f2:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	//printf("hello from MCP read 1\n");
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	//printf("hello from MCP read 2\n");
	// Send 8-bit address
	SPI_transmit_receive(address);
     502:	8c 2f       	mov	r24, r28
     504:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	//printf("hello from MCP read 3\n");
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
     50e:	c8 2f       	mov	r28, r24
	//printf("hello from MCP read 4\n");
	SPI_set_ss(1);
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	return received;
}
     518:	8c 2f       	mov	r24, r28
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <MCP_init>:
#include <util/delay.h>


uint8_t MCP_init( void )
{
	SPI_init();
     51e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_init>
	//printf("hello from MCP init 1\n");
	MCP_reset();
     522:	0e 94 68 02 	call	0x4d0	; 0x4d0 <MCP_reset>
	//printf("hello from MCP init 2\n");
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     526:	8e e0       	ldi	r24, 0x0E	; 14
     528:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
	//printf("hello from MCP init 3\n");
	
	if ((value & MODE_MASK) != MODE_CONFIG){
     52c:	80 7e       	andi	r24, 0xE0	; 224
     52e:	80 38       	cpi	r24, 0x80	; 128
     530:	31 f0       	breq	.+12     	; 0x53e <MCP_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset\n");
     532:	89 e4       	ldi	r24, 0x49	; 73
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <puts>
		return 1;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	08 95       	ret
	}
	//printf("hello from MCP init 4\n");
	return 0;
     53e:	80 e0       	ldi	r24, 0x00	; 0
}
     540:	08 95       	ret

00000542 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	d8 2f       	mov	r29, r24
     548:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_transmit_receive(address);
     558:	8d 2f       	mov	r24, r29
     55a:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_transmit_receive(data);
     55e:	8c 2f       	mov	r24, r28
     560:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
     572:	cf 93       	push	r28
     574:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
     57e:	8c 2f       	mov	r24, r28
     580:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_set_ss(1); //(?)
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
}
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	18 2f       	mov	r17, r24
     598:	d6 2f       	mov	r29, r22
     59a:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
     5aa:	81 2f       	mov	r24, r17
     5ac:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_transmit_receive(mask);
     5b0:	8d 2f       	mov	r24, r29
     5b2:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_transmit_receive(data);
     5b6:	8c 2f       	mov	r24, r28
     5b8:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	
	SPI_set_ss(1);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	08 95       	ret

000005cc <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
     5cc:	87 b3       	in	r24, 0x17	; 23
     5ce:	80 6b       	ori	r24, 0xB0	; 176
     5d0:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
     5d2:	81 e1       	ldi	r24, 0x11	; 17
     5d4:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
     5d6:	6e 9a       	sbi	0x0d, 6	; 13
     5d8:	08 95       	ret

000005da <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
     5da:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
     5dc:	77 9b       	sbis	0x0e, 7	; 14
     5de:	fe cf       	rjmp	.-4      	; 0x5dc <SPI_transmit_receive+0x2>
     5e0:	85 ef       	ldi	r24, 0xF5	; 245
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <SPI_transmit_receive+0xa>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <SPI_transmit_receive+0x10>
     5ea:	00 00       	nop
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
     5ec:	8f b1       	in	r24, 0x0f	; 15
	
}
     5ee:	08 95       	ret

000005f0 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	91 05       	cpc	r25, r1
     5f4:	11 f4       	brne	.+4      	; 0x5fa <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     5f6:	c4 9a       	sbi	0x18, 4	; 24
     5f8:	08 95       	ret
	}
	else if (val == 0){
     5fa:	89 2b       	or	r24, r25
     5fc:	09 f4       	brne	.+2      	; 0x600 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     5fe:	c4 98       	cbi	0x18, 4	; 24
     600:	08 95       	ret

00000602 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
     602:	5d 9b       	sbis	0x0b, 5	; 11
     604:	fe cf       	rjmp	.-4      	; 0x602 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
     606:	8c b9       	out	0x0c, r24	; 12
     608:	08 95       	ret

0000060a <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
     60a:	5f 9b       	sbis	0x0b, 7	; 11
     60c:	fe cf       	rjmp	.-4      	; 0x60a <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
     60e:	8c b1       	in	r24, 0x0c	; 12
     610:	08 95       	ret

00000612 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
     612:	20 b5       	in	r18, 0x20	; 32
     614:	92 2b       	or	r25, r18
     616:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
     618:	99 b1       	in	r25, 0x09	; 9
     61a:	89 2b       	or	r24, r25
     61c:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     61e:	8a b1       	in	r24, 0x0a	; 10
     620:	88 61       	ori	r24, 0x18	; 24
     622:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     624:	80 b5       	in	r24, 0x20	; 32
     626:	8e 68       	ori	r24, 0x8E	; 142
     628:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
     62a:	65 e0       	ldi	r22, 0x05	; 5
     62c:	73 e0       	ldi	r23, 0x03	; 3
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fdevopen>
     636:	08 95       	ret

00000638 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	MCUCR |= (1 << SRE);
     638:	85 b7       	in	r24, 0x35	; 53
     63a:	80 68       	ori	r24, 0x80	; 128
     63c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     63e:	80 b7       	in	r24, 0x30	; 48
     640:	80 62       	ori	r24, 0x20	; 32
     642:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	DDRD &= ~(1 << PD3);
     644:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	08 95       	ret

0000064c <ADC_read>:

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	70 f4       	brcc	.+28     	; 0x66c <ADC_read+0x20>
	*ext_adc = 0x04 | channel; // bitwise OR
     650:	84 60       	ori	r24, 0x04	; 4
     652:	80 93 00 14 	sts	0x1400, r24
	
	// wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
     656:	83 99       	sbic	0x10, 3	; 16
     658:	fe cf       	rjmp	.-4      	; 0x656 <ADC_read+0xa>
     65a:	85 ef       	ldi	r24, 0xF5	; 245
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <ADC_read+0x12>
     662:	00 c0       	rjmp	.+0      	; 0x664 <ADC_read+0x18>
     664:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
     666:	80 91 00 14 	lds	r24, 0x1400
     66a:	08 95       	ret

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
     66c:	80 e0       	ldi	r24, 0x00	; 0
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
	
}
     66e:	08 95       	ret

00000670 <SEND2CAN_send_joy_pos_x>:
#include "../../../communication_drivers/can.h"
#include <stdlib.h>
#include <math.h>

void SEND2CAN_send_joy_pos_x()
{
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	2b 97       	sbiw	r28, 0x0b	; 11
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
	static JOY_position_t prev_joy_pos;
	JOY_position_t joy_pos = JOY_read_adc();
     68c:	0e 94 41 04 	call	0x882	; 0x882 <JOY_read_adc>
     690:	6b 01       	movw	r12, r22
     692:	7c 01       	movw	r14, r24
	can_msg msg;
	if(abs(joy_pos.x - prev_joy_pos.x) > 5){
     694:	80 91 b5 03 	lds	r24, 0x03B5
     698:	90 91 b6 03 	lds	r25, 0x03B6
     69c:	97 01       	movw	r18, r14
     69e:	28 1b       	sub	r18, r24
     6a0:	39 0b       	sbc	r19, r25
     6a2:	c9 01       	movw	r24, r18
     6a4:	99 23       	and	r25, r25
     6a6:	24 f4       	brge	.+8      	; 0x6b0 <SEND2CAN_send_joy_pos_x+0x40>
     6a8:	88 27       	eor	r24, r24
     6aa:	99 27       	eor	r25, r25
     6ac:	82 1b       	sub	r24, r18
     6ae:	93 0b       	sbc	r25, r19
     6b0:	06 97       	sbiw	r24, 0x06	; 6
     6b2:	0c f1       	brlt	.+66     	; 0x6f6 <SEND2CAN_send_joy_pos_x+0x86>
		msg.id = ATmega162_ID;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	9a 83       	std	Y+2, r25	; 0x02
     6ba:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_JOY_POS_X;
     6bc:	1c 82       	std	Y+4, r1	; 0x04
		msg.data[1] = joy_pos.x;
     6be:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_msg_send>
		printf("\n\nSent joystick position (x): (%d) \n",msg.data[1]);
     6cc:	8d 81       	ldd	r24, Y+5	; 0x05
     6ce:	1f 92       	push	r1
     6d0:	8f 93       	push	r24
     6d2:	8a e7       	ldi	r24, 0x7A	; 122
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	0e 94 c8 09 	call	0x1390	; 0x1390 <printf>
		prev_joy_pos = joy_pos;
     6de:	c0 92 b3 03 	sts	0x03B3, r12
     6e2:	d0 92 b4 03 	sts	0x03B4, r13
     6e6:	e0 92 b5 03 	sts	0x03B5, r14
     6ea:	f0 92 b6 03 	sts	0x03B6, r15
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
	}
}
     6f6:	2b 96       	adiw	r28, 0x0b	; 11
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	08 95       	ret

00000710 <SEND2CAN_send_slider_pos>:

void SEND2CAN_send_slider_pos()
{
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	2b 97       	sbiw	r28, 0x0b	; 11
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
	static TOUCH_slider_pos_t prev_slider_pos;
	TOUCH_slider_pos_t slider_pos = TOUCH_get_slider_position();
     72c:	0e 94 a2 06 	call	0xd44	; 0xd44 <TOUCH_get_slider_position>
     730:	6b 01       	movw	r12, r22
     732:	7c 01       	movw	r14, r24
	can_msg msg;
	
	if(abs(slider_pos.right_slider - prev_slider_pos.right_slider) > 5){
     734:	80 91 b1 03 	lds	r24, 0x03B1
     738:	90 91 b2 03 	lds	r25, 0x03B2
     73c:	97 01       	movw	r18, r14
     73e:	28 1b       	sub	r18, r24
     740:	39 0b       	sbc	r19, r25
     742:	c9 01       	movw	r24, r18
     744:	99 23       	and	r25, r25
     746:	24 f4       	brge	.+8      	; 0x750 <SEND2CAN_send_slider_pos+0x40>
     748:	88 27       	eor	r24, r24
     74a:	99 27       	eor	r25, r25
     74c:	82 1b       	sub	r24, r18
     74e:	93 0b       	sbc	r25, r19
     750:	06 97       	sbiw	r24, 0x06	; 6
     752:	14 f1       	brlt	.+68     	; 0x798 <SEND2CAN_send_slider_pos+0x88>
		msg.id = ATmega162_ID;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_SLIDER_POS_R;
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = slider_pos.right_slider;
     760:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_msg_send>
		printf("\n\nSent slider position: (%d) \n",msg.data[1]);
     76e:	8d 81       	ldd	r24, Y+5	; 0x05
     770:	1f 92       	push	r1
     772:	8f 93       	push	r24
     774:	8f e9       	ldi	r24, 0x9F	; 159
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	0e 94 c8 09 	call	0x1390	; 0x1390 <printf>
		prev_slider_pos = slider_pos;
     780:	c0 92 af 03 	sts	0x03AF, r12
     784:	d0 92 b0 03 	sts	0x03B0, r13
     788:	e0 92 b1 03 	sts	0x03B1, r14
     78c:	f0 92 b2 03 	sts	0x03B2, r15
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
	}
	
}
     798:	2b 96       	adiw	r28, 0x0b	; 11
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	08 95       	ret

000007b2 <SEND2CAN_touch_button_pressed>:

void SEND2CAN_touch_button_pressed()
{
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	2b 97       	sbiw	r28, 0x0b	; 11
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
	static int prev_button_pressed;
	can_msg msg;
	
	int button_pressed = TOUCH_button();
     7ca:	0e 94 82 06 	call	0xd04	; 0xd04 <TOUCH_button>
     7ce:	8c 01       	movw	r16, r24
	if(button_pressed == 1 && prev_button_pressed == 0){
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	91 05       	cpc	r25, r1
     7d4:	09 f5       	brne	.+66     	; 0x818 <SEND2CAN_touch_button_pressed+0x66>
     7d6:	80 91 ad 03 	lds	r24, 0x03AD
     7da:	90 91 ae 03 	lds	r25, 0x03AE
     7de:	89 2b       	or	r24, r25
     7e0:	d9 f4       	brne	.+54     	; 0x818 <SEND2CAN_touch_button_pressed+0x66>
		msg.id = ATmega162_ID;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	9a 83       	std	Y+2, r25	; 0x02
     7e8:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_TOUCH_BUTTON;
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = button_pressed;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	8d 83       	std	Y+5, r24	; 0x05
		msg.length = 2;
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     7f6:	ce 01       	movw	r24, r28
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_msg_send>
		printf("\n\nSent button press (x): (%d) \n",msg.data[1]);
     7fe:	8d 81       	ldd	r24, Y+5	; 0x05
     800:	1f 92       	push	r1
     802:	8f 93       	push	r24
     804:	8e eb       	ldi	r24, 0xBE	; 190
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	0e 94 c8 09 	call	0x1390	; 0x1390 <printf>
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
	}
	prev_button_pressed = button_pressed;
     818:	10 93 ae 03 	sts	0x03AE, r17
     81c:	00 93 ad 03 	sts	0x03AD, r16
}
     820:	2b 96       	adiw	r28, 0x0b	; 11
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <SEND2CAN_send_speed>:

void SEND2CAN_send_speed(int speed){
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	2b 97       	sbiw	r28, 0x0b	; 11
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	msg.id = ATmega162_ID;
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	3a 83       	std	Y+2, r19	; 0x02
     850:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_SPEED;
     852:	96 e0       	ldi	r25, 0x06	; 6
     854:	9c 83       	std	Y+4, r25	; 0x04
	msg.data[1] = (uint8_t)speed;
     856:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
     85c:	ce 01       	movw	r24, r28
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_msg_send>
}
     864:	2b 96       	adiw	r28, 0x0b	; 11
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <JOY_button>:
void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
}

int JOY_button(){
	return !(test_bit(PINB, PINB0));
     876:	96 b3       	in	r25, 0x16	; 22
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	89 27       	eor	r24, r25
}
     87c:	81 70       	andi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	08 95       	ret

00000882 <JOY_read_adc>:

JOY_position_t JOY_read_adc( void ){
     882:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 26 03 	call	0x64c	; 0x64c <ADC_read>
     88a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88c:	8c ec       	ldi	r24, 0xCC	; 204
     88e:	94 e0       	ldi	r25, 0x04	; 4
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <JOY_read_adc+0xe>
     894:	00 c0       	rjmp	.+0      	; 0x896 <JOY_read_adc+0x14>
     896:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 26 03 	call	0x64c	; 0x64c <ADC_read>
     89e:	28 2f       	mov	r18, r24
	
	return pos;
     8a0:	6c 2f       	mov	r22, r28
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	82 2f       	mov	r24, r18
     8a6:	90 e0       	ldi	r25, 0x00	; 0
}
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <JOY_calibrate>:
	set_bit(PORTB, PB0);
	
}

void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
     8ac:	0e 94 41 04 	call	0x882	; 0x882 <JOY_read_adc>
     8b0:	60 93 bc 03 	sts	0x03BC, r22
     8b4:	70 93 bd 03 	sts	0x03BD, r23
     8b8:	80 93 be 03 	sts	0x03BE, r24
     8bc:	90 93 bf 03 	sts	0x03BF, r25
     8c0:	08 95       	ret

000008c2 <JOY_init>:

JOY_position_t neutral_pos; 


void JOY_init( void ){
	JOY_calibrate();
     8c2:	0e 94 56 04 	call	0x8ac	; 0x8ac <JOY_calibrate>
	
	// Initialize PORT B, pin 0 (joystick button) as input
	clear_bit(DDRB, PINB0);
     8c6:	b8 98       	cbi	0x17, 0	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB0);
     8c8:	c0 9a       	sbi	0x18, 0	; 24
     8ca:	08 95       	ret

000008cc <JOY_get_position>:
	pos.x = ADC_read(X_POS_CHANNEL);
	
	return pos;
}

JOY_position_t JOY_get_position(){
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
	JOY_position_t current_pos = JOY_read_adc();
     8d2:	0e 94 41 04 	call	0x882	; 0x882 <JOY_read_adc>
     8d6:	8b 01       	movw	r16, r22
     8d8:	9c 01       	movw	r18, r24
	
	JOY_position_t pos_percentage;
	pos_percentage.y = (current_pos.y - neutral_pos.y) * 100 / neutral_pos.y;
     8da:	60 91 bc 03 	lds	r22, 0x03BC
     8de:	70 91 bd 03 	lds	r23, 0x03BD
     8e2:	a8 01       	movw	r20, r16
     8e4:	46 1b       	sub	r20, r22
     8e6:	57 0b       	sbc	r21, r23
     8e8:	e4 e6       	ldi	r30, 0x64	; 100
     8ea:	e4 9f       	mul	r30, r20
     8ec:	c0 01       	movw	r24, r0
     8ee:	e5 9f       	mul	r30, r21
     8f0:	90 0d       	add	r25, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	0e 94 55 09 	call	0x12aa	; 0x12aa <__divmodhi4>
     8f8:	c6 2f       	mov	r28, r22
     8fa:	f7 2f       	mov	r31, r23
	pos_percentage.x = (current_pos.x - neutral_pos.x) * 100 / neutral_pos.x;
     8fc:	60 91 be 03 	lds	r22, 0x03BE
     900:	70 91 bf 03 	lds	r23, 0x03BF
     904:	26 1b       	sub	r18, r22
     906:	37 0b       	sbc	r19, r23
     908:	e2 9f       	mul	r30, r18
     90a:	c0 01       	movw	r24, r0
     90c:	e3 9f       	mul	r30, r19
     90e:	90 0d       	add	r25, r0
     910:	11 24       	eor	r1, r1
     912:	0e 94 55 09 	call	0x12aa	; 0x12aa <__divmodhi4>
     916:	9b 01       	movw	r18, r22
     918:	6c 39       	cpi	r22, 0x9C	; 156
     91a:	4f ef       	ldi	r20, 0xFF	; 255
     91c:	74 07       	cpc	r23, r20
     91e:	14 f4       	brge	.+4      	; 0x924 <JOY_get_position+0x58>
     920:	2c e9       	ldi	r18, 0x9C	; 156
     922:	3f ef       	ldi	r19, 0xFF	; 255
     924:	8c 2f       	mov	r24, r28
     926:	9f 2f       	mov	r25, r31
     928:	8c 39       	cpi	r24, 0x9C	; 156
     92a:	4f ef       	ldi	r20, 0xFF	; 255
     92c:	94 07       	cpc	r25, r20
     92e:	14 f4       	brge	.+4      	; 0x934 <JOY_get_position+0x68>
     930:	8c e9       	ldi	r24, 0x9C	; 156
     932:	9f ef       	ldi	r25, 0xFF	; 255
     934:	ac 01       	movw	r20, r24
     936:	85 36       	cpi	r24, 0x65	; 101
     938:	91 05       	cpc	r25, r1
     93a:	14 f0       	brlt	.+4      	; 0x940 <JOY_get_position+0x74>
     93c:	44 e6       	ldi	r20, 0x64	; 100
     93e:	50 e0       	ldi	r21, 0x00	; 0
	else if (pos_percentage.x < -100) { pos_percentage.x = -100; }
	
	if (pos_percentage.y > 100) { pos_percentage.y = 100; }
	else if (pos_percentage.y < -100) { pos_percentage.y = -100; }

	return pos_percentage;
     940:	ba 01       	movw	r22, r20
     942:	25 36       	cpi	r18, 0x65	; 101
     944:	31 05       	cpc	r19, r1
     946:	14 f0       	brlt	.+4      	; 0x94c <JOY_get_position+0x80>
     948:	24 e6       	ldi	r18, 0x64	; 100
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	c9 01       	movw	r24, r18
}
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	08 95       	ret

00000956 <JOY_get_direction>:

JOY_direction_t JOY_get_direction(){
	JOY_position_t current_pos = JOY_get_position();
     956:	0e 94 66 04 	call	0x8cc	; 0x8cc <JOY_get_position>
     95a:	9b 01       	movw	r18, r22
     95c:	ac 01       	movw	r20, r24
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
     95e:	fc 01       	movw	r30, r24
     960:	7d 96       	adiw	r30, 0x1d	; 29
     962:	fb 97       	sbiw	r30, 0x3b	; 59
     964:	20 f4       	brcc	.+8      	; 0x96e <JOY_get_direction+0x18>
     966:	fb 01       	movw	r30, r22
     968:	7d 96       	adiw	r30, 0x1d	; 29
     96a:	fb 97       	sbiw	r30, 0x3b	; 59
     96c:	d8 f0       	brcs	.+54     	; 0x9a4 <JOY_get_direction+0x4e>
		return NEUTRAL;
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
     96e:	dc 01       	movw	r26, r24
     970:	55 23       	and	r21, r21
     972:	24 f4       	brge	.+8      	; 0x97c <JOY_get_direction+0x26>
     974:	aa 27       	eor	r26, r26
     976:	bb 27       	eor	r27, r27
     978:	a8 1b       	sub	r26, r24
     97a:	b9 0b       	sbc	r27, r25
     97c:	fb 01       	movw	r30, r22
     97e:	33 23       	and	r19, r19
     980:	24 f4       	brge	.+8      	; 0x98a <JOY_get_direction+0x34>
     982:	ee 27       	eor	r30, r30
     984:	ff 27       	eor	r31, r31
     986:	e6 1b       	sub	r30, r22
     988:	f7 0b       	sbc	r31, r23
     98a:	ea 17       	cp	r30, r26
     98c:	fb 07       	cpc	r31, r27
     98e:	2c f4       	brge	.+10     	; 0x99a <JOY_get_direction+0x44>
		if (current_pos.x > 0) { return RIGHT; }
     990:	14 16       	cp	r1, r20
     992:	15 06       	cpc	r1, r21
     994:	4c f4       	brge	.+18     	; 0x9a8 <JOY_get_direction+0x52>
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	08 95       	ret
		else { return LEFT; }
	}
	else {
		if (current_pos.y > 0) { return UP; }
     99a:	12 16       	cp	r1, r18
     99c:	13 06       	cpc	r1, r19
     99e:	34 f4       	brge	.+12     	; 0x9ac <JOY_get_direction+0x56>
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	08 95       	ret

JOY_direction_t JOY_get_direction(){
	JOY_position_t current_pos = JOY_get_position();
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
		return NEUTRAL;
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	08 95       	ret
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
		if (current_pos.x > 0) { return RIGHT; }
		else { return LEFT; }
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	08 95       	ret
	}
	else {
		if (current_pos.y > 0) { return UP; }
		else { return DOWN; }
     9ac:	84 e0       	ldi	r24, 0x04	; 4
	}
     9ae:	08 95       	ret

000009b0 <OLED_goto_column>:
}


void OLED_goto_column( uint8_t column )
{
	if (column < NUM_COLUMNS){
     9b0:	88 23       	and	r24, r24
     9b2:	8c f0       	brlt	.+34     	; 0x9d6 <OLED_goto_column+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     9b4:	e0 91 16 01 	lds	r30, 0x0116
     9b8:	f0 91 17 01 	lds	r31, 0x0117
     9bc:	91 e2       	ldi	r25, 0x21	; 33
     9be:	90 83       	st	Z, r25
     9c0:	e0 91 16 01 	lds	r30, 0x0116
     9c4:	f0 91 17 01 	lds	r31, 0x0117
     9c8:	80 83       	st	Z, r24
     9ca:	e0 91 16 01 	lds	r30, 0x0116
     9ce:	f0 91 17 01 	lds	r31, 0x0117
     9d2:	8f e7       	ldi	r24, 0x7F	; 127
     9d4:	80 83       	st	Z, r24
     9d6:	08 95       	ret

000009d8 <OLED_goto_line>:
	}
}

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
     9d8:	88 30       	cpi	r24, 0x08	; 8
     9da:	98 f4       	brcc	.+38     	; 0xa02 <OLED_goto_line+0x2a>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     9dc:	e0 91 16 01 	lds	r30, 0x0116
     9e0:	f0 91 17 01 	lds	r31, 0x0117
     9e4:	92 e2       	ldi	r25, 0x22	; 34
     9e6:	90 83       	st	Z, r25

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
		OLED_write_command(SET_PAGE_ADDRESS);
		line = l;
     9e8:	80 93 b9 03 	sts	0x03B9, r24
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     9ec:	e0 91 16 01 	lds	r30, 0x0116
     9f0:	f0 91 17 01 	lds	r31, 0x0117
     9f4:	80 83       	st	Z, r24
     9f6:	e0 91 16 01 	lds	r30, 0x0116
     9fa:	f0 91 17 01 	lds	r31, 0x0117
     9fe:	87 e0       	ldi	r24, 0x07	; 7
     a00:	80 83       	st	Z, r24
     a02:	08 95       	ret

00000a04 <OLED_pos>:
		OLED_write_command(7);
	}
}

void OLED_pos(uint8_t row, uint8_t column)
{
     a04:	cf 93       	push	r28
     a06:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
     a08:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_goto_line>
	OLED_goto_column(column);
     a0c:	8c 2f       	mov	r24, r28
     a0e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <OLED_goto_column>
}
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <OLED_print_char>:
}

void OLED_print_char( char character )
{	
	//printf("Character: %c \n", *character);
	if ((character) == '\n'){
     a16:	8a 30       	cpi	r24, 0x0A	; 10
     a18:	39 f4       	brne	.+14     	; 0xa28 <OLED_print_char+0x12>
		//printf("newline\n");
		OLED_pos((line + 1), 0);
     a1a:	80 91 b9 03 	lds	r24, 0x03B9
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
     a26:	08 95       	ret
     a28:	e8 2f       	mov	r30, r24
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	b0 97       	sbiw	r30, 0x20	; 32
     a2e:	cf 01       	movw	r24, r30
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	e8 0f       	add	r30, r24
     a3a:	f9 1f       	adc	r31, r25
     a3c:	e0 59       	subi	r30, 0x90	; 144
     a3e:	ff 4f       	sbci	r31, 0xFF	; 255
}

void OLED_print_char( char character )
{	
	//printf("Character: %c \n", *character);
	if ((character) == '\n'){
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
		//printf("newline\n");
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
			OLED_write_data(pgm_read_byte(&font5[character - ' '][i]));
     a44:	24 91       	lpm	r18, Z
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     a46:	a0 91 14 01 	lds	r26, 0x0114
     a4a:	b0 91 15 01 	lds	r27, 0x0115
     a4e:	2c 93       	st	X, r18
	if ((character) == '\n'){
		//printf("newline\n");
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	31 96       	adiw	r30, 0x01	; 1
     a54:	85 30       	cpi	r24, 0x05	; 5
     a56:	91 05       	cpc	r25, r1
     a58:	a9 f7       	brne	.-22     	; 0xa44 <OLED_print_char+0x2e>
     a5a:	08 95       	ret

00000a5c <OLED_home>:
}

void OLED_home( void )
{
	// go "home", upper left corner
	OLED_pos(0, 0);
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
     a64:	08 95       	ret

00000a66 <OLED_clear_line>:


void OLED_clear_line( uint8_t line )
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
	
	// go through all columns
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
     a6c:	80 e0       	ldi	r24, 0x00	; 0
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     a6e:	e0 91 14 01 	lds	r30, 0x0114
     a72:	f0 91 15 01 	lds	r31, 0x0115
     a76:	10 82       	st	Z, r1
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
	
	// go through all columns
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 38       	cpi	r24, 0x80	; 128
     a7c:	c1 f7       	brne	.-16     	; 0xa6e <OLED_clear_line+0x8>
		// write 8 bits to each column
		OLED_write_data(0x00);
	}
}
     a7e:	08 95       	ret

00000a80 <OLED_reset>:

void OLED_reset( void )
{
     a80:	cf 93       	push	r28
	// clear all lines
	for (uint8_t line = 0; line < NUM_LINES; line++){
     a82:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(line);
     a84:	8c 2f       	mov	r24, r28
     a86:	0e 94 33 05 	call	0xa66	; 0xa66 <OLED_clear_line>
}

void OLED_reset( void )
{
	// clear all lines
	for (uint8_t line = 0; line < NUM_LINES; line++){
     a8a:	cf 5f       	subi	r28, 0xFF	; 255
     a8c:	c8 30       	cpi	r28, 0x08	; 8
     a8e:	d1 f7       	brne	.-12     	; 0xa84 <OLED_reset+0x4>
		OLED_clear_line(line);
	}
	
	// go home
	OLED_home();
     a90:	0e 94 2e 05 	call	0xa5c	; 0xa5c <OLED_home>
}
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <OLED_init>:
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     a98:	e0 91 16 01 	lds	r30, 0x0116
     a9c:	f0 91 17 01 	lds	r31, 0x0117
     aa0:	8e ea       	ldi	r24, 0xAE	; 174
     aa2:	80 83       	st	Z, r24
     aa4:	e0 91 16 01 	lds	r30, 0x0116
     aa8:	f0 91 17 01 	lds	r31, 0x0117
     aac:	81 ea       	ldi	r24, 0xA1	; 161
     aae:	80 83       	st	Z, r24
     ab0:	e0 91 16 01 	lds	r30, 0x0116
     ab4:	f0 91 17 01 	lds	r31, 0x0117
     ab8:	8a ed       	ldi	r24, 0xDA	; 218
     aba:	80 83       	st	Z, r24
     abc:	e0 91 16 01 	lds	r30, 0x0116
     ac0:	f0 91 17 01 	lds	r31, 0x0117
     ac4:	82 e1       	ldi	r24, 0x12	; 18
     ac6:	80 83       	st	Z, r24
     ac8:	e0 91 16 01 	lds	r30, 0x0116
     acc:	f0 91 17 01 	lds	r31, 0x0117
     ad0:	88 ec       	ldi	r24, 0xC8	; 200
     ad2:	80 83       	st	Z, r24
     ad4:	e0 91 16 01 	lds	r30, 0x0116
     ad8:	f0 91 17 01 	lds	r31, 0x0117
     adc:	88 ea       	ldi	r24, 0xA8	; 168
     ade:	80 83       	st	Z, r24
     ae0:	e0 91 16 01 	lds	r30, 0x0116
     ae4:	f0 91 17 01 	lds	r31, 0x0117
     ae8:	8f e3       	ldi	r24, 0x3F	; 63
     aea:	80 83       	st	Z, r24
     aec:	e0 91 16 01 	lds	r30, 0x0116
     af0:	f0 91 17 01 	lds	r31, 0x0117
     af4:	85 ed       	ldi	r24, 0xD5	; 213
     af6:	80 83       	st	Z, r24
     af8:	e0 91 16 01 	lds	r30, 0x0116
     afc:	f0 91 17 01 	lds	r31, 0x0117
     b00:	80 e8       	ldi	r24, 0x80	; 128
     b02:	80 83       	st	Z, r24
     b04:	e0 91 16 01 	lds	r30, 0x0116
     b08:	f0 91 17 01 	lds	r31, 0x0117
     b0c:	81 e8       	ldi	r24, 0x81	; 129
     b0e:	80 83       	st	Z, r24
     b10:	e0 91 16 01 	lds	r30, 0x0116
     b14:	f0 91 17 01 	lds	r31, 0x0117
     b18:	80 e5       	ldi	r24, 0x50	; 80
     b1a:	80 83       	st	Z, r24
     b1c:	e0 91 16 01 	lds	r30, 0x0116
     b20:	f0 91 17 01 	lds	r31, 0x0117
     b24:	89 ed       	ldi	r24, 0xD9	; 217
     b26:	80 83       	st	Z, r24
     b28:	e0 91 16 01 	lds	r30, 0x0116
     b2c:	f0 91 17 01 	lds	r31, 0x0117
     b30:	81 e2       	ldi	r24, 0x21	; 33
     b32:	80 83       	st	Z, r24
     b34:	e0 91 16 01 	lds	r30, 0x0116
     b38:	f0 91 17 01 	lds	r31, 0x0117
     b3c:	80 e2       	ldi	r24, 0x20	; 32
     b3e:	80 83       	st	Z, r24
     b40:	e0 91 16 01 	lds	r30, 0x0116
     b44:	f0 91 17 01 	lds	r31, 0x0117
     b48:	10 82       	st	Z, r1
     b4a:	e0 91 16 01 	lds	r30, 0x0116
     b4e:	f0 91 17 01 	lds	r31, 0x0117
     b52:	8b ed       	ldi	r24, 0xDB	; 219
     b54:	80 83       	st	Z, r24
     b56:	e0 91 16 01 	lds	r30, 0x0116
     b5a:	f0 91 17 01 	lds	r31, 0x0117
     b5e:	80 e3       	ldi	r24, 0x30	; 48
     b60:	80 83       	st	Z, r24
     b62:	e0 91 16 01 	lds	r30, 0x0116
     b66:	f0 91 17 01 	lds	r31, 0x0117
     b6a:	8d ea       	ldi	r24, 0xAD	; 173
     b6c:	80 83       	st	Z, r24
     b6e:	e0 91 16 01 	lds	r30, 0x0116
     b72:	f0 91 17 01 	lds	r31, 0x0117
     b76:	10 82       	st	Z, r1
     b78:	e0 91 16 01 	lds	r30, 0x0116
     b7c:	f0 91 17 01 	lds	r31, 0x0117
     b80:	84 ea       	ldi	r24, 0xA4	; 164
     b82:	80 83       	st	Z, r24
     b84:	e0 91 16 01 	lds	r30, 0x0116
     b88:	f0 91 17 01 	lds	r31, 0x0117
     b8c:	86 ea       	ldi	r24, 0xA6	; 166
     b8e:	80 83       	st	Z, r24
     b90:	e0 91 16 01 	lds	r30, 0x0116
     b94:	f0 91 17 01 	lds	r31, 0x0117
     b98:	8f ea       	ldi	r24, 0xAF	; 175
     b9a:	80 83       	st	Z, r24
	OLED_write_command(ENTIRE_DISPLAY_ON);			  //out  follows  RAM  content

	OLED_write_command(SET_NORMAL_DISPLAY);
	OLED_write_command(DISPLAY_ON);
	
	OLED_reset();
     b9c:	0e 94 40 05 	call	0xa80	; 0xa80 <OLED_reset>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     ba0:	e0 91 16 01 	lds	r30, 0x0116
     ba4:	f0 91 17 01 	lds	r31, 0x0117
     ba8:	83 ed       	ldi	r24, 0xD3	; 211
     baa:	80 83       	st	Z, r24
     bac:	e0 91 16 01 	lds	r30, 0x0116
     bb0:	f0 91 17 01 	lds	r31, 0x0117
     bb4:	10 82       	st	Z, r1
     bb6:	08 95       	ret

00000bb8 <OLED_set_contrast>:
     bb8:	e0 91 16 01 	lds	r30, 0x0116
     bbc:	f0 91 17 01 	lds	r31, 0x0117
     bc0:	91 e8       	ldi	r25, 0x81	; 129
     bc2:	90 83       	st	Z, r25
     bc4:	e0 91 16 01 	lds	r30, 0x0116
     bc8:	f0 91 17 01 	lds	r31, 0x0117
     bcc:	80 83       	st	Z, r24
     bce:	08 95       	ret

00000bd0 <OLED_invert_screen>:
}

void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
     bd0:	80 91 b7 03 	lds	r24, 0x03B7
     bd4:	90 91 b8 03 	lds	r25, 0x03B8
     bd8:	89 2b       	or	r24, r25
     bda:	69 f4       	brne	.+26     	; 0xbf6 <OLED_invert_screen+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     bdc:	e0 91 16 01 	lds	r30, 0x0116
     be0:	f0 91 17 01 	lds	r31, 0x0117
     be4:	87 ea       	ldi	r24, 0xA7	; 167
     be6:	80 83       	st	Z, r24
void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 b8 03 	sts	0x03B8, r25
     bf0:	80 93 b7 03 	sts	0x03B7, r24
     bf4:	08 95       	ret
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     bf6:	e0 91 16 01 	lds	r30, 0x0116
     bfa:	f0 91 17 01 	lds	r31, 0x0117
     bfe:	86 ea       	ldi	r24, 0xA6	; 166
     c00:	80 83       	st	Z, r24
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
		}else{
		OLED_write_command(SET_NORMAL_DISPLAY);
		inverted = 0;
     c02:	10 92 b8 03 	sts	0x03B8, r1
     c06:	10 92 b7 03 	sts	0x03B7, r1
     c0a:	08 95       	ret

00000c0c <OLED_printf>:
		OLED_print_char(c[i]);
		i++;
	}
}

void OLED_printf(const char* fmt, ...){
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	fe 01       	movw	r30, r28
     c16:	35 96       	adiw	r30, 0x05	; 5
     c18:	61 91       	ld	r22, Z+
     c1a:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, fmt);
	vfprintf(&oled_stdout, fmt, args);
     c1c:	af 01       	movw	r20, r30
     c1e:	86 e0       	ldi	r24, 0x06	; 6
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 09 0a 	call	0x1412	; 0x1412 <vfprintf>
	va_end(args);
}
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <OLED_print_arrow>:
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     c2c:	e0 91 14 01 	lds	r30, 0x0114
     c30:	f0 91 15 01 	lds	r31, 0x0115
     c34:	88 e1       	ldi	r24, 0x18	; 24
     c36:	80 83       	st	Z, r24
     c38:	e0 91 14 01 	lds	r30, 0x0114
     c3c:	f0 91 15 01 	lds	r31, 0x0115
     c40:	80 83       	st	Z, r24
     c42:	e0 91 14 01 	lds	r30, 0x0114
     c46:	f0 91 15 01 	lds	r31, 0x0115
     c4a:	80 83       	st	Z, r24
     c4c:	e0 91 14 01 	lds	r30, 0x0114
     c50:	f0 91 15 01 	lds	r31, 0x0115
     c54:	80 83       	st	Z, r24
     c56:	e0 91 14 01 	lds	r30, 0x0114
     c5a:	f0 91 15 01 	lds	r31, 0x0115
     c5e:	80 83       	st	Z, r24
     c60:	e0 91 14 01 	lds	r30, 0x0114
     c64:	f0 91 15 01 	lds	r31, 0x0115
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	90 83       	st	Z, r25
     c6c:	e0 91 14 01 	lds	r30, 0x0114
     c70:	f0 91 15 01 	lds	r31, 0x0115
     c74:	9e e7       	ldi	r25, 0x7E	; 126
     c76:	90 83       	st	Z, r25
     c78:	e0 91 14 01 	lds	r30, 0x0114
     c7c:	f0 91 15 01 	lds	r31, 0x0115
     c80:	9c e3       	ldi	r25, 0x3C	; 60
     c82:	90 83       	st	Z, r25
     c84:	e0 91 14 01 	lds	r30, 0x0114
     c88:	f0 91 15 01 	lds	r31, 0x0115
     c8c:	80 83       	st	Z, r24
     c8e:	e0 91 14 01 	lds	r30, 0x0114
     c92:	f0 91 15 01 	lds	r31, 0x0115
     c96:	10 82       	st	Z, r1
     c98:	08 95       	ret

00000c9a <TIMER_init>:

int current_time = 0;

void TIMER_init(){
	//CTC mode
	TCCR1B |= (1 << WGM12);
     c9a:	8e b5       	in	r24, 0x2e	; 46
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	8e bd       	out	0x2e, r24	; 46
	
	// Prescaler = 256
	TCCR1B |= (1 << CS12);
     ca0:	8e b5       	in	r24, 0x2e	; 46
     ca2:	84 60       	ori	r24, 0x04	; 4
     ca4:	8e bd       	out	0x2e, r24	; 46
	
	// Set output compare value
	OCR1A = 0x4B00;		// 19200, corresponds to match every second
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	9b e4       	ldi	r25, 0x4B	; 75
     caa:	9b bd       	out	0x2b, r25	; 43
     cac:	8a bd       	out	0x2a, r24	; 42
     cae:	08 95       	ret

00000cb0 <__vector_13>:
	
	
}

ISR(TIMER1_COMPA_vect){
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
	current_time = current_time + 1;
     cbe:	80 91 ba 03 	lds	r24, 0x03BA
     cc2:	90 91 bb 03 	lds	r25, 0x03BB
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	90 93 bb 03 	sts	0x03BB, r25
     ccc:	80 93 ba 03 	sts	0x03BA, r24
}
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <TIMER_start>:

void TIMER_start()
{
	TIMSK |= (1 << OCIE1A);
     cde:	89 b7       	in	r24, 0x39	; 57
     ce0:	80 64       	ori	r24, 0x40	; 64
     ce2:	89 bf       	out	0x39, r24	; 57
	current_time = 0;
     ce4:	10 92 bb 03 	sts	0x03BB, r1
     ce8:	10 92 ba 03 	sts	0x03BA, r1
     cec:	08 95       	ret

00000cee <TIMER_stop>:
}

int TIMER_stop()
{
	TIMSK &= ~(1 << OCIE1A);
     cee:	89 b7       	in	r24, 0x39	; 57
     cf0:	8f 7b       	andi	r24, 0xBF	; 191
     cf2:	89 bf       	out	0x39, r24	; 57
	return current_time;
     cf4:	80 91 ba 03 	lds	r24, 0x03BA
     cf8:	90 91 bb 03 	lds	r25, 0x03BB
     cfc:	08 95       	ret

00000cfe <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 1 and 2 as input
	clear_bit(DDRB, PINB1);
     cfe:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
     d00:	ba 98       	cbi	0x17, 2	; 23
     d02:	08 95       	ret

00000d04 <TOUCH_button>:
	
}

int TOUCH_button( void ){

	if (test_bit(PINB, PB1) || test_bit(PINB, PB2)){
     d04:	b1 99       	sbic	0x16, 1	; 22
     d06:	06 c0       	rjmp	.+12     	; 0xd14 <TOUCH_button+0x10>
     d08:	86 b3       	in	r24, 0x16	; 22
		return 1;
     d0a:	82 fb       	bst	r24, 2
     d0c:	88 27       	eor	r24, r24
     d0e:	80 f9       	bld	r24, 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	08 95       	ret
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     d18:	08 95       	ret

00000d1a <TOUCH_read_adc>:

TOUCH_slider_pos_t TOUCH_read_adc( void ){
     d1a:	cf 93       	push	r28
	TOUCH_slider_pos_t pos;
	pos.left_slider = ADC_read(LEFT_SLIDER_CHANNEL);
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	0e 94 26 03 	call	0x64c	; 0x64c <ADC_read>
     d22:	c8 2f       	mov	r28, r24
     d24:	8c ec       	ldi	r24, 0xCC	; 204
     d26:	94 e0       	ldi	r25, 0x04	; 4
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <TOUCH_read_adc+0xe>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <TOUCH_read_adc+0x14>
     d2e:	00 00       	nop
	_delay_ms(1);
	pos.right_slider = ADC_read(RIGHT_SLIDER_CHANNEL);
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 26 03 	call	0x64c	; 0x64c <ADC_read>
     d36:	28 2f       	mov	r18, r24
	
	return pos;
     d38:	6c 2f       	mov	r22, r28
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	82 2f       	mov	r24, r18
     d3e:	90 e0       	ldi	r25, 0x00	; 0
}
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <TOUCH_get_slider_position>:

TOUCH_slider_pos_t TOUCH_get_slider_position(){
	TOUCH_slider_pos_t current_pos = TOUCH_read_adc();
     d44:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TOUCH_read_adc>
	return current_pos;
     d48:	08 95       	ret

00000d4a <main>:
//#include <stdio.h>
#include <avr/interrupt.h>



int main( void ){
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	2b 97       	sbiw	r28, 0x0b	; 11
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
	can_msg receive;
	int msg_type;
	int remaining_lives;
	int score = 0;
	
	cli();
     d5e:	f8 94       	cli
	// Initializations 
	UART_Init( MYUBRR );
     d60:	8f e1       	ldi	r24, 0x1F	; 31
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 09 03 	call	0x612	; 0x612 <UART_Init>
	ADC_init();
     d68:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_init>
	JOY_init();
     d6c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <JOY_init>
	TOUCH_init();
     d70:	0e 94 7f 06 	call	0xcfe	; 0xcfe <TOUCH_init>
	MENU_init();
     d74:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <MENU_init>
	CAN_init();
     d78:	0e 94 45 01 	call	0x28a	; 0x28a <CAN_init>
	TIMER_init();
     d7c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TIMER_init>
	
	printf("Init done\n");
     d80:	8e ed       	ldi	r24, 0xDE	; 222
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <puts>
	STATE_OPTION_set(menu);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
	sei();
     d8e:	78 94       	sei

int main( void ){
	can_msg receive;
	int msg_type;
	int remaining_lives;
	int score = 0;
     d90:	e1 2c       	mov	r14, r1
     d92:	f1 2c       	mov	r15, r1
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
				score = 0;
     d94:	a1 2c       	mov	r10, r1
     d96:	b1 2c       	mov	r11, r1
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
     d98:	0f 2e       	mov	r0, r31
     d9a:	f3 e0       	ldi	r31, 0x03	; 3
     d9c:	cf 2e       	mov	r12, r31
     d9e:	f0 2d       	mov	r31, r0
     da0:	d1 2c       	mov	r13, r1
	sei();
	
	
	while(1){		

		switch (STATE_OPTION_get()){
     da2:	0e 94 48 09 	call	0x1290	; 0x1290 <STATE_OPTION_get>
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	01 f1       	breq	.+64     	; 0xdea <main+0xa0>
     daa:	28 f4       	brcc	.+10     	; 0xdb6 <main+0x6c>
     dac:	88 23       	and	r24, r24
     dae:	41 f0       	breq	.+16     	; 0xdc0 <main+0x76>
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	59 f0       	breq	.+22     	; 0xdca <main+0x80>
     db4:	3f c0       	rjmp	.+126    	; 0xe34 <main+0xea>
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	f9 f0       	breq	.+62     	; 0xdf8 <main+0xae>
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	49 f1       	breq	.+82     	; 0xe10 <main+0xc6>
     dbe:	3a c0       	rjmp	.+116    	; 0xe34 <main+0xea>
			case menu:
				MENU_select_item();
     dc0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MENU_select_item>
				MENU_navigate();
     dc4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <MENU_navigate>
				break;
     dc8:	38 c0       	rjmp	.+112    	; 0xe3a <main+0xf0>
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
     dca:	0e 94 50 09 	call	0x12a0	; 0x12a0 <STATE_OPTION_get_speed>
     dce:	0e 94 1b 04 	call	0x836	; 0x836 <SEND2CAN_send_speed>
				MENU_print_game_screen();
     dd2:	0e 94 15 09 	call	0x122a	; 0x122a <MENU_print_game_screen>
				remaining_lives = 3;
				score = 0;
				TIMER_start();
     dd6:	0e 94 6f 06 	call	0xcde	; 0xcde <TIMER_start>
				STATE_OPTION_set(game);
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
				score = 0;
     de0:	ea 2c       	mov	r14, r10
     de2:	fb 2c       	mov	r15, r11
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
     de4:	0c 2d       	mov	r16, r12
     de6:	1d 2d       	mov	r17, r13
				score = 0;
				TIMER_start();
				STATE_OPTION_set(game);
				break;
     de8:	28 c0       	rjmp	.+80     	; 0xe3a <main+0xf0>
			case game:
				SEND2CAN_send_joy_pos_x();
     dea:	0e 94 38 03 	call	0x670	; 0x670 <SEND2CAN_send_joy_pos_x>
				SEND2CAN_send_slider_pos();
     dee:	0e 94 88 03 	call	0x710	; 0x710 <SEND2CAN_send_slider_pos>
				SEND2CAN_touch_button_pressed();
     df2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <SEND2CAN_touch_button_pressed>
				break;
     df6:	21 c0       	rjmp	.+66     	; 0xe3a <main+0xf0>
			case game_pause:
				if(JOY_button()){
     df8:	0e 94 3b 04 	call	0x876	; 0x876 <JOY_button>
     dfc:	89 2b       	or	r24, r25
     dfe:	e9 f0       	breq	.+58     	; 0xe3a <main+0xf0>
					STATE_OPTION_set(game);
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
					MENU_print_game_screen();
     e06:	0e 94 15 09 	call	0x122a	; 0x122a <MENU_print_game_screen>
					TIMER_start();
     e0a:	0e 94 6f 06 	call	0xcde	; 0xcde <TIMER_start>
     e0e:	15 c0       	rjmp	.+42     	; 0xe3a <main+0xf0>
				}
				break;
			case game_over:
				MENU_print_game_over_screen(score);
     e10:	c7 01       	movw	r24, r14
     e12:	0e 94 24 09 	call	0x1248	; 0x1248 <MENU_print_game_over_screen>
     e16:	2f ef       	ldi	r18, 0xFF	; 255
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	9a e4       	ldi	r25, 0x4A	; 74
     e1c:	21 50       	subi	r18, 0x01	; 1
     e1e:	80 40       	sbci	r24, 0x00	; 0
     e20:	90 40       	sbci	r25, 0x00	; 0
     e22:	e1 f7       	brne	.-8      	; 0xe1c <main+0xd2>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <main+0xdc>
     e26:	00 00       	nop
				_delay_ms(5000);
				//save to highscore? 
					// username and score, place in right place
				// print a game over screen?
				
				STATE_OPTION_set(menu);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
				MENU_init();
     e2e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <MENU_init>
				break;
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <main+0xf0>
			default:
				STATE_OPTION_set(menu);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
				break;
		}
		CAN_handle_interrupt(&receive);
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	0e 94 16 02 	call	0x42c	; 0x42c <CAN_handle_interrupt>
		msg_type = receive.data[0];
		switch(msg_type){
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	85 30       	cpi	r24, 0x05	; 5
     e46:	f9 f4       	brne	.+62     	; 0xe86 <main+0x13c>
			case CAN_LIVES:
				if(remaining_lives > 1 && STATE_OPTION_get() == game){
     e48:	02 30       	cpi	r16, 0x02	; 2
     e4a:	11 05       	cpc	r17, r1
     e4c:	8c f0       	brlt	.+34     	; 0xe70 <main+0x126>
     e4e:	0e 94 48 09 	call	0x1290	; 0x1290 <STATE_OPTION_get>
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	69 f4       	brne	.+26     	; 0xe70 <main+0x126>
					score = score + TIMER_stop();
     e56:	0e 94 77 06 	call	0xcee	; 0xcee <TIMER_stop>
     e5a:	e8 0e       	add	r14, r24
     e5c:	f9 1e       	adc	r15, r25
					remaining_lives = remaining_lives - 1;
     e5e:	01 50       	subi	r16, 0x01	; 1
     e60:	11 09       	sbc	r17, r1
					STATE_OPTION_set(game_pause);
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
					MENU_print_pause_screen(remaining_lives);
     e68:	c8 01       	movw	r24, r16
     e6a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <MENU_print_pause_screen>
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <main+0x13c>
				}else if (STATE_OPTION_get() == game){
     e70:	0e 94 48 09 	call	0x1290	; 0x1290 <STATE_OPTION_get>
     e74:	82 30       	cpi	r24, 0x02	; 2
     e76:	39 f4       	brne	.+14     	; 0xe86 <main+0x13c>
					score = score + TIMER_stop();
     e78:	0e 94 77 06 	call	0xcee	; 0xcee <TIMER_stop>
     e7c:	e8 0e       	add	r14, r24
     e7e:	f9 1e       	adc	r15, r25
					STATE_OPTION_set(game_over);
     e80:	84 e0       	ldi	r24, 0x04	; 4
     e82:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
     e86:	8c ec       	ldi	r24, 0xCC	; 204
     e88:	94 e0       	ldi	r25, 0x04	; 4
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <main+0x140>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <main+0x146>
     e90:	00 00       	nop
     e92:	87 cf       	rjmp	.-242    	; 0xda2 <main+0x58>

00000e94 <MENU_highlight_item>:
	}
}


void MENU_highlight_item( void )
{
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
	for (int i = 1; i < current_menu->child_num + 1; i++){
     e9c:	e0 91 c2 03 	lds	r30, 0x03C2
     ea0:	f0 91 c3 03 	lds	r31, 0x03C3
     ea4:	82 89       	ldd	r24, Z+18	; 0x12
     ea6:	93 89       	ldd	r25, Z+19	; 0x13
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	02 97       	sbiw	r24, 0x02	; 2
     eac:	cc f0       	brlt	.+50     	; 0xee0 <MENU_highlight_item+0x4c>
     eae:	c1 e0       	ldi	r28, 0x01	; 1
     eb0:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i, 0);
		OLED_printf("  ");
     eb2:	08 ee       	ldi	r16, 0xE8	; 232
     eb4:	12 e0       	ldi	r17, 0x02	; 2


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
		OLED_pos(i, 0);
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	8c 2f       	mov	r24, r28
     eba:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
		OLED_printf("  ");
     ebe:	1f 93       	push	r17
     ec0:	0f 93       	push	r16
     ec2:	0e 94 06 06 	call	0xc0c	; 0xc0c <OLED_printf>
}


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
     ec6:	21 96       	adiw	r28, 0x01	; 1
     ec8:	e0 91 c2 03 	lds	r30, 0x03C2
     ecc:	f0 91 c3 03 	lds	r31, 0x03C3
     ed0:	82 89       	ldd	r24, Z+18	; 0x12
     ed2:	93 89       	ldd	r25, Z+19	; 0x13
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	c8 17       	cp	r28, r24
     edc:	d9 07       	cpc	r29, r25
     ede:	5c f3       	brlt	.-42     	; 0xeb6 <MENU_highlight_item+0x22>
		OLED_pos(i, 0);
		OLED_printf("  ");
	}
	
	OLED_pos(line, 0);
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	80 91 c0 03 	lds	r24, 0x03C0
     ee6:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
	OLED_print_arrow();
     eea:	0e 94 16 06 	call	0xc2c	; 0xc2c <OLED_print_arrow>
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <MENU_print_menu>:
	MENU_select_item();
	MENU_navigate();
}


void MENU_print_menu(){
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
	OLED_reset();
     f00:	0e 94 40 05 	call	0xa80	; 0xa80 <OLED_reset>
	OLED_printf("%s\n",current_menu->name);
     f04:	e0 91 c2 03 	lds	r30, 0x03C2
     f08:	f0 91 c3 03 	lds	r31, 0x03C3
     f0c:	81 81       	ldd	r24, Z+1	; 0x01
     f0e:	8f 93       	push	r24
     f10:	80 81       	ld	r24, Z
     f12:	8f 93       	push	r24
     f14:	8b ee       	ldi	r24, 0xEB	; 235
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	9f 93       	push	r25
     f1a:	8f 93       	push	r24
     f1c:	0e 94 06 06 	call	0xc0c	; 0xc0c <OLED_printf>
	if (current_child!= NULL){
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	80 91 c4 03 	lds	r24, 0x03C4
     f2c:	90 91 c5 03 	lds	r25, 0x03C5
     f30:	89 2b       	or	r24, r25
     f32:	11 f0       	breq	.+4      	; 0xf38 <MENU_print_menu+0x40>
		MENU_highlight_item();
     f34:	0e 94 4a 07 	call	0xe94	; 0xe94 <MENU_highlight_item>
	}
	for (int i =0; i < current_menu->child_num; i++){
     f38:	e0 91 c2 03 	lds	r30, 0x03C2
     f3c:	f0 91 c3 03 	lds	r31, 0x03C3
     f40:	82 89       	ldd	r24, Z+18	; 0x12
     f42:	93 89       	ldd	r25, Z+19	; 0x13
     f44:	18 16       	cp	r1, r24
     f46:	19 06       	cpc	r1, r25
     f48:	54 f5       	brge	.+84     	; 0xf9e <MENU_print_menu+0xa6>
     f4a:	c0 e0       	ldi	r28, 0x00	; 0
     f4c:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_goto_column(10);
		OLED_printf("%s\n", current_menu->child[i]->name);
     f4e:	0b ee       	ldi	r16, 0xEB	; 235
     f50:	12 e0       	ldi	r17, 0x02	; 2
	OLED_printf("%s\n",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i =0; i < current_menu->child_num; i++){
		OLED_goto_column(10);
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <OLED_goto_column>
		OLED_printf("%s\n", current_menu->child[i]->name);
     f58:	80 91 c2 03 	lds	r24, 0x03C2
     f5c:	90 91 c3 03 	lds	r25, 0x03C3
     f60:	fe 01       	movw	r30, r28
     f62:	32 96       	adiw	r30, 0x02	; 2
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	e8 0f       	add	r30, r24
     f6a:	f9 1f       	adc	r31, r25
     f6c:	01 90       	ld	r0, Z+
     f6e:	f0 81       	ld	r31, Z
     f70:	e0 2d       	mov	r30, r0
     f72:	81 81       	ldd	r24, Z+1	; 0x01
     f74:	8f 93       	push	r24
     f76:	80 81       	ld	r24, Z
     f78:	8f 93       	push	r24
     f7a:	1f 93       	push	r17
     f7c:	0f 93       	push	r16
     f7e:	0e 94 06 06 	call	0xc0c	; 0xc0c <OLED_printf>
	OLED_reset();
	OLED_printf("%s\n",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i =0; i < current_menu->child_num; i++){
     f82:	21 96       	adiw	r28, 0x01	; 1
     f84:	e0 91 c2 03 	lds	r30, 0x03C2
     f88:	f0 91 c3 03 	lds	r31, 0x03C3
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	82 89       	ldd	r24, Z+18	; 0x12
     f96:	93 89       	ldd	r25, Z+19	; 0x13
     f98:	c8 17       	cp	r28, r24
     f9a:	d9 07       	cpc	r29, r25
     f9c:	d4 f2       	brlt	.-76     	; 0xf52 <MENU_print_menu+0x5a>
		OLED_goto_column(10);
		OLED_printf("%s\n", current_menu->child[i]->name);
	}
}
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	08 95       	ret

00000fa8 <MENU_select_item>:



void MENU_select_item(){
	if ((JOY_button() || JOY_get_direction() == RIGHT) && current_child!= NULL){
     fa8:	0e 94 3b 04 	call	0x876	; 0x876 <JOY_button>
     fac:	89 2b       	or	r24, r25
     fae:	29 f4       	brne	.+10     	; 0xfba <MENU_select_item+0x12>
     fb0:	0e 94 ab 04 	call	0x956	; 0x956 <JOY_get_direction>
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	09 f0       	breq	.+2      	; 0xfba <MENU_select_item+0x12>
     fb8:	7f c0       	rjmp	.+254    	; 0x10b8 <MENU_select_item+0x110>
     fba:	e0 91 c4 03 	lds	r30, 0x03C4
     fbe:	f0 91 c5 03 	lds	r31, 0x03C5
     fc2:	30 97       	sbiw	r30, 0x00	; 0
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <MENU_select_item+0x20>
     fc6:	78 c0       	rjmp	.+240    	; 0x10b8 <MENU_select_item+0x110>
		if (current_child->child[0] != NULL){
     fc8:	84 81       	ldd	r24, Z+4	; 0x04
     fca:	95 81       	ldd	r25, Z+5	; 0x05
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	89 f0       	breq	.+34     	; 0xff2 <MENU_select_item+0x4a>
			current_menu = current_child;
     fd0:	f0 93 c3 03 	sts	0x03C3, r31
     fd4:	e0 93 c2 03 	sts	0x03C2, r30
			current_child = current_child->child[0];
     fd8:	90 93 c5 03 	sts	0x03C5, r25
     fdc:	80 93 c4 03 	sts	0x03C4, r24
			line = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	90 93 c1 03 	sts	0x03C1, r25
     fe8:	80 93 c0 03 	sts	0x03C0, r24
			MENU_print_menu();
     fec:	0e 94 7c 07 	call	0xef8	; 0xef8 <MENU_print_menu>
     ff0:	5b c0       	rjmp	.+182    	; 0x10a8 <MENU_select_item+0x100>
		}else{
			if(current_child == &clear_highscores){
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	ec 37       	cpi	r30, 0x7C	; 124
     ff6:	f8 07       	cpc	r31, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <MENU_select_item+0x54>
     ffa:	56 c0       	rjmp	.+172    	; 0x10a8 <MENU_select_item+0x100>
				//MENU_clear_highscores();
			}
			else if(current_child == &contrast_low)
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	e0 34       	cpi	r30, 0x40	; 64
    1000:	f8 07       	cpc	r31, r24
    1002:	21 f4       	brne	.+8      	; 0x100c <MENU_select_item+0x64>
				OLED_set_contrast( LOW_CONTRAST );
    1004:	80 e1       	ldi	r24, 0x10	; 16
    1006:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <OLED_set_contrast>
    100a:	4e c0       	rjmp	.+156    	; 0x10a8 <MENU_select_item+0x100>
			else if(current_child == &contrast_medium)
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	ec 32       	cpi	r30, 0x2C	; 44
    1010:	f8 07       	cpc	r31, r24
    1012:	21 f4       	brne	.+8      	; 0x101c <MENU_select_item+0x74>
				OLED_set_contrast( MEDIUM_CONTRAST );
    1014:	80 e5       	ldi	r24, 0x50	; 80
    1016:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <OLED_set_contrast>
    101a:	46 c0       	rjmp	.+140    	; 0x10a8 <MENU_select_item+0x100>
			else if(current_child == &contrast_high)
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	e8 31       	cpi	r30, 0x18	; 24
    1020:	f8 07       	cpc	r31, r24
    1022:	21 f4       	brne	.+8      	; 0x102c <MENU_select_item+0x84>
				OLED_set_contrast( HIGH_CONTRAST );
    1024:	80 ef       	ldi	r24, 0xF0	; 240
    1026:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <OLED_set_contrast>
    102a:	3e c0       	rjmp	.+124    	; 0x10a8 <MENU_select_item+0x100>
			else if(current_child == &invert_screen){
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	e4 35       	cpi	r30, 0x54	; 84
    1030:	f8 07       	cpc	r31, r24
    1032:	19 f4       	brne	.+6      	; 0x103a <MENU_select_item+0x92>
				OLED_invert_screen();
    1034:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <OLED_invert_screen>
    1038:	37 c0       	rjmp	.+110    	; 0x10a8 <MENU_select_item+0x100>
			}else if(current_child == &slow_speed){
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	e8 3b       	cpi	r30, 0xB8	; 184
    103e:	f8 07       	cpc	r31, r24
    1040:	41 f4       	brne	.+16     	; 0x1052 <MENU_select_item+0xaa>
				STATE_OPTION_set_speed(1);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 4b 09 	call	0x1296	; 0x1296 <STATE_OPTION_set_speed>
				STATE_OPTION_set(game_init);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
    1050:	2b c0       	rjmp	.+86     	; 0x10a8 <MENU_select_item+0x100>
			}else if(current_child == &medium_speed){
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	e4 3a       	cpi	r30, 0xA4	; 164
    1056:	f8 07       	cpc	r31, r24
    1058:	41 f4       	brne	.+16     	; 0x106a <MENU_select_item+0xc2>
				STATE_OPTION_set_speed(2);
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 4b 09 	call	0x1296	; 0x1296 <STATE_OPTION_set_speed>
				STATE_OPTION_set(game_init);
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
    1068:	1f c0       	rjmp	.+62     	; 0x10a8 <MENU_select_item+0x100>
			}else if(current_child == &fast_speed){
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	e0 39       	cpi	r30, 0x90	; 144
    106e:	f8 07       	cpc	r31, r24
    1070:	41 f4       	brne	.+16     	; 0x1082 <MENU_select_item+0xda>
				STATE_OPTION_set_speed(3);
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 4b 09 	call	0x1296	; 0x1296 <STATE_OPTION_set_speed>
				STATE_OPTION_set(game_init);
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	0e 94 45 09 	call	0x128a	; 0x128a <STATE_OPTION_set>
    1080:	13 c0       	rjmp	.+38     	; 0x10a8 <MENU_select_item+0x100>
			}
			else if(current_child == &highscores){
    1082:	e0 5e       	subi	r30, 0xE0	; 224
    1084:	f1 40       	sbci	r31, 0x01	; 1
    1086:	81 f4       	brne	.+32     	; 0x10a8 <MENU_select_item+0x100>
				current_menu = current_child;
    1088:	80 ee       	ldi	r24, 0xE0	; 224
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	90 93 c3 03 	sts	0x03C3, r25
    1090:	80 93 c2 03 	sts	0x03C2, r24
				current_child = current_child->child[0];
    1094:	10 92 c5 03 	sts	0x03C5, r1
    1098:	10 92 c4 03 	sts	0x03C4, r1
				line = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	90 93 c1 03 	sts	0x03C1, r25
    10a4:	80 93 c0 03 	sts	0x03C0, r24
				//HIGHSCORE_print();
			}
		}
		while(JOY_button() || JOY_get_direction() == RIGHT){}
    10a8:	0e 94 3b 04 	call	0x876	; 0x876 <JOY_button>
    10ac:	89 2b       	or	r24, r25
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <MENU_select_item+0x100>
    10b0:	0e 94 ab 04 	call	0x956	; 0x956 <JOY_get_direction>
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	c1 f3       	breq	.-16     	; 0x10a8 <MENU_select_item+0x100>
    10b8:	08 95       	ret

000010ba <MENU_navigate>:



void MENU_navigate(){

	switch (JOY_get_direction()){
    10ba:	0e 94 ab 04 	call	0x956	; 0x956 <JOY_get_direction>
    10be:	83 30       	cpi	r24, 0x03	; 3
    10c0:	39 f1       	breq	.+78     	; 0x1110 <MENU_navigate+0x56>
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <MENU_navigate+0xe>
    10c6:	47 c0       	rjmp	.+142    	; 0x1156 <MENU_navigate+0x9c>
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	09 f0       	breq	.+2      	; 0x10ce <MENU_navigate+0x14>
    10cc:	69 c0       	rjmp	.+210    	; 0x11a0 <MENU_navigate+0xe6>
		case LEFT:
			while(JOY_get_direction() == LEFT){}
    10ce:	0e 94 ab 04 	call	0x956	; 0x956 <JOY_get_direction>
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	e1 f3       	breq	.-8      	; 0x10ce <MENU_navigate+0x14>
			if (current_menu->parent != NULL){
    10d6:	e0 91 c2 03 	lds	r30, 0x03C2
    10da:	f0 91 c3 03 	lds	r31, 0x03C3
    10de:	02 80       	ldd	r0, Z+2	; 0x02
    10e0:	f3 81       	ldd	r31, Z+3	; 0x03
    10e2:	e0 2d       	mov	r30, r0
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	09 f4       	brne	.+2      	; 0x10ea <MENU_navigate+0x30>
    10e8:	5b c0       	rjmp	.+182    	; 0x11a0 <MENU_navigate+0xe6>
				line = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	90 93 c1 03 	sts	0x03C1, r25
    10f2:	80 93 c0 03 	sts	0x03C0, r24
				current_menu = current_menu->parent;
    10f6:	f0 93 c3 03 	sts	0x03C3, r31
    10fa:	e0 93 c2 03 	sts	0x03C2, r30
				current_child = current_menu->child[0];
    10fe:	84 81       	ldd	r24, Z+4	; 0x04
    1100:	95 81       	ldd	r25, Z+5	; 0x05
    1102:	90 93 c5 03 	sts	0x03C5, r25
    1106:	80 93 c4 03 	sts	0x03C4, r24
				MENU_print_menu();
    110a:	0e 94 7c 07 	call	0xef8	; 0xef8 <MENU_print_menu>
    110e:	08 95       	ret
			}
			break;
		case UP:
		while(JOY_get_direction() == UP){}
    1110:	0e 94 ab 04 	call	0x956	; 0x956 <JOY_get_direction>
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	e1 f3       	breq	.-8      	; 0x1110 <MENU_navigate+0x56>
			if (line > 1){
    1118:	80 91 c0 03 	lds	r24, 0x03C0
    111c:	90 91 c1 03 	lds	r25, 0x03C1
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	91 05       	cpc	r25, r1
    1124:	ec f1       	brlt	.+122    	; 0x11a0 <MENU_navigate+0xe6>
				line = line - 1;
    1126:	9c 01       	movw	r18, r24
    1128:	21 50       	subi	r18, 0x01	; 1
    112a:	31 09       	sbc	r19, r1
    112c:	30 93 c1 03 	sts	0x03C1, r19
    1130:	20 93 c0 03 	sts	0x03C0, r18
				current_child = current_menu->child[line - 1];
    1134:	e0 91 c2 03 	lds	r30, 0x03C2
    1138:	f0 91 c3 03 	lds	r31, 0x03C3
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	e8 0f       	add	r30, r24
    1142:	f9 1f       	adc	r31, r25
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	90 93 c5 03 	sts	0x03C5, r25
    114c:	80 93 c4 03 	sts	0x03C4, r24
				MENU_highlight_item();
    1150:	0e 94 4a 07 	call	0xe94	; 0xe94 <MENU_highlight_item>
    1154:	08 95       	ret
				}
			break;
		case DOWN:
		while(JOY_get_direction() == DOWN){}
    1156:	0e 94 ab 04 	call	0x956	; 0x956 <JOY_get_direction>
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	e1 f3       	breq	.-8      	; 0x1156 <MENU_navigate+0x9c>
			if (line < current_menu->child_num){
    115e:	e0 91 c2 03 	lds	r30, 0x03C2
    1162:	f0 91 c3 03 	lds	r31, 0x03C3
    1166:	80 91 c0 03 	lds	r24, 0x03C0
    116a:	90 91 c1 03 	lds	r25, 0x03C1
    116e:	22 89       	ldd	r18, Z+18	; 0x12
    1170:	33 89       	ldd	r19, Z+19	; 0x13
    1172:	82 17       	cp	r24, r18
    1174:	93 07       	cpc	r25, r19
    1176:	a4 f4       	brge	.+40     	; 0x11a0 <MENU_navigate+0xe6>
				line = line + 1;
    1178:	9c 01       	movw	r18, r24
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	30 93 c1 03 	sts	0x03C1, r19
    1182:	20 93 c0 03 	sts	0x03C0, r18
				current_child = current_menu->child[line - 1];
    1186:	02 96       	adiw	r24, 0x02	; 2
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	e8 0f       	add	r30, r24
    118e:	f9 1f       	adc	r31, r25
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	90 93 c5 03 	sts	0x03C5, r25
    1198:	80 93 c4 03 	sts	0x03C4, r24
				MENU_highlight_item();
    119c:	0e 94 4a 07 	call	0xe94	; 0xe94 <MENU_highlight_item>
    11a0:	08 95       	ret

000011a2 <MENU_init>:
int line;



void MENU_init( void ){
	OLED_init();
    11a2:	0e 94 4c 05 	call	0xa98	; 0xa98 <OLED_init>
	current_menu = &main_menu;
    11a6:	88 e0       	ldi	r24, 0x08	; 8
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	90 93 c3 03 	sts	0x03C3, r25
    11ae:	80 93 c2 03 	sts	0x03C2, r24
	current_child = main_menu.child[0];
    11b2:	80 91 0c 02 	lds	r24, 0x020C
    11b6:	90 91 0d 02 	lds	r25, 0x020D
    11ba:	90 93 c5 03 	sts	0x03C5, r25
    11be:	80 93 c4 03 	sts	0x03C4, r24
	line = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	90 93 c1 03 	sts	0x03C1, r25
    11ca:	80 93 c0 03 	sts	0x03C0, r24
	MENU_print_menu();
    11ce:	0e 94 7c 07 	call	0xef8	; 0xef8 <MENU_print_menu>
	MENU_highlight_item();
    11d2:	0e 94 4a 07 	call	0xe94	; 0xe94 <MENU_highlight_item>
	MENU_select_item();
    11d6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MENU_select_item>
	MENU_navigate();
    11da:	0e 94 5d 08 	call	0x10ba	; 0x10ba <MENU_navigate>
    11de:	08 95       	ret

000011e0 <MENU_print_pause_screen>:
	OLED_pos(line, 0);
	OLED_print_arrow();
}

void MENU_print_pause_screen(int remaining_lives)
{
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	c8 2f       	mov	r28, r24
    11e6:	d9 2f       	mov	r29, r25
	OLED_reset();
    11e8:	0e 94 40 05 	call	0xa80	; 0xa80 <OLED_reset>
	OLED_pos(3, 20);
    11ec:	64 e1       	ldi	r22, 0x14	; 20
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
	OLED_printf("You have %d lives left\n", remaining_lives);
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	8f ee       	ldi	r24, 0xEF	; 239
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	9f 93       	push	r25
    11fe:	8f 93       	push	r24
    1200:	0e 94 06 06 	call	0xc0c	; 0xc0c <OLED_printf>

	OLED_pos(5, 20);
    1204:	64 e1       	ldi	r22, 0x14	; 20
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
	OLED_printf("Press joystick");
    120c:	87 e0       	ldi	r24, 0x07	; 7
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	0e 94 06 06 	call	0xc0c	; 0xc0c <OLED_printf>
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0

}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <MENU_print_game_screen>:

void MENU_print_game_screen(void){
	OLED_reset();
    122a:	0e 94 40 05 	call	0xa80	; 0xa80 <OLED_reset>
	OLED_pos(3, 30);
    122e:	6e e1       	ldi	r22, 0x1E	; 30
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
	OLED_printf("Play game :D");
    1236:	86 e1       	ldi	r24, 0x16	; 22
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	9f 93       	push	r25
    123c:	8f 93       	push	r24
    123e:	0e 94 06 06 	call	0xc0c	; 0xc0c <OLED_printf>
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	08 95       	ret

00001248 <MENU_print_game_over_screen>:
}

void MENU_print_game_over_screen(int score){
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	c8 2f       	mov	r28, r24
    124e:	d9 2f       	mov	r29, r25
	OLED_reset();
    1250:	0e 94 40 05 	call	0xa80	; 0xa80 <OLED_reset>
	OLED_pos(3, 30);
    1254:	6e e1       	ldi	r22, 0x1E	; 30
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_pos>
	OLED_printf("Game over...\n");
    125c:	23 e2       	ldi	r18, 0x23	; 35
    125e:	33 e0       	ldi	r19, 0x03	; 3
    1260:	3f 93       	push	r19
    1262:	2f 93       	push	r18
    1264:	0e 94 06 06 	call	0xc0c	; 0xc0c <OLED_printf>
	OLED_printf("You lasted %d seconds", score);
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	81 e3       	ldi	r24, 0x31	; 49
    126e:	93 e0       	ldi	r25, 0x03	; 3
    1270:	9f 93       	push	r25
    1272:	8f 93       	push	r24
    1274:	0e 94 06 06 	call	0xc0c	; 0xc0c <OLED_printf>
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <STATE_OPTION_set>:

state_t state;
int speed;

void STATE_OPTION_set(state_t new_state){
	state = new_state;
    128a:	80 93 c6 03 	sts	0x03C6, r24
    128e:	08 95       	ret

00001290 <STATE_OPTION_get>:
}

state_t STATE_OPTION_get(void){
	return state;
}
    1290:	80 91 c6 03 	lds	r24, 0x03C6
    1294:	08 95       	ret

00001296 <STATE_OPTION_set_speed>:

void STATE_OPTION_set_speed(int new_speed){
	speed = new_speed;
    1296:	90 93 c8 03 	sts	0x03C8, r25
    129a:	80 93 c7 03 	sts	0x03C7, r24
    129e:	08 95       	ret

000012a0 <STATE_OPTION_get_speed>:
}

int STATE_OPTION_get_speed(void){
	return speed;
    12a0:	80 91 c7 03 	lds	r24, 0x03C7
    12a4:	90 91 c8 03 	lds	r25, 0x03C8
    12a8:	08 95       	ret

000012aa <__divmodhi4>:
    12aa:	97 fb       	bst	r25, 7
    12ac:	07 2e       	mov	r0, r23
    12ae:	16 f4       	brtc	.+4      	; 0x12b4 <__divmodhi4+0xa>
    12b0:	00 94       	com	r0
    12b2:	07 d0       	rcall	.+14     	; 0x12c2 <__divmodhi4_neg1>
    12b4:	77 fd       	sbrc	r23, 7
    12b6:	09 d0       	rcall	.+18     	; 0x12ca <__divmodhi4_neg2>
    12b8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__udivmodhi4>
    12bc:	07 fc       	sbrc	r0, 7
    12be:	05 d0       	rcall	.+10     	; 0x12ca <__divmodhi4_neg2>
    12c0:	3e f4       	brtc	.+14     	; 0x12d0 <__divmodhi4_exit>

000012c2 <__divmodhi4_neg1>:
    12c2:	90 95       	com	r25
    12c4:	81 95       	neg	r24
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	08 95       	ret

000012ca <__divmodhi4_neg2>:
    12ca:	70 95       	com	r23
    12cc:	61 95       	neg	r22
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255

000012d0 <__divmodhi4_exit>:
    12d0:	08 95       	ret

000012d2 <__udivmodhi4>:
    12d2:	aa 1b       	sub	r26, r26
    12d4:	bb 1b       	sub	r27, r27
    12d6:	51 e1       	ldi	r21, 0x11	; 17
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <__udivmodhi4_ep>

000012da <__udivmodhi4_loop>:
    12da:	aa 1f       	adc	r26, r26
    12dc:	bb 1f       	adc	r27, r27
    12de:	a6 17       	cp	r26, r22
    12e0:	b7 07       	cpc	r27, r23
    12e2:	10 f0       	brcs	.+4      	; 0x12e8 <__udivmodhi4_ep>
    12e4:	a6 1b       	sub	r26, r22
    12e6:	b7 0b       	sbc	r27, r23

000012e8 <__udivmodhi4_ep>:
    12e8:	88 1f       	adc	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	5a 95       	dec	r21
    12ee:	a9 f7       	brne	.-22     	; 0x12da <__udivmodhi4_loop>
    12f0:	80 95       	com	r24
    12f2:	90 95       	com	r25
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	08 95       	ret

000012fa <fdevopen>:
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	ec 01       	movw	r28, r24
    1304:	8b 01       	movw	r16, r22
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	31 f4       	brne	.+12     	; 0x1316 <fdevopen+0x1c>
    130a:	61 15       	cp	r22, r1
    130c:	71 05       	cpc	r23, r1
    130e:	19 f4       	brne	.+6      	; 0x1316 <fdevopen+0x1c>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	38 c0       	rjmp	.+112    	; 0x1386 <fdevopen+0x8c>
    1316:	6e e0       	ldi	r22, 0x0E	; 14
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <calloc>
    1322:	fc 01       	movw	r30, r24
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	a1 f3       	breq	.-24     	; 0x1310 <fdevopen+0x16>
    1328:	80 e8       	ldi	r24, 0x80	; 128
    132a:	83 83       	std	Z+3, r24	; 0x03
    132c:	01 15       	cp	r16, r1
    132e:	11 05       	cpc	r17, r1
    1330:	71 f0       	breq	.+28     	; 0x134e <fdevopen+0x54>
    1332:	13 87       	std	Z+11, r17	; 0x0b
    1334:	02 87       	std	Z+10, r16	; 0x0a
    1336:	81 e8       	ldi	r24, 0x81	; 129
    1338:	83 83       	std	Z+3, r24	; 0x03
    133a:	80 91 c9 03 	lds	r24, 0x03C9
    133e:	90 91 ca 03 	lds	r25, 0x03CA
    1342:	89 2b       	or	r24, r25
    1344:	21 f4       	brne	.+8      	; 0x134e <fdevopen+0x54>
    1346:	f0 93 ca 03 	sts	0x03CA, r31
    134a:	e0 93 c9 03 	sts	0x03C9, r30
    134e:	20 97       	sbiw	r28, 0x00	; 0
    1350:	c9 f0       	breq	.+50     	; 0x1384 <fdevopen+0x8a>
    1352:	d1 87       	std	Z+9, r29	; 0x09
    1354:	c0 87       	std	Z+8, r28	; 0x08
    1356:	83 81       	ldd	r24, Z+3	; 0x03
    1358:	82 60       	ori	r24, 0x02	; 2
    135a:	83 83       	std	Z+3, r24	; 0x03
    135c:	80 91 cb 03 	lds	r24, 0x03CB
    1360:	90 91 cc 03 	lds	r25, 0x03CC
    1364:	89 2b       	or	r24, r25
    1366:	71 f4       	brne	.+28     	; 0x1384 <fdevopen+0x8a>
    1368:	f0 93 cc 03 	sts	0x03CC, r31
    136c:	e0 93 cb 03 	sts	0x03CB, r30
    1370:	80 91 cd 03 	lds	r24, 0x03CD
    1374:	90 91 ce 03 	lds	r25, 0x03CE
    1378:	89 2b       	or	r24, r25
    137a:	21 f4       	brne	.+8      	; 0x1384 <fdevopen+0x8a>
    137c:	f0 93 ce 03 	sts	0x03CE, r31
    1380:	e0 93 cd 03 	sts	0x03CD, r30
    1384:	cf 01       	movw	r24, r30
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <printf>:
    1390:	a0 e0       	ldi	r26, 0x00	; 0
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ee ec       	ldi	r30, 0xCE	; 206
    1396:	f9 e0       	ldi	r31, 0x09	; 9
    1398:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__prologue_saves__+0x20>
    139c:	fe 01       	movw	r30, r28
    139e:	35 96       	adiw	r30, 0x05	; 5
    13a0:	61 91       	ld	r22, Z+
    13a2:	71 91       	ld	r23, Z+
    13a4:	af 01       	movw	r20, r30
    13a6:	80 91 cb 03 	lds	r24, 0x03CB
    13aa:	90 91 cc 03 	lds	r25, 0x03CC
    13ae:	0e 94 09 0a 	call	0x1412	; 0x1412 <vfprintf>
    13b2:	e2 e0       	ldi	r30, 0x02	; 2
    13b4:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__epilogue_restores__+0x20>

000013b8 <puts>:
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	e0 91 cb 03 	lds	r30, 0x03CB
    13c4:	f0 91 cc 03 	lds	r31, 0x03CC
    13c8:	23 81       	ldd	r18, Z+3	; 0x03
    13ca:	21 ff       	sbrs	r18, 1
    13cc:	1b c0       	rjmp	.+54     	; 0x1404 <puts+0x4c>
    13ce:	ec 01       	movw	r28, r24
    13d0:	00 e0       	ldi	r16, 0x00	; 0
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    13d4:	89 91       	ld	r24, Y+
    13d6:	60 91 cb 03 	lds	r22, 0x03CB
    13da:	70 91 cc 03 	lds	r23, 0x03CC
    13de:	db 01       	movw	r26, r22
    13e0:	18 96       	adiw	r26, 0x08	; 8
    13e2:	ed 91       	ld	r30, X+
    13e4:	fc 91       	ld	r31, X
    13e6:	19 97       	sbiw	r26, 0x09	; 9
    13e8:	88 23       	and	r24, r24
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <puts+0x40>
    13ec:	09 95       	icall
    13ee:	89 2b       	or	r24, r25
    13f0:	89 f3       	breq	.-30     	; 0x13d4 <puts+0x1c>
    13f2:	0f ef       	ldi	r16, 0xFF	; 255
    13f4:	1f ef       	ldi	r17, 0xFF	; 255
    13f6:	ee cf       	rjmp	.-36     	; 0x13d4 <puts+0x1c>
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	09 95       	icall
    13fc:	89 2b       	or	r24, r25
    13fe:	11 f4       	brne	.+4      	; 0x1404 <puts+0x4c>
    1400:	c8 01       	movw	r24, r16
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <puts+0x50>
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	9f ef       	ldi	r25, 0xFF	; 255
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <vfprintf>:
    1412:	ac e0       	ldi	r26, 0x0C	; 12
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ef e0       	ldi	r30, 0x0F	; 15
    1418:	fa e0       	ldi	r31, 0x0A	; 10
    141a:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__prologue_saves__>
    141e:	7c 01       	movw	r14, r24
    1420:	6b 01       	movw	r12, r22
    1422:	8a 01       	movw	r16, r20
    1424:	fc 01       	movw	r30, r24
    1426:	17 82       	std	Z+7, r1	; 0x07
    1428:	16 82       	std	Z+6, r1	; 0x06
    142a:	83 81       	ldd	r24, Z+3	; 0x03
    142c:	81 ff       	sbrs	r24, 1
    142e:	bd c1       	rjmp	.+890    	; 0x17aa <vfprintf+0x398>
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	4c 01       	movw	r8, r24
    1436:	f7 01       	movw	r30, r14
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	f6 01       	movw	r30, r12
    143c:	93 fd       	sbrc	r25, 3
    143e:	85 91       	lpm	r24, Z+
    1440:	93 ff       	sbrs	r25, 3
    1442:	81 91       	ld	r24, Z+
    1444:	6f 01       	movw	r12, r30
    1446:	88 23       	and	r24, r24
    1448:	09 f4       	brne	.+2      	; 0x144c <vfprintf+0x3a>
    144a:	ab c1       	rjmp	.+854    	; 0x17a2 <vfprintf+0x390>
    144c:	85 32       	cpi	r24, 0x25	; 37
    144e:	39 f4       	brne	.+14     	; 0x145e <vfprintf+0x4c>
    1450:	93 fd       	sbrc	r25, 3
    1452:	85 91       	lpm	r24, Z+
    1454:	93 ff       	sbrs	r25, 3
    1456:	81 91       	ld	r24, Z+
    1458:	6f 01       	movw	r12, r30
    145a:	85 32       	cpi	r24, 0x25	; 37
    145c:	29 f4       	brne	.+10     	; 0x1468 <vfprintf+0x56>
    145e:	b7 01       	movw	r22, r14
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1466:	e7 cf       	rjmp	.-50     	; 0x1436 <vfprintf+0x24>
    1468:	51 2c       	mov	r5, r1
    146a:	31 2c       	mov	r3, r1
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	20 32       	cpi	r18, 0x20	; 32
    1470:	a0 f4       	brcc	.+40     	; 0x149a <vfprintf+0x88>
    1472:	8b 32       	cpi	r24, 0x2B	; 43
    1474:	69 f0       	breq	.+26     	; 0x1490 <vfprintf+0x7e>
    1476:	30 f4       	brcc	.+12     	; 0x1484 <vfprintf+0x72>
    1478:	80 32       	cpi	r24, 0x20	; 32
    147a:	59 f0       	breq	.+22     	; 0x1492 <vfprintf+0x80>
    147c:	83 32       	cpi	r24, 0x23	; 35
    147e:	69 f4       	brne	.+26     	; 0x149a <vfprintf+0x88>
    1480:	20 61       	ori	r18, 0x10	; 16
    1482:	2c c0       	rjmp	.+88     	; 0x14dc <vfprintf+0xca>
    1484:	8d 32       	cpi	r24, 0x2D	; 45
    1486:	39 f0       	breq	.+14     	; 0x1496 <vfprintf+0x84>
    1488:	80 33       	cpi	r24, 0x30	; 48
    148a:	39 f4       	brne	.+14     	; 0x149a <vfprintf+0x88>
    148c:	21 60       	ori	r18, 0x01	; 1
    148e:	26 c0       	rjmp	.+76     	; 0x14dc <vfprintf+0xca>
    1490:	22 60       	ori	r18, 0x02	; 2
    1492:	24 60       	ori	r18, 0x04	; 4
    1494:	23 c0       	rjmp	.+70     	; 0x14dc <vfprintf+0xca>
    1496:	28 60       	ori	r18, 0x08	; 8
    1498:	21 c0       	rjmp	.+66     	; 0x14dc <vfprintf+0xca>
    149a:	27 fd       	sbrc	r18, 7
    149c:	27 c0       	rjmp	.+78     	; 0x14ec <vfprintf+0xda>
    149e:	30 ed       	ldi	r19, 0xD0	; 208
    14a0:	38 0f       	add	r19, r24
    14a2:	3a 30       	cpi	r19, 0x0A	; 10
    14a4:	78 f4       	brcc	.+30     	; 0x14c4 <vfprintf+0xb2>
    14a6:	26 ff       	sbrs	r18, 6
    14a8:	06 c0       	rjmp	.+12     	; 0x14b6 <vfprintf+0xa4>
    14aa:	fa e0       	ldi	r31, 0x0A	; 10
    14ac:	5f 9e       	mul	r5, r31
    14ae:	30 0d       	add	r19, r0
    14b0:	11 24       	eor	r1, r1
    14b2:	53 2e       	mov	r5, r19
    14b4:	13 c0       	rjmp	.+38     	; 0x14dc <vfprintf+0xca>
    14b6:	8a e0       	ldi	r24, 0x0A	; 10
    14b8:	38 9e       	mul	r3, r24
    14ba:	30 0d       	add	r19, r0
    14bc:	11 24       	eor	r1, r1
    14be:	33 2e       	mov	r3, r19
    14c0:	20 62       	ori	r18, 0x20	; 32
    14c2:	0c c0       	rjmp	.+24     	; 0x14dc <vfprintf+0xca>
    14c4:	8e 32       	cpi	r24, 0x2E	; 46
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <vfprintf+0xbe>
    14c8:	26 fd       	sbrc	r18, 6
    14ca:	6b c1       	rjmp	.+726    	; 0x17a2 <vfprintf+0x390>
    14cc:	20 64       	ori	r18, 0x40	; 64
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <vfprintf+0xca>
    14d0:	8c 36       	cpi	r24, 0x6C	; 108
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <vfprintf+0xc6>
    14d4:	20 68       	ori	r18, 0x80	; 128
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <vfprintf+0xca>
    14d8:	88 36       	cpi	r24, 0x68	; 104
    14da:	41 f4       	brne	.+16     	; 0x14ec <vfprintf+0xda>
    14dc:	f6 01       	movw	r30, r12
    14de:	93 fd       	sbrc	r25, 3
    14e0:	85 91       	lpm	r24, Z+
    14e2:	93 ff       	sbrs	r25, 3
    14e4:	81 91       	ld	r24, Z+
    14e6:	6f 01       	movw	r12, r30
    14e8:	81 11       	cpse	r24, r1
    14ea:	c1 cf       	rjmp	.-126    	; 0x146e <vfprintf+0x5c>
    14ec:	98 2f       	mov	r25, r24
    14ee:	9f 7d       	andi	r25, 0xDF	; 223
    14f0:	95 54       	subi	r25, 0x45	; 69
    14f2:	93 30       	cpi	r25, 0x03	; 3
    14f4:	28 f4       	brcc	.+10     	; 0x1500 <vfprintf+0xee>
    14f6:	0c 5f       	subi	r16, 0xFC	; 252
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	ff e3       	ldi	r31, 0x3F	; 63
    14fc:	f9 83       	std	Y+1, r31	; 0x01
    14fe:	0d c0       	rjmp	.+26     	; 0x151a <vfprintf+0x108>
    1500:	83 36       	cpi	r24, 0x63	; 99
    1502:	31 f0       	breq	.+12     	; 0x1510 <vfprintf+0xfe>
    1504:	83 37       	cpi	r24, 0x73	; 115
    1506:	71 f0       	breq	.+28     	; 0x1524 <vfprintf+0x112>
    1508:	83 35       	cpi	r24, 0x53	; 83
    150a:	09 f0       	breq	.+2      	; 0x150e <vfprintf+0xfc>
    150c:	5b c0       	rjmp	.+182    	; 0x15c4 <vfprintf+0x1b2>
    150e:	22 c0       	rjmp	.+68     	; 0x1554 <vfprintf+0x142>
    1510:	f8 01       	movw	r30, r16
    1512:	80 81       	ld	r24, Z
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	0e 5f       	subi	r16, 0xFE	; 254
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	44 24       	eor	r4, r4
    151c:	43 94       	inc	r4
    151e:	51 2c       	mov	r5, r1
    1520:	54 01       	movw	r10, r8
    1522:	15 c0       	rjmp	.+42     	; 0x154e <vfprintf+0x13c>
    1524:	38 01       	movw	r6, r16
    1526:	f2 e0       	ldi	r31, 0x02	; 2
    1528:	6f 0e       	add	r6, r31
    152a:	71 1c       	adc	r7, r1
    152c:	f8 01       	movw	r30, r16
    152e:	a0 80       	ld	r10, Z
    1530:	b1 80       	ldd	r11, Z+1	; 0x01
    1532:	26 ff       	sbrs	r18, 6
    1534:	03 c0       	rjmp	.+6      	; 0x153c <vfprintf+0x12a>
    1536:	65 2d       	mov	r22, r5
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <vfprintf+0x12e>
    153c:	6f ef       	ldi	r22, 0xFF	; 255
    153e:	7f ef       	ldi	r23, 0xFF	; 255
    1540:	c5 01       	movw	r24, r10
    1542:	2c 87       	std	Y+12, r18	; 0x0c
    1544:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <strnlen>
    1548:	2c 01       	movw	r4, r24
    154a:	83 01       	movw	r16, r6
    154c:	2c 85       	ldd	r18, Y+12	; 0x0c
    154e:	2f 77       	andi	r18, 0x7F	; 127
    1550:	22 2e       	mov	r2, r18
    1552:	17 c0       	rjmp	.+46     	; 0x1582 <vfprintf+0x170>
    1554:	38 01       	movw	r6, r16
    1556:	f2 e0       	ldi	r31, 0x02	; 2
    1558:	6f 0e       	add	r6, r31
    155a:	71 1c       	adc	r7, r1
    155c:	f8 01       	movw	r30, r16
    155e:	a0 80       	ld	r10, Z
    1560:	b1 80       	ldd	r11, Z+1	; 0x01
    1562:	26 ff       	sbrs	r18, 6
    1564:	03 c0       	rjmp	.+6      	; 0x156c <vfprintf+0x15a>
    1566:	65 2d       	mov	r22, r5
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <vfprintf+0x15e>
    156c:	6f ef       	ldi	r22, 0xFF	; 255
    156e:	7f ef       	ldi	r23, 0xFF	; 255
    1570:	c5 01       	movw	r24, r10
    1572:	2c 87       	std	Y+12, r18	; 0x0c
    1574:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <strnlen_P>
    1578:	2c 01       	movw	r4, r24
    157a:	2c 85       	ldd	r18, Y+12	; 0x0c
    157c:	20 68       	ori	r18, 0x80	; 128
    157e:	22 2e       	mov	r2, r18
    1580:	83 01       	movw	r16, r6
    1582:	23 fc       	sbrc	r2, 3
    1584:	1b c0       	rjmp	.+54     	; 0x15bc <vfprintf+0x1aa>
    1586:	83 2d       	mov	r24, r3
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	48 16       	cp	r4, r24
    158c:	59 06       	cpc	r5, r25
    158e:	b0 f4       	brcc	.+44     	; 0x15bc <vfprintf+0x1aa>
    1590:	b7 01       	movw	r22, r14
    1592:	80 e2       	ldi	r24, 0x20	; 32
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    159a:	3a 94       	dec	r3
    159c:	f4 cf       	rjmp	.-24     	; 0x1586 <vfprintf+0x174>
    159e:	f5 01       	movw	r30, r10
    15a0:	27 fc       	sbrc	r2, 7
    15a2:	85 91       	lpm	r24, Z+
    15a4:	27 fe       	sbrs	r2, 7
    15a6:	81 91       	ld	r24, Z+
    15a8:	5f 01       	movw	r10, r30
    15aa:	b7 01       	movw	r22, r14
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    15b2:	31 10       	cpse	r3, r1
    15b4:	3a 94       	dec	r3
    15b6:	f1 e0       	ldi	r31, 0x01	; 1
    15b8:	4f 1a       	sub	r4, r31
    15ba:	51 08       	sbc	r5, r1
    15bc:	41 14       	cp	r4, r1
    15be:	51 04       	cpc	r5, r1
    15c0:	71 f7       	brne	.-36     	; 0x159e <vfprintf+0x18c>
    15c2:	e5 c0       	rjmp	.+458    	; 0x178e <vfprintf+0x37c>
    15c4:	84 36       	cpi	r24, 0x64	; 100
    15c6:	11 f0       	breq	.+4      	; 0x15cc <vfprintf+0x1ba>
    15c8:	89 36       	cpi	r24, 0x69	; 105
    15ca:	39 f5       	brne	.+78     	; 0x161a <vfprintf+0x208>
    15cc:	f8 01       	movw	r30, r16
    15ce:	27 ff       	sbrs	r18, 7
    15d0:	07 c0       	rjmp	.+14     	; 0x15e0 <vfprintf+0x1ce>
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	0c 5f       	subi	r16, 0xFC	; 252
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <vfprintf+0x1de>
    15e0:	60 81       	ld	r22, Z
    15e2:	71 81       	ldd	r23, Z+1	; 0x01
    15e4:	88 27       	eor	r24, r24
    15e6:	77 fd       	sbrc	r23, 7
    15e8:	80 95       	com	r24
    15ea:	98 2f       	mov	r25, r24
    15ec:	0e 5f       	subi	r16, 0xFE	; 254
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	2f 76       	andi	r18, 0x6F	; 111
    15f2:	b2 2e       	mov	r11, r18
    15f4:	97 ff       	sbrs	r25, 7
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <vfprintf+0x1f8>
    15f8:	90 95       	com	r25
    15fa:	80 95       	com	r24
    15fc:	70 95       	com	r23
    15fe:	61 95       	neg	r22
    1600:	7f 4f       	sbci	r23, 0xFF	; 255
    1602:	8f 4f       	sbci	r24, 0xFF	; 255
    1604:	9f 4f       	sbci	r25, 0xFF	; 255
    1606:	20 68       	ori	r18, 0x80	; 128
    1608:	b2 2e       	mov	r11, r18
    160a:	2a e0       	ldi	r18, 0x0A	; 10
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	a4 01       	movw	r20, r8
    1610:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__ultoa_invert>
    1614:	a8 2e       	mov	r10, r24
    1616:	a8 18       	sub	r10, r8
    1618:	44 c0       	rjmp	.+136    	; 0x16a2 <vfprintf+0x290>
    161a:	85 37       	cpi	r24, 0x75	; 117
    161c:	29 f4       	brne	.+10     	; 0x1628 <vfprintf+0x216>
    161e:	2f 7e       	andi	r18, 0xEF	; 239
    1620:	b2 2e       	mov	r11, r18
    1622:	2a e0       	ldi	r18, 0x0A	; 10
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	25 c0       	rjmp	.+74     	; 0x1672 <vfprintf+0x260>
    1628:	f2 2f       	mov	r31, r18
    162a:	f9 7f       	andi	r31, 0xF9	; 249
    162c:	bf 2e       	mov	r11, r31
    162e:	8f 36       	cpi	r24, 0x6F	; 111
    1630:	c1 f0       	breq	.+48     	; 0x1662 <vfprintf+0x250>
    1632:	18 f4       	brcc	.+6      	; 0x163a <vfprintf+0x228>
    1634:	88 35       	cpi	r24, 0x58	; 88
    1636:	79 f0       	breq	.+30     	; 0x1656 <vfprintf+0x244>
    1638:	b4 c0       	rjmp	.+360    	; 0x17a2 <vfprintf+0x390>
    163a:	80 37       	cpi	r24, 0x70	; 112
    163c:	19 f0       	breq	.+6      	; 0x1644 <vfprintf+0x232>
    163e:	88 37       	cpi	r24, 0x78	; 120
    1640:	21 f0       	breq	.+8      	; 0x164a <vfprintf+0x238>
    1642:	af c0       	rjmp	.+350    	; 0x17a2 <vfprintf+0x390>
    1644:	2f 2f       	mov	r18, r31
    1646:	20 61       	ori	r18, 0x10	; 16
    1648:	b2 2e       	mov	r11, r18
    164a:	b4 fe       	sbrs	r11, 4
    164c:	0d c0       	rjmp	.+26     	; 0x1668 <vfprintf+0x256>
    164e:	8b 2d       	mov	r24, r11
    1650:	84 60       	ori	r24, 0x04	; 4
    1652:	b8 2e       	mov	r11, r24
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <vfprintf+0x256>
    1656:	24 ff       	sbrs	r18, 4
    1658:	0a c0       	rjmp	.+20     	; 0x166e <vfprintf+0x25c>
    165a:	9f 2f       	mov	r25, r31
    165c:	96 60       	ori	r25, 0x06	; 6
    165e:	b9 2e       	mov	r11, r25
    1660:	06 c0       	rjmp	.+12     	; 0x166e <vfprintf+0x25c>
    1662:	28 e0       	ldi	r18, 0x08	; 8
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	05 c0       	rjmp	.+10     	; 0x1672 <vfprintf+0x260>
    1668:	20 e1       	ldi	r18, 0x10	; 16
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0x260>
    166e:	20 e1       	ldi	r18, 0x10	; 16
    1670:	32 e0       	ldi	r19, 0x02	; 2
    1672:	f8 01       	movw	r30, r16
    1674:	b7 fe       	sbrs	r11, 7
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <vfprintf+0x274>
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	0c 5f       	subi	r16, 0xFC	; 252
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0x280>
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 5f       	subi	r16, 0xFE	; 254
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	a4 01       	movw	r20, r8
    1694:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__ultoa_invert>
    1698:	a8 2e       	mov	r10, r24
    169a:	a8 18       	sub	r10, r8
    169c:	fb 2d       	mov	r31, r11
    169e:	ff 77       	andi	r31, 0x7F	; 127
    16a0:	bf 2e       	mov	r11, r31
    16a2:	b6 fe       	sbrs	r11, 6
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <vfprintf+0x2aa>
    16a6:	2b 2d       	mov	r18, r11
    16a8:	2e 7f       	andi	r18, 0xFE	; 254
    16aa:	a5 14       	cp	r10, r5
    16ac:	50 f4       	brcc	.+20     	; 0x16c2 <vfprintf+0x2b0>
    16ae:	b4 fe       	sbrs	r11, 4
    16b0:	0a c0       	rjmp	.+20     	; 0x16c6 <vfprintf+0x2b4>
    16b2:	b2 fc       	sbrc	r11, 2
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <vfprintf+0x2b4>
    16b6:	2b 2d       	mov	r18, r11
    16b8:	2e 7e       	andi	r18, 0xEE	; 238
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <vfprintf+0x2b4>
    16bc:	7a 2c       	mov	r7, r10
    16be:	2b 2d       	mov	r18, r11
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <vfprintf+0x2b6>
    16c2:	7a 2c       	mov	r7, r10
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <vfprintf+0x2b6>
    16c6:	75 2c       	mov	r7, r5
    16c8:	24 ff       	sbrs	r18, 4
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <vfprintf+0x2d4>
    16cc:	fe 01       	movw	r30, r28
    16ce:	ea 0d       	add	r30, r10
    16d0:	f1 1d       	adc	r31, r1
    16d2:	80 81       	ld	r24, Z
    16d4:	80 33       	cpi	r24, 0x30	; 48
    16d6:	11 f4       	brne	.+4      	; 0x16dc <vfprintf+0x2ca>
    16d8:	29 7e       	andi	r18, 0xE9	; 233
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <vfprintf+0x2dc>
    16dc:	22 ff       	sbrs	r18, 2
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <vfprintf+0x2da>
    16e0:	73 94       	inc	r7
    16e2:	73 94       	inc	r7
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <vfprintf+0x2dc>
    16e6:	82 2f       	mov	r24, r18
    16e8:	86 78       	andi	r24, 0x86	; 134
    16ea:	09 f0       	breq	.+2      	; 0x16ee <vfprintf+0x2dc>
    16ec:	73 94       	inc	r7
    16ee:	23 fd       	sbrc	r18, 3
    16f0:	13 c0       	rjmp	.+38     	; 0x1718 <vfprintf+0x306>
    16f2:	20 ff       	sbrs	r18, 0
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x2f0>
    16f6:	5a 2c       	mov	r5, r10
    16f8:	73 14       	cp	r7, r3
    16fa:	18 f4       	brcc	.+6      	; 0x1702 <vfprintf+0x2f0>
    16fc:	53 0c       	add	r5, r3
    16fe:	57 18       	sub	r5, r7
    1700:	73 2c       	mov	r7, r3
    1702:	73 14       	cp	r7, r3
    1704:	68 f4       	brcc	.+26     	; 0x1720 <vfprintf+0x30e>
    1706:	b7 01       	movw	r22, r14
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	2c 87       	std	Y+12, r18	; 0x0c
    170e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1712:	73 94       	inc	r7
    1714:	2c 85       	ldd	r18, Y+12	; 0x0c
    1716:	f5 cf       	rjmp	.-22     	; 0x1702 <vfprintf+0x2f0>
    1718:	73 14       	cp	r7, r3
    171a:	10 f4       	brcc	.+4      	; 0x1720 <vfprintf+0x30e>
    171c:	37 18       	sub	r3, r7
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <vfprintf+0x310>
    1720:	31 2c       	mov	r3, r1
    1722:	24 ff       	sbrs	r18, 4
    1724:	12 c0       	rjmp	.+36     	; 0x174a <vfprintf+0x338>
    1726:	b7 01       	movw	r22, r14
    1728:	80 e3       	ldi	r24, 0x30	; 48
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	2c 87       	std	Y+12, r18	; 0x0c
    172e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1732:	2c 85       	ldd	r18, Y+12	; 0x0c
    1734:	22 ff       	sbrs	r18, 2
    1736:	17 c0       	rjmp	.+46     	; 0x1766 <vfprintf+0x354>
    1738:	21 ff       	sbrs	r18, 1
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <vfprintf+0x330>
    173c:	88 e5       	ldi	r24, 0x58	; 88
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <vfprintf+0x334>
    1742:	88 e7       	ldi	r24, 0x78	; 120
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	b7 01       	movw	r22, r14
    1748:	0c c0       	rjmp	.+24     	; 0x1762 <vfprintf+0x350>
    174a:	82 2f       	mov	r24, r18
    174c:	86 78       	andi	r24, 0x86	; 134
    174e:	59 f0       	breq	.+22     	; 0x1766 <vfprintf+0x354>
    1750:	21 fd       	sbrc	r18, 1
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x346>
    1754:	80 e2       	ldi	r24, 0x20	; 32
    1756:	01 c0       	rjmp	.+2      	; 0x175a <vfprintf+0x348>
    1758:	8b e2       	ldi	r24, 0x2B	; 43
    175a:	27 fd       	sbrc	r18, 7
    175c:	8d e2       	ldi	r24, 0x2D	; 45
    175e:	b7 01       	movw	r22, r14
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1766:	a5 14       	cp	r10, r5
    1768:	38 f4       	brcc	.+14     	; 0x1778 <vfprintf+0x366>
    176a:	b7 01       	movw	r22, r14
    176c:	80 e3       	ldi	r24, 0x30	; 48
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    1774:	5a 94       	dec	r5
    1776:	f7 cf       	rjmp	.-18     	; 0x1766 <vfprintf+0x354>
    1778:	aa 94       	dec	r10
    177a:	f4 01       	movw	r30, r8
    177c:	ea 0d       	add	r30, r10
    177e:	f1 1d       	adc	r31, r1
    1780:	80 81       	ld	r24, Z
    1782:	b7 01       	movw	r22, r14
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    178a:	a1 10       	cpse	r10, r1
    178c:	f5 cf       	rjmp	.-22     	; 0x1778 <vfprintf+0x366>
    178e:	33 20       	and	r3, r3
    1790:	09 f4       	brne	.+2      	; 0x1794 <vfprintf+0x382>
    1792:	51 ce       	rjmp	.-862    	; 0x1436 <vfprintf+0x24>
    1794:	b7 01       	movw	r22, r14
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <fputc>
    179e:	3a 94       	dec	r3
    17a0:	f6 cf       	rjmp	.-20     	; 0x178e <vfprintf+0x37c>
    17a2:	f7 01       	movw	r30, r14
    17a4:	86 81       	ldd	r24, Z+6	; 0x06
    17a6:	97 81       	ldd	r25, Z+7	; 0x07
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <vfprintf+0x39c>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	2c 96       	adiw	r28, 0x0c	; 12
    17b0:	e2 e1       	ldi	r30, 0x12	; 18
    17b2:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__epilogue_restores__>

000017b6 <calloc>:
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	86 9f       	mul	r24, r22
    17c0:	80 01       	movw	r16, r0
    17c2:	87 9f       	mul	r24, r23
    17c4:	10 0d       	add	r17, r0
    17c6:	96 9f       	mul	r25, r22
    17c8:	10 0d       	add	r17, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	c8 01       	movw	r24, r16
    17ce:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <malloc>
    17d2:	ec 01       	movw	r28, r24
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <calloc+0x2c>
    17d8:	a8 01       	movw	r20, r16
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <memset>
    17e2:	ce 01       	movw	r24, r28
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <malloc>:
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	91 05       	cpc	r25, r1
    17f6:	10 f4       	brcc	.+4      	; 0x17fc <malloc+0xe>
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	e0 91 d1 03 	lds	r30, 0x03D1
    1800:	f0 91 d2 03 	lds	r31, 0x03D2
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	a0 e0       	ldi	r26, 0x00	; 0
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	30 97       	sbiw	r30, 0x00	; 0
    180e:	39 f1       	breq	.+78     	; 0x185e <malloc+0x70>
    1810:	40 81       	ld	r20, Z
    1812:	51 81       	ldd	r21, Z+1	; 0x01
    1814:	48 17       	cp	r20, r24
    1816:	59 07       	cpc	r21, r25
    1818:	b8 f0       	brcs	.+46     	; 0x1848 <malloc+0x5a>
    181a:	48 17       	cp	r20, r24
    181c:	59 07       	cpc	r21, r25
    181e:	71 f4       	brne	.+28     	; 0x183c <malloc+0x4e>
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	10 97       	sbiw	r26, 0x00	; 0
    1826:	29 f0       	breq	.+10     	; 0x1832 <malloc+0x44>
    1828:	13 96       	adiw	r26, 0x03	; 3
    182a:	9c 93       	st	X, r25
    182c:	8e 93       	st	-X, r24
    182e:	12 97       	sbiw	r26, 0x02	; 2
    1830:	2c c0       	rjmp	.+88     	; 0x188a <malloc+0x9c>
    1832:	90 93 d2 03 	sts	0x03D2, r25
    1836:	80 93 d1 03 	sts	0x03D1, r24
    183a:	27 c0       	rjmp	.+78     	; 0x188a <malloc+0x9c>
    183c:	21 15       	cp	r18, r1
    183e:	31 05       	cpc	r19, r1
    1840:	31 f0       	breq	.+12     	; 0x184e <malloc+0x60>
    1842:	42 17       	cp	r20, r18
    1844:	53 07       	cpc	r21, r19
    1846:	18 f0       	brcs	.+6      	; 0x184e <malloc+0x60>
    1848:	a9 01       	movw	r20, r18
    184a:	db 01       	movw	r26, r22
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <malloc+0x62>
    184e:	ef 01       	movw	r28, r30
    1850:	9a 01       	movw	r18, r20
    1852:	bd 01       	movw	r22, r26
    1854:	df 01       	movw	r26, r30
    1856:	02 80       	ldd	r0, Z+2	; 0x02
    1858:	f3 81       	ldd	r31, Z+3	; 0x03
    185a:	e0 2d       	mov	r30, r0
    185c:	d7 cf       	rjmp	.-82     	; 0x180c <malloc+0x1e>
    185e:	21 15       	cp	r18, r1
    1860:	31 05       	cpc	r19, r1
    1862:	f9 f0       	breq	.+62     	; 0x18a2 <malloc+0xb4>
    1864:	28 1b       	sub	r18, r24
    1866:	39 0b       	sbc	r19, r25
    1868:	24 30       	cpi	r18, 0x04	; 4
    186a:	31 05       	cpc	r19, r1
    186c:	80 f4       	brcc	.+32     	; 0x188e <malloc+0xa0>
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	9b 81       	ldd	r25, Y+3	; 0x03
    1872:	61 15       	cp	r22, r1
    1874:	71 05       	cpc	r23, r1
    1876:	21 f0       	breq	.+8      	; 0x1880 <malloc+0x92>
    1878:	fb 01       	movw	r30, r22
    187a:	93 83       	std	Z+3, r25	; 0x03
    187c:	82 83       	std	Z+2, r24	; 0x02
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <malloc+0x9a>
    1880:	90 93 d2 03 	sts	0x03D2, r25
    1884:	80 93 d1 03 	sts	0x03D1, r24
    1888:	fe 01       	movw	r30, r28
    188a:	32 96       	adiw	r30, 0x02	; 2
    188c:	44 c0       	rjmp	.+136    	; 0x1916 <malloc+0x128>
    188e:	fe 01       	movw	r30, r28
    1890:	e2 0f       	add	r30, r18
    1892:	f3 1f       	adc	r31, r19
    1894:	81 93       	st	Z+, r24
    1896:	91 93       	st	Z+, r25
    1898:	22 50       	subi	r18, 0x02	; 2
    189a:	31 09       	sbc	r19, r1
    189c:	39 83       	std	Y+1, r19	; 0x01
    189e:	28 83       	st	Y, r18
    18a0:	3a c0       	rjmp	.+116    	; 0x1916 <malloc+0x128>
    18a2:	20 91 cf 03 	lds	r18, 0x03CF
    18a6:	30 91 d0 03 	lds	r19, 0x03D0
    18aa:	23 2b       	or	r18, r19
    18ac:	41 f4       	brne	.+16     	; 0x18be <malloc+0xd0>
    18ae:	20 91 02 01 	lds	r18, 0x0102
    18b2:	30 91 03 01 	lds	r19, 0x0103
    18b6:	30 93 d0 03 	sts	0x03D0, r19
    18ba:	20 93 cf 03 	sts	0x03CF, r18
    18be:	20 91 00 01 	lds	r18, 0x0100
    18c2:	30 91 01 01 	lds	r19, 0x0101
    18c6:	21 15       	cp	r18, r1
    18c8:	31 05       	cpc	r19, r1
    18ca:	41 f4       	brne	.+16     	; 0x18dc <malloc+0xee>
    18cc:	2d b7       	in	r18, 0x3d	; 61
    18ce:	3e b7       	in	r19, 0x3e	; 62
    18d0:	40 91 04 01 	lds	r20, 0x0104
    18d4:	50 91 05 01 	lds	r21, 0x0105
    18d8:	24 1b       	sub	r18, r20
    18da:	35 0b       	sbc	r19, r21
    18dc:	e0 91 cf 03 	lds	r30, 0x03CF
    18e0:	f0 91 d0 03 	lds	r31, 0x03D0
    18e4:	e2 17       	cp	r30, r18
    18e6:	f3 07       	cpc	r31, r19
    18e8:	a0 f4       	brcc	.+40     	; 0x1912 <malloc+0x124>
    18ea:	2e 1b       	sub	r18, r30
    18ec:	3f 0b       	sbc	r19, r31
    18ee:	28 17       	cp	r18, r24
    18f0:	39 07       	cpc	r19, r25
    18f2:	78 f0       	brcs	.+30     	; 0x1912 <malloc+0x124>
    18f4:	ac 01       	movw	r20, r24
    18f6:	4e 5f       	subi	r20, 0xFE	; 254
    18f8:	5f 4f       	sbci	r21, 0xFF	; 255
    18fa:	24 17       	cp	r18, r20
    18fc:	35 07       	cpc	r19, r21
    18fe:	48 f0       	brcs	.+18     	; 0x1912 <malloc+0x124>
    1900:	4e 0f       	add	r20, r30
    1902:	5f 1f       	adc	r21, r31
    1904:	50 93 d0 03 	sts	0x03D0, r21
    1908:	40 93 cf 03 	sts	0x03CF, r20
    190c:	81 93       	st	Z+, r24
    190e:	91 93       	st	Z+, r25
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <malloc+0x128>
    1912:	e0 e0       	ldi	r30, 0x00	; 0
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	cf 01       	movw	r24, r30
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <free>:
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	09 f4       	brne	.+2      	; 0x1928 <free+0xa>
    1926:	87 c0       	rjmp	.+270    	; 0x1a36 <free+0x118>
    1928:	fc 01       	movw	r30, r24
    192a:	32 97       	sbiw	r30, 0x02	; 2
    192c:	13 82       	std	Z+3, r1	; 0x03
    192e:	12 82       	std	Z+2, r1	; 0x02
    1930:	c0 91 d1 03 	lds	r28, 0x03D1
    1934:	d0 91 d2 03 	lds	r29, 0x03D2
    1938:	20 97       	sbiw	r28, 0x00	; 0
    193a:	81 f4       	brne	.+32     	; 0x195c <free+0x3e>
    193c:	20 81       	ld	r18, Z
    193e:	31 81       	ldd	r19, Z+1	; 0x01
    1940:	28 0f       	add	r18, r24
    1942:	39 1f       	adc	r19, r25
    1944:	80 91 cf 03 	lds	r24, 0x03CF
    1948:	90 91 d0 03 	lds	r25, 0x03D0
    194c:	82 17       	cp	r24, r18
    194e:	93 07       	cpc	r25, r19
    1950:	79 f5       	brne	.+94     	; 0x19b0 <free+0x92>
    1952:	f0 93 d0 03 	sts	0x03D0, r31
    1956:	e0 93 cf 03 	sts	0x03CF, r30
    195a:	6d c0       	rjmp	.+218    	; 0x1a36 <free+0x118>
    195c:	de 01       	movw	r26, r28
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	ae 17       	cp	r26, r30
    1964:	bf 07       	cpc	r27, r31
    1966:	50 f4       	brcc	.+20     	; 0x197c <free+0x5e>
    1968:	12 96       	adiw	r26, 0x02	; 2
    196a:	4d 91       	ld	r20, X+
    196c:	5c 91       	ld	r21, X
    196e:	13 97       	sbiw	r26, 0x03	; 3
    1970:	9d 01       	movw	r18, r26
    1972:	41 15       	cp	r20, r1
    1974:	51 05       	cpc	r21, r1
    1976:	09 f1       	breq	.+66     	; 0x19ba <free+0x9c>
    1978:	da 01       	movw	r26, r20
    197a:	f3 cf       	rjmp	.-26     	; 0x1962 <free+0x44>
    197c:	b3 83       	std	Z+3, r27	; 0x03
    197e:	a2 83       	std	Z+2, r26	; 0x02
    1980:	40 81       	ld	r20, Z
    1982:	51 81       	ldd	r21, Z+1	; 0x01
    1984:	84 0f       	add	r24, r20
    1986:	95 1f       	adc	r25, r21
    1988:	8a 17       	cp	r24, r26
    198a:	9b 07       	cpc	r25, r27
    198c:	71 f4       	brne	.+28     	; 0x19aa <free+0x8c>
    198e:	8d 91       	ld	r24, X+
    1990:	9c 91       	ld	r25, X
    1992:	11 97       	sbiw	r26, 0x01	; 1
    1994:	84 0f       	add	r24, r20
    1996:	95 1f       	adc	r25, r21
    1998:	02 96       	adiw	r24, 0x02	; 2
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    199e:	12 96       	adiw	r26, 0x02	; 2
    19a0:	8d 91       	ld	r24, X+
    19a2:	9c 91       	ld	r25, X
    19a4:	13 97       	sbiw	r26, 0x03	; 3
    19a6:	93 83       	std	Z+3, r25	; 0x03
    19a8:	82 83       	std	Z+2, r24	; 0x02
    19aa:	21 15       	cp	r18, r1
    19ac:	31 05       	cpc	r19, r1
    19ae:	29 f4       	brne	.+10     	; 0x19ba <free+0x9c>
    19b0:	f0 93 d2 03 	sts	0x03D2, r31
    19b4:	e0 93 d1 03 	sts	0x03D1, r30
    19b8:	3e c0       	rjmp	.+124    	; 0x1a36 <free+0x118>
    19ba:	d9 01       	movw	r26, r18
    19bc:	13 96       	adiw	r26, 0x03	; 3
    19be:	fc 93       	st	X, r31
    19c0:	ee 93       	st	-X, r30
    19c2:	12 97       	sbiw	r26, 0x02	; 2
    19c4:	4d 91       	ld	r20, X+
    19c6:	5d 91       	ld	r21, X+
    19c8:	a4 0f       	add	r26, r20
    19ca:	b5 1f       	adc	r27, r21
    19cc:	ea 17       	cp	r30, r26
    19ce:	fb 07       	cpc	r31, r27
    19d0:	79 f4       	brne	.+30     	; 0x19f0 <free+0xd2>
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	84 0f       	add	r24, r20
    19d8:	95 1f       	adc	r25, r21
    19da:	02 96       	adiw	r24, 0x02	; 2
    19dc:	d9 01       	movw	r26, r18
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	9c 93       	st	X, r25
    19e2:	8e 93       	st	-X, r24
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	13 96       	adiw	r26, 0x03	; 3
    19ea:	9c 93       	st	X, r25
    19ec:	8e 93       	st	-X, r24
    19ee:	12 97       	sbiw	r26, 0x02	; 2
    19f0:	e0 e0       	ldi	r30, 0x00	; 0
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	19 f0       	breq	.+6      	; 0x1a02 <free+0xe4>
    19fc:	fe 01       	movw	r30, r28
    19fe:	ec 01       	movw	r28, r24
    1a00:	f9 cf       	rjmp	.-14     	; 0x19f4 <free+0xd6>
    1a02:	ce 01       	movw	r24, r28
    1a04:	02 96       	adiw	r24, 0x02	; 2
    1a06:	28 81       	ld	r18, Y
    1a08:	39 81       	ldd	r19, Y+1	; 0x01
    1a0a:	82 0f       	add	r24, r18
    1a0c:	93 1f       	adc	r25, r19
    1a0e:	20 91 cf 03 	lds	r18, 0x03CF
    1a12:	30 91 d0 03 	lds	r19, 0x03D0
    1a16:	28 17       	cp	r18, r24
    1a18:	39 07       	cpc	r19, r25
    1a1a:	69 f4       	brne	.+26     	; 0x1a36 <free+0x118>
    1a1c:	30 97       	sbiw	r30, 0x00	; 0
    1a1e:	29 f4       	brne	.+10     	; 0x1a2a <free+0x10c>
    1a20:	10 92 d2 03 	sts	0x03D2, r1
    1a24:	10 92 d1 03 	sts	0x03D1, r1
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <free+0x110>
    1a2a:	13 82       	std	Z+3, r1	; 0x03
    1a2c:	12 82       	std	Z+2, r1	; 0x02
    1a2e:	d0 93 d0 03 	sts	0x03D0, r29
    1a32:	c0 93 cf 03 	sts	0x03CF, r28
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	08 95       	ret

00001a3c <strnlen_P>:
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	05 90       	lpm	r0, Z+
    1a40:	61 50       	subi	r22, 0x01	; 1
    1a42:	70 40       	sbci	r23, 0x00	; 0
    1a44:	01 10       	cpse	r0, r1
    1a46:	d8 f7       	brcc	.-10     	; 0x1a3e <strnlen_P+0x2>
    1a48:	80 95       	com	r24
    1a4a:	90 95       	com	r25
    1a4c:	8e 0f       	add	r24, r30
    1a4e:	9f 1f       	adc	r25, r31
    1a50:	08 95       	ret

00001a52 <memset>:
    1a52:	dc 01       	movw	r26, r24
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <memset+0x6>
    1a56:	6d 93       	st	X+, r22
    1a58:	41 50       	subi	r20, 0x01	; 1
    1a5a:	50 40       	sbci	r21, 0x00	; 0
    1a5c:	e0 f7       	brcc	.-8      	; 0x1a56 <memset+0x4>
    1a5e:	08 95       	ret

00001a60 <strnlen>:
    1a60:	fc 01       	movw	r30, r24
    1a62:	61 50       	subi	r22, 0x01	; 1
    1a64:	70 40       	sbci	r23, 0x00	; 0
    1a66:	01 90       	ld	r0, Z+
    1a68:	01 10       	cpse	r0, r1
    1a6a:	d8 f7       	brcc	.-10     	; 0x1a62 <strnlen+0x2>
    1a6c:	80 95       	com	r24
    1a6e:	90 95       	com	r25
    1a70:	8e 0f       	add	r24, r30
    1a72:	9f 1f       	adc	r25, r31
    1a74:	08 95       	ret

00001a76 <fputc>:
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	18 2f       	mov	r17, r24
    1a80:	09 2f       	mov	r16, r25
    1a82:	eb 01       	movw	r28, r22
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	81 fd       	sbrc	r24, 1
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <fputc+0x1a>
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	9f ef       	ldi	r25, 0xFF	; 255
    1a8e:	20 c0       	rjmp	.+64     	; 0x1ad0 <fputc+0x5a>
    1a90:	82 ff       	sbrs	r24, 2
    1a92:	10 c0       	rjmp	.+32     	; 0x1ab4 <fputc+0x3e>
    1a94:	4e 81       	ldd	r20, Y+6	; 0x06
    1a96:	5f 81       	ldd	r21, Y+7	; 0x07
    1a98:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9c:	42 17       	cp	r20, r18
    1a9e:	53 07       	cpc	r21, r19
    1aa0:	7c f4       	brge	.+30     	; 0x1ac0 <fputc+0x4a>
    1aa2:	e8 81       	ld	r30, Y
    1aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa6:	9f 01       	movw	r18, r30
    1aa8:	2f 5f       	subi	r18, 0xFF	; 255
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	39 83       	std	Y+1, r19	; 0x01
    1aae:	28 83       	st	Y, r18
    1ab0:	10 83       	st	Z, r17
    1ab2:	06 c0       	rjmp	.+12     	; 0x1ac0 <fputc+0x4a>
    1ab4:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ab8:	81 2f       	mov	r24, r17
    1aba:	09 95       	icall
    1abc:	89 2b       	or	r24, r25
    1abe:	29 f7       	brne	.-54     	; 0x1a8a <fputc+0x14>
    1ac0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ac2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ac4:	2f 5f       	subi	r18, 0xFF	; 255
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	3f 83       	std	Y+7, r19	; 0x07
    1aca:	2e 83       	std	Y+6, r18	; 0x06
    1acc:	81 2f       	mov	r24, r17
    1ace:	90 2f       	mov	r25, r16
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <__ultoa_invert>:
    1ada:	fa 01       	movw	r30, r20
    1adc:	aa 27       	eor	r26, r26
    1ade:	28 30       	cpi	r18, 0x08	; 8
    1ae0:	51 f1       	breq	.+84     	; 0x1b36 <__ultoa_invert+0x5c>
    1ae2:	20 31       	cpi	r18, 0x10	; 16
    1ae4:	81 f1       	breq	.+96     	; 0x1b46 <__ultoa_invert+0x6c>
    1ae6:	e8 94       	clt
    1ae8:	6f 93       	push	r22
    1aea:	6e 7f       	andi	r22, 0xFE	; 254
    1aec:	6e 5f       	subi	r22, 0xFE	; 254
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	8f 4f       	sbci	r24, 0xFF	; 255
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	af 4f       	sbci	r26, 0xFF	; 255
    1af6:	b1 e0       	ldi	r27, 0x01	; 1
    1af8:	3e d0       	rcall	.+124    	; 0x1b76 <__ultoa_invert+0x9c>
    1afa:	b4 e0       	ldi	r27, 0x04	; 4
    1afc:	3c d0       	rcall	.+120    	; 0x1b76 <__ultoa_invert+0x9c>
    1afe:	67 0f       	add	r22, r23
    1b00:	78 1f       	adc	r23, r24
    1b02:	89 1f       	adc	r24, r25
    1b04:	9a 1f       	adc	r25, r26
    1b06:	a1 1d       	adc	r26, r1
    1b08:	68 0f       	add	r22, r24
    1b0a:	79 1f       	adc	r23, r25
    1b0c:	8a 1f       	adc	r24, r26
    1b0e:	91 1d       	adc	r25, r1
    1b10:	a1 1d       	adc	r26, r1
    1b12:	6a 0f       	add	r22, r26
    1b14:	71 1d       	adc	r23, r1
    1b16:	81 1d       	adc	r24, r1
    1b18:	91 1d       	adc	r25, r1
    1b1a:	a1 1d       	adc	r26, r1
    1b1c:	20 d0       	rcall	.+64     	; 0x1b5e <__ultoa_invert+0x84>
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <__ultoa_invert+0x48>
    1b20:	68 94       	set
    1b22:	3f 91       	pop	r19
    1b24:	2a e0       	ldi	r18, 0x0A	; 10
    1b26:	26 9f       	mul	r18, r22
    1b28:	11 24       	eor	r1, r1
    1b2a:	30 19       	sub	r19, r0
    1b2c:	30 5d       	subi	r19, 0xD0	; 208
    1b2e:	31 93       	st	Z+, r19
    1b30:	de f6       	brtc	.-74     	; 0x1ae8 <__ultoa_invert+0xe>
    1b32:	cf 01       	movw	r24, r30
    1b34:	08 95       	ret
    1b36:	46 2f       	mov	r20, r22
    1b38:	47 70       	andi	r20, 0x07	; 7
    1b3a:	40 5d       	subi	r20, 0xD0	; 208
    1b3c:	41 93       	st	Z+, r20
    1b3e:	b3 e0       	ldi	r27, 0x03	; 3
    1b40:	0f d0       	rcall	.+30     	; 0x1b60 <__ultoa_invert+0x86>
    1b42:	c9 f7       	brne	.-14     	; 0x1b36 <__ultoa_invert+0x5c>
    1b44:	f6 cf       	rjmp	.-20     	; 0x1b32 <__ultoa_invert+0x58>
    1b46:	46 2f       	mov	r20, r22
    1b48:	4f 70       	andi	r20, 0x0F	; 15
    1b4a:	40 5d       	subi	r20, 0xD0	; 208
    1b4c:	4a 33       	cpi	r20, 0x3A	; 58
    1b4e:	18 f0       	brcs	.+6      	; 0x1b56 <__ultoa_invert+0x7c>
    1b50:	49 5d       	subi	r20, 0xD9	; 217
    1b52:	31 fd       	sbrc	r19, 1
    1b54:	40 52       	subi	r20, 0x20	; 32
    1b56:	41 93       	st	Z+, r20
    1b58:	02 d0       	rcall	.+4      	; 0x1b5e <__ultoa_invert+0x84>
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <__ultoa_invert+0x6c>
    1b5c:	ea cf       	rjmp	.-44     	; 0x1b32 <__ultoa_invert+0x58>
    1b5e:	b4 e0       	ldi	r27, 0x04	; 4
    1b60:	a6 95       	lsr	r26
    1b62:	97 95       	ror	r25
    1b64:	87 95       	ror	r24
    1b66:	77 95       	ror	r23
    1b68:	67 95       	ror	r22
    1b6a:	ba 95       	dec	r27
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <__ultoa_invert+0x86>
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	61 05       	cpc	r22, r1
    1b72:	71 05       	cpc	r23, r1
    1b74:	08 95       	ret
    1b76:	9b 01       	movw	r18, r22
    1b78:	ac 01       	movw	r20, r24
    1b7a:	0a 2e       	mov	r0, r26
    1b7c:	06 94       	lsr	r0
    1b7e:	57 95       	ror	r21
    1b80:	47 95       	ror	r20
    1b82:	37 95       	ror	r19
    1b84:	27 95       	ror	r18
    1b86:	ba 95       	dec	r27
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <__ultoa_invert+0xa2>
    1b8a:	62 0f       	add	r22, r18
    1b8c:	73 1f       	adc	r23, r19
    1b8e:	84 1f       	adc	r24, r20
    1b90:	95 1f       	adc	r25, r21
    1b92:	a0 1d       	adc	r26, r0
    1b94:	08 95       	ret

00001b96 <__prologue_saves__>:
    1b96:	2f 92       	push	r2
    1b98:	3f 92       	push	r3
    1b9a:	4f 92       	push	r4
    1b9c:	5f 92       	push	r5
    1b9e:	6f 92       	push	r6
    1ba0:	7f 92       	push	r7
    1ba2:	8f 92       	push	r8
    1ba4:	9f 92       	push	r9
    1ba6:	af 92       	push	r10
    1ba8:	bf 92       	push	r11
    1baa:	cf 92       	push	r12
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	ca 1b       	sub	r28, r26
    1bc0:	db 0b       	sbc	r29, r27
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	09 94       	ijmp

00001bce <__epilogue_restores__>:
    1bce:	2a 88       	ldd	r2, Y+18	; 0x12
    1bd0:	39 88       	ldd	r3, Y+17	; 0x11
    1bd2:	48 88       	ldd	r4, Y+16	; 0x10
    1bd4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bd6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bd8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bda:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bdc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bde:	aa 84       	ldd	r10, Y+10	; 0x0a
    1be0:	b9 84       	ldd	r11, Y+9	; 0x09
    1be2:	c8 84       	ldd	r12, Y+8	; 0x08
    1be4:	df 80       	ldd	r13, Y+7	; 0x07
    1be6:	ee 80       	ldd	r14, Y+6	; 0x06
    1be8:	fd 80       	ldd	r15, Y+5	; 0x05
    1bea:	0c 81       	ldd	r16, Y+4	; 0x04
    1bec:	1b 81       	ldd	r17, Y+3	; 0x03
    1bee:	aa 81       	ldd	r26, Y+2	; 0x02
    1bf0:	b9 81       	ldd	r27, Y+1	; 0x01
    1bf2:	ce 0f       	add	r28, r30
    1bf4:	d1 1d       	adc	r29, r1
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	ed 01       	movw	r28, r26
    1c02:	08 95       	ret

00001c04 <_exit>:
    1c04:	f8 94       	cli

00001c06 <__stop_program>:
    1c06:	ff cf       	rjmp	.-2      	; 0x1c06 <__stop_program>
