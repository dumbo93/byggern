
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000570  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800138  00800138  0000063c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c65  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e2  00000000  00000000  00001401  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006fb  00000000  00000000  00001ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000416  00000000  00000000  00002733  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002b49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e7       	ldi	r30, 0x70	; 112
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 33       	cpi	r26, 0x38	; 56
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e3       	ldi	r26, 0x38	; 56
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 34       	cpi	r26, 0x42	; 66
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  a6:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	set_bit(MCUCR, SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	clear_bit(DDRD, PD3);
  ba:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <CAN_init>:


void CAN_init()
{
	//Set to loop-back mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
  c2:	40 e4       	ldi	r20, 0x40	; 64
  c4:	60 ee       	ldi	r22, 0xE0	; 224
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	0e 94 9a 00 	call	0x134	; 0x134 <MCP_bit_modify>
  cc:	08 95       	ret

000000ce <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 c2 00 	call	0x184	; 0x184 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
  d6:	80 ec       	ldi	r24, 0xC0	; 192
  d8:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_transmit_receive>
	SPI_set_ss(1);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 c2 00 	call	0x184	; 0x184 <SPI_set_ss>
  e4:	08 95       	ret

000000e6 <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 c2 00 	call	0x184	; 0x184 <SPI_set_ss>
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_transmit_receive>
	// Send 8-bit address
	SPI_transmit_receive(address);
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_transmit_receive>
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_transmit_receive>
 104:	c8 2f       	mov	r28, r24
	SPI_set_ss(1);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 c2 00 	call	0x184	; 0x184 <SPI_set_ss>
	return received;
}
 10e:	8c 2f       	mov	r24, r28
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <MCP_init>:


uint8_t MCP_init( void )
{
	//SPI_init();
	MCP_reset();
 114:	0e 94 67 00 	call	0xce	; 0xce <MCP_reset>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 118:	8e e0       	ldi	r24, 0x0E	; 14
 11a:	0e 94 73 00 	call	0xe6	; 0xe6 <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG){
 11e:	80 7e       	andi	r24, 0xE0	; 224
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	31 f0       	breq	.+12     	; 0x130 <MCP_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset\n");
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 3f 01 	call	0x27e	; 0x27e <puts>
		return 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret
	}
	
	return 0;
 130:	80 e0       	ldi	r24, 0x00	; 0
}
 132:	08 95       	ret

00000134 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	18 2f       	mov	r17, r24
 13c:	d6 2f       	mov	r29, r22
 13e:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 c2 00 	call	0x184	; 0x184 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 14e:	81 2f       	mov	r24, r17
 150:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 154:	8d 2f       	mov	r24, r29
 156:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_transmit_receive>
	SPI_transmit_receive(data);
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 bd 00 	call	0x17a	; 0x17a <SPI_transmit_receive>
	
	SPI_set_ss(1);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 c2 00 	call	0x184	; 0x184 <SPI_set_ss>
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	08 95       	ret

00000170 <SPI_init>:
#include <avr/io.h>

void SPI_init( void )
{
	// Enable SPI, Master, set clock rate
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 170:	81 e5       	ldi	r24, 0x51	; 81
 172:	8d b9       	out	0x0d, r24	; 13
	
	// Set MOSI, SCK and _SS output
	DDRB = (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
 174:	80 eb       	ldi	r24, 0xB0	; 176
 176:	87 bb       	out	0x17, r24	; 23
 178:	08 95       	ret

0000017a <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 17a:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while(!(SPSR & (1 << SPIF)));
 17c:	77 9b       	sbis	0x0e, 7	; 14
 17e:	fe cf       	rjmp	.-4      	; 0x17c <SPI_transmit_receive+0x2>
	
	return SPDR;
 180:	8f b1       	in	r24, 0x0f	; 15
}
 182:	08 95       	ret

00000184 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	if (val == 1){
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 05       	cpc	r25, r1
 188:	11 f4       	brne	.+4      	; 0x18e <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
 18a:	c4 9a       	sbi	0x18, 4	; 24
 18c:	08 95       	ret
	}
	else if (val == 0){
 18e:	89 2b       	or	r24, r25
 190:	09 f4       	brne	.+2      	; 0x194 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
 192:	c4 98       	cbi	0x18, 4	; 24
 194:	08 95       	ret

00000196 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 196:	5d 9b       	sbis	0x0b, 5	; 11
 198:	fe cf       	rjmp	.-4      	; 0x196 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 19a:	8c b9       	out	0x0c, r24	; 12
 19c:	08 95       	ret

0000019e <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A) & (1<<RXC0));  
 19e:	8b b1       	in	r24, 0x0b	; 11
	
	//Get and return received data from buffer
	return UDR0;  
 1a0:	8c b1       	in	r24, 0x0c	; 12
 1a2:	08 95       	ret

000001a4 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 1a4:	20 b5       	in	r18, 0x20	; 32
 1a6:	92 2b       	or	r25, r18
 1a8:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
 1aa:	99 b1       	in	r25, 0x09	; 9
 1ac:	89 2b       	or	r24, r25
 1ae:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 1b0:	8a b1       	in	r24, 0x0a	; 10
 1b2:	88 61       	ori	r24, 0x18	; 24
 1b4:	8a b9       	out	0x0a, r24	; 10
	/* 
	Set frame format: 8data, 2stop bit
	 */
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 1b6:	80 b5       	in	r24, 0x20	; 32
 1b8:	8e 68       	ori	r24, 0x8E	; 142
 1ba:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 1bc:	6f ec       	ldi	r22, 0xCF	; 207
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	8b ec       	ldi	r24, 0xCB	; 203
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <fdevopen>
 1c8:	08 95       	ret

000001ca <main>:
//#include <stdio.h>

int main( void ){
	
	// Initializations 
	UART_Init( MYUBRR );
 1ca:	8f e1       	ldi	r24, 0x1F	; 31
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <UART_Init>
	ADC_init();
 1d2:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	//JOY_init();
	//TOUCH_init();
	//OLED_init();
	//MENU_init();
	SPI_init();
 1d6:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_init>
	MCP_init();
 1da:	0e 94 8a 00 	call	0x114	; 0x114 <MCP_init>
	CAN_init();
 1de:	0e 94 61 00 	call	0xc2	; 0xc2 <CAN_init>
	
	
	

	return 0;
}
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret

000001e8 <fdevopen>:
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
 1f2:	8b 01       	movw	r16, r22
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	31 f4       	brne	.+12     	; 0x204 <fdevopen+0x1c>
 1f8:	61 15       	cp	r22, r1
 1fa:	71 05       	cpc	r23, r1
 1fc:	19 f4       	brne	.+6      	; 0x204 <fdevopen+0x1c>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	38 c0       	rjmp	.+112    	; 0x274 <fdevopen+0x8c>
 204:	6e e0       	ldi	r22, 0x0E	; 14
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <calloc>
 210:	fc 01       	movw	r30, r24
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	a1 f3       	breq	.-24     	; 0x1fe <fdevopen+0x16>
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	83 83       	std	Z+3, r24	; 0x03
 21a:	01 15       	cp	r16, r1
 21c:	11 05       	cpc	r17, r1
 21e:	71 f0       	breq	.+28     	; 0x23c <fdevopen+0x54>
 220:	13 87       	std	Z+11, r17	; 0x0b
 222:	02 87       	std	Z+10, r16	; 0x0a
 224:	81 e8       	ldi	r24, 0x81	; 129
 226:	83 83       	std	Z+3, r24	; 0x03
 228:	80 91 38 01 	lds	r24, 0x0138
 22c:	90 91 39 01 	lds	r25, 0x0139
 230:	89 2b       	or	r24, r25
 232:	21 f4       	brne	.+8      	; 0x23c <fdevopen+0x54>
 234:	f0 93 39 01 	sts	0x0139, r31
 238:	e0 93 38 01 	sts	0x0138, r30
 23c:	20 97       	sbiw	r28, 0x00	; 0
 23e:	c9 f0       	breq	.+50     	; 0x272 <fdevopen+0x8a>
 240:	d1 87       	std	Z+9, r29	; 0x09
 242:	c0 87       	std	Z+8, r28	; 0x08
 244:	83 81       	ldd	r24, Z+3	; 0x03
 246:	82 60       	ori	r24, 0x02	; 2
 248:	83 83       	std	Z+3, r24	; 0x03
 24a:	80 91 3a 01 	lds	r24, 0x013A
 24e:	90 91 3b 01 	lds	r25, 0x013B
 252:	89 2b       	or	r24, r25
 254:	71 f4       	brne	.+28     	; 0x272 <fdevopen+0x8a>
 256:	f0 93 3b 01 	sts	0x013B, r31
 25a:	e0 93 3a 01 	sts	0x013A, r30
 25e:	80 91 3c 01 	lds	r24, 0x013C
 262:	90 91 3d 01 	lds	r25, 0x013D
 266:	89 2b       	or	r24, r25
 268:	21 f4       	brne	.+8      	; 0x272 <fdevopen+0x8a>
 26a:	f0 93 3d 01 	sts	0x013D, r31
 26e:	e0 93 3c 01 	sts	0x013C, r30
 272:	cf 01       	movw	r24, r30
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <puts>:
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	e0 91 3a 01 	lds	r30, 0x013A
 28a:	f0 91 3b 01 	lds	r31, 0x013B
 28e:	23 81       	ldd	r18, Z+3	; 0x03
 290:	21 ff       	sbrs	r18, 1
 292:	1b c0       	rjmp	.+54     	; 0x2ca <puts+0x4c>
 294:	ec 01       	movw	r28, r24
 296:	00 e0       	ldi	r16, 0x00	; 0
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	89 91       	ld	r24, Y+
 29c:	60 91 3a 01 	lds	r22, 0x013A
 2a0:	70 91 3b 01 	lds	r23, 0x013B
 2a4:	db 01       	movw	r26, r22
 2a6:	18 96       	adiw	r26, 0x08	; 8
 2a8:	ed 91       	ld	r30, X+
 2aa:	fc 91       	ld	r31, X
 2ac:	19 97       	sbiw	r26, 0x09	; 9
 2ae:	88 23       	and	r24, r24
 2b0:	31 f0       	breq	.+12     	; 0x2be <puts+0x40>
 2b2:	09 95       	icall
 2b4:	89 2b       	or	r24, r25
 2b6:	89 f3       	breq	.-30     	; 0x29a <puts+0x1c>
 2b8:	0f ef       	ldi	r16, 0xFF	; 255
 2ba:	1f ef       	ldi	r17, 0xFF	; 255
 2bc:	ee cf       	rjmp	.-36     	; 0x29a <puts+0x1c>
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	09 95       	icall
 2c2:	89 2b       	or	r24, r25
 2c4:	11 f4       	brne	.+4      	; 0x2ca <puts+0x4c>
 2c6:	c8 01       	movw	r24, r16
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <puts+0x50>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	08 95       	ret

000002d8 <calloc>:
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	86 9f       	mul	r24, r22
 2e2:	80 01       	movw	r16, r0
 2e4:	87 9f       	mul	r24, r23
 2e6:	10 0d       	add	r17, r0
 2e8:	96 9f       	mul	r25, r22
 2ea:	10 0d       	add	r17, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	c8 01       	movw	r24, r16
 2f0:	0e 94 88 01 	call	0x310	; 0x310 <malloc>
 2f4:	ec 01       	movw	r28, r24
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	29 f0       	breq	.+10     	; 0x304 <calloc+0x2c>
 2fa:	a8 01       	movw	r20, r16
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	0e 94 af 02 	call	0x55e	; 0x55e <memset>
 304:	ce 01       	movw	r24, r28
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <malloc>:
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	91 05       	cpc	r25, r1
 318:	10 f4       	brcc	.+4      	; 0x31e <malloc+0xe>
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	e0 91 40 01 	lds	r30, 0x0140
 322:	f0 91 41 01 	lds	r31, 0x0141
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	a0 e0       	ldi	r26, 0x00	; 0
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	30 97       	sbiw	r30, 0x00	; 0
 330:	39 f1       	breq	.+78     	; 0x380 <malloc+0x70>
 332:	40 81       	ld	r20, Z
 334:	51 81       	ldd	r21, Z+1	; 0x01
 336:	48 17       	cp	r20, r24
 338:	59 07       	cpc	r21, r25
 33a:	b8 f0       	brcs	.+46     	; 0x36a <malloc+0x5a>
 33c:	48 17       	cp	r20, r24
 33e:	59 07       	cpc	r21, r25
 340:	71 f4       	brne	.+28     	; 0x35e <malloc+0x4e>
 342:	82 81       	ldd	r24, Z+2	; 0x02
 344:	93 81       	ldd	r25, Z+3	; 0x03
 346:	10 97       	sbiw	r26, 0x00	; 0
 348:	29 f0       	breq	.+10     	; 0x354 <malloc+0x44>
 34a:	13 96       	adiw	r26, 0x03	; 3
 34c:	9c 93       	st	X, r25
 34e:	8e 93       	st	-X, r24
 350:	12 97       	sbiw	r26, 0x02	; 2
 352:	2c c0       	rjmp	.+88     	; 0x3ac <malloc+0x9c>
 354:	90 93 41 01 	sts	0x0141, r25
 358:	80 93 40 01 	sts	0x0140, r24
 35c:	27 c0       	rjmp	.+78     	; 0x3ac <malloc+0x9c>
 35e:	21 15       	cp	r18, r1
 360:	31 05       	cpc	r19, r1
 362:	31 f0       	breq	.+12     	; 0x370 <malloc+0x60>
 364:	42 17       	cp	r20, r18
 366:	53 07       	cpc	r21, r19
 368:	18 f0       	brcs	.+6      	; 0x370 <malloc+0x60>
 36a:	a9 01       	movw	r20, r18
 36c:	db 01       	movw	r26, r22
 36e:	01 c0       	rjmp	.+2      	; 0x372 <malloc+0x62>
 370:	ef 01       	movw	r28, r30
 372:	9a 01       	movw	r18, r20
 374:	bd 01       	movw	r22, r26
 376:	df 01       	movw	r26, r30
 378:	02 80       	ldd	r0, Z+2	; 0x02
 37a:	f3 81       	ldd	r31, Z+3	; 0x03
 37c:	e0 2d       	mov	r30, r0
 37e:	d7 cf       	rjmp	.-82     	; 0x32e <malloc+0x1e>
 380:	21 15       	cp	r18, r1
 382:	31 05       	cpc	r19, r1
 384:	f9 f0       	breq	.+62     	; 0x3c4 <malloc+0xb4>
 386:	28 1b       	sub	r18, r24
 388:	39 0b       	sbc	r19, r25
 38a:	24 30       	cpi	r18, 0x04	; 4
 38c:	31 05       	cpc	r19, r1
 38e:	80 f4       	brcc	.+32     	; 0x3b0 <malloc+0xa0>
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	9b 81       	ldd	r25, Y+3	; 0x03
 394:	61 15       	cp	r22, r1
 396:	71 05       	cpc	r23, r1
 398:	21 f0       	breq	.+8      	; 0x3a2 <malloc+0x92>
 39a:	fb 01       	movw	r30, r22
 39c:	93 83       	std	Z+3, r25	; 0x03
 39e:	82 83       	std	Z+2, r24	; 0x02
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <malloc+0x9a>
 3a2:	90 93 41 01 	sts	0x0141, r25
 3a6:	80 93 40 01 	sts	0x0140, r24
 3aa:	fe 01       	movw	r30, r28
 3ac:	32 96       	adiw	r30, 0x02	; 2
 3ae:	44 c0       	rjmp	.+136    	; 0x438 <malloc+0x128>
 3b0:	fe 01       	movw	r30, r28
 3b2:	e2 0f       	add	r30, r18
 3b4:	f3 1f       	adc	r31, r19
 3b6:	81 93       	st	Z+, r24
 3b8:	91 93       	st	Z+, r25
 3ba:	22 50       	subi	r18, 0x02	; 2
 3bc:	31 09       	sbc	r19, r1
 3be:	39 83       	std	Y+1, r19	; 0x01
 3c0:	28 83       	st	Y, r18
 3c2:	3a c0       	rjmp	.+116    	; 0x438 <malloc+0x128>
 3c4:	20 91 3e 01 	lds	r18, 0x013E
 3c8:	30 91 3f 01 	lds	r19, 0x013F
 3cc:	23 2b       	or	r18, r19
 3ce:	41 f4       	brne	.+16     	; 0x3e0 <malloc+0xd0>
 3d0:	20 91 02 01 	lds	r18, 0x0102
 3d4:	30 91 03 01 	lds	r19, 0x0103
 3d8:	30 93 3f 01 	sts	0x013F, r19
 3dc:	20 93 3e 01 	sts	0x013E, r18
 3e0:	20 91 00 01 	lds	r18, 0x0100
 3e4:	30 91 01 01 	lds	r19, 0x0101
 3e8:	21 15       	cp	r18, r1
 3ea:	31 05       	cpc	r19, r1
 3ec:	41 f4       	brne	.+16     	; 0x3fe <malloc+0xee>
 3ee:	2d b7       	in	r18, 0x3d	; 61
 3f0:	3e b7       	in	r19, 0x3e	; 62
 3f2:	40 91 04 01 	lds	r20, 0x0104
 3f6:	50 91 05 01 	lds	r21, 0x0105
 3fa:	24 1b       	sub	r18, r20
 3fc:	35 0b       	sbc	r19, r21
 3fe:	e0 91 3e 01 	lds	r30, 0x013E
 402:	f0 91 3f 01 	lds	r31, 0x013F
 406:	e2 17       	cp	r30, r18
 408:	f3 07       	cpc	r31, r19
 40a:	a0 f4       	brcc	.+40     	; 0x434 <malloc+0x124>
 40c:	2e 1b       	sub	r18, r30
 40e:	3f 0b       	sbc	r19, r31
 410:	28 17       	cp	r18, r24
 412:	39 07       	cpc	r19, r25
 414:	78 f0       	brcs	.+30     	; 0x434 <malloc+0x124>
 416:	ac 01       	movw	r20, r24
 418:	4e 5f       	subi	r20, 0xFE	; 254
 41a:	5f 4f       	sbci	r21, 0xFF	; 255
 41c:	24 17       	cp	r18, r20
 41e:	35 07       	cpc	r19, r21
 420:	48 f0       	brcs	.+18     	; 0x434 <malloc+0x124>
 422:	4e 0f       	add	r20, r30
 424:	5f 1f       	adc	r21, r31
 426:	50 93 3f 01 	sts	0x013F, r21
 42a:	40 93 3e 01 	sts	0x013E, r20
 42e:	81 93       	st	Z+, r24
 430:	91 93       	st	Z+, r25
 432:	02 c0       	rjmp	.+4      	; 0x438 <malloc+0x128>
 434:	e0 e0       	ldi	r30, 0x00	; 0
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	cf 01       	movw	r24, r30
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <free>:
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	00 97       	sbiw	r24, 0x00	; 0
 446:	09 f4       	brne	.+2      	; 0x44a <free+0xa>
 448:	87 c0       	rjmp	.+270    	; 0x558 <__stack+0x59>
 44a:	fc 01       	movw	r30, r24
 44c:	32 97       	sbiw	r30, 0x02	; 2
 44e:	13 82       	std	Z+3, r1	; 0x03
 450:	12 82       	std	Z+2, r1	; 0x02
 452:	c0 91 40 01 	lds	r28, 0x0140
 456:	d0 91 41 01 	lds	r29, 0x0141
 45a:	20 97       	sbiw	r28, 0x00	; 0
 45c:	81 f4       	brne	.+32     	; 0x47e <free+0x3e>
 45e:	20 81       	ld	r18, Z
 460:	31 81       	ldd	r19, Z+1	; 0x01
 462:	28 0f       	add	r18, r24
 464:	39 1f       	adc	r19, r25
 466:	80 91 3e 01 	lds	r24, 0x013E
 46a:	90 91 3f 01 	lds	r25, 0x013F
 46e:	82 17       	cp	r24, r18
 470:	93 07       	cpc	r25, r19
 472:	79 f5       	brne	.+94     	; 0x4d2 <free+0x92>
 474:	f0 93 3f 01 	sts	0x013F, r31
 478:	e0 93 3e 01 	sts	0x013E, r30
 47c:	6d c0       	rjmp	.+218    	; 0x558 <__stack+0x59>
 47e:	de 01       	movw	r26, r28
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	ae 17       	cp	r26, r30
 486:	bf 07       	cpc	r27, r31
 488:	50 f4       	brcc	.+20     	; 0x49e <free+0x5e>
 48a:	12 96       	adiw	r26, 0x02	; 2
 48c:	4d 91       	ld	r20, X+
 48e:	5c 91       	ld	r21, X
 490:	13 97       	sbiw	r26, 0x03	; 3
 492:	9d 01       	movw	r18, r26
 494:	41 15       	cp	r20, r1
 496:	51 05       	cpc	r21, r1
 498:	09 f1       	breq	.+66     	; 0x4dc <free+0x9c>
 49a:	da 01       	movw	r26, r20
 49c:	f3 cf       	rjmp	.-26     	; 0x484 <free+0x44>
 49e:	b3 83       	std	Z+3, r27	; 0x03
 4a0:	a2 83       	std	Z+2, r26	; 0x02
 4a2:	40 81       	ld	r20, Z
 4a4:	51 81       	ldd	r21, Z+1	; 0x01
 4a6:	84 0f       	add	r24, r20
 4a8:	95 1f       	adc	r25, r21
 4aa:	8a 17       	cp	r24, r26
 4ac:	9b 07       	cpc	r25, r27
 4ae:	71 f4       	brne	.+28     	; 0x4cc <free+0x8c>
 4b0:	8d 91       	ld	r24, X+
 4b2:	9c 91       	ld	r25, X
 4b4:	11 97       	sbiw	r26, 0x01	; 1
 4b6:	84 0f       	add	r24, r20
 4b8:	95 1f       	adc	r25, r21
 4ba:	02 96       	adiw	r24, 0x02	; 2
 4bc:	91 83       	std	Z+1, r25	; 0x01
 4be:	80 83       	st	Z, r24
 4c0:	12 96       	adiw	r26, 0x02	; 2
 4c2:	8d 91       	ld	r24, X+
 4c4:	9c 91       	ld	r25, X
 4c6:	13 97       	sbiw	r26, 0x03	; 3
 4c8:	93 83       	std	Z+3, r25	; 0x03
 4ca:	82 83       	std	Z+2, r24	; 0x02
 4cc:	21 15       	cp	r18, r1
 4ce:	31 05       	cpc	r19, r1
 4d0:	29 f4       	brne	.+10     	; 0x4dc <free+0x9c>
 4d2:	f0 93 41 01 	sts	0x0141, r31
 4d6:	e0 93 40 01 	sts	0x0140, r30
 4da:	3e c0       	rjmp	.+124    	; 0x558 <__stack+0x59>
 4dc:	d9 01       	movw	r26, r18
 4de:	13 96       	adiw	r26, 0x03	; 3
 4e0:	fc 93       	st	X, r31
 4e2:	ee 93       	st	-X, r30
 4e4:	12 97       	sbiw	r26, 0x02	; 2
 4e6:	4d 91       	ld	r20, X+
 4e8:	5d 91       	ld	r21, X+
 4ea:	a4 0f       	add	r26, r20
 4ec:	b5 1f       	adc	r27, r21
 4ee:	ea 17       	cp	r30, r26
 4f0:	fb 07       	cpc	r31, r27
 4f2:	79 f4       	brne	.+30     	; 0x512 <__stack+0x13>
 4f4:	80 81       	ld	r24, Z
 4f6:	91 81       	ldd	r25, Z+1	; 0x01
 4f8:	84 0f       	add	r24, r20
 4fa:	95 1f       	adc	r25, r21
 4fc:	02 96       	adiw	r24, 0x02	; 2
 4fe:	d9 01       	movw	r26, r18
 500:	11 96       	adiw	r26, 0x01	; 1
 502:	9c 93       	st	X, r25
 504:	8e 93       	st	-X, r24
 506:	82 81       	ldd	r24, Z+2	; 0x02
 508:	93 81       	ldd	r25, Z+3	; 0x03
 50a:	13 96       	adiw	r26, 0x03	; 3
 50c:	9c 93       	st	X, r25
 50e:	8e 93       	st	-X, r24
 510:	12 97       	sbiw	r26, 0x02	; 2
 512:	e0 e0       	ldi	r30, 0x00	; 0
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	8a 81       	ldd	r24, Y+2	; 0x02
 518:	9b 81       	ldd	r25, Y+3	; 0x03
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	19 f0       	breq	.+6      	; 0x524 <__stack+0x25>
 51e:	fe 01       	movw	r30, r28
 520:	ec 01       	movw	r28, r24
 522:	f9 cf       	rjmp	.-14     	; 0x516 <__stack+0x17>
 524:	ce 01       	movw	r24, r28
 526:	02 96       	adiw	r24, 0x02	; 2
 528:	28 81       	ld	r18, Y
 52a:	39 81       	ldd	r19, Y+1	; 0x01
 52c:	82 0f       	add	r24, r18
 52e:	93 1f       	adc	r25, r19
 530:	20 91 3e 01 	lds	r18, 0x013E
 534:	30 91 3f 01 	lds	r19, 0x013F
 538:	28 17       	cp	r18, r24
 53a:	39 07       	cpc	r19, r25
 53c:	69 f4       	brne	.+26     	; 0x558 <__stack+0x59>
 53e:	30 97       	sbiw	r30, 0x00	; 0
 540:	29 f4       	brne	.+10     	; 0x54c <__stack+0x4d>
 542:	10 92 41 01 	sts	0x0141, r1
 546:	10 92 40 01 	sts	0x0140, r1
 54a:	02 c0       	rjmp	.+4      	; 0x550 <__stack+0x51>
 54c:	13 82       	std	Z+3, r1	; 0x03
 54e:	12 82       	std	Z+2, r1	; 0x02
 550:	d0 93 3f 01 	sts	0x013F, r29
 554:	c0 93 3e 01 	sts	0x013E, r28
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <memset>:
 55e:	dc 01       	movw	r26, r24
 560:	01 c0       	rjmp	.+2      	; 0x564 <memset+0x6>
 562:	6d 93       	st	X+, r22
 564:	41 50       	subi	r20, 0x01	; 1
 566:	50 40       	sbci	r21, 0x00	; 0
 568:	e0 f7       	brcc	.-8      	; 0x562 <memset+0x4>
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
