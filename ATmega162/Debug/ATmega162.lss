
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800100  00002ad6  00002b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  008003e8  008003e8  00002e52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e52  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000498  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003fe4  00000000  00000000  00003346  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019b3  00000000  00000000  0000732a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b7a  00000000  00000000  00008cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ba0  00000000  00000000  0000a858  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ce3  00000000  00000000  0000b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000217e  00000000  00000000  0000c0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000388  00000000  00000000  0000e259  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__ctors_end>
       4:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_1>
       8:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
       c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      10:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      14:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      18:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      1c:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_7>
      20:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      24:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      28:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__vector_10>
      2c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      30:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      34:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__vector_13>
      38:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      3c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      40:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      44:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      48:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      4c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      50:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      54:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      58:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      5c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      60:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      64:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      68:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      6c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	0c 0c       	add	r0, r12
      72:	0c 0c       	add	r0, r12
      74:	0c 0c       	add	r0, r12
      76:	0c 0c       	add	r0, r12
      78:	0c 0c       	add	r0, r12
      7a:	0c 0c       	add	r0, r12
      7c:	0c 0c       	add	r0, r12
      7e:	0c 0c       	add	r0, r12
      80:	0c 0c       	add	r0, r12
      82:	0c 0c       	add	r0, r12
      84:	0c 0c       	add	r0, r12
      86:	0c 0c       	add	r0, r12
      88:	0c 0c       	add	r0, r12
      8a:	0c 0c       	add	r0, r12
      8c:	0c 0c       	add	r0, r12
      8e:	0c 0c       	add	r0, r12
      90:	09 09       	sbc	r16, r9
      92:	09 0c       	add	r0, r9
      94:	0c 0c       	add	r0, r12
      96:	0c 0c       	add	r0, r12
      98:	0c 0c       	add	r0, r12
      9a:	0c 0c       	add	r0, r12
      9c:	0c 0c       	add	r0, r12
      9e:	0c 0c       	add	r0, r12
      a0:	0c 0c       	add	r0, r12
      a2:	0c 0c       	add	r0, r12
      a4:	0c 0c       	add	r0, r12
      a6:	0c 0c       	add	r0, r12
      a8:	0c 0c       	add	r0, r12
      aa:	0c 0c       	add	r0, r12
      ac:	0c 0c       	add	r0, r12
      ae:	0c 09       	sbc	r16, r12
      b0:	09 09       	sbc	r16, r9
      b2:	0c 0c       	add	r0, r12
      b4:	0c 0c       	add	r0, r12
      b6:	0c 0c       	add	r0, r12
      b8:	0c 0c       	add	r0, r12
      ba:	0c 0c       	add	r0, r12
      bc:	0c 0c       	add	r0, r12
      be:	00 00       	nop
      c0:	32 32       	cpi	r19, 0x22	; 34
      c2:	32 23       	and	r19, r18
      c4:	0f 32       	cpi	r16, 0x2F	; 47
      c6:	23 0f       	add	r18, r19
      c8:	41 32       	cpi	r20, 0x21	; 33
      ca:	32 32       	cpi	r19, 0x22	; 34
      cc:	32 23       	and	r19, r18
      ce:	0f 32       	cpi	r16, 0x2F	; 47
      d0:	23 0f       	add	r18, r19
      d2:	41 32       	cpi	r20, 0x21	; 33
      d4:	32 1e       	adc	r3, r18
      d6:	0f 32       	cpi	r16, 0x2F	; 47
      d8:	20 11       	cpse	r18, r0
      da:	0c 0c       	add	r0, r12
      dc:	19 20       	and	r1, r9
      de:	19 32       	cpi	r17, 0x29	; 41
      e0:	20 11       	cpse	r18, r0
      e2:	0c 0c       	add	r0, r12
      e4:	19 23       	and	r17, r25
      e6:	19 32       	cpi	r17, 0x29	; 41
      e8:	23 0c       	add	r2, r3
      ea:	32 25       	eor	r19, r2
      ec:	0c 41       	sbci	r16, 0x1C	; 28
      ee:	32 32       	cpi	r19, 0x22	; 34
      f0:	1e 0f       	add	r17, r30
      f2:	32 20       	and	r3, r2
      f4:	11 0c       	add	r1, r1
      f6:	0c 19       	sub	r16, r12
      f8:	20 19       	sub	r18, r0
      fa:	32 20       	and	r3, r2
      fc:	11 0c       	add	r1, r1
      fe:	0c 19       	sub	r16, r12
     100:	23 19       	sub	r18, r3
     102:	32 25       	eor	r19, r2
     104:	0c 32       	cpi	r16, 0x2C	; 44
     106:	25 0c       	add	r2, r5
     108:	41 41       	sbci	r20, 0x11	; 17
     10a:	00 00       	nop
     10c:	00 00       	nop
	...

00000110 <frequency>:
     110:	00 c0 24 44 00 c0 24 44 00 00 00 00 00 c0 24 44     ..$D..$D......$D
     120:	00 00 00 00 00 c0 02 44 00 c0 24 44 00 00 00 00     .......D..$D....
     130:	00 00 44 44 00 00 00 00 00 00 00 00 00 00 00 00     ..DD............
     140:	00 00 c4 43 00 00 00 00 00 00 00 00 00 00 00 00     ...C............
     150:	00 c0 02 44 00 00 00 00 00 00 00 00 00 00 c4 43     ...D...........C
	...
     168:	00 00 a5 43 00 00 00 00 00 00 00 00 00 00 dc 43     ...C...........C
     178:	00 00 00 00 00 00 f7 43 00 00 00 00 00 00 e9 43     .......C.......C
     188:	00 00 dc 43 00 00 00 00 00 00 c4 43 00 c0 24 44     ...C.......C..$D
     198:	00 00 44 44 00 00 5c 44 00 00 00 00 00 80 2e 44     ..DD..\D.......D
     1a8:	00 00 44 44 00 00 00 00 00 c0 24 44 00 00 00 00     ..DD......$D....
     1b8:	00 c0 02 44 00 c0 12 44 00 00 f7 43 00 00 00 00     ...D...D...C....
     1c8:	00 00 00 00 00 c0 02 44 00 00 00 00 00 00 00 00     .......D........
     1d8:	00 00 c4 43 00 00 00 00 00 00 00 00 00 00 a5 43     ...C...........C
	...
     1f0:	00 00 dc 43 00 00 00 00 00 00 f7 43 00 00 00 00     ...C.......C....
     200:	00 00 e9 43 00 00 dc 43 00 00 00 00 00 00 c4 43     ...C...C.......C
     210:	00 c0 24 44 00 00 44 44 00 00 5c 44 00 00 00 00     ..$D..DD..\D....
     220:	00 80 2e 44 00 00 44 44 00 00 00 00 00 c0 24 44     ...D..DD......$D
     230:	00 00 00 00 00 c0 02 44 00 c0 12 44 00 00 f7 43     .......D...D...C
	...
     250:	00 00 dc 43 00 00 dc 43 00 00 dc 43 00 80 ae 43     ...C...C...C...C
     260:	00 c0 02 44 00 00 dc 43 00 80 ae 43 00 c0 02 44     ...D...C...C...D
     270:	00 00 dc 43 00 00 00 00 00 c0 24 44 00 c0 24 44     ...C......$D..$D
     280:	00 c0 24 44 00 80 2e 44 00 c0 02 44 00 80 cf 43     ..$D...D...D...C
     290:	00 80 ae 43 00 c0 02 44 00 00 dc 43 00 00 00 00     ...C...D...C....
     2a0:	00 00 5c 44 00 00 dc 43 00 00 dc 43 00 00 5c 44     ..\D...C...C..\D
     2b0:	00 c0 4f 44 00 00 44 44 00 00 39 44 00 80 2e 44     ..OD..DD..9D...D
     2c0:	00 00 39 44 00 00 00 00 00 00 e9 43 00 80 1b 44     ..9D.......C...D
     2d0:	00 c0 12 44 00 80 0a 44 00 c0 02 44 00 00 f7 43     ...D...D...D...C
     2e0:	00 c0 02 44 00 00 00 00 00 80 ae 43 00 80 cf 43     ...D.......C...C
     2f0:	00 80 ae 43 00 00 dc 43 00 c0 02 44 00 00 dc 43     ...C...C...D...C
     300:	00 c0 02 44 00 c0 24 44 00 00 00 00 00 00 5c 44     ...D..$D......\D
     310:	00 00 dc 43 00 00 dc 43 00 00 5c 44 00 c0 4f 44     ...C...C..\D..OD
     320:	00 00 44 44 00 00 39 44 00 80 2e 44 00 00 39 44     ..DD..9D...D..9D
     330:	00 00 00 00 00 00 e9 43 00 80 1b 44 00 c0 12 44     .......C...D...D
     340:	00 80 0a 44 00 c0 02 44 00 00 f7 43 00 c0 02 44     ...D...D...C...D
     350:	00 00 00 00 00 80 ae 43 00 80 cf 43 00 80 ae 43     .......C...C...C
     360:	00 c0 02 44 00 00 dc 43 00 80 ae 43 00 c0 02 44     ...D...C...C...D
     370:	00 00 dc 43 00 00 00 00 00 00 00 00 00 00 00 00     ...C............
	...

00000390 <font5>:
     390:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     3a0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     3b0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     3c0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     3d0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     3e0:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     3f0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     400:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     410:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     420:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     430:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     440:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     450:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     460:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     470:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     480:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     490:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     4a0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     4b0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     4c0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     4d0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     4e0:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     4f0:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     500:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     510:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     520:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     530:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     540:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     550:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     560:	00 00 41 36 08 00 02 01 03 02 01 00                 ..A6........

0000056c <__ctors_end>:
     56c:	11 24       	eor	r1, r1
     56e:	1f be       	out	0x3f, r1	; 63
     570:	cf ef       	ldi	r28, 0xFF	; 255
     572:	d4 e0       	ldi	r29, 0x04	; 4
     574:	de bf       	out	0x3e, r29	; 62
     576:	cd bf       	out	0x3d, r28	; 61

00000578 <__do_copy_data>:
     578:	13 e0       	ldi	r17, 0x03	; 3
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b1 e0       	ldi	r27, 0x01	; 1
     57e:	e6 ed       	ldi	r30, 0xD6	; 214
     580:	fa e2       	ldi	r31, 0x2A	; 42
     582:	02 c0       	rjmp	.+4      	; 0x588 <__do_copy_data+0x10>
     584:	05 90       	lpm	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	a8 3e       	cpi	r26, 0xE8	; 232
     58a:	b1 07       	cpc	r27, r17
     58c:	d9 f7       	brne	.-10     	; 0x584 <__do_copy_data+0xc>

0000058e <__do_clear_bss>:
     58e:	24 e0       	ldi	r18, 0x04	; 4
     590:	a8 ee       	ldi	r26, 0xE8	; 232
     592:	b3 e0       	ldi	r27, 0x03	; 3
     594:	01 c0       	rjmp	.+2      	; 0x598 <.do_clear_bss_start>

00000596 <.do_clear_bss_loop>:
     596:	1d 92       	st	X+, r1

00000598 <.do_clear_bss_start>:
     598:	a4 31       	cpi	r26, 0x14	; 20
     59a:	b2 07       	cpc	r27, r18
     59c:	e1 f7       	brne	.-8      	; 0x596 <.do_clear_bss_loop>
     59e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <main>
     5a2:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <_exit>

000005a6 <__bad_interrupt>:
     5a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005aa <CAN_init>:
enum interrupt_flags interrupt_flag = no_flag; 


int CAN_init()
{
	MCP_init();
     5aa:	0e 94 1d 04 	call	0x83a	; 0x83a <MCP_init>
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     5ae:	40 e6       	ldi	r20, 0x60	; 96
     5b0:	60 e6       	ldi	r22, 0x60	; 96
     5b2:	80 e6       	ldi	r24, 0x60	; 96
     5b4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     5b8:	40 e6       	ldi	r20, 0x60	; 96
     5ba:	60 e6       	ldi	r22, 0x60	; 96
     5bc:	80 e7       	ldi	r24, 0x70	; 112
     5be:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     5c2:	44 e0       	ldi	r20, 0x04	; 4
     5c4:	64 e0       	ldi	r22, 0x04	; 4
     5c6:	80 e6       	ldi	r24, 0x60	; 96
     5c8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     5cc:	44 e0       	ldi	r20, 0x04	; 4
     5ce:	64 e0       	ldi	r22, 0x04	; 4
     5d0:	80 e7       	ldi	r24, 0x70	; 112
     5d2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	60 ee       	ldi	r22, 0xE0	; 224
     5da:	8f e0       	ldi	r24, 0x0F	; 15
     5dc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     5e0:	8e e0       	ldi	r24, 0x0E	; 14
     5e2:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     5e6:	80 7e       	andi	r24, 0xE0	; 224
     5e8:	61 f4       	brne	.+24     	; 0x602 <CAN_init+0x58>
		return 1;
	}
	
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
     5ea:	63 e0       	ldi	r22, 0x03	; 3
     5ec:	8b e2       	ldi	r24, 0x2B	; 43
     5ee:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (0 << ISC01) | (0 << ISC00);
     5f2:	85 b7       	in	r24, 0x35	; 53
     5f4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     5f6:	8b b7       	in	r24, 0x3b	; 59
     5f8:	80 64       	ori	r24, 0x40	; 64
     5fa:	8b bf       	out	0x3b, r24	; 59
	// Falling edge of INT2 generates interrupt request
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	08 95       	ret
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
	
	uint8_t value = MCP_read(MCP_CANSTAT);
	if ((value & MODE_MASK) != MODE_NORMAL){
		//printf("MCP2515 is NOT in normal mode after CAN init\n");
		return 1;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
}
     606:	08 95       	ret

00000608 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
     616:	fc 01       	movw	r30, r24
     618:	60 81       	ld	r22, Z
     61a:	71 81       	ldd	r23, Z+1	; 0x01
     61c:	76 95       	lsr	r23
     61e:	67 95       	ror	r22
     620:	76 95       	lsr	r23
     622:	67 95       	ror	r22
     624:	76 95       	lsr	r23
     626:	67 95       	ror	r22
     628:	81 e3       	ldi	r24, 0x31	; 49
     62a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
     62e:	f7 01       	movw	r30, r14
     630:	60 81       	ld	r22, Z
     632:	62 95       	swap	r22
     634:	66 0f       	add	r22, r22
     636:	60 7e       	andi	r22, 0xE0	; 224
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	83 e3       	ldi	r24, 0x33	; 51
     642:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	84 e3       	ldi	r24, 0x34	; 52
     64a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
     64e:	f7 01       	movw	r30, r14
     650:	62 81       	ldd	r22, Z+2	; 0x02
     652:	85 e3       	ldi	r24, 0x35	; 53
     654:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
     658:	f7 01       	movw	r30, r14
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	88 23       	and	r24, r24
     65e:	99 f0       	breq	.+38     	; 0x686 <CAN_msg_send+0x7e>
     660:	87 01       	movw	r16, r14
     662:	0d 5f       	subi	r16, 0xFD	; 253
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	c0 e0       	ldi	r28, 0x00	; 0
     668:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
     66a:	f8 01       	movw	r30, r16
     66c:	61 91       	ld	r22, Z+
     66e:	8f 01       	movw	r16, r30
     670:	8c 2f       	mov	r24, r28
     672:	8a 5c       	subi	r24, 0xCA	; 202
     674:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	f7 01       	movw	r30, r14
     67c:	22 81       	ldd	r18, Z+2	; 0x02
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	c2 17       	cp	r28, r18
     682:	d3 07       	cpc	r29, r19
     684:	94 f3       	brlt	.-28     	; 0x66a <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
     686:	81 e8       	ldi	r24, 0x81	; 129
     688:	0e 94 43 04 	call	0x886	; 0x886 <MCP_request_to_send>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <CAN_msg_receive>:

void CAN_msg_receive(can_msg *msg, uint8_t reg)
{
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	7c 01       	movw	r14, r24
     6ac:	c6 2f       	mov	r28, r22

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	86 0f       	add	r24, r22
     6b2:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6b6:	d8 2f       	mov	r29, r24
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	8c 0f       	add	r24, r28
     6bc:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6c0:	48 2f       	mov	r20, r24
     6c2:	42 95       	swap	r20
     6c4:	46 95       	lsr	r20
     6c6:	47 70       	andi	r20, 0x07	; 7
     6c8:	2d 2f       	mov	r18, r29
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	c9 01       	movw	r24, r18
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	84 2b       	or	r24, r20
     6dc:	f7 01       	movw	r30, r14
     6de:	91 83       	std	Z+1, r25	; 0x01
     6e0:	80 83       	st	Z, r24
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
     6e2:	85 e0       	ldi	r24, 0x05	; 5
     6e4:	8c 0f       	add	r24, r28
     6e6:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6ea:	8f 70       	andi	r24, 0x0F	; 15
     6ec:	f7 01       	movw	r30, r14
     6ee:	82 83       	std	Z+2, r24	; 0x02
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     6f0:	88 23       	and	r24, r24
     6f2:	f9 f0       	breq	.+62     	; 0x732 <CAN_msg_receive+0x98>
     6f4:	0f 2e       	mov	r0, r31
     6f6:	f6 e0       	ldi	r31, 0x06	; 6
     6f8:	df 2e       	mov	r13, r31
     6fa:	f0 2d       	mov	r31, r0
     6fc:	dc 0e       	add	r13, r28
     6fe:	87 01       	movw	r16, r14
     700:	0d 5f       	subi	r16, 0xFD	; 253
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	0f 2e       	mov	r0, r31
     706:	fe e0       	ldi	r31, 0x0E	; 14
     708:	cf 2e       	mov	r12, r31
     70a:	f0 2d       	mov	r31, r0
     70c:	cc 0e       	add	r12, r28
{

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
     70e:	c0 e0       	ldi	r28, 0x00	; 0
     710:	d0 e0       	ldi	r29, 0x00	; 0
	while( (i < msg->length) && (i < 8) ){
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
     712:	8d 2d       	mov	r24, r13
     714:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     718:	f8 01       	movw	r30, r16
     71a:	81 93       	st	Z+, r24
     71c:	8f 01       	movw	r16, r30
		i++;
     71e:	21 96       	adiw	r28, 0x01	; 1

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     720:	f7 01       	movw	r30, r14
     722:	22 81       	ldd	r18, Z+2	; 0x02
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	c2 17       	cp	r28, r18
     728:	d3 07       	cpc	r29, r19
     72a:	1c f4       	brge	.+6      	; 0x732 <CAN_msg_receive+0x98>
     72c:	d3 94       	inc	r13
     72e:	dc 10       	cpse	r13, r12
     730:	f0 cf       	rjmp	.-32     	; 0x712 <CAN_msg_receive+0x78>
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
		i++;
	}	
	
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	08 95       	ret

00000744 <CAN_handle_interrupt>:

void CAN_handle_interrupt(can_msg *msg)
{
	switch(interrupt_flag){
     744:	20 91 e8 03 	lds	r18, 0x03E8
     748:	21 30       	cpi	r18, 0x01	; 1
     74a:	41 f0       	breq	.+16     	; 0x75c <CAN_handle_interrupt+0x18>
     74c:	18 f0       	brcs	.+6      	; 0x754 <CAN_handle_interrupt+0x10>
     74e:	22 30       	cpi	r18, 0x02	; 2
     750:	59 f0       	breq	.+22     	; 0x768 <CAN_handle_interrupt+0x24>
     752:	08 95       	ret
		case no_flag:
			msg->data[0] = CAN_NO_MESSAGE;
     754:	2a e0       	ldi	r18, 0x0A	; 10
     756:	fc 01       	movw	r30, r24
     758:	23 83       	std	Z+3, r18	; 0x03
			break;
     75a:	08 95       	ret
		case RX0:
			CAN_msg_receive(msg, MCP_RXB0CTRL);
     75c:	60 e6       	ldi	r22, 0x60	; 96
     75e:	0e 94 4d 03 	call	0x69a	; 0x69a <CAN_msg_receive>
			interrupt_flag = no_flag;
     762:	10 92 e8 03 	sts	0x03E8, r1
			break;
     766:	08 95       	ret
		case RX1:
			CAN_msg_receive(msg, MCP_RXB1CTRL);
     768:	60 e7       	ldi	r22, 0x70	; 112
     76a:	0e 94 4d 03 	call	0x69a	; 0x69a <CAN_msg_receive>
			interrupt_flag = no_flag;
     76e:	10 92 e8 03 	sts	0x03E8, r1
     772:	08 95       	ret

00000774 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
     796:	8c e2       	ldi	r24, 0x2C	; 44
     798:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>

	if (interrupt & MCP_RX0IF){
     79c:	80 ff       	sbrs	r24, 0
     79e:	09 c0       	rjmp	.+18     	; 0x7b2 <__vector_1+0x3e>
		interrupt_flag = RX0;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 e8 03 	sts	0x03E8, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	8c e2       	ldi	r24, 0x2C	; 44
     7ac:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
     7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
     7b2:	81 ff       	sbrs	r24, 1
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__vector_1+0x52>
		interrupt_flag = RX1;
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	80 93 e8 03 	sts	0x03E8, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	62 e0       	ldi	r22, 0x02	; 2
     7c0:	8c e2       	ldi	r24, 0x2C	; 44
     7c2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	}
	
}
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
     7f0:	80 ec       	ldi	r24, 0xC0	; 192
     7f2:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f6:	85 ef       	ldi	r24, 0xF5	; 245
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <MCP_reset+0x12>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <MCP_reset+0x18>
     800:	00 00       	nop
	_delay_us(200);
	SPI_set_ss(1);
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
     80a:	08 95       	ret

0000080c <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
     80c:	cf 93       	push	r28
     80e:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	// Send 8-bit address
	SPI_transmit_receive(address);
     81e:	8c 2f       	mov	r24, r28
     820:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
     82a:	c8 2f       	mov	r28, r24
	SPI_set_ss(1);
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	return received;
}
     834:	8c 2f       	mov	r24, r28
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <MCP_init>:
#include <util/delay.h>


uint8_t MCP_init( void )
{
	SPI_init();
     83a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <SPI_init>
	MCP_reset();
     83e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <MCP_reset>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     842:	8e e0       	ldi	r24, 0x0E	; 14
     844:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
	
	if ((value & MODE_MASK) != MODE_CONFIG){
     848:	98 2f       	mov	r25, r24
     84a:	90 7e       	andi	r25, 0xE0	; 224
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 38       	cpi	r25, 0x80	; 128
     850:	09 f4       	brne	.+2      	; 0x854 <MCP_init+0x1a>
     852:	80 e0       	ldi	r24, 0x00	; 0
		//printf("MCP2515 is NOT in configuration mode after reset\n");
		return 1;
	}
	return 0;
}
     854:	08 95       	ret

00000856 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	d8 2f       	mov	r29, r24
     85c:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(address);
     86c:	8d 2f       	mov	r24, r29
     86e:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(data);
     872:	8c 2f       	mov	r24, r28
     874:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_set_ss(1);
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
     892:	8c 2f       	mov	r24, r28
     894:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_set_ss(1);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
}
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	18 2f       	mov	r17, r24
     8ac:	d6 2f       	mov	r29, r22
     8ae:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
     8be:	81 2f       	mov	r24, r17
     8c0:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(mask);
     8c4:	8d 2f       	mov	r24, r29
     8c6:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(data);
     8ca:	8c 2f       	mov	r24, r28
     8cc:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	
	SPI_set_ss(1);
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	08 95       	ret

000008e0 <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
     8e0:	87 b3       	in	r24, 0x17	; 23
     8e2:	80 6b       	ori	r24, 0xB0	; 176
     8e4:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
     8e6:	81 e1       	ldi	r24, 0x11	; 17
     8e8:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
     8ea:	6e 9a       	sbi	0x0d, 6	; 13
     8ec:	08 95       	ret

000008ee <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
     8ee:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
     8f0:	77 9b       	sbis	0x0e, 7	; 14
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <SPI_transmit_receive+0x2>
     8f4:	85 ef       	ldi	r24, 0xF5	; 245
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <SPI_transmit_receive+0xa>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <SPI_transmit_receive+0x10>
     8fe:	00 00       	nop
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
     900:	8f b1       	in	r24, 0x0f	; 15
	
}
     902:	08 95       	ret

00000904 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	91 05       	cpc	r25, r1
     908:	11 f4       	brne	.+4      	; 0x90e <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     90a:	c4 9a       	sbi	0x18, 4	; 24
     90c:	08 95       	ret
	}
	else if (val == 0){
     90e:	89 2b       	or	r24, r25
     910:	09 f4       	brne	.+2      	; 0x914 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     912:	c4 98       	cbi	0x18, 4	; 24
     914:	08 95       	ret

00000916 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
     916:	5d 9b       	sbis	0x0b, 5	; 11
     918:	fe cf       	rjmp	.-4      	; 0x916 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
     91a:	8c b9       	out	0x0c, r24	; 12
     91c:	08 95       	ret

0000091e <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
     91e:	5f 9b       	sbis	0x0b, 7	; 11
     920:	fe cf       	rjmp	.-4      	; 0x91e <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
     922:	8c b1       	in	r24, 0x0c	; 12
     924:	08 95       	ret

00000926 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
     926:	20 b5       	in	r18, 0x20	; 32
     928:	92 2b       	or	r25, r18
     92a:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
     92c:	99 b1       	in	r25, 0x09	; 9
     92e:	89 2b       	or	r24, r25
     930:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     932:	8a b1       	in	r24, 0x0a	; 10
     934:	88 61       	ori	r24, 0x18	; 24
     936:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     938:	80 b5       	in	r24, 0x20	; 32
     93a:	8e 68       	ori	r24, 0x8E	; 142
     93c:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
     93e:	6f e8       	ldi	r22, 0x8F	; 143
     940:	74 e0       	ldi	r23, 0x04	; 4
     942:	8b e8       	ldi	r24, 0x8B	; 139
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	0e 94 11 11 	call	0x2222	; 0x2222 <fdevopen>
     94a:	08 95       	ret

0000094c <BUZZ_init>:
{
	//// Set PE2 as output
	//DDRE |= (1 << PE2);
	
	//Timer3 - ctc mode
	TCCR3A &= ~(1 << COM3A1) & ~(1 << COM3A0) & ~(1 << WGM31) & ~(1 << WGM30);
     94c:	eb e8       	ldi	r30, 0x8B	; 139
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	8c 73       	andi	r24, 0x3C	; 60
     954:	80 83       	st	Z, r24
	TCCR3B &= ~(1 << WGM33);
     956:	ea e8       	ldi	r30, 0x8A	; 138
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8f 7e       	andi	r24, 0xEF	; 239
     95e:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32);
     960:	80 81       	ld	r24, Z
     962:	88 60       	ori	r24, 0x08	; 8
     964:	80 83       	st	Z, r24
	
	//Set the compare match interrupt enable
	ETIMSK |= (1 << OCIE3A);
     966:	ed e7       	ldi	r30, 0x7D	; 125
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	80 61       	ori	r24, 0x10	; 16
     96e:	80 83       	st	Z, r24
	
	PWM_init();
     970:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PWM_init>
     974:	08 95       	ret

00000976 <BUZZ_stop_song>:
	
	BUZZ_start_note(pgm_read_float(&frequency[current_song][0]),pgm_read_byte(&duration[current_song][0]));
}

void BUZZ_stop_song(){
	TCCR3B &= ~(1 << CS32) & ~(1 << CS31) & ~(1 << CS30);
     976:	ea e8       	ldi	r30, 0x8A	; 138
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	88 7f       	andi	r24, 0xF8	; 248
     97e:	80 83       	st	Z, r24
	PWM_start(0);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 dd 05 	call	0xbba	; 0xbba <PWM_start>
	current_song = 2;	
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	90 93 fc 03 	sts	0x03FC, r25
     98e:	80 93 fb 03 	sts	0x03FB, r24
     992:	08 95       	ret

00000994 <BUZZ_start_note>:
}

void BUZZ_start_note(float freq, uint8_t dur)
{
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	6b 01       	movw	r12, r22
     99e:	7c 01       	movw	r14, r24
	uint8_t match;
	
	switch(current_song){
     9a0:	80 91 fb 03 	lds	r24, 0x03FB
     9a4:	90 91 fc 03 	lds	r25, 0x03FC
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	19 f0       	breq	.+6      	; 0x9b2 <BUZZ_start_note+0x1e>
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	a1 f0       	breq	.+40     	; 0x9d8 <BUZZ_start_note+0x44>
     9b0:	26 c0       	rjmp	.+76     	; 0x9fe <BUZZ_start_note+0x6a>
		printf("Current song: %d\n", current_song);
		case 0:
		OCR3A = dur*49152000/(64000);
     9b2:	a4 2f       	mov	r26, r20
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	4e ee       	ldi	r20, 0xEE	; 238
     9bc:	52 e0       	ldi	r21, 0x02	; 2
     9be:	0e 94 c1 10 	call	0x2182	; 0x2182 <__muluhisi3>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	3a ef       	ldi	r19, 0xFA	; 250
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodsi4>
     9ce:	30 93 87 00 	sts	0x0087, r19
     9d2:	20 93 86 00 	sts	0x0086, r18
		break;
     9d6:	17 c0       	rjmp	.+46     	; 0xa06 <BUZZ_start_note+0x72>
		
		case 1:
		OCR3A = dur*49152000/(64000);
     9d8:	a4 2f       	mov	r26, r20
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	4e ee       	ldi	r20, 0xEE	; 238
     9e2:	52 e0       	ldi	r21, 0x02	; 2
     9e4:	0e 94 c1 10 	call	0x2182	; 0x2182 <__muluhisi3>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	3a ef       	ldi	r19, 0xFA	; 250
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodsi4>
     9f4:	30 93 87 00 	sts	0x0087, r19
     9f8:	20 93 86 00 	sts	0x0086, r18
		break;
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <BUZZ_start_note+0x72>
		
		default:
		OCR3A = 0;
     9fe:	10 92 87 00 	sts	0x0087, r1
     a02:	10 92 86 00 	sts	0x0086, r1
		break;
	}
	//printf("\t\tOCR3A: %x\n", OCR3A);
	//printf("Start note! Freq: %d \t Dur: %d\n", (int)freq, dur);
	if (freq == 0){
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	a9 01       	movw	r20, r18
     a0c:	c7 01       	movw	r24, r14
     a0e:	b6 01       	movw	r22, r12
     a10:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__cmpsf2>
     a14:	88 23       	and	r24, r24
     a16:	a1 f0       	breq	.+40     	; 0xa40 <BUZZ_start_note+0xac>
		match = 0;
	}
	else {
		match = 4915200/(64*2*freq);
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	53 e4       	ldi	r21, 0x43	; 67
     a20:	c7 01       	movw	r24, r14
     a22:	b6 01       	movw	r22, r12
     a24:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	86 e9       	ldi	r24, 0x96	; 150
     a32:	9a e4       	ldi	r25, 0x4A	; 74
     a34:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__divsf3>
     a38:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fixunssfsi>
     a3c:	86 2f       	mov	r24, r22
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <BUZZ_start_note+0xae>
		break;
	}
	//printf("\t\tOCR3A: %x\n", OCR3A);
	//printf("Start note! Freq: %d \t Dur: %d\n", (int)freq, dur);
	if (freq == 0){
		match = 0;
     a40:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		match = 4915200/(64*2*freq);
	}
	PWM_play(match);
     a42:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <PWM_play>
}
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <BUZZ_start_song>:
	
	PWM_init();
}

void BUZZ_start_song(int song)
{
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	ec 01       	movw	r28, r24
	number = 0;
     a56:	10 92 ea 03 	sts	0x03EA, r1
     a5a:	10 92 e9 03 	sts	0x03E9, r1
	PWM_start(1);
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	0e 94 dd 05 	call	0xbba	; 0xbba <PWM_start>
	
	// Set prescaler to 64
	TCCR3B &= ~(1 << CS32);
     a64:	ea e8       	ldi	r30, 0x8A	; 138
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	8b 7f       	andi	r24, 0xFB	; 251
     a6c:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS31) | (1 << CS30);
     a6e:	80 81       	ld	r24, Z
     a70:	83 60       	ori	r24, 0x03	; 3
     a72:	80 83       	st	Z, r24
	current_song = song;
     a74:	d0 93 fc 03 	sts	0x03FC, r29
     a78:	c0 93 fb 03 	sts	0x03FB, r28
	
	BUZZ_start_note(pgm_read_float(&frequency[current_song][0]),pgm_read_byte(&duration[current_song][0]));
     a7c:	80 e5       	ldi	r24, 0x50	; 80
     a7e:	8c 9f       	mul	r24, r28
     a80:	f0 01       	movw	r30, r0
     a82:	8d 9f       	mul	r24, r29
     a84:	f0 0d       	add	r31, r0
     a86:	11 24       	eor	r1, r1
     a88:	e0 59       	subi	r30, 0x90	; 144
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	44 91       	lpm	r20, Z
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	c8 9f       	mul	r28, r24
     a94:	f0 01       	movw	r30, r0
     a96:	c9 9f       	mul	r28, r25
     a98:	f0 0d       	add	r31, r0
     a9a:	d8 9f       	mul	r29, r24
     a9c:	f0 0d       	add	r31, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	e0 5f       	subi	r30, 0xF0	; 240
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	65 91       	lpm	r22, Z+
     aa6:	75 91       	lpm	r23, Z+
     aa8:	85 91       	lpm	r24, Z+
     aaa:	94 91       	lpm	r25, Z
     aac:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <__vector_7>:
	PWM_play(match);
}


ISR(TIMER3_COMPA_vect)
{
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
	if (current_song != 2){
     ad8:	80 91 fb 03 	lds	r24, 0x03FB
     adc:	90 91 fc 03 	lds	r25, 0x03FC
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	91 05       	cpc	r25, r1
     ae4:	09 f4       	brne	.+2      	; 0xae8 <__vector_7+0x32>
     ae6:	44 c0       	rjmp	.+136    	; 0xb70 <__vector_7+0xba>
		number++;
     ae8:	20 91 e9 03 	lds	r18, 0x03E9
     aec:	30 91 ea 03 	lds	r19, 0x03EA
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	30 93 ea 03 	sts	0x03EA, r19
     af8:	20 93 e9 03 	sts	0x03E9, r18
		switch(current_song){
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	21 f0       	breq	.+8      	; 0xb08 <__vector_7+0x52>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	91 05       	cpc	r25, r1
     b04:	49 f0       	breq	.+18     	; 0xb18 <__vector_7+0x62>
     b06:	0f c0       	rjmp	.+30     	; 0xb26 <__vector_7+0x70>
			case 0:
				if (number == 79){
     b08:	2f 34       	cpi	r18, 0x4F	; 79
     b0a:	31 05       	cpc	r19, r1
     b0c:	61 f4       	brne	.+24     	; 0xb26 <__vector_7+0x70>
					number = 0;
     b0e:	10 92 ea 03 	sts	0x03EA, r1
     b12:	10 92 e9 03 	sts	0x03E9, r1
     b16:	07 c0       	rjmp	.+14     	; 0xb26 <__vector_7+0x70>
				}
				break;
		
			case 1: // star wars
				if (number == 75){
     b18:	2b 34       	cpi	r18, 0x4B	; 75
     b1a:	31 05       	cpc	r19, r1
     b1c:	21 f4       	brne	.+8      	; 0xb26 <__vector_7+0x70>
					number = 0;
     b1e:	10 92 ea 03 	sts	0x03EA, r1
     b22:	10 92 e9 03 	sts	0x03E9, r1
				break;
		
			default:
				break;
		}
		BUZZ_start_note(pgm_read_float(&frequency[current_song][number]), pgm_read_byte(&duration[current_song][number]));
     b26:	20 91 e9 03 	lds	r18, 0x03E9
     b2a:	30 91 ea 03 	lds	r19, 0x03EA
     b2e:	40 e5       	ldi	r20, 0x50	; 80
     b30:	48 9f       	mul	r20, r24
     b32:	f0 01       	movw	r30, r0
     b34:	49 9f       	mul	r20, r25
     b36:	f0 0d       	add	r31, r0
     b38:	11 24       	eor	r1, r1
     b3a:	e2 0f       	add	r30, r18
     b3c:	f3 1f       	adc	r31, r19
     b3e:	e0 59       	subi	r30, 0x90	; 144
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	44 91       	lpm	r20, Z
     b44:	50 e5       	ldi	r21, 0x50	; 80
     b46:	58 9f       	mul	r21, r24
     b48:	f0 01       	movw	r30, r0
     b4a:	59 9f       	mul	r21, r25
     b4c:	f0 0d       	add	r31, r0
     b4e:	11 24       	eor	r1, r1
     b50:	2e 0f       	add	r18, r30
     b52:	3f 1f       	adc	r19, r31
     b54:	f9 01       	movw	r30, r18
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	e0 5f       	subi	r30, 0xF0	; 240
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	65 91       	lpm	r22, Z+
     b64:	75 91       	lpm	r23, Z+
     b66:	85 91       	lpm	r24, Z+
     b68:	94 91       	lpm	r25, Z
     b6a:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <__vector_7+0xc6>
	}
	else{
		BUZZ_start_note(0, 50);
     b70:	42 e3       	ldi	r20, 0x32	; 50
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	cb 01       	movw	r24, r22
     b78:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
	}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <PWM_init>:

void PWM_init(void)
{
	
	//Timer0-ctc mode and prescaler=64
	TCCR0 |= (1<<WGM01);
     b9e:	83 b7       	in	r24, 0x33	; 51
     ba0:	88 60       	ori	r24, 0x08	; 8
     ba2:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<WGM00);
     ba4:	83 b7       	in	r24, 0x33	; 51
     ba6:	8f 7b       	andi	r24, 0xBF	; 191
     ba8:	83 bf       	out	0x33, r24	; 51
	// Compare output mode: toggle OC0 on compare match
	TCCR0 |= (1 << COM00);
     baa:	83 b7       	in	r24, 0x33	; 51
     bac:	80 61       	ori	r24, 0x10	; 16
     bae:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << COM01);
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	8f 7d       	andi	r24, 0xDF	; 223
     bb4:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1 << PB0);
     bb6:	b8 9a       	sbi	0x17, 0	; 23
     bb8:	08 95       	ret

00000bba <PWM_start>:

}

void PWM_start(uint8_t start){
	if (start > 0){
     bba:	88 23       	and	r24, r24
     bbc:	39 f0       	breq	.+14     	; 0xbcc <PWM_start+0x12>
		// prescaler=64
		TCCR0 |= (1<<CS01) | (1<<CS00);
     bbe:	83 b7       	in	r24, 0x33	; 51
     bc0:	83 60       	ori	r24, 0x03	; 3
     bc2:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~(1<<CS02);
     bc4:	83 b7       	in	r24, 0x33	; 51
     bc6:	8b 7f       	andi	r24, 0xFB	; 251
     bc8:	83 bf       	out	0x33, r24	; 51
     bca:	08 95       	ret
	}
	else{
		TCCR0 &= ~(1<<CS02) & ~(1<<CS01) & ~(1<<CS00);
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	88 7f       	andi	r24, 0xF8	; 248
     bd0:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     bd2:	12 be       	out	0x32, r1	; 50
     bd4:	08 95       	ret

00000bd6 <PWM_play>:
	}
}

void PWM_play(uint8_t match){
     bd6:	cf 93       	push	r28
     bd8:	c8 2f       	mov	r28, r24
	
	if (match > 0){
     bda:	88 23       	and	r24, r24
     bdc:	69 f0       	breq	.+26     	; 0xbf8 <PWM_play+0x22>
		PWM_start(0);
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	0e 94 dd 05 	call	0xbba	; 0xbba <PWM_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be4:	89 e9       	ldi	r24, 0x99	; 153
     be6:	99 e0       	ldi	r25, 0x09	; 9
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <PWM_play+0x12>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <PWM_play+0x18>
		_delay_ms(2);
		OCR0 = match;
     bee:	c1 bf       	out	0x31, r28	; 49
		PWM_start(1);
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	0e 94 dd 05 	call	0xbba	; 0xbba <PWM_start>
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <PWM_play+0x28>
	}
	else{
		PWM_start(0);
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	0e 94 dd 05 	call	0xbba	; 0xbba <PWM_start>
	}
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	MCUCR |= (1 << SRE);
     c02:	85 b7       	in	r24, 0x35	; 53
     c04:	80 68       	ori	r24, 0x80	; 128
     c06:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     c08:	80 b7       	in	r24, 0x30	; 48
     c0a:	80 62       	ori	r24, 0x20	; 32
     c0c:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	DDRD &= ~(1 << PD3);
     c0e:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	08 95       	ret

00000c16 <ADC_read>:

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
     c16:	84 30       	cpi	r24, 0x04	; 4
     c18:	70 f4       	brcc	.+28     	; 0xc36 <ADC_read+0x20>
	*ext_adc = 0x04 | channel; // bitwise OR
     c1a:	84 60       	ori	r24, 0x04	; 4
     c1c:	80 93 00 14 	sts	0x1400, r24
	
	// wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
     c20:	83 99       	sbic	0x10, 3	; 16
     c22:	fe cf       	rjmp	.-4      	; 0xc20 <ADC_read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c24:	85 ef       	ldi	r24, 0xF5	; 245
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <ADC_read+0x12>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <ADC_read+0x18>
     c2e:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
     c30:	80 91 00 14 	lds	r24, 0x1400
     c34:	08 95       	ret

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
     c36:	80 e0       	ldi	r24, 0x00	; 0
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
	
}
     c38:	08 95       	ret

00000c3a <EEPROM_write>:
#include <avr/interrupt.h>


void EEPROM_write(uint8_t data, unsigned int address)
{
	cli();
     c3a:	f8 94       	cli
	
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     c3c:	e1 99       	sbic	0x1c, 1	; 28
     c3e:	fe cf       	rjmp	.-4      	; 0xc3c <EEPROM_write+0x2>
	
	// Set up address and data registers
	EEAR = address;
     c40:	7f bb       	out	0x1f, r23	; 31
     c42:	6e bb       	out	0x1e, r22	; 30
	EEDR = data;
     c44:	8d bb       	out	0x1d, r24	; 29
	
	// Write logical one to Master Write Enable
	EECR |= (1 << EEMWE);
     c46:	e2 9a       	sbi	0x1c, 2	; 28
	
	// Start eeprom write
	EECR |= (1 << EEWE);
     c48:	e1 9a       	sbi	0x1c, 1	; 28
	
	sei();
     c4a:	78 94       	sei
     c4c:	08 95       	ret

00000c4e <EEPROM_read>:
}

uint8_t EEPROM_read(unsigned int address)
{
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     c4e:	e1 99       	sbic	0x1c, 1	; 28
     c50:	fe cf       	rjmp	.-4      	; 0xc4e <EEPROM_read>
	
	// Set up address register
	EEAR = address;
     c52:	9f bb       	out	0x1f, r25	; 31
     c54:	8e bb       	out	0x1e, r24	; 30
	
	// Start eeprom read
	EECR |= (1 << EERE);
     c56:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     c58:	8d b3       	in	r24, 0x1d	; 29
     c5a:	08 95       	ret

00000c5c <SEND2CAN_init>:
uint8_t send2can_interrupt_flag = 0;

void SEND2CAN_init()
{
	// CTC mode, prescaler = 1024
	TCCR2 |= (1 << WGM21) | (1 << CS22) | (1 << CS21) | (1 << CS20);
     c5c:	87 b5       	in	r24, 0x27	; 39
     c5e:	8f 60       	ori	r24, 0x0F	; 15
     c60:	87 bd       	out	0x27, r24	; 39
	// Synchronous mode
	ASSR &= ~(1 << AS2);
     c62:	86 b5       	in	r24, 0x26	; 38
     c64:	87 7f       	andi	r24, 0xF7	; 247
     c66:	86 bd       	out	0x26, r24	; 38
	
	// Enable interrupt
	TIMSK |= (1 << OCIE2);
     c68:	89 b7       	in	r24, 0x39	; 57
     c6a:	80 61       	ori	r24, 0x10	; 16
     c6c:	89 bf       	out	0x39, r24	; 57
	
	// Compare match = 240 (f = 20 Hz)
	OCR2 = 0xF0;
     c6e:	80 ef       	ldi	r24, 0xF0	; 240
     c70:	82 bd       	out	0x22, r24	; 34
     c72:	08 95       	ret

00000c74 <SEND2CAN_send_joy_pos_x>:
		send2can_interrupt_flag = 0;
	}
}

void SEND2CAN_send_joy_pos_x()
{
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	2b 97       	sbiw	r28, 0x0b	; 11
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
	static JOY_position_t prev_joy_pos;
	JOY_position_t joy_pos = JOY_read_adc();
     c90:	0e 94 47 07 	call	0xe8e	; 0xe8e <JOY_read_adc>
     c94:	6b 01       	movw	r12, r22
     c96:	7c 01       	movw	r14, r24
	can_msg msg;
	if(abs(joy_pos.x - prev_joy_pos.x) > 5){
     c98:	80 91 f3 03 	lds	r24, 0x03F3
     c9c:	90 91 f4 03 	lds	r25, 0x03F4
     ca0:	97 01       	movw	r18, r14
     ca2:	28 1b       	sub	r18, r24
     ca4:	39 0b       	sbc	r19, r25
     ca6:	c9 01       	movw	r24, r18
     ca8:	99 23       	and	r25, r25
     caa:	24 f4       	brge	.+8      	; 0xcb4 <SEND2CAN_send_joy_pos_x+0x40>
     cac:	88 27       	eor	r24, r24
     cae:	99 27       	eor	r25, r25
     cb0:	82 1b       	sub	r24, r18
     cb2:	93 0b       	sbc	r25, r19
     cb4:	06 97       	sbiw	r24, 0x06	; 6
     cb6:	a4 f0       	brlt	.+40     	; 0xce0 <SEND2CAN_send_joy_pos_x+0x6c>
		msg.id = JOYSTICK_ID;
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_JOY_POS_X;
     cc0:	1c 82       	std	Y+4, r1	; 0x04
		msg.data[1] = joy_pos.x;
     cc2:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
		//printf("Sent joystick position (x): (%d) \n",msg.data[1]);
		prev_joy_pos = joy_pos;
     cd0:	c0 92 f1 03 	sts	0x03F1, r12
     cd4:	d0 92 f2 03 	sts	0x03F2, r13
     cd8:	e0 92 f3 03 	sts	0x03F3, r14
     cdc:	f0 92 f4 03 	sts	0x03F4, r15
	}
}
     ce0:	2b 96       	adiw	r28, 0x0b	; 11
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	08 95       	ret

00000cfa <SEND2CAN_send_slider_pos>:

void SEND2CAN_send_slider_pos()
{
     cfa:	cf 92       	push	r12
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	2b 97       	sbiw	r28, 0x0b	; 11
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
	static TOUCH_slider_pos_t prev_slider_pos;
	TOUCH_slider_pos_t slider_pos = TOUCH_get_slider_position();
     d16:	0e 94 a8 09 	call	0x1350	; 0x1350 <TOUCH_get_slider_position>
     d1a:	6b 01       	movw	r12, r22
     d1c:	7c 01       	movw	r14, r24
	can_msg msg;
	
	if(abs(slider_pos.right_slider - prev_slider_pos.right_slider) > 5){
     d1e:	80 91 ef 03 	lds	r24, 0x03EF
     d22:	90 91 f0 03 	lds	r25, 0x03F0
     d26:	97 01       	movw	r18, r14
     d28:	28 1b       	sub	r18, r24
     d2a:	39 0b       	sbc	r19, r25
     d2c:	c9 01       	movw	r24, r18
     d2e:	99 23       	and	r25, r25
     d30:	24 f4       	brge	.+8      	; 0xd3a <SEND2CAN_send_slider_pos+0x40>
     d32:	88 27       	eor	r24, r24
     d34:	99 27       	eor	r25, r25
     d36:	82 1b       	sub	r24, r18
     d38:	93 0b       	sbc	r25, r19
     d3a:	06 97       	sbiw	r24, 0x06	; 6
     d3c:	0c f1       	brlt	.+66     	; 0xd80 <SEND2CAN_send_slider_pos+0x86>
		msg.id = SLIDER_ID;
     d3e:	83 e0       	ldi	r24, 0x03	; 3
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_SLIDER_POS_R;
     d46:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = slider_pos.right_slider;
     d48:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
		printf("Sent slider position: (%d) \n",msg.data[1]);
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	1f 92       	push	r1
     d5a:	8f 93       	push	r24
     d5c:	88 e7       	ldi	r24, 0x78	; 120
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
		prev_slider_pos = slider_pos;
     d68:	c0 92 ed 03 	sts	0x03ED, r12
     d6c:	d0 92 ee 03 	sts	0x03EE, r13
     d70:	e0 92 ef 03 	sts	0x03EF, r14
     d74:	f0 92 f0 03 	sts	0x03F0, r15
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
	}
	
}
     d80:	2b 96       	adiw	r28, 0x0b	; 11
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	08 95       	ret

00000d9a <SEND2CAN_touch_button_pressed>:

void SEND2CAN_touch_button_pressed()
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	2b 97       	sbiw	r28, 0x0b	; 11
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
	static int prev_button_pressed;
	can_msg msg;
	
	int button_pressed = TOUCH_button();
     db2:	0e 94 88 09 	call	0x1310	; 0x1310 <TOUCH_button>
     db6:	8c 01       	movw	r16, r24
	if(button_pressed == 1 && prev_button_pressed == 0){
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	a1 f4       	brne	.+40     	; 0xde6 <SEND2CAN_touch_button_pressed+0x4c>
     dbe:	80 91 eb 03 	lds	r24, 0x03EB
     dc2:	90 91 ec 03 	lds	r25, 0x03EC
     dc6:	89 2b       	or	r24, r25
     dc8:	71 f4       	brne	.+28     	; 0xde6 <SEND2CAN_touch_button_pressed+0x4c>
		msg.id = TOUCH_BUTTON_ID;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_TOUCH_BUTTON;
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = button_pressed;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	8d 83       	std	Y+5, r24	; 0x05
		msg.length = 2;
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
		//printf("Sent button press (x): (%d) \n",msg.data[1]);
	}
	prev_button_pressed = button_pressed;
     de6:	10 93 ec 03 	sts	0x03EC, r17
     dea:	00 93 eb 03 	sts	0x03EB, r16
}
     dee:	2b 96       	adiw	r28, 0x0b	; 11
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <SEND2CAN_send_messages>:
	OCR2 = 0xF0;
}

void SEND2CAN_send_messages()
{
	if (send2can_interrupt_flag){
     e04:	80 91 f5 03 	lds	r24, 0x03F5
     e08:	88 23       	and	r24, r24
     e0a:	41 f0       	breq	.+16     	; 0xe1c <SEND2CAN_send_messages+0x18>
		SEND2CAN_send_joy_pos_x();
     e0c:	0e 94 3a 06 	call	0xc74	; 0xc74 <SEND2CAN_send_joy_pos_x>
		SEND2CAN_send_slider_pos();
     e10:	0e 94 7d 06 	call	0xcfa	; 0xcfa <SEND2CAN_send_slider_pos>
		SEND2CAN_touch_button_pressed();
     e14:	0e 94 cd 06 	call	0xd9a	; 0xd9a <SEND2CAN_touch_button_pressed>
		send2can_interrupt_flag = 0;
     e18:	10 92 f5 03 	sts	0x03F5, r1
     e1c:	08 95       	ret

00000e1e <SEND2CAN_send_speed>:
		//printf("Sent button press (x): (%d) \n",msg.data[1]);
	}
	prev_button_pressed = button_pressed;
}

void SEND2CAN_send_speed(int speed){
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	2b 97       	sbiw	r28, 0x0b	; 11
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	msg.id = GAME_SPEED_ID;
     e32:	25 e0       	ldi	r18, 0x05	; 5
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	3a 83       	std	Y+2, r19	; 0x02
     e38:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_SPEED;
     e3a:	96 e0       	ldi	r25, 0x06	; 6
     e3c:	9c 83       	std	Y+4, r25	; 0x04
	msg.data[1] = (uint8_t)speed;
     e3e:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
}
     e4c:	2b 96       	adiw	r28, 0x0b	; 11
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <__vector_10>:

ISR(TIMER2_COMP_vect){
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	8f 93       	push	r24
	send2can_interrupt_flag = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 f5 03 	sts	0x03F5, r24
}
     e70:	8f 91       	pop	r24
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <JOY_button>:
void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
}

int JOY_button(){
	return !(test_bit(PINB, PINB3));
     e7c:	86 b3       	in	r24, 0x16	; 22
     e7e:	86 95       	lsr	r24
     e80:	86 95       	lsr	r24
     e82:	86 95       	lsr	r24
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	89 27       	eor	r24, r25
}
     e88:	81 70       	andi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	08 95       	ret

00000e8e <JOY_read_adc>:

JOY_position_t JOY_read_adc( void ){
     e8e:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	0e 94 0b 06 	call	0xc16	; 0xc16 <ADC_read>
     e96:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e98:	8c ec       	ldi	r24, 0xCC	; 204
     e9a:	94 e0       	ldi	r25, 0x04	; 4
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <JOY_read_adc+0xe>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <JOY_read_adc+0x14>
     ea2:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 0b 06 	call	0xc16	; 0xc16 <ADC_read>
     eaa:	28 2f       	mov	r18, r24
	
	return pos;
     eac:	6c 2f       	mov	r22, r28
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	82 2f       	mov	r24, r18
     eb2:	90 e0       	ldi	r25, 0x00	; 0
}
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <JOY_calibrate>:
	set_bit(PORTB, PB3);
	
}

void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
     eb8:	0e 94 47 07 	call	0xe8e	; 0xe8e <JOY_read_adc>
     ebc:	60 93 fd 03 	sts	0x03FD, r22
     ec0:	70 93 fe 03 	sts	0x03FE, r23
     ec4:	80 93 ff 03 	sts	0x03FF, r24
     ec8:	90 93 00 04 	sts	0x0400, r25
     ecc:	08 95       	ret

00000ece <JOY_init>:

JOY_position_t neutral_pos; 


void JOY_init( void ){
	JOY_calibrate();
     ece:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <JOY_calibrate>
	
	// Initialize PORT B, pin 3 (joystick button) as input
	clear_bit(DDRB, PINB3);
     ed2:	bb 98       	cbi	0x17, 3	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB3);
     ed4:	c3 9a       	sbi	0x18, 3	; 24
     ed6:	08 95       	ret

00000ed8 <JOY_get_position>:
	pos.x = ADC_read(X_POS_CHANNEL);
	
	return pos;
}

JOY_position_t JOY_get_position(){
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
	JOY_position_t current_pos = JOY_read_adc();
     ede:	0e 94 47 07 	call	0xe8e	; 0xe8e <JOY_read_adc>
     ee2:	8b 01       	movw	r16, r22
     ee4:	9c 01       	movw	r18, r24
	
	JOY_position_t pos_percentage;
	pos_percentage.y = (current_pos.y - neutral_pos.y) * 100 / neutral_pos.y;
     ee6:	60 91 fd 03 	lds	r22, 0x03FD
     eea:	70 91 fe 03 	lds	r23, 0x03FE
     eee:	a8 01       	movw	r20, r16
     ef0:	46 1b       	sub	r20, r22
     ef2:	57 0b       	sbc	r21, r23
     ef4:	e4 e6       	ldi	r30, 0x64	; 100
     ef6:	e4 9f       	mul	r30, r20
     ef8:	c0 01       	movw	r24, r0
     efa:	e5 9f       	mul	r30, r21
     efc:	90 0d       	add	r25, r0
     efe:	11 24       	eor	r1, r1
     f00:	0e 94 8e 10 	call	0x211c	; 0x211c <__divmodhi4>
     f04:	c6 2f       	mov	r28, r22
     f06:	f7 2f       	mov	r31, r23
	pos_percentage.x = (current_pos.x - neutral_pos.x) * 100 / neutral_pos.x;
     f08:	60 91 ff 03 	lds	r22, 0x03FF
     f0c:	70 91 00 04 	lds	r23, 0x0400
     f10:	26 1b       	sub	r18, r22
     f12:	37 0b       	sbc	r19, r23
     f14:	e2 9f       	mul	r30, r18
     f16:	c0 01       	movw	r24, r0
     f18:	e3 9f       	mul	r30, r19
     f1a:	90 0d       	add	r25, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	0e 94 8e 10 	call	0x211c	; 0x211c <__divmodhi4>
     f22:	9b 01       	movw	r18, r22
     f24:	6c 39       	cpi	r22, 0x9C	; 156
     f26:	4f ef       	ldi	r20, 0xFF	; 255
     f28:	74 07       	cpc	r23, r20
     f2a:	14 f4       	brge	.+4      	; 0xf30 <JOY_get_position+0x58>
     f2c:	2c e9       	ldi	r18, 0x9C	; 156
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	8c 2f       	mov	r24, r28
     f32:	9f 2f       	mov	r25, r31
     f34:	8c 39       	cpi	r24, 0x9C	; 156
     f36:	4f ef       	ldi	r20, 0xFF	; 255
     f38:	94 07       	cpc	r25, r20
     f3a:	14 f4       	brge	.+4      	; 0xf40 <JOY_get_position+0x68>
     f3c:	8c e9       	ldi	r24, 0x9C	; 156
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
     f40:	ac 01       	movw	r20, r24
     f42:	85 36       	cpi	r24, 0x65	; 101
     f44:	91 05       	cpc	r25, r1
     f46:	14 f0       	brlt	.+4      	; 0xf4c <JOY_get_position+0x74>
     f48:	44 e6       	ldi	r20, 0x64	; 100
     f4a:	50 e0       	ldi	r21, 0x00	; 0
	else if (pos_percentage.x < -100) { pos_percentage.x = -100; }
	
	if (pos_percentage.y > 100) { pos_percentage.y = 100; }
	else if (pos_percentage.y < -100) { pos_percentage.y = -100; }

	return pos_percentage;
     f4c:	ba 01       	movw	r22, r20
     f4e:	25 36       	cpi	r18, 0x65	; 101
     f50:	31 05       	cpc	r19, r1
     f52:	14 f0       	brlt	.+4      	; 0xf58 <JOY_get_position+0x80>
     f54:	24 e6       	ldi	r18, 0x64	; 100
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	c9 01       	movw	r24, r18
}
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <JOY_get_direction>:

JOY_direction_t JOY_get_direction(){
	JOY_position_t current_pos = JOY_get_position();
     f62:	0e 94 6c 07 	call	0xed8	; 0xed8 <JOY_get_position>
     f66:	9b 01       	movw	r18, r22
     f68:	ac 01       	movw	r20, r24
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
     f6a:	fc 01       	movw	r30, r24
     f6c:	7d 96       	adiw	r30, 0x1d	; 29
     f6e:	fb 97       	sbiw	r30, 0x3b	; 59
     f70:	20 f4       	brcc	.+8      	; 0xf7a <JOY_get_direction+0x18>
     f72:	fb 01       	movw	r30, r22
     f74:	7d 96       	adiw	r30, 0x1d	; 29
     f76:	fb 97       	sbiw	r30, 0x3b	; 59
     f78:	d8 f0       	brcs	.+54     	; 0xfb0 <JOY_get_direction+0x4e>
		return NEUTRAL;
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
     f7a:	dc 01       	movw	r26, r24
     f7c:	55 23       	and	r21, r21
     f7e:	24 f4       	brge	.+8      	; 0xf88 <JOY_get_direction+0x26>
     f80:	aa 27       	eor	r26, r26
     f82:	bb 27       	eor	r27, r27
     f84:	a8 1b       	sub	r26, r24
     f86:	b9 0b       	sbc	r27, r25
     f88:	fb 01       	movw	r30, r22
     f8a:	33 23       	and	r19, r19
     f8c:	24 f4       	brge	.+8      	; 0xf96 <JOY_get_direction+0x34>
     f8e:	ee 27       	eor	r30, r30
     f90:	ff 27       	eor	r31, r31
     f92:	e6 1b       	sub	r30, r22
     f94:	f7 0b       	sbc	r31, r23
     f96:	ea 17       	cp	r30, r26
     f98:	fb 07       	cpc	r31, r27
     f9a:	2c f4       	brge	.+10     	; 0xfa6 <JOY_get_direction+0x44>
		if (current_pos.x > 0) { return RIGHT; }
     f9c:	14 16       	cp	r1, r20
     f9e:	15 06       	cpc	r1, r21
     fa0:	4c f4       	brge	.+18     	; 0xfb4 <JOY_get_direction+0x52>
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	08 95       	ret
		else { return LEFT; }
	}
	else {
		if (current_pos.y > 0) { return UP; }
     fa6:	12 16       	cp	r1, r18
     fa8:	13 06       	cpc	r1, r19
     faa:	34 f4       	brge	.+12     	; 0xfb8 <JOY_get_direction+0x56>
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	08 95       	ret

JOY_direction_t JOY_get_direction(){
	JOY_position_t current_pos = JOY_get_position();
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
		return NEUTRAL;
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	08 95       	ret
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
		if (current_pos.x > 0) { return RIGHT; }
		else { return LEFT; }
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	08 95       	ret
	}
	else {
		if (current_pos.y > 0) { return UP; }
		else { return DOWN; }
     fb8:	84 e0       	ldi	r24, 0x04	; 4
	}
     fba:	08 95       	ret

00000fbc <OLED_goto_column>:
}


void OLED_goto_column( uint8_t column )
{
	if (column < NUM_COLUMNS){
     fbc:	88 23       	and	r24, r24
     fbe:	8c f0       	brlt	.+34     	; 0xfe2 <OLED_goto_column+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     fc0:	e0 91 16 01 	lds	r30, 0x0116
     fc4:	f0 91 17 01 	lds	r31, 0x0117
     fc8:	91 e2       	ldi	r25, 0x21	; 33
     fca:	90 83       	st	Z, r25
     fcc:	e0 91 16 01 	lds	r30, 0x0116
     fd0:	f0 91 17 01 	lds	r31, 0x0117
     fd4:	80 83       	st	Z, r24
     fd6:	e0 91 16 01 	lds	r30, 0x0116
     fda:	f0 91 17 01 	lds	r31, 0x0117
     fde:	8f e7       	ldi	r24, 0x7F	; 127
     fe0:	80 83       	st	Z, r24
     fe2:	08 95       	ret

00000fe4 <OLED_goto_line>:
	}
}

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	98 f4       	brcc	.+38     	; 0x100e <OLED_goto_line+0x2a>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     fe8:	e0 91 16 01 	lds	r30, 0x0116
     fec:	f0 91 17 01 	lds	r31, 0x0117
     ff0:	92 e2       	ldi	r25, 0x22	; 34
     ff2:	90 83       	st	Z, r25

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
		OLED_write_command(SET_PAGE_ADDRESS);
		line = l;
     ff4:	80 93 f8 03 	sts	0x03F8, r24
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     ff8:	e0 91 16 01 	lds	r30, 0x0116
     ffc:	f0 91 17 01 	lds	r31, 0x0117
    1000:	80 83       	st	Z, r24
    1002:	e0 91 16 01 	lds	r30, 0x0116
    1006:	f0 91 17 01 	lds	r31, 0x0117
    100a:	87 e0       	ldi	r24, 0x07	; 7
    100c:	80 83       	st	Z, r24
    100e:	08 95       	ret

00001010 <OLED_pos>:
		OLED_write_command(7);
	}
}

void OLED_pos(uint8_t row, uint8_t column)
{
    1010:	cf 93       	push	r28
    1012:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
    1014:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <OLED_goto_line>
	OLED_goto_column(column);
    1018:	8c 2f       	mov	r24, r28
    101a:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_goto_column>
}
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <OLED_print_char>:
	}
}

void OLED_print_char( char character )
{	
	if ((character) == '\n'){
    1022:	8a 30       	cpi	r24, 0x0A	; 10
    1024:	39 f4       	brne	.+14     	; 0x1034 <OLED_print_char+0x12>
		OLED_pos((line + 1), 0);
    1026:	80 91 f8 03 	lds	r24, 0x03F8
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
    1032:	08 95       	ret
    1034:	e8 2f       	mov	r30, r24
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	b0 97       	sbiw	r30, 0x20	; 32
    103a:	cf 01       	movw	r24, r30
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	e8 0f       	add	r30, r24
    1046:	f9 1f       	adc	r31, r25
    1048:	e0 57       	subi	r30, 0x70	; 112
    104a:	fc 4f       	sbci	r31, 0xFC	; 252
	}
}

void OLED_print_char( char character )
{	
	if ((character) == '\n'){
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
			OLED_write_data(pgm_read_byte(&font5[character - ' '][i]));
    1050:	24 91       	lpm	r18, Z
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
    1052:	a0 91 14 01 	lds	r26, 0x0114
    1056:	b0 91 15 01 	lds	r27, 0x0115
    105a:	2c 93       	st	X, r18
{	
	if ((character) == '\n'){
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	31 96       	adiw	r30, 0x01	; 1
    1060:	85 30       	cpi	r24, 0x05	; 5
    1062:	91 05       	cpc	r25, r1
    1064:	a9 f7       	brne	.-22     	; 0x1050 <OLED_print_char+0x2e>
    1066:	08 95       	ret

00001068 <OLED_home>:
}

void OLED_home( void )
{
	// go "home", upper left corner
	OLED_pos(0, 0);
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
    1070:	08 95       	ret

00001072 <OLED_clear_line>:


void OLED_clear_line( uint8_t line )
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	
	// go through all columns
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
    1078:	80 e0       	ldi	r24, 0x00	; 0
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
    107a:	e0 91 14 01 	lds	r30, 0x0114
    107e:	f0 91 15 01 	lds	r31, 0x0115
    1082:	10 82       	st	Z, r1
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
	
	// go through all columns
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	80 38       	cpi	r24, 0x80	; 128
    1088:	c1 f7       	brne	.-16     	; 0x107a <OLED_clear_line+0x8>
		// write 8 bits to each column
		OLED_write_data(0x00);
	}
}
    108a:	08 95       	ret

0000108c <OLED_reset>:

void OLED_reset( void )
{
    108c:	cf 93       	push	r28
	// clear all lines
	for (uint8_t line = 0; line < NUM_LINES; line++){
    108e:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(line);
    1090:	8c 2f       	mov	r24, r28
    1092:	0e 94 39 08 	call	0x1072	; 0x1072 <OLED_clear_line>
}

void OLED_reset( void )
{
	// clear all lines
	for (uint8_t line = 0; line < NUM_LINES; line++){
    1096:	cf 5f       	subi	r28, 0xFF	; 255
    1098:	c8 30       	cpi	r28, 0x08	; 8
    109a:	d1 f7       	brne	.-12     	; 0x1090 <OLED_reset+0x4>
		OLED_clear_line(line);
	}
	
	// go home
	OLED_home();
    109c:	0e 94 34 08 	call	0x1068	; 0x1068 <OLED_home>
}
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <OLED_init>:
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    10a4:	e0 91 16 01 	lds	r30, 0x0116
    10a8:	f0 91 17 01 	lds	r31, 0x0117
    10ac:	8e ea       	ldi	r24, 0xAE	; 174
    10ae:	80 83       	st	Z, r24
    10b0:	e0 91 16 01 	lds	r30, 0x0116
    10b4:	f0 91 17 01 	lds	r31, 0x0117
    10b8:	81 ea       	ldi	r24, 0xA1	; 161
    10ba:	80 83       	st	Z, r24
    10bc:	e0 91 16 01 	lds	r30, 0x0116
    10c0:	f0 91 17 01 	lds	r31, 0x0117
    10c4:	8a ed       	ldi	r24, 0xDA	; 218
    10c6:	80 83       	st	Z, r24
    10c8:	e0 91 16 01 	lds	r30, 0x0116
    10cc:	f0 91 17 01 	lds	r31, 0x0117
    10d0:	82 e1       	ldi	r24, 0x12	; 18
    10d2:	80 83       	st	Z, r24
    10d4:	e0 91 16 01 	lds	r30, 0x0116
    10d8:	f0 91 17 01 	lds	r31, 0x0117
    10dc:	88 ec       	ldi	r24, 0xC8	; 200
    10de:	80 83       	st	Z, r24
    10e0:	e0 91 16 01 	lds	r30, 0x0116
    10e4:	f0 91 17 01 	lds	r31, 0x0117
    10e8:	88 ea       	ldi	r24, 0xA8	; 168
    10ea:	80 83       	st	Z, r24
    10ec:	e0 91 16 01 	lds	r30, 0x0116
    10f0:	f0 91 17 01 	lds	r31, 0x0117
    10f4:	8f e3       	ldi	r24, 0x3F	; 63
    10f6:	80 83       	st	Z, r24
    10f8:	e0 91 16 01 	lds	r30, 0x0116
    10fc:	f0 91 17 01 	lds	r31, 0x0117
    1100:	85 ed       	ldi	r24, 0xD5	; 213
    1102:	80 83       	st	Z, r24
    1104:	e0 91 16 01 	lds	r30, 0x0116
    1108:	f0 91 17 01 	lds	r31, 0x0117
    110c:	80 e8       	ldi	r24, 0x80	; 128
    110e:	80 83       	st	Z, r24
    1110:	e0 91 16 01 	lds	r30, 0x0116
    1114:	f0 91 17 01 	lds	r31, 0x0117
    1118:	81 e8       	ldi	r24, 0x81	; 129
    111a:	80 83       	st	Z, r24
    111c:	e0 91 16 01 	lds	r30, 0x0116
    1120:	f0 91 17 01 	lds	r31, 0x0117
    1124:	80 e5       	ldi	r24, 0x50	; 80
    1126:	80 83       	st	Z, r24
    1128:	e0 91 16 01 	lds	r30, 0x0116
    112c:	f0 91 17 01 	lds	r31, 0x0117
    1130:	89 ed       	ldi	r24, 0xD9	; 217
    1132:	80 83       	st	Z, r24
    1134:	e0 91 16 01 	lds	r30, 0x0116
    1138:	f0 91 17 01 	lds	r31, 0x0117
    113c:	81 e2       	ldi	r24, 0x21	; 33
    113e:	80 83       	st	Z, r24
    1140:	e0 91 16 01 	lds	r30, 0x0116
    1144:	f0 91 17 01 	lds	r31, 0x0117
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	80 83       	st	Z, r24
    114c:	e0 91 16 01 	lds	r30, 0x0116
    1150:	f0 91 17 01 	lds	r31, 0x0117
    1154:	10 82       	st	Z, r1
    1156:	e0 91 16 01 	lds	r30, 0x0116
    115a:	f0 91 17 01 	lds	r31, 0x0117
    115e:	8b ed       	ldi	r24, 0xDB	; 219
    1160:	80 83       	st	Z, r24
    1162:	e0 91 16 01 	lds	r30, 0x0116
    1166:	f0 91 17 01 	lds	r31, 0x0117
    116a:	80 e3       	ldi	r24, 0x30	; 48
    116c:	80 83       	st	Z, r24
    116e:	e0 91 16 01 	lds	r30, 0x0116
    1172:	f0 91 17 01 	lds	r31, 0x0117
    1176:	8d ea       	ldi	r24, 0xAD	; 173
    1178:	80 83       	st	Z, r24
    117a:	e0 91 16 01 	lds	r30, 0x0116
    117e:	f0 91 17 01 	lds	r31, 0x0117
    1182:	10 82       	st	Z, r1
    1184:	e0 91 16 01 	lds	r30, 0x0116
    1188:	f0 91 17 01 	lds	r31, 0x0117
    118c:	84 ea       	ldi	r24, 0xA4	; 164
    118e:	80 83       	st	Z, r24
    1190:	e0 91 16 01 	lds	r30, 0x0116
    1194:	f0 91 17 01 	lds	r31, 0x0117
    1198:	86 ea       	ldi	r24, 0xA6	; 166
    119a:	80 83       	st	Z, r24
    119c:	e0 91 16 01 	lds	r30, 0x0116
    11a0:	f0 91 17 01 	lds	r31, 0x0117
    11a4:	8f ea       	ldi	r24, 0xAF	; 175
    11a6:	80 83       	st	Z, r24
	OLED_write_command(ENTIRE_DISPLAY_ON);			  //out  follows  RAM  content

	OLED_write_command(SET_NORMAL_DISPLAY);
	OLED_write_command(DISPLAY_ON);
	
	OLED_reset();
    11a8:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    11ac:	e0 91 16 01 	lds	r30, 0x0116
    11b0:	f0 91 17 01 	lds	r31, 0x0117
    11b4:	83 ed       	ldi	r24, 0xD3	; 211
    11b6:	80 83       	st	Z, r24
    11b8:	e0 91 16 01 	lds	r30, 0x0116
    11bc:	f0 91 17 01 	lds	r31, 0x0117
    11c0:	10 82       	st	Z, r1
    11c2:	08 95       	ret

000011c4 <OLED_set_contrast>:
    11c4:	e0 91 16 01 	lds	r30, 0x0116
    11c8:	f0 91 17 01 	lds	r31, 0x0117
    11cc:	91 e8       	ldi	r25, 0x81	; 129
    11ce:	90 83       	st	Z, r25
    11d0:	e0 91 16 01 	lds	r30, 0x0116
    11d4:	f0 91 17 01 	lds	r31, 0x0117
    11d8:	80 83       	st	Z, r24
    11da:	08 95       	ret

000011dc <OLED_invert_screen>:
}

void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
    11dc:	80 91 f6 03 	lds	r24, 0x03F6
    11e0:	90 91 f7 03 	lds	r25, 0x03F7
    11e4:	89 2b       	or	r24, r25
    11e6:	69 f4       	brne	.+26     	; 0x1202 <OLED_invert_screen+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    11e8:	e0 91 16 01 	lds	r30, 0x0116
    11ec:	f0 91 17 01 	lds	r31, 0x0117
    11f0:	87 ea       	ldi	r24, 0xA7	; 167
    11f2:	80 83       	st	Z, r24
void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	90 93 f7 03 	sts	0x03F7, r25
    11fc:	80 93 f6 03 	sts	0x03F6, r24
    1200:	08 95       	ret
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    1202:	e0 91 16 01 	lds	r30, 0x0116
    1206:	f0 91 17 01 	lds	r31, 0x0117
    120a:	86 ea       	ldi	r24, 0xA6	; 166
    120c:	80 83       	st	Z, r24
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
		}else{
		OLED_write_command(SET_NORMAL_DISPLAY);
		inverted = 0;
    120e:	10 92 f7 03 	sts	0x03F7, r1
    1212:	10 92 f6 03 	sts	0x03F6, r1
    1216:	08 95       	ret

00001218 <OLED_printf>:
		OLED_print_char(c[i]);
		i++;
	}
}

void OLED_printf(const char* fmt, ...){
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	fe 01       	movw	r30, r28
    1222:	35 96       	adiw	r30, 0x05	; 5
    1224:	61 91       	ld	r22, Z+
    1226:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, fmt);
	vfprintf(&oled_stdout, fmt, args);
    1228:	af 01       	movw	r20, r30
    122a:	86 e0       	ldi	r24, 0x06	; 6
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <vfprintf>
	va_end(args);
}
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <OLED_print_arrow>:
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
    1238:	e0 91 14 01 	lds	r30, 0x0114
    123c:	f0 91 15 01 	lds	r31, 0x0115
    1240:	88 e1       	ldi	r24, 0x18	; 24
    1242:	80 83       	st	Z, r24
    1244:	e0 91 14 01 	lds	r30, 0x0114
    1248:	f0 91 15 01 	lds	r31, 0x0115
    124c:	80 83       	st	Z, r24
    124e:	e0 91 14 01 	lds	r30, 0x0114
    1252:	f0 91 15 01 	lds	r31, 0x0115
    1256:	80 83       	st	Z, r24
    1258:	e0 91 14 01 	lds	r30, 0x0114
    125c:	f0 91 15 01 	lds	r31, 0x0115
    1260:	80 83       	st	Z, r24
    1262:	e0 91 14 01 	lds	r30, 0x0114
    1266:	f0 91 15 01 	lds	r31, 0x0115
    126a:	80 83       	st	Z, r24
    126c:	e0 91 14 01 	lds	r30, 0x0114
    1270:	f0 91 15 01 	lds	r31, 0x0115
    1274:	9f ef       	ldi	r25, 0xFF	; 255
    1276:	90 83       	st	Z, r25
    1278:	e0 91 14 01 	lds	r30, 0x0114
    127c:	f0 91 15 01 	lds	r31, 0x0115
    1280:	9e e7       	ldi	r25, 0x7E	; 126
    1282:	90 83       	st	Z, r25
    1284:	e0 91 14 01 	lds	r30, 0x0114
    1288:	f0 91 15 01 	lds	r31, 0x0115
    128c:	9c e3       	ldi	r25, 0x3C	; 60
    128e:	90 83       	st	Z, r25
    1290:	e0 91 14 01 	lds	r30, 0x0114
    1294:	f0 91 15 01 	lds	r31, 0x0115
    1298:	80 83       	st	Z, r24
    129a:	e0 91 14 01 	lds	r30, 0x0114
    129e:	f0 91 15 01 	lds	r31, 0x0115
    12a2:	10 82       	st	Z, r1
    12a4:	08 95       	ret

000012a6 <TIMER_init>:

int current_time = 0;

void TIMER_init(){
	//CTC mode
	TCCR1B |= (1 << WGM12);
    12a6:	8e b5       	in	r24, 0x2e	; 46
    12a8:	88 60       	ori	r24, 0x08	; 8
    12aa:	8e bd       	out	0x2e, r24	; 46
	
	// Prescaler = 256
	TCCR1B |= (1 << CS12);
    12ac:	8e b5       	in	r24, 0x2e	; 46
    12ae:	84 60       	ori	r24, 0x04	; 4
    12b0:	8e bd       	out	0x2e, r24	; 46
	
	// Set output compare value
	OCR1A = 0x4B00;		// 19200, corresponds to match every second
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	9b e4       	ldi	r25, 0x4B	; 75
    12b6:	9b bd       	out	0x2b, r25	; 43
    12b8:	8a bd       	out	0x2a, r24	; 42
    12ba:	08 95       	ret

000012bc <__vector_13>:
	
	
}

ISR(TIMER1_COMPA_vect){
    12bc:	1f 92       	push	r1
    12be:	0f 92       	push	r0
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	0f 92       	push	r0
    12c4:	11 24       	eor	r1, r1
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
	current_time = current_time + 1;
    12ca:	80 91 f9 03 	lds	r24, 0x03F9
    12ce:	90 91 fa 03 	lds	r25, 0x03FA
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	90 93 fa 03 	sts	0x03FA, r25
    12d8:	80 93 f9 03 	sts	0x03F9, r24
}
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0
    12e6:	1f 90       	pop	r1
    12e8:	18 95       	reti

000012ea <TIMER_start>:

void TIMER_start()
{
	TIMSK |= (1 << OCIE1A);
    12ea:	89 b7       	in	r24, 0x39	; 57
    12ec:	80 64       	ori	r24, 0x40	; 64
    12ee:	89 bf       	out	0x39, r24	; 57
	current_time = 0;
    12f0:	10 92 fa 03 	sts	0x03FA, r1
    12f4:	10 92 f9 03 	sts	0x03F9, r1
    12f8:	08 95       	ret

000012fa <TIMER_stop>:
}

int TIMER_stop()
{
	TIMSK &= ~(1 << OCIE1A);
    12fa:	89 b7       	in	r24, 0x39	; 57
    12fc:	8f 7b       	andi	r24, 0xBF	; 191
    12fe:	89 bf       	out	0x39, r24	; 57
	return current_time;
    1300:	80 91 f9 03 	lds	r24, 0x03F9
    1304:	90 91 fa 03 	lds	r25, 0x03FA
    1308:	08 95       	ret

0000130a <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 1 and 2 as input
	clear_bit(DDRB, PINB1);
    130a:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
    130c:	ba 98       	cbi	0x17, 2	; 23
    130e:	08 95       	ret

00001310 <TOUCH_button>:
	
}

int TOUCH_button( void ){

	if (test_bit(PINB, PB1) || test_bit(PINB, PB2)){
    1310:	b1 99       	sbic	0x16, 1	; 22
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <TOUCH_button+0x10>
    1314:	86 b3       	in	r24, 0x16	; 22
		return 1;
    1316:	82 fb       	bst	r24, 2
    1318:	88 27       	eor	r24, r24
    131a:	80 f9       	bld	r24, 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	08 95       	ret
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    1324:	08 95       	ret

00001326 <TOUCH_read_adc>:

TOUCH_slider_pos_t TOUCH_read_adc( void ){
    1326:	cf 93       	push	r28
	TOUCH_slider_pos_t pos;
	pos.left_slider = ADC_read(LEFT_SLIDER_CHANNEL);
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	0e 94 0b 06 	call	0xc16	; 0xc16 <ADC_read>
    132e:	c8 2f       	mov	r28, r24
    1330:	8c ec       	ldi	r24, 0xCC	; 204
    1332:	94 e0       	ldi	r25, 0x04	; 4
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <TOUCH_read_adc+0xe>
    1338:	00 c0       	rjmp	.+0      	; 0x133a <TOUCH_read_adc+0x14>
    133a:	00 00       	nop
	_delay_ms(1);
	pos.right_slider = ADC_read(RIGHT_SLIDER_CHANNEL);
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	0e 94 0b 06 	call	0xc16	; 0xc16 <ADC_read>
    1342:	28 2f       	mov	r18, r24
	
	return pos;
    1344:	6c 2f       	mov	r22, r28
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	82 2f       	mov	r24, r18
    134a:	90 e0       	ldi	r25, 0x00	; 0
}
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <TOUCH_get_slider_position>:

TOUCH_slider_pos_t TOUCH_get_slider_position(){
	TOUCH_slider_pos_t current_pos = TOUCH_read_adc();
    1350:	0e 94 93 09 	call	0x1326	; 0x1326 <TOUCH_read_adc>
	return current_pos;
    1354:	08 95       	ret

00001356 <HIGHSCORE_load_from_eeprom>:
			}
		}
	 }
}

highscore_info_t HIGHSCORE_load_from_eeprom(int number){
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	2d 97       	sbiw	r28, 0x0d	; 13
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	5c 01       	movw	r10, r24
	highscore_info_t user;
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	8b 01       	movw	r16, r22
    1386:	00 0f       	add	r16, r16
    1388:	11 1f       	adc	r17, r17
    138a:	00 0f       	add	r16, r16
    138c:	11 1f       	adc	r17, r17
    138e:	00 0f       	add	r16, r16
    1390:	11 1f       	adc	r17, r17
    1392:	06 1b       	sub	r16, r22
    1394:	17 0b       	sbc	r17, r23
    1396:	78 01       	movw	r14, r16
    1398:	c8 01       	movw	r24, r16
    139a:	0e 94 27 06 	call	0xc4e	; 0xc4e <EEPROM_read>
    139e:	88 2e       	mov	r8, r24
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
    13a0:	c8 01       	movw	r24, r16
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	0e 94 27 06 	call	0xc4e	; 0xc4e <EEPROM_read>
	user.score = score_msb << 8 | score_lsb;
    13a8:	91 2c       	mov	r9, r1
    13aa:	98 2c       	mov	r9, r8
    13ac:	88 24       	eor	r8, r8
    13ae:	88 2a       	or	r8, r24
    13b0:	8e 01       	movw	r16, r28
    13b2:	0d 5f       	subi	r16, 0xFD	; 253
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	6e 01       	movw	r12, r28
    13b8:	8e e0       	ldi	r24, 0x0E	; 14
    13ba:	c8 0e       	add	r12, r24
    13bc:	d1 1c       	adc	r13, r1
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	e8 1a       	sub	r14, r24
    13c4:	f9 0a       	sbc	r15, r25
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
    13c6:	c7 01       	movw	r24, r14
    13c8:	80 0f       	add	r24, r16
    13ca:	91 1f       	adc	r25, r17
    13cc:	0e 94 27 06 	call	0xc4e	; 0xc4e <EEPROM_read>
    13d0:	f8 01       	movw	r30, r16
    13d2:	81 93       	st	Z+, r24
    13d4:	8f 01       	movw	r16, r30
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
	user.score = score_msb << 8 | score_lsb;
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    13d6:	ec 15       	cp	r30, r12
    13d8:	fd 05       	cpc	r31, r13
    13da:	a9 f7       	brne	.-22     	; 0x13c6 <HIGHSCORE_load_from_eeprom+0x70>
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
	return user;
    13dc:	9a 82       	std	Y+2, r9	; 0x02
    13de:	89 82       	std	Y+1, r8	; 0x01
    13e0:	8d e0       	ldi	r24, 0x0D	; 13
    13e2:	fe 01       	movw	r30, r28
    13e4:	31 96       	adiw	r30, 0x01	; 1
    13e6:	d5 01       	movw	r26, r10
    13e8:	01 90       	ld	r0, Z+
    13ea:	0d 92       	st	X+, r0
    13ec:	8a 95       	dec	r24
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <HIGHSCORE_load_from_eeprom+0x92>
}
    13f0:	c5 01       	movw	r24, r10
    13f2:	2d 96       	adiw	r28, 0x0d	; 13
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	af 90       	pop	r10
    1412:	9f 90       	pop	r9
    1414:	8f 90       	pop	r8
    1416:	08 95       	ret

00001418 <HIGHSCORE_load_to_eeprom>:

void HIGHSCORE_load_to_eeprom(uint16_t score, char *name, int number){
    1418:	cf 92       	push	r12
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	18 2f       	mov	r17, r24
    142a:	c6 2e       	mov	r12, r22
    142c:	d7 2e       	mov	r13, r23
	uint8_t score_lsb = score & 0xFF;
	uint8_t score_msb = score >> 8;
	EEPROM_write(score_msb, NUM_HIGHSCORE_BYTES*number);
    142e:	44 0f       	add	r20, r20
    1430:	55 1f       	adc	r21, r21
    1432:	ea 01       	movw	r28, r20
    1434:	cc 0f       	add	r28, r28
    1436:	dd 1f       	adc	r29, r29
    1438:	cc 0f       	add	r28, r28
    143a:	dd 1f       	adc	r29, r29
    143c:	cc 0f       	add	r28, r28
    143e:	dd 1f       	adc	r29, r29
    1440:	c4 1b       	sub	r28, r20
    1442:	d5 0b       	sbc	r29, r21
    1444:	7e 01       	movw	r14, r28
    1446:	be 01       	movw	r22, r28
    1448:	89 2f       	mov	r24, r25
    144a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <EEPROM_write>
	EEPROM_write(score_lsb, NUM_HIGHSCORE_BYTES*number + 1);
    144e:	be 01       	movw	r22, r28
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	81 2f       	mov	r24, r17
    1456:	0e 94 1d 06 	call	0xc3a	; 0xc3a <EEPROM_write>
    145a:	0c 2d       	mov	r16, r12
    145c:	1d 2d       	mov	r17, r13
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    145e:	c0 e0       	ldi	r28, 0x00	; 0
    1460:	d0 e0       	ldi	r29, 0x00	; 0
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	e8 0e       	add	r14, r24
    1466:	f1 1c       	adc	r15, r1
    1468:	b7 01       	movw	r22, r14
    146a:	6c 0f       	add	r22, r28
    146c:	7d 1f       	adc	r23, r29
		EEPROM_write(name[i], i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
    146e:	f8 01       	movw	r30, r16
    1470:	81 91       	ld	r24, Z+
    1472:	8f 01       	movw	r16, r30
    1474:	0e 94 1d 06 	call	0xc3a	; 0xc3a <EEPROM_write>
	uint8_t score_lsb = score & 0xFF;
	uint8_t score_msb = score >> 8;
	EEPROM_write(score_msb, NUM_HIGHSCORE_BYTES*number);
	EEPROM_write(score_lsb, NUM_HIGHSCORE_BYTES*number + 1);
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    1478:	21 96       	adiw	r28, 0x01	; 1
    147a:	cb 30       	cpi	r28, 0x0B	; 11
    147c:	d1 05       	cpc	r29, r1
    147e:	a1 f7       	brne	.-24     	; 0x1468 <HIGHSCORE_load_to_eeprom+0x50>
		EEPROM_write(name[i], i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
}
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	df 90       	pop	r13
    148e:	cf 90       	pop	r12
    1490:	08 95       	ret

00001492 <HIGHSCORE_add_score>:
#include <util/delay.h>
#include <stdlib.h>

//When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
    1492:	9f 92       	push	r9
    1494:	af 92       	push	r10
    1496:	bf 92       	push	r11
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	6a 97       	sbiw	r28, 0x1a	; 26
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	7c 01       	movw	r14, r24
    14ba:	a6 2e       	mov	r10, r22
    14bc:	97 2e       	mov	r9, r23
    14be:	6a 01       	movw	r12, r20
	highscore_info_t element;
	 for (int i = start; i < MAX_SCORES; i++){
    14c0:	46 30       	cpi	r20, 0x06	; 6
    14c2:	51 05       	cpc	r21, r1
    14c4:	0c f0       	brlt	.+2      	; 0x14c8 <HIGHSCORE_add_score+0x36>
    14c6:	5b c0       	rjmp	.+182    	; 0x157e <HIGHSCORE_add_score+0xec>
    14c8:	8a 01       	movw	r16, r20
		element = HIGHSCORE_load_from_eeprom(i);
    14ca:	0f 2e       	mov	r0, r31
    14cc:	fd e0       	ldi	r31, 0x0D	; 13
    14ce:	bf 2e       	mov	r11, r31
    14d0:	f0 2d       	mov	r31, r0
    14d2:	b8 01       	movw	r22, r16
    14d4:	ce 01       	movw	r24, r28
    14d6:	0e 96       	adiw	r24, 0x0e	; 14
    14d8:	0e 94 ab 09 	call	0x1356	; 0x1356 <HIGHSCORE_load_from_eeprom>
    14dc:	fe 01       	movw	r30, r28
    14de:	3e 96       	adiw	r30, 0x0e	; 14
    14e0:	de 01       	movw	r26, r28
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	8b 2d       	mov	r24, r11
    14e6:	01 90       	ld	r0, Z+
    14e8:	0d 92       	st	X+, r0
    14ea:	8a 95       	dec	r24
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <HIGHSCORE_add_score+0x54>
		if  (element.score == 0){
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	39 f4       	brne	.+14     	; 0x1504 <HIGHSCORE_add_score+0x72>
			HIGHSCORE_load_to_eeprom(score, name, i);
    14f6:	a8 01       	movw	r20, r16
    14f8:	6a 2d       	mov	r22, r10
    14fa:	79 2d       	mov	r23, r9
    14fc:	c7 01       	movw	r24, r14
    14fe:	0e 94 0c 0a 	call	0x1418	; 0x1418 <HIGHSCORE_load_to_eeprom>
			break;
    1502:	3d c0       	rjmp	.+122    	; 0x157e <HIGHSCORE_add_score+0xec>
		}
		else if (element.score < score){
    1504:	8e 15       	cp	r24, r14
    1506:	9f 05       	cpc	r25, r15
    1508:	78 f4       	brcc	.+30     	; 0x1528 <HIGHSCORE_add_score+0x96>
			//score take this place and push the rest one back in the list
			HIGHSCORE_add_score(element.score, element.name, i + 1);
    150a:	a8 01       	movw	r20, r16
    150c:	4f 5f       	subi	r20, 0xFF	; 255
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	be 01       	movw	r22, r28
    1512:	6d 5f       	subi	r22, 0xFD	; 253
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	0e 94 49 0a 	call	0x1492	; 0x1492 <HIGHSCORE_add_score>
			HIGHSCORE_load_to_eeprom(score, name, i);
    151a:	a8 01       	movw	r20, r16
    151c:	6a 2d       	mov	r22, r10
    151e:	79 2d       	mov	r23, r9
    1520:	c7 01       	movw	r24, r14
    1522:	0e 94 0c 0a 	call	0x1418	; 0x1418 <HIGHSCORE_load_to_eeprom>
			break;
    1526:	2b c0       	rjmp	.+86     	; 0x157e <HIGHSCORE_add_score+0xec>
		}
		else if (element.score > score){
    1528:	e8 16       	cp	r14, r24
    152a:	f9 06       	cpc	r15, r25
    152c:	10 f5       	brcc	.+68     	; 0x1572 <HIGHSCORE_add_score+0xe0>
			if (start == 0 && i == MAX_SCORES-1){
    152e:	c1 14       	cp	r12, r1
    1530:	d1 04       	cpc	r13, r1
    1532:	f9 f4       	brne	.+62     	; 0x1572 <HIGHSCORE_add_score+0xe0>
    1534:	05 30       	cpi	r16, 0x05	; 5
    1536:	11 05       	cpc	r17, r1
    1538:	e1 f4       	brne	.+56     	; 0x1572 <HIGHSCORE_add_score+0xe0>
				OLED_reset();
    153a:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
				OLED_pos(4,0);
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	84 e0       	ldi	r24, 0x04	; 4
    1542:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
				OLED_printf(" %s is \n not in the top 6", name);
    1546:	9f 92       	push	r9
    1548:	af 92       	push	r10
    154a:	85 e9       	ldi	r24, 0x95	; 149
    154c:	92 e0       	ldi	r25, 0x02	; 2
    154e:	9f 93       	push	r25
    1550:	8f 93       	push	r24
    1552:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	2c e2       	ldi	r18, 0x2C	; 44
    155c:	81 50       	subi	r24, 0x01	; 1
    155e:	90 40       	sbci	r25, 0x00	; 0
    1560:	20 40       	sbci	r18, 0x00	; 0
    1562:	e1 f7       	brne	.-8      	; 0x155c <HIGHSCORE_add_score+0xca>
    1564:	00 c0       	rjmp	.+0      	; 0x1566 <HIGHSCORE_add_score+0xd4>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <HIGHSCORE_add_score+0xd6>
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	06 c0       	rjmp	.+12     	; 0x157e <HIGHSCORE_add_score+0xec>

//When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
	highscore_info_t element;
	 for (int i = start; i < MAX_SCORES; i++){
    1572:	0f 5f       	subi	r16, 0xFF	; 255
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	06 30       	cpi	r16, 0x06	; 6
    1578:	11 05       	cpc	r17, r1
    157a:	09 f0       	breq	.+2      	; 0x157e <HIGHSCORE_add_score+0xec>
    157c:	aa cf       	rjmp	.-172    	; 0x14d2 <HIGHSCORE_add_score+0x40>
				OLED_printf(" %s is \n not in the top 6", name);
				_delay_ms(3000);
			}
		}
	 }
}
    157e:	6a 96       	adiw	r28, 0x1a	; 26
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	bf 90       	pop	r11
    159c:	af 90       	pop	r10
    159e:	9f 90       	pop	r9
    15a0:	08 95       	ret

000015a2 <HIGHSCORE_highlight_letter>:
	username[NUM_USERNAME_BYTES - 1] = '\0';
	
}

void HIGHSCORE_highlight_letter(int line, int prev_line)
{
    15a2:	cf 93       	push	r28
    15a4:	c8 2f       	mov	r28, r24
    15a6:	86 2f       	mov	r24, r22
	OLED_pos(prev_line, 0);
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_printf("  ");
    15ae:	2f ea       	ldi	r18, 0xAF	; 175
    15b0:	32 e0       	ldi	r19, 0x02	; 2
    15b2:	3f 93       	push	r19
    15b4:	2f 93       	push	r18
    15b6:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
	OLED_pos(line, 0);
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	8c 2f       	mov	r24, r28
    15be:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_print_arrow();
    15c2:	0e 94 1c 09 	call	0x1238	; 0x1238 <OLED_print_arrow>
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
	
}
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <HIGHSCORE_print_character_list>:

void HIGHSCORE_print_character_list(char start){
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	d8 2e       	mov	r13, r24
	OLED_reset();
    15de:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
    15e2:	22 eb       	ldi	r18, 0xB2	; 178
    15e4:	32 e0       	ldi	r19, 0x02	; 2
    15e6:	3f 93       	push	r19
    15e8:	2f 93       	push	r18
    15ea:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
	for (char c = start; c < start + 7; c++){
    15ee:	cd 2d       	mov	r28, r13
    15f0:	d0 e0       	ldi	r29, 0x00	; 0
    15f2:	7e 01       	movw	r14, r28
    15f4:	87 e0       	ldi	r24, 0x07	; 7
    15f6:	e8 0e       	add	r14, r24
    15f8:	f1 1c       	adc	r15, r1
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	ce 15       	cp	r28, r14
    1600:	df 05       	cpc	r29, r15
    1602:	ac f4       	brge	.+42     	; 0x162e <HIGHSCORE_print_character_list+0x60>
		OLED_goto_column(11);
		OLED_printf("%c\n", c);
    1604:	0d ec       	ldi	r16, 0xCD	; 205
    1606:	12 e0       	ldi	r17, 0x02	; 2

void HIGHSCORE_print_character_list(char start){
	OLED_reset();
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
	for (char c = start; c < start + 7; c++){
		OLED_goto_column(11);
    1608:	8b e0       	ldi	r24, 0x0B	; 11
    160a:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_goto_column>
		OLED_printf("%c\n", c);
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	1f 93       	push	r17
    1614:	0f 93       	push	r16
    1616:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
}

void HIGHSCORE_print_character_list(char start){
	OLED_reset();
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
	for (char c = start; c < start + 7; c++){
    161a:	d3 94       	inc	r13
    161c:	cd 2d       	mov	r28, r13
    161e:	d0 e0       	ldi	r29, 0x00	; 0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	ce 15       	cp	r28, r14
    162a:	df 05       	cpc	r29, r15
    162c:	6c f3       	brlt	.-38     	; 0x1608 <HIGHSCORE_print_character_list+0x3a>
		OLED_goto_column(11);
		OLED_printf("%c\n", c);
	}
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	08 95       	ret

0000163e <HIGHSCORE_get_username>:
	}
}


void HIGHSCORE_get_username(char* username)
{
    163e:	8f 92       	push	r8
    1640:	9f 92       	push	r9
    1642:	af 92       	push	r10
    1644:	bf 92       	push	r11
    1646:	cf 92       	push	r12
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	7c 01       	movw	r14, r24
	int i = 0;
	int line = 1;
	int prev_line = 1;
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
    1654:	81 e6       	ldi	r24, 0x61	; 97
    1656:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <HIGHSCORE_print_character_list>
	HIGHSCORE_highlight_letter(line, prev_line);
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <HIGHSCORE_highlight_letter>
void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
	int prev_line = 1;
	char ch = 'a';
    1666:	11 e6       	ldi	r17, 0x61	; 97

void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
	int prev_line = 1;
    1668:	bb 24       	eor	r11, r11
    166a:	b3 94       	inc	r11
    166c:	c1 2c       	mov	r12, r1


void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
    166e:	c1 e0       	ldi	r28, 0x01	; 1
    1670:	d0 e0       	ldi	r29, 0x00	; 0
}


void HIGHSCORE_get_username(char* username)
{
	int i = 0;
    1672:	81 2c       	mov	r8, r1
    1674:	91 2c       	mov	r9, r1
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
	HIGHSCORE_highlight_letter(line, prev_line);
	
	while(i < NUM_USERNAME_BYTES - 1){
		if (JOY_button()){
    1676:	0e 94 3e 07 	call	0xe7c	; 0xe7c <JOY_button>
    167a:	89 2b       	or	r24, r25
    167c:	59 f0       	breq	.+22     	; 0x1694 <HIGHSCORE_get_username+0x56>
			while(JOY_button());
    167e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <JOY_button>
    1682:	89 2b       	or	r24, r25
    1684:	e1 f7       	brne	.-8      	; 0x167e <HIGHSCORE_get_username+0x40>
			username[i] = ch;
    1686:	f7 01       	movw	r30, r14
    1688:	e8 0d       	add	r30, r8
    168a:	f9 1d       	adc	r31, r9
    168c:	10 83       	st	Z, r17
			i++;
    168e:	2f ef       	ldi	r18, 0xFF	; 255
    1690:	82 1a       	sub	r8, r18
    1692:	92 0a       	sbc	r9, r18
		}
		switch(JOY_get_direction()){
    1694:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	29 f1       	breq	.+74     	; 0x16e6 <HIGHSCORE_get_username+0xa8>
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	09 f4       	brne	.+2      	; 0x16a2 <HIGHSCORE_get_username+0x64>
    16a0:	4a c0       	rjmp	.+148    	; 0x1736 <HIGHSCORE_get_username+0xf8>
    16a2:	82 30       	cpi	r24, 0x02	; 2
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <HIGHSCORE_get_username+0x6a>
    16a6:	55 c0       	rjmp	.+170    	; 0x1752 <HIGHSCORE_get_username+0x114>
    16a8:	4b c0       	rjmp	.+150    	; 0x1740 <HIGHSCORE_get_username+0x102>
			
			case UP:
			while(JOY_get_direction() == UP){
				if (ch > 'a'){
    16aa:	12 36       	cpi	r17, 0x62	; 98
    16ac:	40 f0       	brcs	.+16     	; 0x16be <HIGHSCORE_get_username+0x80>
					ch--;
    16ae:	11 50       	subi	r17, 0x01	; 1
					if (line == 1)
    16b0:	c1 30       	cpi	r28, 0x01	; 1
    16b2:	d1 05       	cpc	r29, r1
    16b4:	21 f4       	brne	.+8      	; 0x16be <HIGHSCORE_get_username+0x80>
						HIGHSCORE_print_character_list(ch);
    16b6:	81 2f       	mov	r24, r17
    16b8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <HIGHSCORE_print_character_list>
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <HIGHSCORE_get_username+0x8c>
				}
				if (line > 1){
    16be:	c2 30       	cpi	r28, 0x02	; 2
    16c0:	d1 05       	cpc	r29, r1
    16c2:	1c f0       	brlt	.+6      	; 0x16ca <HIGHSCORE_get_username+0x8c>
					prev_line = line;
					line--;
    16c4:	bc 2e       	mov	r11, r28
    16c6:	cd 2e       	mov	r12, r29
    16c8:	21 97       	sbiw	r28, 0x01	; 1
				}
				HIGHSCORE_highlight_letter(line, prev_line);
    16ca:	6b 2d       	mov	r22, r11
    16cc:	7c 2d       	mov	r23, r12
    16ce:	ce 01       	movw	r24, r28
    16d0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <HIGHSCORE_highlight_letter>
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	9f ef       	ldi	r25, 0xFF	; 255
    16d8:	e2 e0       	ldi	r30, 0x02	; 2
    16da:	81 50       	subi	r24, 0x01	; 1
    16dc:	90 40       	sbci	r25, 0x00	; 0
    16de:	e0 40       	sbci	r30, 0x00	; 0
    16e0:	e1 f7       	brne	.-8      	; 0x16da <HIGHSCORE_get_username+0x9c>
    16e2:	00 c0       	rjmp	.+0      	; 0x16e4 <HIGHSCORE_get_username+0xa6>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <HIGHSCORE_get_username+0xa8>
			i++;
		}
		switch(JOY_get_direction()){
			
			case UP:
			while(JOY_get_direction() == UP){
    16e6:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	f1 f2       	breq	.-68     	; 0x16aa <HIGHSCORE_get_username+0x6c>
    16ee:	31 c0       	rjmp	.+98     	; 0x1752 <HIGHSCORE_get_username+0x114>
			}
			break;
			
			case DOWN:
			while(JOY_get_direction() == DOWN){
				if (ch < 'z'){
    16f0:	1a 37       	cpi	r17, 0x7A	; 122
    16f2:	68 f4       	brcc	.+26     	; 0x170e <HIGHSCORE_get_username+0xd0>
					ch++;
    16f4:	aa 24       	eor	r10, r10
    16f6:	a3 94       	inc	r10
    16f8:	a1 0e       	add	r10, r17
					if (line == 7)
    16fa:	c7 30       	cpi	r28, 0x07	; 7
    16fc:	d1 05       	cpc	r29, r1
    16fe:	31 f4       	brne	.+12     	; 0x170c <HIGHSCORE_get_username+0xce>
						HIGHSCORE_print_character_list(ch - 6);
    1700:	8b ef       	ldi	r24, 0xFB	; 251
    1702:	81 0f       	add	r24, r17
    1704:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <HIGHSCORE_print_character_list>
			break;
			
			case DOWN:
			while(JOY_get_direction() == DOWN){
				if (ch < 'z'){
					ch++;
    1708:	1a 2d       	mov	r17, r10
    170a:	07 c0       	rjmp	.+14     	; 0x171a <HIGHSCORE_get_username+0xdc>
    170c:	1a 2d       	mov	r17, r10
					if (line == 7)
						HIGHSCORE_print_character_list(ch - 6);
						//OLED_pos(3,50);
						//OLED_printf("%s",username);
				}
				if (line < 7){
    170e:	c7 30       	cpi	r28, 0x07	; 7
    1710:	d1 05       	cpc	r29, r1
    1712:	1c f4       	brge	.+6      	; 0x171a <HIGHSCORE_get_username+0xdc>
					prev_line = line;
					line++;
    1714:	bc 2e       	mov	r11, r28
    1716:	cd 2e       	mov	r12, r29
    1718:	21 96       	adiw	r28, 0x01	; 1
				}
				HIGHSCORE_highlight_letter(line, prev_line);
    171a:	6b 2d       	mov	r22, r11
    171c:	7c 2d       	mov	r23, r12
    171e:	ce 01       	movw	r24, r28
    1720:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <HIGHSCORE_highlight_letter>
    1724:	ff ef       	ldi	r31, 0xFF	; 255
    1726:	2f ef       	ldi	r18, 0xFF	; 255
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	f1 50       	subi	r31, 0x01	; 1
    172c:	20 40       	sbci	r18, 0x00	; 0
    172e:	80 40       	sbci	r24, 0x00	; 0
    1730:	e1 f7       	brne	.-8      	; 0x172a <HIGHSCORE_get_username+0xec>
    1732:	00 c0       	rjmp	.+0      	; 0x1734 <HIGHSCORE_get_username+0xf6>
    1734:	00 c0       	rjmp	.+0      	; 0x1736 <HIGHSCORE_get_username+0xf8>
				_delay_ms(200);
			}
			break;
			
			case DOWN:
			while(JOY_get_direction() == DOWN){
    1736:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	c9 f2       	breq	.-78     	; 0x16f0 <HIGHSCORE_get_username+0xb2>
    173e:	09 c0       	rjmp	.+18     	; 0x1752 <HIGHSCORE_get_username+0x114>
				_delay_ms(200);
			}
			break;
			
			case RIGHT:
			while(JOY_get_direction() == RIGHT);
    1740:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    1744:	82 30       	cpi	r24, 0x02	; 2
    1746:	e1 f3       	breq	.-8      	; 0x1740 <HIGHSCORE_get_username+0x102>
			username[i] = '\0';
    1748:	f7 01       	movw	r30, r14
    174a:	e8 0d       	add	r30, r8
    174c:	f9 1d       	adc	r31, r9
    174e:	10 82       	st	Z, r1
    1750:	05 c0       	rjmp	.+10     	; 0x175c <HIGHSCORE_get_username+0x11e>
	int prev_line = 1;
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
	HIGHSCORE_highlight_letter(line, prev_line);
	
	while(i < NUM_USERNAME_BYTES - 1){
    1752:	9a e0       	ldi	r25, 0x0A	; 10
    1754:	89 16       	cp	r8, r25
    1756:	91 04       	cpc	r9, r1
    1758:	0c f4       	brge	.+2      	; 0x175c <HIGHSCORE_get_username+0x11e>
    175a:	8d cf       	rjmp	.-230    	; 0x1676 <HIGHSCORE_get_username+0x38>
			
			default:
			break;
		}
	}
	username[NUM_USERNAME_BYTES - 1] = '\0';
    175c:	f7 01       	movw	r30, r14
    175e:	12 86       	std	Z+10, r1	; 0x0a
	
}
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	af 90       	pop	r10
    1770:	9f 90       	pop	r9
    1772:	8f 90       	pop	r8
    1774:	08 95       	ret

00001776 <HIGHSCORE_print>:
		OLED_printf("%c\n", c);
	}
}

void HIGHSCORE_print()
{
    1776:	9f 92       	push	r9
    1778:	af 92       	push	r10
    177a:	bf 92       	push	r11
    177c:	cf 92       	push	r12
    177e:	df 92       	push	r13
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	6a 97       	sbiw	r28, 0x1a	; 26
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
	int max_num_highscores = 5;
	highscore_info_t user;
	OLED_reset();
    179c:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
	OLED_printf("Highscores");
    17a0:	8a e8       	ldi	r24, 0x8A	; 138
    17a2:	93 e0       	ldi	r25, 0x03	; 3
    17a4:	9f 93       	push	r25
    17a6:	8f 93       	push	r24
    17a8:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
	OLED_pos(1, 0);
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_printf("#  Score");
    17b4:	81 ed       	ldi	r24, 0xD1	; 209
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	9f 93       	push	r25
    17ba:	8f 93       	push	r24
    17bc:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
	OLED_goto_column(55);
    17c0:	87 e3       	ldi	r24, 0x37	; 55
    17c2:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_goto_column>
	OLED_printf("User\n");
    17c6:	8a ed       	ldi	r24, 0xDA	; 218
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	9f 93       	push	r25
    17cc:	8f 93       	push	r24
    17ce:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
	for (int i = 0; i < max_num_highscores; i++){
    17de:	00 e0       	ldi	r16, 0x00	; 0
    17e0:	10 e0       	ldi	r17, 0x00	; 0
		user = HIGHSCORE_load_from_eeprom(i);
    17e2:	0f 2e       	mov	r0, r31
    17e4:	fd e0       	ldi	r31, 0x0D	; 13
    17e6:	9f 2e       	mov	r9, r31
    17e8:	f0 2d       	mov	r31, r0
		OLED_printf("%d  %d", i+1, user.score);
    17ea:	0f 2e       	mov	r0, r31
    17ec:	f0 ee       	ldi	r31, 0xE0	; 224
    17ee:	af 2e       	mov	r10, r31
    17f0:	f2 e0       	ldi	r31, 0x02	; 2
    17f2:	bf 2e       	mov	r11, r31
    17f4:	f0 2d       	mov	r31, r0
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
    17f6:	6e 01       	movw	r12, r28
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	c8 0e       	add	r12, r24
    17fc:	d1 1c       	adc	r13, r1
    17fe:	0f 2e       	mov	r0, r31
    1800:	f7 ee       	ldi	r31, 0xE7	; 231
    1802:	ef 2e       	mov	r14, r31
    1804:	f2 e0       	ldi	r31, 0x02	; 2
    1806:	ff 2e       	mov	r15, r31
    1808:	f0 2d       	mov	r31, r0
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
		user = HIGHSCORE_load_from_eeprom(i);
    180a:	b8 01       	movw	r22, r16
    180c:	ce 01       	movw	r24, r28
    180e:	0e 96       	adiw	r24, 0x0e	; 14
    1810:	0e 94 ab 09 	call	0x1356	; 0x1356 <HIGHSCORE_load_from_eeprom>
    1814:	fe 01       	movw	r30, r28
    1816:	3e 96       	adiw	r30, 0x0e	; 14
    1818:	de 01       	movw	r26, r28
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	89 2d       	mov	r24, r9
    181e:	01 90       	ld	r0, Z+
    1820:	0d 92       	st	X+, r0
    1822:	8a 95       	dec	r24
    1824:	e1 f7       	brne	.-8      	; 0x181e <HIGHSCORE_print+0xa8>
		OLED_printf("%d  %d", i+1, user.score);
    1826:	0f 5f       	subi	r16, 0xFF	; 255
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	8f 93       	push	r24
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	8f 93       	push	r24
    1832:	1f 93       	push	r17
    1834:	0f 93       	push	r16
    1836:	bf 92       	push	r11
    1838:	af 92       	push	r10
    183a:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
		OLED_goto_column(55);
    183e:	87 e3       	ldi	r24, 0x37	; 55
    1840:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_goto_column>
		OLED_printf("%s\n",user.name);
    1844:	df 92       	push	r13
    1846:	cf 92       	push	r12
    1848:	ff 92       	push	r15
    184a:	ef 92       	push	r14
    184c:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
	OLED_printf("Highscores");
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	05 30       	cpi	r16, 0x05	; 5
    185c:	11 05       	cpc	r17, r1
    185e:	a9 f6       	brne	.-86     	; 0x180a <HIGHSCORE_print+0x94>
		OLED_printf("%d  %d", i+1, user.score);
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
		//OLED_goto_column(0);
	}
}
    1860:	6a 96       	adiw	r28, 0x1a	; 26
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	bf 90       	pop	r11
    187e:	af 90       	pop	r10
    1880:	9f 90       	pop	r9
    1882:	08 95       	ret

00001884 <HIGHSCORE_clear>:


void HIGHSCORE_clear()
{
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    1888:	c0 e0       	ldi	r28, 0x00	; 0
    188a:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_write(0, i);
    188c:	be 01       	movw	r22, r28
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	0e 94 1d 06 	call	0xc3a	; 0xc3a <EEPROM_write>
}


void HIGHSCORE_clear()
{
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    1894:	21 96       	adiw	r28, 0x01	; 1
    1896:	c4 35       	cpi	r28, 0x54	; 84
    1898:	d1 05       	cpc	r29, r1
    189a:	c1 f7       	brne	.-16     	; 0x188c <HIGHSCORE_clear+0x8>
		EEPROM_write(0, i);
	}
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	08 95       	ret

000018a2 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

int main( void ){
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	66 97       	sbiw	r28, 0x16	; 22
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
	
	cli();
    18b6:	f8 94       	cli
	UART_Init( MYUBRR );
    18b8:	8f e1       	ldi	r24, 0x1F	; 31
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 93 04 	call	0x926	; 0x926 <UART_Init>
	ADC_init();
    18c0:	0e 94 01 06 	call	0xc02	; 0xc02 <ADC_init>
	JOY_init();
    18c4:	0e 94 67 07 	call	0xece	; 0xece <JOY_init>
	TOUCH_init();
    18c8:	0e 94 85 09 	call	0x130a	; 0x130a <TOUCH_init>
	MENU_init();
    18cc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <MENU_init>
	CAN_init();
    18d0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <CAN_init>
	TIMER_init();
    18d4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <TIMER_init>
	SEND2CAN_init();
    18d8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SEND2CAN_init>
	BUZZ_init();	
    18dc:	0e 94 a6 04 	call	0x94c	; 0x94c <BUZZ_init>
	
	//printf("Init done\n");
	STATE_OPTION_set(menu);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
	sei();
    18e6:	78 94       	sei

int main( void ){
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
    18e8:	e1 2c       	mov	r14, r1
    18ea:	f1 2c       	mov	r15, r1
#include <avr/interrupt.h>

int main( void ){
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
    18ec:	03 e0       	ldi	r16, 0x03	; 3
    18ee:	10 e0       	ldi	r17, 0x00	; 0
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
    18f0:	0f 2e       	mov	r0, r31
    18f2:	f3 e0       	ldi	r31, 0x03	; 3
    18f4:	cf 2e       	mov	r12, r31
    18f6:	f0 2d       	mov	r31, r0
    18f8:	d1 2c       	mov	r13, r1
	sei();

	char username[NUM_USERNAME_BYTES];

	while(1){
		switch (STATE_OPTION_get()){
    18fa:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <STATE_OPTION_get>
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	01 f1       	breq	.+64     	; 0x1942 <main+0xa0>
    1902:	28 f4       	brcc	.+10     	; 0x190e <main+0x6c>
    1904:	88 23       	and	r24, r24
    1906:	41 f0       	breq	.+16     	; 0x1918 <main+0x76>
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	59 f0       	breq	.+22     	; 0x1922 <main+0x80>
    190c:	47 c0       	rjmp	.+142    	; 0x199c <main+0xfa>
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	d9 f0       	breq	.+54     	; 0x1948 <main+0xa6>
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	29 f1       	breq	.+74     	; 0x1960 <main+0xbe>
    1916:	42 c0       	rjmp	.+132    	; 0x199c <main+0xfa>
			case menu:
				MENU_select_item();
    1918:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <MENU_select_item>
				MENU_navigate();
    191c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <MENU_navigate>
				break;
    1920:	40 c0       	rjmp	.+128    	; 0x19a2 <main+0x100>
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
    1922:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <STATE_OPTION_get_speed>
    1926:	0e 94 0f 07 	call	0xe1e	; 0xe1e <SEND2CAN_send_speed>
				MENU_print_game_screen();
    192a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <MENU_print_game_screen>
				remaining_lives = 3;
				score = 0;
				TIMER_start();
    192e:	0e 94 75 09 	call	0x12ea	; 0x12ea <TIMER_start>
				STATE_OPTION_set(game);
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
				score = 0;
    1938:	e1 2c       	mov	r14, r1
    193a:	f1 2c       	mov	r15, r1
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
    193c:	0c 2d       	mov	r16, r12
    193e:	1d 2d       	mov	r17, r13
				score = 0;
				TIMER_start();
				STATE_OPTION_set(game);
				break;
    1940:	30 c0       	rjmp	.+96     	; 0x19a2 <main+0x100>
			case game:
				SEND2CAN_send_messages();
    1942:	0e 94 02 07 	call	0xe04	; 0xe04 <SEND2CAN_send_messages>
				break;
    1946:	2d c0       	rjmp	.+90     	; 0x19a2 <main+0x100>
			case game_pause:
				if(JOY_button()){
    1948:	0e 94 3e 07 	call	0xe7c	; 0xe7c <JOY_button>
    194c:	89 2b       	or	r24, r25
    194e:	49 f1       	breq	.+82     	; 0x19a2 <main+0x100>
					STATE_OPTION_set(game);
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
					MENU_print_game_screen();
    1956:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <MENU_print_game_screen>
					TIMER_start();
    195a:	0e 94 75 09 	call	0x12ea	; 0x12ea <TIMER_start>
    195e:	21 c0       	rjmp	.+66     	; 0x19a2 <main+0x100>
				}
				break;
			case game_over:
				MENU_print_game_over_screen(score);
    1960:	c7 01       	movw	r24, r14
    1962:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <MENU_print_game_over_screen>
    1966:	2f ef       	ldi	r18, 0xFF	; 255
    1968:	8f ef       	ldi	r24, 0xFF	; 255
    196a:	9b e3       	ldi	r25, 0x3B	; 59
    196c:	21 50       	subi	r18, 0x01	; 1
    196e:	80 40       	sbci	r24, 0x00	; 0
    1970:	90 40       	sbci	r25, 0x00	; 0
    1972:	e1 f7       	brne	.-8      	; 0x196c <main+0xca>
    1974:	00 c0       	rjmp	.+0      	; 0x1976 <main+0xd4>
    1976:	00 00       	nop
				_delay_ms(4000);
				HIGHSCORE_get_username(username);
    1978:	ce 01       	movw	r24, r28
    197a:	0c 96       	adiw	r24, 0x0c	; 12
    197c:	0e 94 1f 0b 	call	0x163e	; 0x163e <HIGHSCORE_get_username>
				HIGHSCORE_add_score(score, username, 0);
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	be 01       	movw	r22, r28
    1986:	64 5f       	subi	r22, 0xF4	; 244
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	c7 01       	movw	r24, r14
    198c:	0e 94 49 0a 	call	0x1492	; 0x1492 <HIGHSCORE_add_score>
				
				STATE_OPTION_set(menu);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
				MENU_init();
    1996:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <MENU_init>
				break;
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <main+0x100>
			default:
				STATE_OPTION_set(menu);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
				break;
		}
		CAN_handle_interrupt(&receive);
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	0e 94 a2 03 	call	0x744	; 0x744 <CAN_handle_interrupt>
		msg_type = receive.data[0];
		switch(msg_type){
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	85 30       	cpi	r24, 0x05	; 5
    19ae:	f9 f4       	brne	.+62     	; 0x19ee <main+0x14c>
			case CAN_LIVES:
				if(remaining_lives > 1 && STATE_OPTION_get() == game){
    19b0:	02 30       	cpi	r16, 0x02	; 2
    19b2:	11 05       	cpc	r17, r1
    19b4:	8c f0       	brlt	.+34     	; 0x19d8 <main+0x136>
    19b6:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <STATE_OPTION_get>
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	69 f4       	brne	.+26     	; 0x19d8 <main+0x136>
					score = score + TIMER_stop();
    19be:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TIMER_stop>
    19c2:	e8 0e       	add	r14, r24
    19c4:	f9 1e       	adc	r15, r25
					remaining_lives = remaining_lives - 1;
    19c6:	01 50       	subi	r16, 0x01	; 1
    19c8:	11 09       	sbc	r17, r1
					STATE_OPTION_set(game_pause);
    19ca:	83 e0       	ldi	r24, 0x03	; 3
    19cc:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
					MENU_print_pause_screen(remaining_lives);
    19d0:	c8 01       	movw	r24, r16
    19d2:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <MENU_print_pause_screen>
    19d6:	0b c0       	rjmp	.+22     	; 0x19ee <main+0x14c>
					}else if (STATE_OPTION_get() == game){
    19d8:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <STATE_OPTION_get>
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	39 f4       	brne	.+14     	; 0x19ee <main+0x14c>
					score = score + TIMER_stop();
    19e0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TIMER_stop>
    19e4:	e8 0e       	add	r14, r24
    19e6:	f9 1e       	adc	r15, r25
					STATE_OPTION_set(game_over);
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
    19f0:	97 e1       	ldi	r25, 0x17	; 23
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <main+0x150>
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <main+0x156>
    19f8:	00 00       	nop
    19fa:	7f cf       	rjmp	.-258    	; 0x18fa <main+0x58>

000019fc <contrast_low_func>:
#include <string.h>
#include <util/delay.h>

menu_item_info_t main_menu, play_game, highscores, settings, buzzify, mario, starwars, stop, normal_speed, fast_speed, clear_highscores, contrast_level, invert_screen, contrast_low, contrast_medium, contrast_high;

void contrast_low_func(){ OLED_set_contrast( LOW_CONTRAST ); }
    19fc:	80 e1       	ldi	r24, 0x10	; 16
    19fe:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <OLED_set_contrast>
    1a02:	08 95       	ret

00001a04 <contrast_medium_func>:
void contrast_medium_func(){ OLED_set_contrast( MEDIUM_CONTRAST ); }
    1a04:	80 e5       	ldi	r24, 0x50	; 80
    1a06:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <OLED_set_contrast>
    1a0a:	08 95       	ret

00001a0c <contrast_high_func>:
void contrast_high_func(){ OLED_set_contrast( HIGH_CONTRAST ); }
    1a0c:	80 ef       	ldi	r24, 0xF0	; 240
    1a0e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <OLED_set_contrast>
    1a12:	08 95       	ret

00001a14 <normal_speed_func>:
void normal_speed_func(){ STATE_OPTION_set_speed(1); STATE_OPTION_set(game_init); }
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <STATE_OPTION_set_speed>
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
    1a22:	08 95       	ret

00001a24 <fast_speed_func>:
void fast_speed_func(){ STATE_OPTION_set_speed(2); STATE_OPTION_set(game_init); }
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <STATE_OPTION_set_speed>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <STATE_OPTION_set>
    1a32:	08 95       	ret

00001a34 <play_mario_func>:
void play_mario_func(){ BUZZ_start_song(0); }
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	0e 94 28 05 	call	0xa50	; 0xa50 <BUZZ_start_song>
    1a3c:	08 95       	ret

00001a3e <play_sw_func>:
void play_sw_func(){ BUZZ_start_song(1); }
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 28 05 	call	0xa50	; 0xa50 <BUZZ_start_song>
    1a46:	08 95       	ret

00001a48 <stop_music_func>:
void stop_music_func(){ BUZZ_stop_song(); }
    1a48:	0e 94 bb 04 	call	0x976	; 0x976 <BUZZ_stop_song>
    1a4c:	08 95       	ret

00001a4e <MENU_highlight_item>:
	}
}


void MENU_highlight_item( void )
{
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
	for (int i = 1; i < current_menu->child_num + 1; i++){
    1a56:	e0 91 03 04 	lds	r30, 0x0403
    1a5a:	f0 91 04 04 	lds	r31, 0x0404
    1a5e:	82 89       	ldd	r24, Z+18	; 0x12
    1a60:	93 89       	ldd	r25, Z+19	; 0x13
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	02 97       	sbiw	r24, 0x02	; 2
    1a66:	cc f0       	brlt	.+50     	; 0x1a9a <MENU_highlight_item+0x4c>
    1a68:	c1 e0       	ldi	r28, 0x01	; 1
    1a6a:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i, 0);
		OLED_printf("  ");
    1a6c:	0f ea       	ldi	r16, 0xAF	; 175
    1a6e:	12 e0       	ldi	r17, 0x02	; 2


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
		OLED_pos(i, 0);
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	8c 2f       	mov	r24, r28
    1a74:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
		OLED_printf("  ");
    1a78:	1f 93       	push	r17
    1a7a:	0f 93       	push	r16
    1a7c:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
}


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
    1a80:	21 96       	adiw	r28, 0x01	; 1
    1a82:	e0 91 03 04 	lds	r30, 0x0403
    1a86:	f0 91 04 04 	lds	r31, 0x0404
    1a8a:	82 89       	ldd	r24, Z+18	; 0x12
    1a8c:	93 89       	ldd	r25, Z+19	; 0x13
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	c8 17       	cp	r28, r24
    1a96:	d9 07       	cpc	r29, r25
    1a98:	5c f3       	brlt	.-42     	; 0x1a70 <MENU_highlight_item+0x22>
		OLED_pos(i, 0);
		OLED_printf("  ");
	}
	
	OLED_pos(line, 0);
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	80 91 01 04 	lds	r24, 0x0401
    1aa0:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_print_arrow();
    1aa4:	0e 94 1c 09 	call	0x1238	; 0x1238 <OLED_print_arrow>
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	08 95       	ret

00001ab2 <MENU_print_menu>:
	MENU_print_menu();
	MENU_highlight_item();
}


void MENU_print_menu(){
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
	OLED_reset();
    1aba:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
	OLED_printf("%s",current_menu->name);
    1abe:	e0 91 03 04 	lds	r30, 0x0403
    1ac2:	f0 91 04 04 	lds	r31, 0x0404
    1ac6:	81 81       	ldd	r24, Z+1	; 0x01
    1ac8:	8f 93       	push	r24
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 93       	push	r24
    1ace:	8b ee       	ldi	r24, 0xEB	; 235
    1ad0:	92 e0       	ldi	r25, 0x02	; 2
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
	if (current_child!= NULL){
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	80 91 05 04 	lds	r24, 0x0405
    1ae6:	90 91 06 04 	lds	r25, 0x0406
    1aea:	89 2b       	or	r24, r25
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <MENU_print_menu+0x40>
		MENU_highlight_item();
    1aee:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <MENU_highlight_item>
	}
	for (int i = 0; i < current_menu->child_num; i++){
    1af2:	e0 91 03 04 	lds	r30, 0x0403
    1af6:	f0 91 04 04 	lds	r31, 0x0404
    1afa:	82 89       	ldd	r24, Z+18	; 0x12
    1afc:	93 89       	ldd	r25, Z+19	; 0x13
    1afe:	18 16       	cp	r1, r24
    1b00:	19 06       	cpc	r1, r25
    1b02:	7c f5       	brge	.+94     	; 0x1b62 <MENU_print_menu+0xb0>
    1b04:	c0 e0       	ldi	r28, 0x00	; 0
    1b06:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
    1b08:	0b ee       	ldi	r16, 0xEB	; 235
    1b0a:	12 e0       	ldi	r17, 0x02	; 2
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
		OLED_pos(i + 1, 10);
    1b0c:	6a e0       	ldi	r22, 0x0A	; 10
    1b0e:	8c 2f       	mov	r24, r28
    1b10:	8f 5f       	subi	r24, 0xFF	; 255
    1b12:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
		OLED_goto_column(10);
    1b16:	8a e0       	ldi	r24, 0x0A	; 10
    1b18:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_goto_column>
		OLED_printf("%s", current_menu->child[i]->name);
    1b1c:	80 91 03 04 	lds	r24, 0x0403
    1b20:	90 91 04 04 	lds	r25, 0x0404
    1b24:	fe 01       	movw	r30, r28
    1b26:	32 96       	adiw	r30, 0x02	; 2
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	e8 0f       	add	r30, r24
    1b2e:	f9 1f       	adc	r31, r25
    1b30:	01 90       	ld	r0, Z+
    1b32:	f0 81       	ld	r31, Z
    1b34:	e0 2d       	mov	r30, r0
    1b36:	81 81       	ldd	r24, Z+1	; 0x01
    1b38:	8f 93       	push	r24
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8f 93       	push	r24
    1b3e:	1f 93       	push	r17
    1b40:	0f 93       	push	r16
    1b42:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
	OLED_reset();
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
    1b46:	21 96       	adiw	r28, 0x01	; 1
    1b48:	e0 91 03 04 	lds	r30, 0x0403
    1b4c:	f0 91 04 04 	lds	r31, 0x0404
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	82 89       	ldd	r24, Z+18	; 0x12
    1b5a:	93 89       	ldd	r25, Z+19	; 0x13
    1b5c:	c8 17       	cp	r28, r24
    1b5e:	d9 07       	cpc	r29, r25
    1b60:	ac f2       	brlt	.-86     	; 0x1b0c <MENU_print_menu+0x5a>
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
	}
}
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	08 95       	ret

00001b6c <MENU_init>:
menu_item_info_t *current_child;
int line;


void MENU_init( void ){
	OLED_init();
    1b6c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <OLED_init>
	current_menu = &main_menu;
    1b70:	82 e6       	ldi	r24, 0x62	; 98
    1b72:	92 e0       	ldi	r25, 0x02	; 2
    1b74:	90 93 04 04 	sts	0x0404, r25
    1b78:	80 93 03 04 	sts	0x0403, r24
	current_child = main_menu.child[0];
    1b7c:	80 91 66 02 	lds	r24, 0x0266
    1b80:	90 91 67 02 	lds	r25, 0x0267
    1b84:	90 93 06 04 	sts	0x0406, r25
    1b88:	80 93 05 04 	sts	0x0405, r24
	line = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	90 93 02 04 	sts	0x0402, r25
    1b94:	80 93 01 04 	sts	0x0401, r24
	MENU_print_menu();
    1b98:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <MENU_print_menu>
	MENU_highlight_item();
    1b9c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <MENU_highlight_item>
    1ba0:	08 95       	ret

00001ba2 <MENU_navigate>:



void MENU_navigate(){

	switch (JOY_get_direction()){
    1ba2:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	39 f1       	breq	.+78     	; 0x1bf8 <MENU_navigate+0x56>
    1baa:	84 30       	cpi	r24, 0x04	; 4
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <MENU_navigate+0xe>
    1bae:	47 c0       	rjmp	.+142    	; 0x1c3e <MENU_navigate+0x9c>
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <MENU_navigate+0x14>
    1bb4:	69 c0       	rjmp	.+210    	; 0x1c88 <MENU_navigate+0xe6>
		case LEFT:
			while(JOY_get_direction() == LEFT){}
    1bb6:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	e1 f3       	breq	.-8      	; 0x1bb6 <MENU_navigate+0x14>
			if (current_menu->parent != NULL){
    1bbe:	e0 91 03 04 	lds	r30, 0x0403
    1bc2:	f0 91 04 04 	lds	r31, 0x0404
    1bc6:	02 80       	ldd	r0, Z+2	; 0x02
    1bc8:	f3 81       	ldd	r31, Z+3	; 0x03
    1bca:	e0 2d       	mov	r30, r0
    1bcc:	30 97       	sbiw	r30, 0x00	; 0
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <MENU_navigate+0x30>
    1bd0:	5b c0       	rjmp	.+182    	; 0x1c88 <MENU_navigate+0xe6>
				line = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	90 93 02 04 	sts	0x0402, r25
    1bda:	80 93 01 04 	sts	0x0401, r24
				current_menu = current_menu->parent;
    1bde:	f0 93 04 04 	sts	0x0404, r31
    1be2:	e0 93 03 04 	sts	0x0403, r30
				current_child = current_menu->child[0];
    1be6:	84 81       	ldd	r24, Z+4	; 0x04
    1be8:	95 81       	ldd	r25, Z+5	; 0x05
    1bea:	90 93 06 04 	sts	0x0406, r25
    1bee:	80 93 05 04 	sts	0x0405, r24
				MENU_print_menu();
    1bf2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <MENU_print_menu>
    1bf6:	08 95       	ret
			}
			break;
		case UP:
		while(JOY_get_direction() == UP){}
    1bf8:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    1bfc:	83 30       	cpi	r24, 0x03	; 3
    1bfe:	e1 f3       	breq	.-8      	; 0x1bf8 <MENU_navigate+0x56>
			if (line > 1){
    1c00:	80 91 01 04 	lds	r24, 0x0401
    1c04:	90 91 02 04 	lds	r25, 0x0402
    1c08:	82 30       	cpi	r24, 0x02	; 2
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	ec f1       	brlt	.+122    	; 0x1c88 <MENU_navigate+0xe6>
				line = line - 1;
    1c0e:	9c 01       	movw	r18, r24
    1c10:	21 50       	subi	r18, 0x01	; 1
    1c12:	31 09       	sbc	r19, r1
    1c14:	30 93 02 04 	sts	0x0402, r19
    1c18:	20 93 01 04 	sts	0x0401, r18
				current_child = current_menu->child[line - 1];
    1c1c:	e0 91 03 04 	lds	r30, 0x0403
    1c20:	f0 91 04 04 	lds	r31, 0x0404
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	e8 0f       	add	r30, r24
    1c2a:	f9 1f       	adc	r31, r25
    1c2c:	80 81       	ld	r24, Z
    1c2e:	91 81       	ldd	r25, Z+1	; 0x01
    1c30:	90 93 06 04 	sts	0x0406, r25
    1c34:	80 93 05 04 	sts	0x0405, r24
				MENU_highlight_item();
    1c38:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <MENU_highlight_item>
    1c3c:	08 95       	ret
				}
			break;
		case DOWN:
		while(JOY_get_direction() == DOWN){}
    1c3e:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	e1 f3       	breq	.-8      	; 0x1c3e <MENU_navigate+0x9c>
			if (line < current_menu->child_num){
    1c46:	e0 91 03 04 	lds	r30, 0x0403
    1c4a:	f0 91 04 04 	lds	r31, 0x0404
    1c4e:	80 91 01 04 	lds	r24, 0x0401
    1c52:	90 91 02 04 	lds	r25, 0x0402
    1c56:	22 89       	ldd	r18, Z+18	; 0x12
    1c58:	33 89       	ldd	r19, Z+19	; 0x13
    1c5a:	82 17       	cp	r24, r18
    1c5c:	93 07       	cpc	r25, r19
    1c5e:	a4 f4       	brge	.+40     	; 0x1c88 <MENU_navigate+0xe6>
				line = line + 1;
    1c60:	9c 01       	movw	r18, r24
    1c62:	2f 5f       	subi	r18, 0xFF	; 255
    1c64:	3f 4f       	sbci	r19, 0xFF	; 255
    1c66:	30 93 02 04 	sts	0x0402, r19
    1c6a:	20 93 01 04 	sts	0x0401, r18
				current_child = current_menu->child[line - 1];
    1c6e:	02 96       	adiw	r24, 0x02	; 2
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	e8 0f       	add	r30, r24
    1c76:	f9 1f       	adc	r31, r25
    1c78:	80 81       	ld	r24, Z
    1c7a:	91 81       	ldd	r25, Z+1	; 0x01
    1c7c:	90 93 06 04 	sts	0x0406, r25
    1c80:	80 93 05 04 	sts	0x0405, r24
				MENU_highlight_item();
    1c84:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <MENU_highlight_item>
    1c88:	08 95       	ret

00001c8a <MENU_print_pause_screen>:
	OLED_pos(line, 0);
	OLED_print_arrow();
}

void MENU_print_pause_screen(int remaining_lives)
{
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	c8 2f       	mov	r28, r24
    1c90:	d9 2f       	mov	r29, r25
	OLED_reset();
    1c92:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
	OLED_pos(3, 20);
    1c96:	64 e1       	ldi	r22, 0x14	; 20
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_printf("You have %d lives left", remaining_lives);
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	8e ee       	ldi	r24, 0xEE	; 238
    1ca4:	92 e0       	ldi	r25, 0x02	; 2
    1ca6:	9f 93       	push	r25
    1ca8:	8f 93       	push	r24
    1caa:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>

	OLED_pos(5, 20);
    1cae:	64 e1       	ldi	r22, 0x14	; 20
    1cb0:	85 e0       	ldi	r24, 0x05	; 5
    1cb2:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_printf("Press joystick");
    1cb6:	85 e0       	ldi	r24, 0x05	; 5
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	9f 93       	push	r25
    1cbc:	8f 93       	push	r24
    1cbe:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0

}
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <MENU_print_game_screen>:

void MENU_print_game_screen(void){
	OLED_reset();
    1cd4:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
	OLED_pos(3, 30);
    1cd8:	6e e1       	ldi	r22, 0x1E	; 30
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_printf("Play game :D");
    1ce0:	84 e1       	ldi	r24, 0x14	; 20
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	9f 93       	push	r25
    1ce6:	8f 93       	push	r24
    1ce8:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	08 95       	ret

00001cf2 <MENU_print_game_over_screen>:
}

void MENU_print_game_over_screen(int score){
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	c8 2f       	mov	r28, r24
    1cf8:	d9 2f       	mov	r29, r25
	OLED_reset();
    1cfa:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
	OLED_pos(3, 30);
    1cfe:	6e e1       	ldi	r22, 0x1E	; 30
    1d00:	83 e0       	ldi	r24, 0x03	; 3
    1d02:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_printf("Game over...");
    1d06:	21 e2       	ldi	r18, 0x21	; 33
    1d08:	33 e0       	ldi	r19, 0x03	; 3
    1d0a:	3f 93       	push	r19
    1d0c:	2f 93       	push	r18
    1d0e:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
	OLED_pos(4, 10);
    1d12:	6a e0       	ldi	r22, 0x0A	; 10
    1d14:	84 e0       	ldi	r24, 0x04	; 4
    1d16:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_printf("You lasted %d seconds", score);
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	8e e2       	ldi	r24, 0x2E	; 46
    1d20:	93 e0       	ldi	r25, 0x03	; 3
    1d22:	9f 93       	push	r25
    1d24:	8f 93       	push	r24
    1d26:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
}
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <MENU_print_cleared_highscores>:

void MENU_print_cleared_highscores(){
	OLED_reset();
    1d3c:	0e 94 46 08 	call	0x108c	; 0x108c <OLED_reset>
	OLED_pos(3, 15);
    1d40:	6f e0       	ldi	r22, 0x0F	; 15
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	0e 94 08 08 	call	0x1010	; 0x1010 <OLED_pos>
	OLED_printf("Highscores cleared");
    1d48:	84 e4       	ldi	r24, 0x44	; 68
    1d4a:	93 e0       	ldi	r25, 0x03	; 3
    1d4c:	9f 93       	push	r25
    1d4e:	8f 93       	push	r24
    1d50:	0e 94 0c 09 	call	0x1218	; 0x1218 <OLED_printf>
    1d54:	2f ef       	ldi	r18, 0xFF	; 255
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	9d e1       	ldi	r25, 0x1D	; 29
    1d5a:	21 50       	subi	r18, 0x01	; 1
    1d5c:	80 40       	sbci	r24, 0x00	; 0
    1d5e:	90 40       	sbci	r25, 0x00	; 0
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <MENU_print_cleared_highscores+0x1e>
    1d62:	00 c0       	rjmp	.+0      	; 0x1d64 <MENU_print_cleared_highscores+0x28>
    1d64:	00 00       	nop
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	08 95       	ret

00001d6c <MENU_select_item>:
}



void MENU_select_item(){
	if ((JOY_button() || JOY_get_direction() == RIGHT) && current_child!= NULL){
    1d6c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <JOY_button>
    1d70:	89 2b       	or	r24, r25
    1d72:	29 f4       	brne	.+10     	; 0x1d7e <MENU_select_item+0x12>
    1d74:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <MENU_select_item+0x12>
    1d7c:	4e c0       	rjmp	.+156    	; 0x1e1a <MENU_select_item+0xae>
    1d7e:	e0 91 05 04 	lds	r30, 0x0405
    1d82:	f0 91 06 04 	lds	r31, 0x0406
    1d86:	30 97       	sbiw	r30, 0x00	; 0
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <MENU_select_item+0x20>
    1d8a:	47 c0       	rjmp	.+142    	; 0x1e1a <MENU_select_item+0xae>
		if (current_child->child[0] != NULL){
    1d8c:	84 81       	ldd	r24, Z+4	; 0x04
    1d8e:	95 81       	ldd	r25, Z+5	; 0x05
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	89 f0       	breq	.+34     	; 0x1db6 <MENU_select_item+0x4a>
			current_menu = current_child;
    1d94:	f0 93 04 04 	sts	0x0404, r31
    1d98:	e0 93 03 04 	sts	0x0403, r30
			current_child = current_child->child[0];
    1d9c:	90 93 06 04 	sts	0x0406, r25
    1da0:	80 93 05 04 	sts	0x0405, r24
			line = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	90 93 02 04 	sts	0x0402, r25
    1dac:	80 93 01 04 	sts	0x0401, r24
			MENU_print_menu();
    1db0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <MENU_print_menu>
    1db4:	2a c0       	rjmp	.+84     	; 0x1e0a <MENU_select_item+0x9e>
		}
		else if (current_child->functionPtr != NULL){
    1db6:	04 88       	ldd	r0, Z+20	; 0x14
    1db8:	f5 89       	ldd	r31, Z+21	; 0x15
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	30 97       	sbiw	r30, 0x00	; 0
    1dbe:	29 f1       	breq	.+74     	; 0x1e0a <MENU_select_item+0x9e>
			current_child->functionPtr();
    1dc0:	09 95       	icall
			if(current_child == &clear_highscores){
    1dc2:	80 91 05 04 	lds	r24, 0x0405
    1dc6:	90 91 06 04 	lds	r25, 0x0406
    1dca:	21 e0       	ldi	r18, 0x01	; 1
    1dcc:	86 38       	cpi	r24, 0x86	; 134
    1dce:	92 07       	cpc	r25, r18
    1dd0:	29 f4       	brne	.+10     	; 0x1ddc <MENU_select_item+0x70>
				MENU_print_cleared_highscores();
    1dd2:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <MENU_print_cleared_highscores>
				MENU_print_menu();
    1dd6:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <MENU_print_menu>
    1dda:	17 c0       	rjmp	.+46     	; 0x1e0a <MENU_select_item+0x9e>
			}
			else if(current_child == &highscores){
    1ddc:	86 53       	subi	r24, 0x36	; 54
    1dde:	92 40       	sbci	r25, 0x02	; 2
    1de0:	a1 f4       	brne	.+40     	; 0x1e0a <MENU_select_item+0x9e>
				current_menu = current_child;
    1de2:	86 e3       	ldi	r24, 0x36	; 54
    1de4:	92 e0       	ldi	r25, 0x02	; 2
    1de6:	90 93 04 04 	sts	0x0404, r25
    1dea:	80 93 03 04 	sts	0x0403, r24
				current_child = current_child->child[0];
    1dee:	80 91 3a 02 	lds	r24, 0x023A
    1df2:	90 91 3b 02 	lds	r25, 0x023B
    1df6:	90 93 06 04 	sts	0x0406, r25
    1dfa:	80 93 05 04 	sts	0x0405, r24
				line = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	90 93 02 04 	sts	0x0402, r25
    1e06:	80 93 01 04 	sts	0x0401, r24
			}
		}
		while(JOY_button() || JOY_get_direction() == RIGHT);
    1e0a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <JOY_button>
    1e0e:	89 2b       	or	r24, r25
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <MENU_select_item+0x9e>
    1e12:	0e 94 b1 07 	call	0xf62	; 0xf62 <JOY_get_direction>
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	c1 f3       	breq	.-16     	; 0x1e0a <MENU_select_item+0x9e>
    1e1a:	08 95       	ret

00001e1c <STATE_OPTION_set>:

state_t state;
int speed;

void STATE_OPTION_set(state_t new_state){
	state = new_state;
    1e1c:	80 93 07 04 	sts	0x0407, r24
    1e20:	08 95       	ret

00001e22 <STATE_OPTION_get>:
}

state_t STATE_OPTION_get(void){
	return state;
}
    1e22:	80 91 07 04 	lds	r24, 0x0407
    1e26:	08 95       	ret

00001e28 <STATE_OPTION_set_speed>:

void STATE_OPTION_set_speed(int new_speed){
	speed = new_speed;
    1e28:	90 93 09 04 	sts	0x0409, r25
    1e2c:	80 93 08 04 	sts	0x0408, r24
    1e30:	08 95       	ret

00001e32 <STATE_OPTION_get_speed>:
}

int STATE_OPTION_get_speed(void){
	return speed;
    1e32:	80 91 08 04 	lds	r24, 0x0408
    1e36:	90 91 09 04 	lds	r25, 0x0409
    1e3a:	08 95       	ret

00001e3c <__cmpsf2>:
    1e3c:	97 d0       	rcall	.+302    	; 0x1f6c <__fp_cmp>
    1e3e:	08 f4       	brcc	.+2      	; 0x1e42 <__cmpsf2+0x6>
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	08 95       	ret

00001e44 <__divsf3>:
    1e44:	0c d0       	rcall	.+24     	; 0x1e5e <__divsf3x>
    1e46:	cd c0       	rjmp	.+410    	; 0x1fe2 <__fp_round>
    1e48:	c5 d0       	rcall	.+394    	; 0x1fd4 <__fp_pscB>
    1e4a:	40 f0       	brcs	.+16     	; 0x1e5c <__divsf3+0x18>
    1e4c:	bc d0       	rcall	.+376    	; 0x1fc6 <__fp_pscA>
    1e4e:	30 f0       	brcs	.+12     	; 0x1e5c <__divsf3+0x18>
    1e50:	21 f4       	brne	.+8      	; 0x1e5a <__divsf3+0x16>
    1e52:	5f 3f       	cpi	r21, 0xFF	; 255
    1e54:	19 f0       	breq	.+6      	; 0x1e5c <__divsf3+0x18>
    1e56:	ae c0       	rjmp	.+348    	; 0x1fb4 <__fp_inf>
    1e58:	51 11       	cpse	r21, r1
    1e5a:	f7 c0       	rjmp	.+494    	; 0x204a <__fp_szero>
    1e5c:	b1 c0       	rjmp	.+354    	; 0x1fc0 <__fp_nan>

00001e5e <__divsf3x>:
    1e5e:	d2 d0       	rcall	.+420    	; 0x2004 <__fp_split3>
    1e60:	98 f3       	brcs	.-26     	; 0x1e48 <__divsf3+0x4>

00001e62 <__divsf3_pse>:
    1e62:	99 23       	and	r25, r25
    1e64:	c9 f3       	breq	.-14     	; 0x1e58 <__divsf3+0x14>
    1e66:	55 23       	and	r21, r21
    1e68:	b1 f3       	breq	.-20     	; 0x1e56 <__divsf3+0x12>
    1e6a:	95 1b       	sub	r25, r21
    1e6c:	55 0b       	sbc	r21, r21
    1e6e:	bb 27       	eor	r27, r27
    1e70:	aa 27       	eor	r26, r26
    1e72:	62 17       	cp	r22, r18
    1e74:	73 07       	cpc	r23, r19
    1e76:	84 07       	cpc	r24, r20
    1e78:	38 f0       	brcs	.+14     	; 0x1e88 <__divsf3_pse+0x26>
    1e7a:	9f 5f       	subi	r25, 0xFF	; 255
    1e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	44 1f       	adc	r20, r20
    1e84:	aa 1f       	adc	r26, r26
    1e86:	a9 f3       	breq	.-22     	; 0x1e72 <__divsf3_pse+0x10>
    1e88:	33 d0       	rcall	.+102    	; 0x1ef0 <__divsf3_pse+0x8e>
    1e8a:	0e 2e       	mov	r0, r30
    1e8c:	3a f0       	brmi	.+14     	; 0x1e9c <__divsf3_pse+0x3a>
    1e8e:	e0 e8       	ldi	r30, 0x80	; 128
    1e90:	30 d0       	rcall	.+96     	; 0x1ef2 <__divsf3_pse+0x90>
    1e92:	91 50       	subi	r25, 0x01	; 1
    1e94:	50 40       	sbci	r21, 0x00	; 0
    1e96:	e6 95       	lsr	r30
    1e98:	00 1c       	adc	r0, r0
    1e9a:	ca f7       	brpl	.-14     	; 0x1e8e <__divsf3_pse+0x2c>
    1e9c:	29 d0       	rcall	.+82     	; 0x1ef0 <__divsf3_pse+0x8e>
    1e9e:	fe 2f       	mov	r31, r30
    1ea0:	27 d0       	rcall	.+78     	; 0x1ef0 <__divsf3_pse+0x8e>
    1ea2:	66 0f       	add	r22, r22
    1ea4:	77 1f       	adc	r23, r23
    1ea6:	88 1f       	adc	r24, r24
    1ea8:	bb 1f       	adc	r27, r27
    1eaa:	26 17       	cp	r18, r22
    1eac:	37 07       	cpc	r19, r23
    1eae:	48 07       	cpc	r20, r24
    1eb0:	ab 07       	cpc	r26, r27
    1eb2:	b0 e8       	ldi	r27, 0x80	; 128
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <__divsf3_pse+0x56>
    1eb6:	bb 0b       	sbc	r27, r27
    1eb8:	80 2d       	mov	r24, r0
    1eba:	bf 01       	movw	r22, r30
    1ebc:	ff 27       	eor	r31, r31
    1ebe:	93 58       	subi	r25, 0x83	; 131
    1ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec2:	2a f0       	brmi	.+10     	; 0x1ece <__divsf3_pse+0x6c>
    1ec4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ec6:	51 05       	cpc	r21, r1
    1ec8:	68 f0       	brcs	.+26     	; 0x1ee4 <__divsf3_pse+0x82>
    1eca:	74 c0       	rjmp	.+232    	; 0x1fb4 <__fp_inf>
    1ecc:	be c0       	rjmp	.+380    	; 0x204a <__fp_szero>
    1ece:	5f 3f       	cpi	r21, 0xFF	; 255
    1ed0:	ec f3       	brlt	.-6      	; 0x1ecc <__divsf3_pse+0x6a>
    1ed2:	98 3e       	cpi	r25, 0xE8	; 232
    1ed4:	dc f3       	brlt	.-10     	; 0x1ecc <__divsf3_pse+0x6a>
    1ed6:	86 95       	lsr	r24
    1ed8:	77 95       	ror	r23
    1eda:	67 95       	ror	r22
    1edc:	b7 95       	ror	r27
    1ede:	f7 95       	ror	r31
    1ee0:	9f 5f       	subi	r25, 0xFF	; 255
    1ee2:	c9 f7       	brne	.-14     	; 0x1ed6 <__divsf3_pse+0x74>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	91 1d       	adc	r25, r1
    1ee8:	96 95       	lsr	r25
    1eea:	87 95       	ror	r24
    1eec:	97 f9       	bld	r25, 7
    1eee:	08 95       	ret
    1ef0:	e1 e0       	ldi	r30, 0x01	; 1
    1ef2:	66 0f       	add	r22, r22
    1ef4:	77 1f       	adc	r23, r23
    1ef6:	88 1f       	adc	r24, r24
    1ef8:	bb 1f       	adc	r27, r27
    1efa:	62 17       	cp	r22, r18
    1efc:	73 07       	cpc	r23, r19
    1efe:	84 07       	cpc	r24, r20
    1f00:	ba 07       	cpc	r27, r26
    1f02:	20 f0       	brcs	.+8      	; 0x1f0c <__divsf3_pse+0xaa>
    1f04:	62 1b       	sub	r22, r18
    1f06:	73 0b       	sbc	r23, r19
    1f08:	84 0b       	sbc	r24, r20
    1f0a:	ba 0b       	sbc	r27, r26
    1f0c:	ee 1f       	adc	r30, r30
    1f0e:	88 f7       	brcc	.-30     	; 0x1ef2 <__divsf3_pse+0x90>
    1f10:	e0 95       	com	r30
    1f12:	08 95       	ret

00001f14 <__fixunssfsi>:
    1f14:	7f d0       	rcall	.+254    	; 0x2014 <__fp_splitA>
    1f16:	88 f0       	brcs	.+34     	; 0x1f3a <__fixunssfsi+0x26>
    1f18:	9f 57       	subi	r25, 0x7F	; 127
    1f1a:	90 f0       	brcs	.+36     	; 0x1f40 <__fixunssfsi+0x2c>
    1f1c:	b9 2f       	mov	r27, r25
    1f1e:	99 27       	eor	r25, r25
    1f20:	b7 51       	subi	r27, 0x17	; 23
    1f22:	a0 f0       	brcs	.+40     	; 0x1f4c <__fixunssfsi+0x38>
    1f24:	d1 f0       	breq	.+52     	; 0x1f5a <__fixunssfsi+0x46>
    1f26:	66 0f       	add	r22, r22
    1f28:	77 1f       	adc	r23, r23
    1f2a:	88 1f       	adc	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	1a f0       	brmi	.+6      	; 0x1f36 <__fixunssfsi+0x22>
    1f30:	ba 95       	dec	r27
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__fixunssfsi+0x12>
    1f34:	12 c0       	rjmp	.+36     	; 0x1f5a <__fixunssfsi+0x46>
    1f36:	b1 30       	cpi	r27, 0x01	; 1
    1f38:	81 f0       	breq	.+32     	; 0x1f5a <__fixunssfsi+0x46>
    1f3a:	86 d0       	rcall	.+268    	; 0x2048 <__fp_zero>
    1f3c:	b1 e0       	ldi	r27, 0x01	; 1
    1f3e:	08 95       	ret
    1f40:	83 c0       	rjmp	.+262    	; 0x2048 <__fp_zero>
    1f42:	67 2f       	mov	r22, r23
    1f44:	78 2f       	mov	r23, r24
    1f46:	88 27       	eor	r24, r24
    1f48:	b8 5f       	subi	r27, 0xF8	; 248
    1f4a:	39 f0       	breq	.+14     	; 0x1f5a <__fixunssfsi+0x46>
    1f4c:	b9 3f       	cpi	r27, 0xF9	; 249
    1f4e:	cc f3       	brlt	.-14     	; 0x1f42 <__fixunssfsi+0x2e>
    1f50:	86 95       	lsr	r24
    1f52:	77 95       	ror	r23
    1f54:	67 95       	ror	r22
    1f56:	b3 95       	inc	r27
    1f58:	d9 f7       	brne	.-10     	; 0x1f50 <__fixunssfsi+0x3c>
    1f5a:	3e f4       	brtc	.+14     	; 0x1f6a <__fixunssfsi+0x56>
    1f5c:	90 95       	com	r25
    1f5e:	80 95       	com	r24
    1f60:	70 95       	com	r23
    1f62:	61 95       	neg	r22
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	8f 4f       	sbci	r24, 0xFF	; 255
    1f68:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6a:	08 95       	ret

00001f6c <__fp_cmp>:
    1f6c:	99 0f       	add	r25, r25
    1f6e:	00 08       	sbc	r0, r0
    1f70:	55 0f       	add	r21, r21
    1f72:	aa 0b       	sbc	r26, r26
    1f74:	e0 e8       	ldi	r30, 0x80	; 128
    1f76:	fe ef       	ldi	r31, 0xFE	; 254
    1f78:	16 16       	cp	r1, r22
    1f7a:	17 06       	cpc	r1, r23
    1f7c:	e8 07       	cpc	r30, r24
    1f7e:	f9 07       	cpc	r31, r25
    1f80:	c0 f0       	brcs	.+48     	; 0x1fb2 <__fp_cmp+0x46>
    1f82:	12 16       	cp	r1, r18
    1f84:	13 06       	cpc	r1, r19
    1f86:	e4 07       	cpc	r30, r20
    1f88:	f5 07       	cpc	r31, r21
    1f8a:	98 f0       	brcs	.+38     	; 0x1fb2 <__fp_cmp+0x46>
    1f8c:	62 1b       	sub	r22, r18
    1f8e:	73 0b       	sbc	r23, r19
    1f90:	84 0b       	sbc	r24, r20
    1f92:	95 0b       	sbc	r25, r21
    1f94:	39 f4       	brne	.+14     	; 0x1fa4 <__fp_cmp+0x38>
    1f96:	0a 26       	eor	r0, r26
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <__fp_cmp+0x46>
    1f9a:	23 2b       	or	r18, r19
    1f9c:	24 2b       	or	r18, r20
    1f9e:	25 2b       	or	r18, r21
    1fa0:	21 f4       	brne	.+8      	; 0x1faa <__fp_cmp+0x3e>
    1fa2:	08 95       	ret
    1fa4:	0a 26       	eor	r0, r26
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <__fp_cmp+0x3e>
    1fa8:	a1 40       	sbci	r26, 0x01	; 1
    1faa:	a6 95       	lsr	r26
    1fac:	8f ef       	ldi	r24, 0xFF	; 255
    1fae:	81 1d       	adc	r24, r1
    1fb0:	81 1d       	adc	r24, r1
    1fb2:	08 95       	ret

00001fb4 <__fp_inf>:
    1fb4:	97 f9       	bld	r25, 7
    1fb6:	9f 67       	ori	r25, 0x7F	; 127
    1fb8:	80 e8       	ldi	r24, 0x80	; 128
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	08 95       	ret

00001fc0 <__fp_nan>:
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	80 ec       	ldi	r24, 0xC0	; 192
    1fc4:	08 95       	ret

00001fc6 <__fp_pscA>:
    1fc6:	00 24       	eor	r0, r0
    1fc8:	0a 94       	dec	r0
    1fca:	16 16       	cp	r1, r22
    1fcc:	17 06       	cpc	r1, r23
    1fce:	18 06       	cpc	r1, r24
    1fd0:	09 06       	cpc	r0, r25
    1fd2:	08 95       	ret

00001fd4 <__fp_pscB>:
    1fd4:	00 24       	eor	r0, r0
    1fd6:	0a 94       	dec	r0
    1fd8:	12 16       	cp	r1, r18
    1fda:	13 06       	cpc	r1, r19
    1fdc:	14 06       	cpc	r1, r20
    1fde:	05 06       	cpc	r0, r21
    1fe0:	08 95       	ret

00001fe2 <__fp_round>:
    1fe2:	09 2e       	mov	r0, r25
    1fe4:	03 94       	inc	r0
    1fe6:	00 0c       	add	r0, r0
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <__fp_round+0xc>
    1fea:	88 23       	and	r24, r24
    1fec:	52 f0       	brmi	.+20     	; 0x2002 <__fp_round+0x20>
    1fee:	bb 0f       	add	r27, r27
    1ff0:	40 f4       	brcc	.+16     	; 0x2002 <__fp_round+0x20>
    1ff2:	bf 2b       	or	r27, r31
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <__fp_round+0x18>
    1ff6:	60 ff       	sbrs	r22, 0
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <__fp_round+0x20>
    1ffa:	6f 5f       	subi	r22, 0xFF	; 255
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	08 95       	ret

00002004 <__fp_split3>:
    2004:	57 fd       	sbrc	r21, 7
    2006:	90 58       	subi	r25, 0x80	; 128
    2008:	44 0f       	add	r20, r20
    200a:	55 1f       	adc	r21, r21
    200c:	59 f0       	breq	.+22     	; 0x2024 <__fp_splitA+0x10>
    200e:	5f 3f       	cpi	r21, 0xFF	; 255
    2010:	71 f0       	breq	.+28     	; 0x202e <__fp_splitA+0x1a>
    2012:	47 95       	ror	r20

00002014 <__fp_splitA>:
    2014:	88 0f       	add	r24, r24
    2016:	97 fb       	bst	r25, 7
    2018:	99 1f       	adc	r25, r25
    201a:	61 f0       	breq	.+24     	; 0x2034 <__fp_splitA+0x20>
    201c:	9f 3f       	cpi	r25, 0xFF	; 255
    201e:	79 f0       	breq	.+30     	; 0x203e <__fp_splitA+0x2a>
    2020:	87 95       	ror	r24
    2022:	08 95       	ret
    2024:	12 16       	cp	r1, r18
    2026:	13 06       	cpc	r1, r19
    2028:	14 06       	cpc	r1, r20
    202a:	55 1f       	adc	r21, r21
    202c:	f2 cf       	rjmp	.-28     	; 0x2012 <__fp_split3+0xe>
    202e:	46 95       	lsr	r20
    2030:	f1 df       	rcall	.-30     	; 0x2014 <__fp_splitA>
    2032:	08 c0       	rjmp	.+16     	; 0x2044 <__fp_splitA+0x30>
    2034:	16 16       	cp	r1, r22
    2036:	17 06       	cpc	r1, r23
    2038:	18 06       	cpc	r1, r24
    203a:	99 1f       	adc	r25, r25
    203c:	f1 cf       	rjmp	.-30     	; 0x2020 <__fp_splitA+0xc>
    203e:	86 95       	lsr	r24
    2040:	71 05       	cpc	r23, r1
    2042:	61 05       	cpc	r22, r1
    2044:	08 94       	sec
    2046:	08 95       	ret

00002048 <__fp_zero>:
    2048:	e8 94       	clt

0000204a <__fp_szero>:
    204a:	bb 27       	eor	r27, r27
    204c:	66 27       	eor	r22, r22
    204e:	77 27       	eor	r23, r23
    2050:	cb 01       	movw	r24, r22
    2052:	97 f9       	bld	r25, 7
    2054:	08 95       	ret

00002056 <__mulsf3>:
    2056:	0b d0       	rcall	.+22     	; 0x206e <__mulsf3x>
    2058:	c4 cf       	rjmp	.-120    	; 0x1fe2 <__fp_round>
    205a:	b5 df       	rcall	.-150    	; 0x1fc6 <__fp_pscA>
    205c:	28 f0       	brcs	.+10     	; 0x2068 <__mulsf3+0x12>
    205e:	ba df       	rcall	.-140    	; 0x1fd4 <__fp_pscB>
    2060:	18 f0       	brcs	.+6      	; 0x2068 <__mulsf3+0x12>
    2062:	95 23       	and	r25, r21
    2064:	09 f0       	breq	.+2      	; 0x2068 <__mulsf3+0x12>
    2066:	a6 cf       	rjmp	.-180    	; 0x1fb4 <__fp_inf>
    2068:	ab cf       	rjmp	.-170    	; 0x1fc0 <__fp_nan>
    206a:	11 24       	eor	r1, r1
    206c:	ee cf       	rjmp	.-36     	; 0x204a <__fp_szero>

0000206e <__mulsf3x>:
    206e:	ca df       	rcall	.-108    	; 0x2004 <__fp_split3>
    2070:	a0 f3       	brcs	.-24     	; 0x205a <__mulsf3+0x4>

00002072 <__mulsf3_pse>:
    2072:	95 9f       	mul	r25, r21
    2074:	d1 f3       	breq	.-12     	; 0x206a <__mulsf3+0x14>
    2076:	95 0f       	add	r25, r21
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	55 1f       	adc	r21, r21
    207c:	62 9f       	mul	r22, r18
    207e:	f0 01       	movw	r30, r0
    2080:	72 9f       	mul	r23, r18
    2082:	bb 27       	eor	r27, r27
    2084:	f0 0d       	add	r31, r0
    2086:	b1 1d       	adc	r27, r1
    2088:	63 9f       	mul	r22, r19
    208a:	aa 27       	eor	r26, r26
    208c:	f0 0d       	add	r31, r0
    208e:	b1 1d       	adc	r27, r1
    2090:	aa 1f       	adc	r26, r26
    2092:	64 9f       	mul	r22, r20
    2094:	66 27       	eor	r22, r22
    2096:	b0 0d       	add	r27, r0
    2098:	a1 1d       	adc	r26, r1
    209a:	66 1f       	adc	r22, r22
    209c:	82 9f       	mul	r24, r18
    209e:	22 27       	eor	r18, r18
    20a0:	b0 0d       	add	r27, r0
    20a2:	a1 1d       	adc	r26, r1
    20a4:	62 1f       	adc	r22, r18
    20a6:	73 9f       	mul	r23, r19
    20a8:	b0 0d       	add	r27, r0
    20aa:	a1 1d       	adc	r26, r1
    20ac:	62 1f       	adc	r22, r18
    20ae:	83 9f       	mul	r24, r19
    20b0:	a0 0d       	add	r26, r0
    20b2:	61 1d       	adc	r22, r1
    20b4:	22 1f       	adc	r18, r18
    20b6:	74 9f       	mul	r23, r20
    20b8:	33 27       	eor	r19, r19
    20ba:	a0 0d       	add	r26, r0
    20bc:	61 1d       	adc	r22, r1
    20be:	23 1f       	adc	r18, r19
    20c0:	84 9f       	mul	r24, r20
    20c2:	60 0d       	add	r22, r0
    20c4:	21 1d       	adc	r18, r1
    20c6:	82 2f       	mov	r24, r18
    20c8:	76 2f       	mov	r23, r22
    20ca:	6a 2f       	mov	r22, r26
    20cc:	11 24       	eor	r1, r1
    20ce:	9f 57       	subi	r25, 0x7F	; 127
    20d0:	50 40       	sbci	r21, 0x00	; 0
    20d2:	8a f0       	brmi	.+34     	; 0x20f6 <__mulsf3_pse+0x84>
    20d4:	e1 f0       	breq	.+56     	; 0x210e <__mulsf3_pse+0x9c>
    20d6:	88 23       	and	r24, r24
    20d8:	4a f0       	brmi	.+18     	; 0x20ec <__mulsf3_pse+0x7a>
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	bb 1f       	adc	r27, r27
    20e0:	66 1f       	adc	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	88 1f       	adc	r24, r24
    20e6:	91 50       	subi	r25, 0x01	; 1
    20e8:	50 40       	sbci	r21, 0x00	; 0
    20ea:	a9 f7       	brne	.-22     	; 0x20d6 <__mulsf3_pse+0x64>
    20ec:	9e 3f       	cpi	r25, 0xFE	; 254
    20ee:	51 05       	cpc	r21, r1
    20f0:	70 f0       	brcs	.+28     	; 0x210e <__mulsf3_pse+0x9c>
    20f2:	60 cf       	rjmp	.-320    	; 0x1fb4 <__fp_inf>
    20f4:	aa cf       	rjmp	.-172    	; 0x204a <__fp_szero>
    20f6:	5f 3f       	cpi	r21, 0xFF	; 255
    20f8:	ec f3       	brlt	.-6      	; 0x20f4 <__mulsf3_pse+0x82>
    20fa:	98 3e       	cpi	r25, 0xE8	; 232
    20fc:	dc f3       	brlt	.-10     	; 0x20f4 <__mulsf3_pse+0x82>
    20fe:	86 95       	lsr	r24
    2100:	77 95       	ror	r23
    2102:	67 95       	ror	r22
    2104:	b7 95       	ror	r27
    2106:	f7 95       	ror	r31
    2108:	e7 95       	ror	r30
    210a:	9f 5f       	subi	r25, 0xFF	; 255
    210c:	c1 f7       	brne	.-16     	; 0x20fe <__mulsf3_pse+0x8c>
    210e:	fe 2b       	or	r31, r30
    2110:	88 0f       	add	r24, r24
    2112:	91 1d       	adc	r25, r1
    2114:	96 95       	lsr	r25
    2116:	87 95       	ror	r24
    2118:	97 f9       	bld	r25, 7
    211a:	08 95       	ret

0000211c <__divmodhi4>:
    211c:	97 fb       	bst	r25, 7
    211e:	07 2e       	mov	r0, r23
    2120:	16 f4       	brtc	.+4      	; 0x2126 <__divmodhi4+0xa>
    2122:	00 94       	com	r0
    2124:	07 d0       	rcall	.+14     	; 0x2134 <__divmodhi4_neg1>
    2126:	77 fd       	sbrc	r23, 7
    2128:	09 d0       	rcall	.+18     	; 0x213c <__divmodhi4_neg2>
    212a:	0e 94 cc 10 	call	0x2198	; 0x2198 <__udivmodhi4>
    212e:	07 fc       	sbrc	r0, 7
    2130:	05 d0       	rcall	.+10     	; 0x213c <__divmodhi4_neg2>
    2132:	3e f4       	brtc	.+14     	; 0x2142 <__divmodhi4_exit>

00002134 <__divmodhi4_neg1>:
    2134:	90 95       	com	r25
    2136:	81 95       	neg	r24
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	08 95       	ret

0000213c <__divmodhi4_neg2>:
    213c:	70 95       	com	r23
    213e:	61 95       	neg	r22
    2140:	7f 4f       	sbci	r23, 0xFF	; 255

00002142 <__divmodhi4_exit>:
    2142:	08 95       	ret

00002144 <__divmodsi4>:
    2144:	05 2e       	mov	r0, r21
    2146:	97 fb       	bst	r25, 7
    2148:	1e f4       	brtc	.+6      	; 0x2150 <__divmodsi4+0xc>
    214a:	00 94       	com	r0
    214c:	0e 94 b9 10 	call	0x2172	; 0x2172 <__negsi2>
    2150:	57 fd       	sbrc	r21, 7
    2152:	07 d0       	rcall	.+14     	; 0x2162 <__divmodsi4_neg2>
    2154:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__udivmodsi4>
    2158:	07 fc       	sbrc	r0, 7
    215a:	03 d0       	rcall	.+6      	; 0x2162 <__divmodsi4_neg2>
    215c:	4e f4       	brtc	.+18     	; 0x2170 <__divmodsi4_exit>
    215e:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__negsi2>

00002162 <__divmodsi4_neg2>:
    2162:	50 95       	com	r21
    2164:	40 95       	com	r20
    2166:	30 95       	com	r19
    2168:	21 95       	neg	r18
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	4f 4f       	sbci	r20, 0xFF	; 255
    216e:	5f 4f       	sbci	r21, 0xFF	; 255

00002170 <__divmodsi4_exit>:
    2170:	08 95       	ret

00002172 <__negsi2>:
    2172:	90 95       	com	r25
    2174:	80 95       	com	r24
    2176:	70 95       	com	r23
    2178:	61 95       	neg	r22
    217a:	7f 4f       	sbci	r23, 0xFF	; 255
    217c:	8f 4f       	sbci	r24, 0xFF	; 255
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	08 95       	ret

00002182 <__muluhisi3>:
    2182:	0e 94 02 11 	call	0x2204	; 0x2204 <__umulhisi3>
    2186:	a5 9f       	mul	r26, r21
    2188:	90 0d       	add	r25, r0
    218a:	b4 9f       	mul	r27, r20
    218c:	90 0d       	add	r25, r0
    218e:	a4 9f       	mul	r26, r20
    2190:	80 0d       	add	r24, r0
    2192:	91 1d       	adc	r25, r1
    2194:	11 24       	eor	r1, r1
    2196:	08 95       	ret

00002198 <__udivmodhi4>:
    2198:	aa 1b       	sub	r26, r26
    219a:	bb 1b       	sub	r27, r27
    219c:	51 e1       	ldi	r21, 0x11	; 17
    219e:	07 c0       	rjmp	.+14     	; 0x21ae <__udivmodhi4_ep>

000021a0 <__udivmodhi4_loop>:
    21a0:	aa 1f       	adc	r26, r26
    21a2:	bb 1f       	adc	r27, r27
    21a4:	a6 17       	cp	r26, r22
    21a6:	b7 07       	cpc	r27, r23
    21a8:	10 f0       	brcs	.+4      	; 0x21ae <__udivmodhi4_ep>
    21aa:	a6 1b       	sub	r26, r22
    21ac:	b7 0b       	sbc	r27, r23

000021ae <__udivmodhi4_ep>:
    21ae:	88 1f       	adc	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	5a 95       	dec	r21
    21b4:	a9 f7       	brne	.-22     	; 0x21a0 <__udivmodhi4_loop>
    21b6:	80 95       	com	r24
    21b8:	90 95       	com	r25
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	08 95       	ret

000021c0 <__udivmodsi4>:
    21c0:	a1 e2       	ldi	r26, 0x21	; 33
    21c2:	1a 2e       	mov	r1, r26
    21c4:	aa 1b       	sub	r26, r26
    21c6:	bb 1b       	sub	r27, r27
    21c8:	fd 01       	movw	r30, r26
    21ca:	0d c0       	rjmp	.+26     	; 0x21e6 <__udivmodsi4_ep>

000021cc <__udivmodsi4_loop>:
    21cc:	aa 1f       	adc	r26, r26
    21ce:	bb 1f       	adc	r27, r27
    21d0:	ee 1f       	adc	r30, r30
    21d2:	ff 1f       	adc	r31, r31
    21d4:	a2 17       	cp	r26, r18
    21d6:	b3 07       	cpc	r27, r19
    21d8:	e4 07       	cpc	r30, r20
    21da:	f5 07       	cpc	r31, r21
    21dc:	20 f0       	brcs	.+8      	; 0x21e6 <__udivmodsi4_ep>
    21de:	a2 1b       	sub	r26, r18
    21e0:	b3 0b       	sbc	r27, r19
    21e2:	e4 0b       	sbc	r30, r20
    21e4:	f5 0b       	sbc	r31, r21

000021e6 <__udivmodsi4_ep>:
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	1a 94       	dec	r1
    21f0:	69 f7       	brne	.-38     	; 0x21cc <__udivmodsi4_loop>
    21f2:	60 95       	com	r22
    21f4:	70 95       	com	r23
    21f6:	80 95       	com	r24
    21f8:	90 95       	com	r25
    21fa:	9b 01       	movw	r18, r22
    21fc:	ac 01       	movw	r20, r24
    21fe:	bd 01       	movw	r22, r26
    2200:	cf 01       	movw	r24, r30
    2202:	08 95       	ret

00002204 <__umulhisi3>:
    2204:	a2 9f       	mul	r26, r18
    2206:	b0 01       	movw	r22, r0
    2208:	b3 9f       	mul	r27, r19
    220a:	c0 01       	movw	r24, r0
    220c:	a3 9f       	mul	r26, r19
    220e:	70 0d       	add	r23, r0
    2210:	81 1d       	adc	r24, r1
    2212:	11 24       	eor	r1, r1
    2214:	91 1d       	adc	r25, r1
    2216:	b2 9f       	mul	r27, r18
    2218:	70 0d       	add	r23, r0
    221a:	81 1d       	adc	r24, r1
    221c:	11 24       	eor	r1, r1
    221e:	91 1d       	adc	r25, r1
    2220:	08 95       	ret

00002222 <fdevopen>:
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	ec 01       	movw	r28, r24
    222c:	8b 01       	movw	r16, r22
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	31 f4       	brne	.+12     	; 0x223e <fdevopen+0x1c>
    2232:	61 15       	cp	r22, r1
    2234:	71 05       	cpc	r23, r1
    2236:	19 f4       	brne	.+6      	; 0x223e <fdevopen+0x1c>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	38 c0       	rjmp	.+112    	; 0x22ae <fdevopen+0x8c>
    223e:	6e e0       	ldi	r22, 0x0E	; 14
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 42 13 	call	0x2684	; 0x2684 <calloc>
    224a:	fc 01       	movw	r30, r24
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	a1 f3       	breq	.-24     	; 0x2238 <fdevopen+0x16>
    2250:	80 e8       	ldi	r24, 0x80	; 128
    2252:	83 83       	std	Z+3, r24	; 0x03
    2254:	01 15       	cp	r16, r1
    2256:	11 05       	cpc	r17, r1
    2258:	71 f0       	breq	.+28     	; 0x2276 <fdevopen+0x54>
    225a:	13 87       	std	Z+11, r17	; 0x0b
    225c:	02 87       	std	Z+10, r16	; 0x0a
    225e:	81 e8       	ldi	r24, 0x81	; 129
    2260:	83 83       	std	Z+3, r24	; 0x03
    2262:	80 91 0a 04 	lds	r24, 0x040A
    2266:	90 91 0b 04 	lds	r25, 0x040B
    226a:	89 2b       	or	r24, r25
    226c:	21 f4       	brne	.+8      	; 0x2276 <fdevopen+0x54>
    226e:	f0 93 0b 04 	sts	0x040B, r31
    2272:	e0 93 0a 04 	sts	0x040A, r30
    2276:	20 97       	sbiw	r28, 0x00	; 0
    2278:	c9 f0       	breq	.+50     	; 0x22ac <fdevopen+0x8a>
    227a:	d1 87       	std	Z+9, r29	; 0x09
    227c:	c0 87       	std	Z+8, r28	; 0x08
    227e:	83 81       	ldd	r24, Z+3	; 0x03
    2280:	82 60       	ori	r24, 0x02	; 2
    2282:	83 83       	std	Z+3, r24	; 0x03
    2284:	80 91 0c 04 	lds	r24, 0x040C
    2288:	90 91 0d 04 	lds	r25, 0x040D
    228c:	89 2b       	or	r24, r25
    228e:	71 f4       	brne	.+28     	; 0x22ac <fdevopen+0x8a>
    2290:	f0 93 0d 04 	sts	0x040D, r31
    2294:	e0 93 0c 04 	sts	0x040C, r30
    2298:	80 91 0e 04 	lds	r24, 0x040E
    229c:	90 91 0f 04 	lds	r25, 0x040F
    22a0:	89 2b       	or	r24, r25
    22a2:	21 f4       	brne	.+8      	; 0x22ac <fdevopen+0x8a>
    22a4:	f0 93 0f 04 	sts	0x040F, r31
    22a8:	e0 93 0e 04 	sts	0x040E, r30
    22ac:	cf 01       	movw	r24, r30
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	08 95       	ret

000022b8 <printf>:
    22b8:	a0 e0       	ldi	r26, 0x00	; 0
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e2 e6       	ldi	r30, 0x62	; 98
    22be:	f1 e1       	ldi	r31, 0x11	; 17
    22c0:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__prologue_saves__+0x20>
    22c4:	fe 01       	movw	r30, r28
    22c6:	35 96       	adiw	r30, 0x05	; 5
    22c8:	61 91       	ld	r22, Z+
    22ca:	71 91       	ld	r23, Z+
    22cc:	af 01       	movw	r20, r30
    22ce:	80 91 0c 04 	lds	r24, 0x040C
    22d2:	90 91 0d 04 	lds	r25, 0x040D
    22d6:	0e 94 70 11 	call	0x22e0	; 0x22e0 <vfprintf>
    22da:	e2 e0       	ldi	r30, 0x02	; 2
    22dc:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__epilogue_restores__+0x20>

000022e0 <vfprintf>:
    22e0:	ac e0       	ldi	r26, 0x0C	; 12
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e6 e7       	ldi	r30, 0x76	; 118
    22e6:	f1 e1       	ldi	r31, 0x11	; 17
    22e8:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__prologue_saves__>
    22ec:	7c 01       	movw	r14, r24
    22ee:	6b 01       	movw	r12, r22
    22f0:	8a 01       	movw	r16, r20
    22f2:	fc 01       	movw	r30, r24
    22f4:	17 82       	std	Z+7, r1	; 0x07
    22f6:	16 82       	std	Z+6, r1	; 0x06
    22f8:	83 81       	ldd	r24, Z+3	; 0x03
    22fa:	81 ff       	sbrs	r24, 1
    22fc:	bd c1       	rjmp	.+890    	; 0x2678 <vfprintf+0x398>
    22fe:	ce 01       	movw	r24, r28
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	4c 01       	movw	r8, r24
    2304:	f7 01       	movw	r30, r14
    2306:	93 81       	ldd	r25, Z+3	; 0x03
    2308:	f6 01       	movw	r30, r12
    230a:	93 fd       	sbrc	r25, 3
    230c:	85 91       	lpm	r24, Z+
    230e:	93 ff       	sbrs	r25, 3
    2310:	81 91       	ld	r24, Z+
    2312:	6f 01       	movw	r12, r30
    2314:	88 23       	and	r24, r24
    2316:	09 f4       	brne	.+2      	; 0x231a <vfprintf+0x3a>
    2318:	ab c1       	rjmp	.+854    	; 0x2670 <vfprintf+0x390>
    231a:	85 32       	cpi	r24, 0x25	; 37
    231c:	39 f4       	brne	.+14     	; 0x232c <vfprintf+0x4c>
    231e:	93 fd       	sbrc	r25, 3
    2320:	85 91       	lpm	r24, Z+
    2322:	93 ff       	sbrs	r25, 3
    2324:	81 91       	ld	r24, Z+
    2326:	6f 01       	movw	r12, r30
    2328:	85 32       	cpi	r24, 0x25	; 37
    232a:	29 f4       	brne	.+10     	; 0x2336 <vfprintf+0x56>
    232c:	b7 01       	movw	r22, r14
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2334:	e7 cf       	rjmp	.-50     	; 0x2304 <vfprintf+0x24>
    2336:	51 2c       	mov	r5, r1
    2338:	31 2c       	mov	r3, r1
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	20 32       	cpi	r18, 0x20	; 32
    233e:	a0 f4       	brcc	.+40     	; 0x2368 <vfprintf+0x88>
    2340:	8b 32       	cpi	r24, 0x2B	; 43
    2342:	69 f0       	breq	.+26     	; 0x235e <vfprintf+0x7e>
    2344:	30 f4       	brcc	.+12     	; 0x2352 <vfprintf+0x72>
    2346:	80 32       	cpi	r24, 0x20	; 32
    2348:	59 f0       	breq	.+22     	; 0x2360 <vfprintf+0x80>
    234a:	83 32       	cpi	r24, 0x23	; 35
    234c:	69 f4       	brne	.+26     	; 0x2368 <vfprintf+0x88>
    234e:	20 61       	ori	r18, 0x10	; 16
    2350:	2c c0       	rjmp	.+88     	; 0x23aa <vfprintf+0xca>
    2352:	8d 32       	cpi	r24, 0x2D	; 45
    2354:	39 f0       	breq	.+14     	; 0x2364 <vfprintf+0x84>
    2356:	80 33       	cpi	r24, 0x30	; 48
    2358:	39 f4       	brne	.+14     	; 0x2368 <vfprintf+0x88>
    235a:	21 60       	ori	r18, 0x01	; 1
    235c:	26 c0       	rjmp	.+76     	; 0x23aa <vfprintf+0xca>
    235e:	22 60       	ori	r18, 0x02	; 2
    2360:	24 60       	ori	r18, 0x04	; 4
    2362:	23 c0       	rjmp	.+70     	; 0x23aa <vfprintf+0xca>
    2364:	28 60       	ori	r18, 0x08	; 8
    2366:	21 c0       	rjmp	.+66     	; 0x23aa <vfprintf+0xca>
    2368:	27 fd       	sbrc	r18, 7
    236a:	27 c0       	rjmp	.+78     	; 0x23ba <vfprintf+0xda>
    236c:	30 ed       	ldi	r19, 0xD0	; 208
    236e:	38 0f       	add	r19, r24
    2370:	3a 30       	cpi	r19, 0x0A	; 10
    2372:	78 f4       	brcc	.+30     	; 0x2392 <vfprintf+0xb2>
    2374:	26 ff       	sbrs	r18, 6
    2376:	06 c0       	rjmp	.+12     	; 0x2384 <vfprintf+0xa4>
    2378:	fa e0       	ldi	r31, 0x0A	; 10
    237a:	5f 9e       	mul	r5, r31
    237c:	30 0d       	add	r19, r0
    237e:	11 24       	eor	r1, r1
    2380:	53 2e       	mov	r5, r19
    2382:	13 c0       	rjmp	.+38     	; 0x23aa <vfprintf+0xca>
    2384:	8a e0       	ldi	r24, 0x0A	; 10
    2386:	38 9e       	mul	r3, r24
    2388:	30 0d       	add	r19, r0
    238a:	11 24       	eor	r1, r1
    238c:	33 2e       	mov	r3, r19
    238e:	20 62       	ori	r18, 0x20	; 32
    2390:	0c c0       	rjmp	.+24     	; 0x23aa <vfprintf+0xca>
    2392:	8e 32       	cpi	r24, 0x2E	; 46
    2394:	21 f4       	brne	.+8      	; 0x239e <vfprintf+0xbe>
    2396:	26 fd       	sbrc	r18, 6
    2398:	6b c1       	rjmp	.+726    	; 0x2670 <vfprintf+0x390>
    239a:	20 64       	ori	r18, 0x40	; 64
    239c:	06 c0       	rjmp	.+12     	; 0x23aa <vfprintf+0xca>
    239e:	8c 36       	cpi	r24, 0x6C	; 108
    23a0:	11 f4       	brne	.+4      	; 0x23a6 <vfprintf+0xc6>
    23a2:	20 68       	ori	r18, 0x80	; 128
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <vfprintf+0xca>
    23a6:	88 36       	cpi	r24, 0x68	; 104
    23a8:	41 f4       	brne	.+16     	; 0x23ba <vfprintf+0xda>
    23aa:	f6 01       	movw	r30, r12
    23ac:	93 fd       	sbrc	r25, 3
    23ae:	85 91       	lpm	r24, Z+
    23b0:	93 ff       	sbrs	r25, 3
    23b2:	81 91       	ld	r24, Z+
    23b4:	6f 01       	movw	r12, r30
    23b6:	81 11       	cpse	r24, r1
    23b8:	c1 cf       	rjmp	.-126    	; 0x233c <vfprintf+0x5c>
    23ba:	98 2f       	mov	r25, r24
    23bc:	9f 7d       	andi	r25, 0xDF	; 223
    23be:	95 54       	subi	r25, 0x45	; 69
    23c0:	93 30       	cpi	r25, 0x03	; 3
    23c2:	28 f4       	brcc	.+10     	; 0x23ce <vfprintf+0xee>
    23c4:	0c 5f       	subi	r16, 0xFC	; 252
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	ff e3       	ldi	r31, 0x3F	; 63
    23ca:	f9 83       	std	Y+1, r31	; 0x01
    23cc:	0d c0       	rjmp	.+26     	; 0x23e8 <vfprintf+0x108>
    23ce:	83 36       	cpi	r24, 0x63	; 99
    23d0:	31 f0       	breq	.+12     	; 0x23de <vfprintf+0xfe>
    23d2:	83 37       	cpi	r24, 0x73	; 115
    23d4:	71 f0       	breq	.+28     	; 0x23f2 <vfprintf+0x112>
    23d6:	83 35       	cpi	r24, 0x53	; 83
    23d8:	09 f0       	breq	.+2      	; 0x23dc <vfprintf+0xfc>
    23da:	5b c0       	rjmp	.+182    	; 0x2492 <vfprintf+0x1b2>
    23dc:	22 c0       	rjmp	.+68     	; 0x2422 <vfprintf+0x142>
    23de:	f8 01       	movw	r30, r16
    23e0:	80 81       	ld	r24, Z
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	0e 5f       	subi	r16, 0xFE	; 254
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	44 24       	eor	r4, r4
    23ea:	43 94       	inc	r4
    23ec:	51 2c       	mov	r5, r1
    23ee:	54 01       	movw	r10, r8
    23f0:	15 c0       	rjmp	.+42     	; 0x241c <vfprintf+0x13c>
    23f2:	38 01       	movw	r6, r16
    23f4:	f2 e0       	ldi	r31, 0x02	; 2
    23f6:	6f 0e       	add	r6, r31
    23f8:	71 1c       	adc	r7, r1
    23fa:	f8 01       	movw	r30, r16
    23fc:	a0 80       	ld	r10, Z
    23fe:	b1 80       	ldd	r11, Z+1	; 0x01
    2400:	26 ff       	sbrs	r18, 6
    2402:	03 c0       	rjmp	.+6      	; 0x240a <vfprintf+0x12a>
    2404:	65 2d       	mov	r22, r5
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	02 c0       	rjmp	.+4      	; 0x240e <vfprintf+0x12e>
    240a:	6f ef       	ldi	r22, 0xFF	; 255
    240c:	7f ef       	ldi	r23, 0xFF	; 255
    240e:	c5 01       	movw	r24, r10
    2410:	2c 87       	std	Y+12, r18	; 0x0c
    2412:	0e 94 97 14 	call	0x292e	; 0x292e <strnlen>
    2416:	2c 01       	movw	r4, r24
    2418:	83 01       	movw	r16, r6
    241a:	2c 85       	ldd	r18, Y+12	; 0x0c
    241c:	2f 77       	andi	r18, 0x7F	; 127
    241e:	22 2e       	mov	r2, r18
    2420:	17 c0       	rjmp	.+46     	; 0x2450 <vfprintf+0x170>
    2422:	38 01       	movw	r6, r16
    2424:	f2 e0       	ldi	r31, 0x02	; 2
    2426:	6f 0e       	add	r6, r31
    2428:	71 1c       	adc	r7, r1
    242a:	f8 01       	movw	r30, r16
    242c:	a0 80       	ld	r10, Z
    242e:	b1 80       	ldd	r11, Z+1	; 0x01
    2430:	26 ff       	sbrs	r18, 6
    2432:	03 c0       	rjmp	.+6      	; 0x243a <vfprintf+0x15a>
    2434:	65 2d       	mov	r22, r5
    2436:	70 e0       	ldi	r23, 0x00	; 0
    2438:	02 c0       	rjmp	.+4      	; 0x243e <vfprintf+0x15e>
    243a:	6f ef       	ldi	r22, 0xFF	; 255
    243c:	7f ef       	ldi	r23, 0xFF	; 255
    243e:	c5 01       	movw	r24, r10
    2440:	2c 87       	std	Y+12, r18	; 0x0c
    2442:	0e 94 85 14 	call	0x290a	; 0x290a <strnlen_P>
    2446:	2c 01       	movw	r4, r24
    2448:	2c 85       	ldd	r18, Y+12	; 0x0c
    244a:	20 68       	ori	r18, 0x80	; 128
    244c:	22 2e       	mov	r2, r18
    244e:	83 01       	movw	r16, r6
    2450:	23 fc       	sbrc	r2, 3
    2452:	1b c0       	rjmp	.+54     	; 0x248a <vfprintf+0x1aa>
    2454:	83 2d       	mov	r24, r3
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	48 16       	cp	r4, r24
    245a:	59 06       	cpc	r5, r25
    245c:	b0 f4       	brcc	.+44     	; 0x248a <vfprintf+0x1aa>
    245e:	b7 01       	movw	r22, r14
    2460:	80 e2       	ldi	r24, 0x20	; 32
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2468:	3a 94       	dec	r3
    246a:	f4 cf       	rjmp	.-24     	; 0x2454 <vfprintf+0x174>
    246c:	f5 01       	movw	r30, r10
    246e:	27 fc       	sbrc	r2, 7
    2470:	85 91       	lpm	r24, Z+
    2472:	27 fe       	sbrs	r2, 7
    2474:	81 91       	ld	r24, Z+
    2476:	5f 01       	movw	r10, r30
    2478:	b7 01       	movw	r22, r14
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2480:	31 10       	cpse	r3, r1
    2482:	3a 94       	dec	r3
    2484:	f1 e0       	ldi	r31, 0x01	; 1
    2486:	4f 1a       	sub	r4, r31
    2488:	51 08       	sbc	r5, r1
    248a:	41 14       	cp	r4, r1
    248c:	51 04       	cpc	r5, r1
    248e:	71 f7       	brne	.-36     	; 0x246c <vfprintf+0x18c>
    2490:	e5 c0       	rjmp	.+458    	; 0x265c <vfprintf+0x37c>
    2492:	84 36       	cpi	r24, 0x64	; 100
    2494:	11 f0       	breq	.+4      	; 0x249a <vfprintf+0x1ba>
    2496:	89 36       	cpi	r24, 0x69	; 105
    2498:	39 f5       	brne	.+78     	; 0x24e8 <vfprintf+0x208>
    249a:	f8 01       	movw	r30, r16
    249c:	27 ff       	sbrs	r18, 7
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <vfprintf+0x1ce>
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	0c 5f       	subi	r16, 0xFC	; 252
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	08 c0       	rjmp	.+16     	; 0x24be <vfprintf+0x1de>
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	88 27       	eor	r24, r24
    24b4:	77 fd       	sbrc	r23, 7
    24b6:	80 95       	com	r24
    24b8:	98 2f       	mov	r25, r24
    24ba:	0e 5f       	subi	r16, 0xFE	; 254
    24bc:	1f 4f       	sbci	r17, 0xFF	; 255
    24be:	2f 76       	andi	r18, 0x6F	; 111
    24c0:	b2 2e       	mov	r11, r18
    24c2:	97 ff       	sbrs	r25, 7
    24c4:	09 c0       	rjmp	.+18     	; 0x24d8 <vfprintf+0x1f8>
    24c6:	90 95       	com	r25
    24c8:	80 95       	com	r24
    24ca:	70 95       	com	r23
    24cc:	61 95       	neg	r22
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	8f 4f       	sbci	r24, 0xFF	; 255
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	20 68       	ori	r18, 0x80	; 128
    24d6:	b2 2e       	mov	r11, r18
    24d8:	2a e0       	ldi	r18, 0x0A	; 10
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	a4 01       	movw	r20, r8
    24de:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__ultoa_invert>
    24e2:	a8 2e       	mov	r10, r24
    24e4:	a8 18       	sub	r10, r8
    24e6:	44 c0       	rjmp	.+136    	; 0x2570 <vfprintf+0x290>
    24e8:	85 37       	cpi	r24, 0x75	; 117
    24ea:	29 f4       	brne	.+10     	; 0x24f6 <vfprintf+0x216>
    24ec:	2f 7e       	andi	r18, 0xEF	; 239
    24ee:	b2 2e       	mov	r11, r18
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	25 c0       	rjmp	.+74     	; 0x2540 <vfprintf+0x260>
    24f6:	f2 2f       	mov	r31, r18
    24f8:	f9 7f       	andi	r31, 0xF9	; 249
    24fa:	bf 2e       	mov	r11, r31
    24fc:	8f 36       	cpi	r24, 0x6F	; 111
    24fe:	c1 f0       	breq	.+48     	; 0x2530 <vfprintf+0x250>
    2500:	18 f4       	brcc	.+6      	; 0x2508 <vfprintf+0x228>
    2502:	88 35       	cpi	r24, 0x58	; 88
    2504:	79 f0       	breq	.+30     	; 0x2524 <vfprintf+0x244>
    2506:	b4 c0       	rjmp	.+360    	; 0x2670 <vfprintf+0x390>
    2508:	80 37       	cpi	r24, 0x70	; 112
    250a:	19 f0       	breq	.+6      	; 0x2512 <vfprintf+0x232>
    250c:	88 37       	cpi	r24, 0x78	; 120
    250e:	21 f0       	breq	.+8      	; 0x2518 <vfprintf+0x238>
    2510:	af c0       	rjmp	.+350    	; 0x2670 <vfprintf+0x390>
    2512:	2f 2f       	mov	r18, r31
    2514:	20 61       	ori	r18, 0x10	; 16
    2516:	b2 2e       	mov	r11, r18
    2518:	b4 fe       	sbrs	r11, 4
    251a:	0d c0       	rjmp	.+26     	; 0x2536 <vfprintf+0x256>
    251c:	8b 2d       	mov	r24, r11
    251e:	84 60       	ori	r24, 0x04	; 4
    2520:	b8 2e       	mov	r11, r24
    2522:	09 c0       	rjmp	.+18     	; 0x2536 <vfprintf+0x256>
    2524:	24 ff       	sbrs	r18, 4
    2526:	0a c0       	rjmp	.+20     	; 0x253c <vfprintf+0x25c>
    2528:	9f 2f       	mov	r25, r31
    252a:	96 60       	ori	r25, 0x06	; 6
    252c:	b9 2e       	mov	r11, r25
    252e:	06 c0       	rjmp	.+12     	; 0x253c <vfprintf+0x25c>
    2530:	28 e0       	ldi	r18, 0x08	; 8
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <vfprintf+0x260>
    2536:	20 e1       	ldi	r18, 0x10	; 16
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <vfprintf+0x260>
    253c:	20 e1       	ldi	r18, 0x10	; 16
    253e:	32 e0       	ldi	r19, 0x02	; 2
    2540:	f8 01       	movw	r30, r16
    2542:	b7 fe       	sbrs	r11, 7
    2544:	07 c0       	rjmp	.+14     	; 0x2554 <vfprintf+0x274>
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	0c 5f       	subi	r16, 0xFC	; 252
    2550:	1f 4f       	sbci	r17, 0xFF	; 255
    2552:	06 c0       	rjmp	.+12     	; 0x2560 <vfprintf+0x280>
    2554:	60 81       	ld	r22, Z
    2556:	71 81       	ldd	r23, Z+1	; 0x01
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 5f       	subi	r16, 0xFE	; 254
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	a4 01       	movw	r20, r8
    2562:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__ultoa_invert>
    2566:	a8 2e       	mov	r10, r24
    2568:	a8 18       	sub	r10, r8
    256a:	fb 2d       	mov	r31, r11
    256c:	ff 77       	andi	r31, 0x7F	; 127
    256e:	bf 2e       	mov	r11, r31
    2570:	b6 fe       	sbrs	r11, 6
    2572:	0b c0       	rjmp	.+22     	; 0x258a <vfprintf+0x2aa>
    2574:	2b 2d       	mov	r18, r11
    2576:	2e 7f       	andi	r18, 0xFE	; 254
    2578:	a5 14       	cp	r10, r5
    257a:	50 f4       	brcc	.+20     	; 0x2590 <vfprintf+0x2b0>
    257c:	b4 fe       	sbrs	r11, 4
    257e:	0a c0       	rjmp	.+20     	; 0x2594 <vfprintf+0x2b4>
    2580:	b2 fc       	sbrc	r11, 2
    2582:	08 c0       	rjmp	.+16     	; 0x2594 <vfprintf+0x2b4>
    2584:	2b 2d       	mov	r18, r11
    2586:	2e 7e       	andi	r18, 0xEE	; 238
    2588:	05 c0       	rjmp	.+10     	; 0x2594 <vfprintf+0x2b4>
    258a:	7a 2c       	mov	r7, r10
    258c:	2b 2d       	mov	r18, r11
    258e:	03 c0       	rjmp	.+6      	; 0x2596 <vfprintf+0x2b6>
    2590:	7a 2c       	mov	r7, r10
    2592:	01 c0       	rjmp	.+2      	; 0x2596 <vfprintf+0x2b6>
    2594:	75 2c       	mov	r7, r5
    2596:	24 ff       	sbrs	r18, 4
    2598:	0d c0       	rjmp	.+26     	; 0x25b4 <vfprintf+0x2d4>
    259a:	fe 01       	movw	r30, r28
    259c:	ea 0d       	add	r30, r10
    259e:	f1 1d       	adc	r31, r1
    25a0:	80 81       	ld	r24, Z
    25a2:	80 33       	cpi	r24, 0x30	; 48
    25a4:	11 f4       	brne	.+4      	; 0x25aa <vfprintf+0x2ca>
    25a6:	29 7e       	andi	r18, 0xE9	; 233
    25a8:	09 c0       	rjmp	.+18     	; 0x25bc <vfprintf+0x2dc>
    25aa:	22 ff       	sbrs	r18, 2
    25ac:	06 c0       	rjmp	.+12     	; 0x25ba <vfprintf+0x2da>
    25ae:	73 94       	inc	r7
    25b0:	73 94       	inc	r7
    25b2:	04 c0       	rjmp	.+8      	; 0x25bc <vfprintf+0x2dc>
    25b4:	82 2f       	mov	r24, r18
    25b6:	86 78       	andi	r24, 0x86	; 134
    25b8:	09 f0       	breq	.+2      	; 0x25bc <vfprintf+0x2dc>
    25ba:	73 94       	inc	r7
    25bc:	23 fd       	sbrc	r18, 3
    25be:	13 c0       	rjmp	.+38     	; 0x25e6 <vfprintf+0x306>
    25c0:	20 ff       	sbrs	r18, 0
    25c2:	06 c0       	rjmp	.+12     	; 0x25d0 <vfprintf+0x2f0>
    25c4:	5a 2c       	mov	r5, r10
    25c6:	73 14       	cp	r7, r3
    25c8:	18 f4       	brcc	.+6      	; 0x25d0 <vfprintf+0x2f0>
    25ca:	53 0c       	add	r5, r3
    25cc:	57 18       	sub	r5, r7
    25ce:	73 2c       	mov	r7, r3
    25d0:	73 14       	cp	r7, r3
    25d2:	68 f4       	brcc	.+26     	; 0x25ee <vfprintf+0x30e>
    25d4:	b7 01       	movw	r22, r14
    25d6:	80 e2       	ldi	r24, 0x20	; 32
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	2c 87       	std	Y+12, r18	; 0x0c
    25dc:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    25e0:	73 94       	inc	r7
    25e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    25e4:	f5 cf       	rjmp	.-22     	; 0x25d0 <vfprintf+0x2f0>
    25e6:	73 14       	cp	r7, r3
    25e8:	10 f4       	brcc	.+4      	; 0x25ee <vfprintf+0x30e>
    25ea:	37 18       	sub	r3, r7
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <vfprintf+0x310>
    25ee:	31 2c       	mov	r3, r1
    25f0:	24 ff       	sbrs	r18, 4
    25f2:	12 c0       	rjmp	.+36     	; 0x2618 <vfprintf+0x338>
    25f4:	b7 01       	movw	r22, r14
    25f6:	80 e3       	ldi	r24, 0x30	; 48
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	2c 87       	std	Y+12, r18	; 0x0c
    25fc:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2600:	2c 85       	ldd	r18, Y+12	; 0x0c
    2602:	22 ff       	sbrs	r18, 2
    2604:	17 c0       	rjmp	.+46     	; 0x2634 <vfprintf+0x354>
    2606:	21 ff       	sbrs	r18, 1
    2608:	03 c0       	rjmp	.+6      	; 0x2610 <vfprintf+0x330>
    260a:	88 e5       	ldi	r24, 0x58	; 88
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <vfprintf+0x334>
    2610:	88 e7       	ldi	r24, 0x78	; 120
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	b7 01       	movw	r22, r14
    2616:	0c c0       	rjmp	.+24     	; 0x2630 <vfprintf+0x350>
    2618:	82 2f       	mov	r24, r18
    261a:	86 78       	andi	r24, 0x86	; 134
    261c:	59 f0       	breq	.+22     	; 0x2634 <vfprintf+0x354>
    261e:	21 fd       	sbrc	r18, 1
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <vfprintf+0x346>
    2622:	80 e2       	ldi	r24, 0x20	; 32
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <vfprintf+0x348>
    2626:	8b e2       	ldi	r24, 0x2B	; 43
    2628:	27 fd       	sbrc	r18, 7
    262a:	8d e2       	ldi	r24, 0x2D	; 45
    262c:	b7 01       	movw	r22, r14
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2634:	a5 14       	cp	r10, r5
    2636:	38 f4       	brcc	.+14     	; 0x2646 <vfprintf+0x366>
    2638:	b7 01       	movw	r22, r14
    263a:	80 e3       	ldi	r24, 0x30	; 48
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2642:	5a 94       	dec	r5
    2644:	f7 cf       	rjmp	.-18     	; 0x2634 <vfprintf+0x354>
    2646:	aa 94       	dec	r10
    2648:	f4 01       	movw	r30, r8
    264a:	ea 0d       	add	r30, r10
    264c:	f1 1d       	adc	r31, r1
    264e:	80 81       	ld	r24, Z
    2650:	b7 01       	movw	r22, r14
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    2658:	a1 10       	cpse	r10, r1
    265a:	f5 cf       	rjmp	.-22     	; 0x2646 <vfprintf+0x366>
    265c:	33 20       	and	r3, r3
    265e:	09 f4       	brne	.+2      	; 0x2662 <vfprintf+0x382>
    2660:	51 ce       	rjmp	.-862    	; 0x2304 <vfprintf+0x24>
    2662:	b7 01       	movw	r22, r14
    2664:	80 e2       	ldi	r24, 0x20	; 32
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 a2 14 	call	0x2944	; 0x2944 <fputc>
    266c:	3a 94       	dec	r3
    266e:	f6 cf       	rjmp	.-20     	; 0x265c <vfprintf+0x37c>
    2670:	f7 01       	movw	r30, r14
    2672:	86 81       	ldd	r24, Z+6	; 0x06
    2674:	97 81       	ldd	r25, Z+7	; 0x07
    2676:	02 c0       	rjmp	.+4      	; 0x267c <vfprintf+0x39c>
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	9f ef       	ldi	r25, 0xFF	; 255
    267c:	2c 96       	adiw	r28, 0x0c	; 12
    267e:	e2 e1       	ldi	r30, 0x12	; 18
    2680:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__epilogue_restores__>

00002684 <calloc>:
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	86 9f       	mul	r24, r22
    268e:	80 01       	movw	r16, r0
    2690:	87 9f       	mul	r24, r23
    2692:	10 0d       	add	r17, r0
    2694:	96 9f       	mul	r25, r22
    2696:	10 0d       	add	r17, r0
    2698:	11 24       	eor	r1, r1
    269a:	c8 01       	movw	r24, r16
    269c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <malloc>
    26a0:	ec 01       	movw	r28, r24
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	29 f0       	breq	.+10     	; 0x26b0 <calloc+0x2c>
    26a6:	a8 01       	movw	r20, r16
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	0e 94 90 14 	call	0x2920	; 0x2920 <memset>
    26b0:	ce 01       	movw	r24, r28
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	08 95       	ret

000026bc <malloc>:
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	82 30       	cpi	r24, 0x02	; 2
    26c2:	91 05       	cpc	r25, r1
    26c4:	10 f4       	brcc	.+4      	; 0x26ca <malloc+0xe>
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	e0 91 12 04 	lds	r30, 0x0412
    26ce:	f0 91 13 04 	lds	r31, 0x0413
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	a0 e0       	ldi	r26, 0x00	; 0
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	30 97       	sbiw	r30, 0x00	; 0
    26dc:	39 f1       	breq	.+78     	; 0x272c <malloc+0x70>
    26de:	40 81       	ld	r20, Z
    26e0:	51 81       	ldd	r21, Z+1	; 0x01
    26e2:	48 17       	cp	r20, r24
    26e4:	59 07       	cpc	r21, r25
    26e6:	b8 f0       	brcs	.+46     	; 0x2716 <malloc+0x5a>
    26e8:	48 17       	cp	r20, r24
    26ea:	59 07       	cpc	r21, r25
    26ec:	71 f4       	brne	.+28     	; 0x270a <malloc+0x4e>
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	10 97       	sbiw	r26, 0x00	; 0
    26f4:	29 f0       	breq	.+10     	; 0x2700 <malloc+0x44>
    26f6:	13 96       	adiw	r26, 0x03	; 3
    26f8:	9c 93       	st	X, r25
    26fa:	8e 93       	st	-X, r24
    26fc:	12 97       	sbiw	r26, 0x02	; 2
    26fe:	2c c0       	rjmp	.+88     	; 0x2758 <malloc+0x9c>
    2700:	90 93 13 04 	sts	0x0413, r25
    2704:	80 93 12 04 	sts	0x0412, r24
    2708:	27 c0       	rjmp	.+78     	; 0x2758 <malloc+0x9c>
    270a:	21 15       	cp	r18, r1
    270c:	31 05       	cpc	r19, r1
    270e:	31 f0       	breq	.+12     	; 0x271c <malloc+0x60>
    2710:	42 17       	cp	r20, r18
    2712:	53 07       	cpc	r21, r19
    2714:	18 f0       	brcs	.+6      	; 0x271c <malloc+0x60>
    2716:	a9 01       	movw	r20, r18
    2718:	db 01       	movw	r26, r22
    271a:	01 c0       	rjmp	.+2      	; 0x271e <malloc+0x62>
    271c:	ef 01       	movw	r28, r30
    271e:	9a 01       	movw	r18, r20
    2720:	bd 01       	movw	r22, r26
    2722:	df 01       	movw	r26, r30
    2724:	02 80       	ldd	r0, Z+2	; 0x02
    2726:	f3 81       	ldd	r31, Z+3	; 0x03
    2728:	e0 2d       	mov	r30, r0
    272a:	d7 cf       	rjmp	.-82     	; 0x26da <malloc+0x1e>
    272c:	21 15       	cp	r18, r1
    272e:	31 05       	cpc	r19, r1
    2730:	f9 f0       	breq	.+62     	; 0x2770 <malloc+0xb4>
    2732:	28 1b       	sub	r18, r24
    2734:	39 0b       	sbc	r19, r25
    2736:	24 30       	cpi	r18, 0x04	; 4
    2738:	31 05       	cpc	r19, r1
    273a:	80 f4       	brcc	.+32     	; 0x275c <malloc+0xa0>
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	9b 81       	ldd	r25, Y+3	; 0x03
    2740:	61 15       	cp	r22, r1
    2742:	71 05       	cpc	r23, r1
    2744:	21 f0       	breq	.+8      	; 0x274e <malloc+0x92>
    2746:	fb 01       	movw	r30, r22
    2748:	93 83       	std	Z+3, r25	; 0x03
    274a:	82 83       	std	Z+2, r24	; 0x02
    274c:	04 c0       	rjmp	.+8      	; 0x2756 <malloc+0x9a>
    274e:	90 93 13 04 	sts	0x0413, r25
    2752:	80 93 12 04 	sts	0x0412, r24
    2756:	fe 01       	movw	r30, r28
    2758:	32 96       	adiw	r30, 0x02	; 2
    275a:	44 c0       	rjmp	.+136    	; 0x27e4 <malloc+0x128>
    275c:	fe 01       	movw	r30, r28
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	81 93       	st	Z+, r24
    2764:	91 93       	st	Z+, r25
    2766:	22 50       	subi	r18, 0x02	; 2
    2768:	31 09       	sbc	r19, r1
    276a:	39 83       	std	Y+1, r19	; 0x01
    276c:	28 83       	st	Y, r18
    276e:	3a c0       	rjmp	.+116    	; 0x27e4 <malloc+0x128>
    2770:	20 91 10 04 	lds	r18, 0x0410
    2774:	30 91 11 04 	lds	r19, 0x0411
    2778:	23 2b       	or	r18, r19
    277a:	41 f4       	brne	.+16     	; 0x278c <malloc+0xd0>
    277c:	20 91 02 01 	lds	r18, 0x0102
    2780:	30 91 03 01 	lds	r19, 0x0103
    2784:	30 93 11 04 	sts	0x0411, r19
    2788:	20 93 10 04 	sts	0x0410, r18
    278c:	20 91 00 01 	lds	r18, 0x0100
    2790:	30 91 01 01 	lds	r19, 0x0101
    2794:	21 15       	cp	r18, r1
    2796:	31 05       	cpc	r19, r1
    2798:	41 f4       	brne	.+16     	; 0x27aa <malloc+0xee>
    279a:	2d b7       	in	r18, 0x3d	; 61
    279c:	3e b7       	in	r19, 0x3e	; 62
    279e:	40 91 04 01 	lds	r20, 0x0104
    27a2:	50 91 05 01 	lds	r21, 0x0105
    27a6:	24 1b       	sub	r18, r20
    27a8:	35 0b       	sbc	r19, r21
    27aa:	e0 91 10 04 	lds	r30, 0x0410
    27ae:	f0 91 11 04 	lds	r31, 0x0411
    27b2:	e2 17       	cp	r30, r18
    27b4:	f3 07       	cpc	r31, r19
    27b6:	a0 f4       	brcc	.+40     	; 0x27e0 <malloc+0x124>
    27b8:	2e 1b       	sub	r18, r30
    27ba:	3f 0b       	sbc	r19, r31
    27bc:	28 17       	cp	r18, r24
    27be:	39 07       	cpc	r19, r25
    27c0:	78 f0       	brcs	.+30     	; 0x27e0 <malloc+0x124>
    27c2:	ac 01       	movw	r20, r24
    27c4:	4e 5f       	subi	r20, 0xFE	; 254
    27c6:	5f 4f       	sbci	r21, 0xFF	; 255
    27c8:	24 17       	cp	r18, r20
    27ca:	35 07       	cpc	r19, r21
    27cc:	48 f0       	brcs	.+18     	; 0x27e0 <malloc+0x124>
    27ce:	4e 0f       	add	r20, r30
    27d0:	5f 1f       	adc	r21, r31
    27d2:	50 93 11 04 	sts	0x0411, r21
    27d6:	40 93 10 04 	sts	0x0410, r20
    27da:	81 93       	st	Z+, r24
    27dc:	91 93       	st	Z+, r25
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <malloc+0x128>
    27e0:	e0 e0       	ldi	r30, 0x00	; 0
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	cf 01       	movw	r24, r30
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	08 95       	ret

000027ec <free>:
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <free+0xa>
    27f4:	87 c0       	rjmp	.+270    	; 0x2904 <free+0x118>
    27f6:	fc 01       	movw	r30, r24
    27f8:	32 97       	sbiw	r30, 0x02	; 2
    27fa:	13 82       	std	Z+3, r1	; 0x03
    27fc:	12 82       	std	Z+2, r1	; 0x02
    27fe:	c0 91 12 04 	lds	r28, 0x0412
    2802:	d0 91 13 04 	lds	r29, 0x0413
    2806:	20 97       	sbiw	r28, 0x00	; 0
    2808:	81 f4       	brne	.+32     	; 0x282a <free+0x3e>
    280a:	20 81       	ld	r18, Z
    280c:	31 81       	ldd	r19, Z+1	; 0x01
    280e:	28 0f       	add	r18, r24
    2810:	39 1f       	adc	r19, r25
    2812:	80 91 10 04 	lds	r24, 0x0410
    2816:	90 91 11 04 	lds	r25, 0x0411
    281a:	82 17       	cp	r24, r18
    281c:	93 07       	cpc	r25, r19
    281e:	79 f5       	brne	.+94     	; 0x287e <free+0x92>
    2820:	f0 93 11 04 	sts	0x0411, r31
    2824:	e0 93 10 04 	sts	0x0410, r30
    2828:	6d c0       	rjmp	.+218    	; 0x2904 <free+0x118>
    282a:	de 01       	movw	r26, r28
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	ae 17       	cp	r26, r30
    2832:	bf 07       	cpc	r27, r31
    2834:	50 f4       	brcc	.+20     	; 0x284a <free+0x5e>
    2836:	12 96       	adiw	r26, 0x02	; 2
    2838:	4d 91       	ld	r20, X+
    283a:	5c 91       	ld	r21, X
    283c:	13 97       	sbiw	r26, 0x03	; 3
    283e:	9d 01       	movw	r18, r26
    2840:	41 15       	cp	r20, r1
    2842:	51 05       	cpc	r21, r1
    2844:	09 f1       	breq	.+66     	; 0x2888 <free+0x9c>
    2846:	da 01       	movw	r26, r20
    2848:	f3 cf       	rjmp	.-26     	; 0x2830 <free+0x44>
    284a:	b3 83       	std	Z+3, r27	; 0x03
    284c:	a2 83       	std	Z+2, r26	; 0x02
    284e:	40 81       	ld	r20, Z
    2850:	51 81       	ldd	r21, Z+1	; 0x01
    2852:	84 0f       	add	r24, r20
    2854:	95 1f       	adc	r25, r21
    2856:	8a 17       	cp	r24, r26
    2858:	9b 07       	cpc	r25, r27
    285a:	71 f4       	brne	.+28     	; 0x2878 <free+0x8c>
    285c:	8d 91       	ld	r24, X+
    285e:	9c 91       	ld	r25, X
    2860:	11 97       	sbiw	r26, 0x01	; 1
    2862:	84 0f       	add	r24, r20
    2864:	95 1f       	adc	r25, r21
    2866:	02 96       	adiw	r24, 0x02	; 2
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
    286c:	12 96       	adiw	r26, 0x02	; 2
    286e:	8d 91       	ld	r24, X+
    2870:	9c 91       	ld	r25, X
    2872:	13 97       	sbiw	r26, 0x03	; 3
    2874:	93 83       	std	Z+3, r25	; 0x03
    2876:	82 83       	std	Z+2, r24	; 0x02
    2878:	21 15       	cp	r18, r1
    287a:	31 05       	cpc	r19, r1
    287c:	29 f4       	brne	.+10     	; 0x2888 <free+0x9c>
    287e:	f0 93 13 04 	sts	0x0413, r31
    2882:	e0 93 12 04 	sts	0x0412, r30
    2886:	3e c0       	rjmp	.+124    	; 0x2904 <free+0x118>
    2888:	d9 01       	movw	r26, r18
    288a:	13 96       	adiw	r26, 0x03	; 3
    288c:	fc 93       	st	X, r31
    288e:	ee 93       	st	-X, r30
    2890:	12 97       	sbiw	r26, 0x02	; 2
    2892:	4d 91       	ld	r20, X+
    2894:	5d 91       	ld	r21, X+
    2896:	a4 0f       	add	r26, r20
    2898:	b5 1f       	adc	r27, r21
    289a:	ea 17       	cp	r30, r26
    289c:	fb 07       	cpc	r31, r27
    289e:	79 f4       	brne	.+30     	; 0x28be <free+0xd2>
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	84 0f       	add	r24, r20
    28a6:	95 1f       	adc	r25, r21
    28a8:	02 96       	adiw	r24, 0x02	; 2
    28aa:	d9 01       	movw	r26, r18
    28ac:	11 96       	adiw	r26, 0x01	; 1
    28ae:	9c 93       	st	X, r25
    28b0:	8e 93       	st	-X, r24
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	13 96       	adiw	r26, 0x03	; 3
    28b8:	9c 93       	st	X, r25
    28ba:	8e 93       	st	-X, r24
    28bc:	12 97       	sbiw	r26, 0x02	; 2
    28be:	e0 e0       	ldi	r30, 0x00	; 0
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	9b 81       	ldd	r25, Y+3	; 0x03
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	19 f0       	breq	.+6      	; 0x28d0 <free+0xe4>
    28ca:	fe 01       	movw	r30, r28
    28cc:	ec 01       	movw	r28, r24
    28ce:	f9 cf       	rjmp	.-14     	; 0x28c2 <free+0xd6>
    28d0:	ce 01       	movw	r24, r28
    28d2:	02 96       	adiw	r24, 0x02	; 2
    28d4:	28 81       	ld	r18, Y
    28d6:	39 81       	ldd	r19, Y+1	; 0x01
    28d8:	82 0f       	add	r24, r18
    28da:	93 1f       	adc	r25, r19
    28dc:	20 91 10 04 	lds	r18, 0x0410
    28e0:	30 91 11 04 	lds	r19, 0x0411
    28e4:	28 17       	cp	r18, r24
    28e6:	39 07       	cpc	r19, r25
    28e8:	69 f4       	brne	.+26     	; 0x2904 <free+0x118>
    28ea:	30 97       	sbiw	r30, 0x00	; 0
    28ec:	29 f4       	brne	.+10     	; 0x28f8 <free+0x10c>
    28ee:	10 92 13 04 	sts	0x0413, r1
    28f2:	10 92 12 04 	sts	0x0412, r1
    28f6:	02 c0       	rjmp	.+4      	; 0x28fc <free+0x110>
    28f8:	13 82       	std	Z+3, r1	; 0x03
    28fa:	12 82       	std	Z+2, r1	; 0x02
    28fc:	d0 93 11 04 	sts	0x0411, r29
    2900:	c0 93 10 04 	sts	0x0410, r28
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	08 95       	ret

0000290a <strnlen_P>:
    290a:	fc 01       	movw	r30, r24
    290c:	05 90       	lpm	r0, Z+
    290e:	61 50       	subi	r22, 0x01	; 1
    2910:	70 40       	sbci	r23, 0x00	; 0
    2912:	01 10       	cpse	r0, r1
    2914:	d8 f7       	brcc	.-10     	; 0x290c <strnlen_P+0x2>
    2916:	80 95       	com	r24
    2918:	90 95       	com	r25
    291a:	8e 0f       	add	r24, r30
    291c:	9f 1f       	adc	r25, r31
    291e:	08 95       	ret

00002920 <memset>:
    2920:	dc 01       	movw	r26, r24
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <memset+0x6>
    2924:	6d 93       	st	X+, r22
    2926:	41 50       	subi	r20, 0x01	; 1
    2928:	50 40       	sbci	r21, 0x00	; 0
    292a:	e0 f7       	brcc	.-8      	; 0x2924 <memset+0x4>
    292c:	08 95       	ret

0000292e <strnlen>:
    292e:	fc 01       	movw	r30, r24
    2930:	61 50       	subi	r22, 0x01	; 1
    2932:	70 40       	sbci	r23, 0x00	; 0
    2934:	01 90       	ld	r0, Z+
    2936:	01 10       	cpse	r0, r1
    2938:	d8 f7       	brcc	.-10     	; 0x2930 <strnlen+0x2>
    293a:	80 95       	com	r24
    293c:	90 95       	com	r25
    293e:	8e 0f       	add	r24, r30
    2940:	9f 1f       	adc	r25, r31
    2942:	08 95       	ret

00002944 <fputc>:
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	18 2f       	mov	r17, r24
    294e:	09 2f       	mov	r16, r25
    2950:	eb 01       	movw	r28, r22
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	81 fd       	sbrc	r24, 1
    2956:	03 c0       	rjmp	.+6      	; 0x295e <fputc+0x1a>
    2958:	8f ef       	ldi	r24, 0xFF	; 255
    295a:	9f ef       	ldi	r25, 0xFF	; 255
    295c:	20 c0       	rjmp	.+64     	; 0x299e <fputc+0x5a>
    295e:	82 ff       	sbrs	r24, 2
    2960:	10 c0       	rjmp	.+32     	; 0x2982 <fputc+0x3e>
    2962:	4e 81       	ldd	r20, Y+6	; 0x06
    2964:	5f 81       	ldd	r21, Y+7	; 0x07
    2966:	2c 81       	ldd	r18, Y+4	; 0x04
    2968:	3d 81       	ldd	r19, Y+5	; 0x05
    296a:	42 17       	cp	r20, r18
    296c:	53 07       	cpc	r21, r19
    296e:	7c f4       	brge	.+30     	; 0x298e <fputc+0x4a>
    2970:	e8 81       	ld	r30, Y
    2972:	f9 81       	ldd	r31, Y+1	; 0x01
    2974:	9f 01       	movw	r18, r30
    2976:	2f 5f       	subi	r18, 0xFF	; 255
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	39 83       	std	Y+1, r19	; 0x01
    297c:	28 83       	st	Y, r18
    297e:	10 83       	st	Z, r17
    2980:	06 c0       	rjmp	.+12     	; 0x298e <fputc+0x4a>
    2982:	e8 85       	ldd	r30, Y+8	; 0x08
    2984:	f9 85       	ldd	r31, Y+9	; 0x09
    2986:	81 2f       	mov	r24, r17
    2988:	09 95       	icall
    298a:	89 2b       	or	r24, r25
    298c:	29 f7       	brne	.-54     	; 0x2958 <fputc+0x14>
    298e:	2e 81       	ldd	r18, Y+6	; 0x06
    2990:	3f 81       	ldd	r19, Y+7	; 0x07
    2992:	2f 5f       	subi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	3f 83       	std	Y+7, r19	; 0x07
    2998:	2e 83       	std	Y+6, r18	; 0x06
    299a:	81 2f       	mov	r24, r17
    299c:	90 2f       	mov	r25, r16
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	08 95       	ret

000029a8 <__ultoa_invert>:
    29a8:	fa 01       	movw	r30, r20
    29aa:	aa 27       	eor	r26, r26
    29ac:	28 30       	cpi	r18, 0x08	; 8
    29ae:	51 f1       	breq	.+84     	; 0x2a04 <__ultoa_invert+0x5c>
    29b0:	20 31       	cpi	r18, 0x10	; 16
    29b2:	81 f1       	breq	.+96     	; 0x2a14 <__ultoa_invert+0x6c>
    29b4:	e8 94       	clt
    29b6:	6f 93       	push	r22
    29b8:	6e 7f       	andi	r22, 0xFE	; 254
    29ba:	6e 5f       	subi	r22, 0xFE	; 254
    29bc:	7f 4f       	sbci	r23, 0xFF	; 255
    29be:	8f 4f       	sbci	r24, 0xFF	; 255
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	af 4f       	sbci	r26, 0xFF	; 255
    29c4:	b1 e0       	ldi	r27, 0x01	; 1
    29c6:	3e d0       	rcall	.+124    	; 0x2a44 <__ultoa_invert+0x9c>
    29c8:	b4 e0       	ldi	r27, 0x04	; 4
    29ca:	3c d0       	rcall	.+120    	; 0x2a44 <__ultoa_invert+0x9c>
    29cc:	67 0f       	add	r22, r23
    29ce:	78 1f       	adc	r23, r24
    29d0:	89 1f       	adc	r24, r25
    29d2:	9a 1f       	adc	r25, r26
    29d4:	a1 1d       	adc	r26, r1
    29d6:	68 0f       	add	r22, r24
    29d8:	79 1f       	adc	r23, r25
    29da:	8a 1f       	adc	r24, r26
    29dc:	91 1d       	adc	r25, r1
    29de:	a1 1d       	adc	r26, r1
    29e0:	6a 0f       	add	r22, r26
    29e2:	71 1d       	adc	r23, r1
    29e4:	81 1d       	adc	r24, r1
    29e6:	91 1d       	adc	r25, r1
    29e8:	a1 1d       	adc	r26, r1
    29ea:	20 d0       	rcall	.+64     	; 0x2a2c <__ultoa_invert+0x84>
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <__ultoa_invert+0x48>
    29ee:	68 94       	set
    29f0:	3f 91       	pop	r19
    29f2:	2a e0       	ldi	r18, 0x0A	; 10
    29f4:	26 9f       	mul	r18, r22
    29f6:	11 24       	eor	r1, r1
    29f8:	30 19       	sub	r19, r0
    29fa:	30 5d       	subi	r19, 0xD0	; 208
    29fc:	31 93       	st	Z+, r19
    29fe:	de f6       	brtc	.-74     	; 0x29b6 <__ultoa_invert+0xe>
    2a00:	cf 01       	movw	r24, r30
    2a02:	08 95       	ret
    2a04:	46 2f       	mov	r20, r22
    2a06:	47 70       	andi	r20, 0x07	; 7
    2a08:	40 5d       	subi	r20, 0xD0	; 208
    2a0a:	41 93       	st	Z+, r20
    2a0c:	b3 e0       	ldi	r27, 0x03	; 3
    2a0e:	0f d0       	rcall	.+30     	; 0x2a2e <__ultoa_invert+0x86>
    2a10:	c9 f7       	brne	.-14     	; 0x2a04 <__ultoa_invert+0x5c>
    2a12:	f6 cf       	rjmp	.-20     	; 0x2a00 <__ultoa_invert+0x58>
    2a14:	46 2f       	mov	r20, r22
    2a16:	4f 70       	andi	r20, 0x0F	; 15
    2a18:	40 5d       	subi	r20, 0xD0	; 208
    2a1a:	4a 33       	cpi	r20, 0x3A	; 58
    2a1c:	18 f0       	brcs	.+6      	; 0x2a24 <__ultoa_invert+0x7c>
    2a1e:	49 5d       	subi	r20, 0xD9	; 217
    2a20:	31 fd       	sbrc	r19, 1
    2a22:	40 52       	subi	r20, 0x20	; 32
    2a24:	41 93       	st	Z+, r20
    2a26:	02 d0       	rcall	.+4      	; 0x2a2c <__ultoa_invert+0x84>
    2a28:	a9 f7       	brne	.-22     	; 0x2a14 <__ultoa_invert+0x6c>
    2a2a:	ea cf       	rjmp	.-44     	; 0x2a00 <__ultoa_invert+0x58>
    2a2c:	b4 e0       	ldi	r27, 0x04	; 4
    2a2e:	a6 95       	lsr	r26
    2a30:	97 95       	ror	r25
    2a32:	87 95       	ror	r24
    2a34:	77 95       	ror	r23
    2a36:	67 95       	ror	r22
    2a38:	ba 95       	dec	r27
    2a3a:	c9 f7       	brne	.-14     	; 0x2a2e <__ultoa_invert+0x86>
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	61 05       	cpc	r22, r1
    2a40:	71 05       	cpc	r23, r1
    2a42:	08 95       	ret
    2a44:	9b 01       	movw	r18, r22
    2a46:	ac 01       	movw	r20, r24
    2a48:	0a 2e       	mov	r0, r26
    2a4a:	06 94       	lsr	r0
    2a4c:	57 95       	ror	r21
    2a4e:	47 95       	ror	r20
    2a50:	37 95       	ror	r19
    2a52:	27 95       	ror	r18
    2a54:	ba 95       	dec	r27
    2a56:	c9 f7       	brne	.-14     	; 0x2a4a <__ultoa_invert+0xa2>
    2a58:	62 0f       	add	r22, r18
    2a5a:	73 1f       	adc	r23, r19
    2a5c:	84 1f       	adc	r24, r20
    2a5e:	95 1f       	adc	r25, r21
    2a60:	a0 1d       	adc	r26, r0
    2a62:	08 95       	ret

00002a64 <__prologue_saves__>:
    2a64:	2f 92       	push	r2
    2a66:	3f 92       	push	r3
    2a68:	4f 92       	push	r4
    2a6a:	5f 92       	push	r5
    2a6c:	6f 92       	push	r6
    2a6e:	7f 92       	push	r7
    2a70:	8f 92       	push	r8
    2a72:	9f 92       	push	r9
    2a74:	af 92       	push	r10
    2a76:	bf 92       	push	r11
    2a78:	cf 92       	push	r12
    2a7a:	df 92       	push	r13
    2a7c:	ef 92       	push	r14
    2a7e:	ff 92       	push	r15
    2a80:	0f 93       	push	r16
    2a82:	1f 93       	push	r17
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	ca 1b       	sub	r28, r26
    2a8e:	db 0b       	sbc	r29, r27
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	09 94       	ijmp

00002a9c <__epilogue_restores__>:
    2a9c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a9e:	39 88       	ldd	r3, Y+17	; 0x11
    2aa0:	48 88       	ldd	r4, Y+16	; 0x10
    2aa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aac:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aae:	b9 84       	ldd	r11, Y+9	; 0x09
    2ab0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ab2:	df 80       	ldd	r13, Y+7	; 0x07
    2ab4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ab6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ab8:	0c 81       	ldd	r16, Y+4	; 0x04
    2aba:	1b 81       	ldd	r17, Y+3	; 0x03
    2abc:	aa 81       	ldd	r26, Y+2	; 0x02
    2abe:	b9 81       	ldd	r27, Y+1	; 0x01
    2ac0:	ce 0f       	add	r28, r30
    2ac2:	d1 1d       	adc	r29, r1
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	ed 01       	movw	r28, r26
    2ad0:	08 95       	ret

00002ad2 <_exit>:
    2ad2:	f8 94       	cli

00002ad4 <__stop_program>:
    2ad4:	ff cf       	rjmp	.-2      	; 0x2ad4 <__stop_program>
