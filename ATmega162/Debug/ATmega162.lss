
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000202  00800100  00000ed0  00000f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800302  00800302  00001166  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013f8  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000910  00000000  00000000  000026fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000885  00000000  00000000  0000300a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00003890  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  00003b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000799  00000000  00000000  00003f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000046d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	13 e0       	ldi	r17, 0x03	; 3
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ed       	ldi	r30, 0xD0	; 208
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a2 e0       	ldi	r26, 0x02	; 2
  96:	b3 e0       	ldi	r27, 0x03	; 3
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ad 30       	cpi	r26, 0x0D	; 13
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 67 02 	call	0x4ce	; 0x4ce <main>
  a6:	0c 94 66 07 	jmp	0xecc	; 0xecc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:


void CAN_init()
{
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  ae:	40 e6       	ldi	r20, 0x60	; 96
  b0:	60 e6       	ldi	r22, 0x60	; 96
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	0e 94 08 02 	call	0x410	; 0x410 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  b8:	40 e6       	ldi	r20, 0x60	; 96
  ba:	60 e6       	ldi	r22, 0x60	; 96
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	0e 94 08 02 	call	0x410	; 0x410 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	64 e0       	ldi	r22, 0x04	; 4
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	0e 94 08 02 	call	0x410	; 0x410 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  cc:	44 e0       	ldi	r20, 0x04	; 4
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	0e 94 08 02 	call	0x410	; 0x410 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	60 ee       	ldi	r22, 0xE0	; 224
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	0e 94 08 02 	call	0x410	; 0x410 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 8f 01 	call	0x31e	; 0x31e <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
  e6:	80 7e       	andi	r24, 0xE0	; 224
  e8:	29 f0       	breq	.+10     	; 0xf4 <CAN_init+0x46>
		printf("MCP2515 is NOT in normal mode after CAN init\n");
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 40 03 	call	0x680	; 0x680 <puts>
		return 1;
  f2:	08 95       	ret
	}
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
  f4:	63 e0       	ldi	r22, 0x03	; 3
  f6:	8b e2       	ldi	r24, 0x2B	; 43
  f8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (1 << ISC01) | (0 << ISC00);
  fc:	85 b7       	in	r24, 0x35	; 53
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
 102:	8b b7       	in	r24, 0x3b	; 59
 104:	80 64       	ori	r24, 0x40	; 64
 106:	8b bf       	out	0x3b, r24	; 59
 108:	08 95       	ret

0000010a <CAN_msg_send>:
	EIMSK |= (1 << INT2);
	#endif
}

void CAN_msg_send(can_msg *message)
{
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
 118:	fc 01       	movw	r30, r24
 11a:	60 81       	ld	r22, Z
 11c:	71 81       	ldd	r23, Z+1	; 0x01
 11e:	76 95       	lsr	r23
 120:	67 95       	ror	r22
 122:	76 95       	lsr	r23
 124:	67 95       	ror	r22
 126:	76 95       	lsr	r23
 128:	67 95       	ror	r22
 12a:	81 e3       	ldi	r24, 0x31	; 49
 12c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
 130:	f7 01       	movw	r30, r14
 132:	60 81       	ld	r22, Z
 134:	62 95       	swap	r22
 136:	66 0f       	add	r22, r22
 138:	60 7e       	andi	r22, 0xE0	; 224
 13a:	82 e3       	ldi	r24, 0x32	; 50
 13c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	83 e3       	ldi	r24, 0x33	; 51
 144:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	84 e3       	ldi	r24, 0x34	; 52
 14c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
 150:	f7 01       	movw	r30, r14
 152:	62 81       	ldd	r22, Z+2	; 0x02
 154:	85 e3       	ldi	r24, 0x35	; 53
 156:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
 15a:	f7 01       	movw	r30, r14
 15c:	82 81       	ldd	r24, Z+2	; 0x02
 15e:	88 23       	and	r24, r24
 160:	99 f0       	breq	.+38     	; 0x188 <CAN_msg_send+0x7e>
 162:	87 01       	movw	r16, r14
 164:	0d 5f       	subi	r16, 0xFD	; 253
 166:	1f 4f       	sbci	r17, 0xFF	; 255
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
 16c:	f8 01       	movw	r30, r16
 16e:	61 91       	ld	r22, Z+
 170:	8f 01       	movw	r16, r30
 172:	8c 2f       	mov	r24, r28
 174:	8a 5c       	subi	r24, 0xCA	; 202
 176:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	f7 01       	movw	r30, r14
 17e:	22 81       	ldd	r18, Z+2	; 0x02
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	c2 17       	cp	r28, r18
 184:	d3 07       	cpc	r29, r19
 186:	94 f3       	brlt	.-28     	; 0x16c <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
 188:	81 e8       	ldi	r24, 0x81	; 129
 18a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <MCP_request_to_send>
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	08 95       	ret

0000019c <CAN_msg_receive>:

void CAN_msg_receive(can_msg *msg, uint8_t reg)
{
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	7c 01       	movw	r14, r24
 1ae:	c6 2f       	mov	r28, r22

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	86 0f       	add	r24, r22
 1b4:	0e 94 8f 01 	call	0x31e	; 0x31e <MCP_read>
 1b8:	d8 2f       	mov	r29, r24
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	8c 0f       	add	r24, r28
 1be:	0e 94 8f 01 	call	0x31e	; 0x31e <MCP_read>
 1c2:	48 2f       	mov	r20, r24
 1c4:	42 95       	swap	r20
 1c6:	46 95       	lsr	r20
 1c8:	47 70       	andi	r20, 0x07	; 7
 1ca:	2d 2f       	mov	r18, r29
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	c9 01       	movw	r24, r18
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	84 2b       	or	r24, r20
 1de:	f7 01       	movw	r30, r14
 1e0:	91 83       	std	Z+1, r25	; 0x01
 1e2:	80 83       	st	Z, r24
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
 1e4:	85 e0       	ldi	r24, 0x05	; 5
 1e6:	8c 0f       	add	r24, r28
 1e8:	0e 94 8f 01 	call	0x31e	; 0x31e <MCP_read>
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	f7 01       	movw	r30, r14
 1f0:	82 83       	std	Z+2, r24	; 0x02
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
 1f2:	88 23       	and	r24, r24
 1f4:	f9 f0       	breq	.+62     	; 0x234 <CAN_msg_receive+0x98>
 1f6:	0f 2e       	mov	r0, r31
 1f8:	f6 e0       	ldi	r31, 0x06	; 6
 1fa:	df 2e       	mov	r13, r31
 1fc:	f0 2d       	mov	r31, r0
 1fe:	dc 0e       	add	r13, r28
 200:	87 01       	movw	r16, r14
 202:	0d 5f       	subi	r16, 0xFD	; 253
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	0f 2e       	mov	r0, r31
 208:	fe e0       	ldi	r31, 0x0E	; 14
 20a:	cf 2e       	mov	r12, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	cc 0e       	add	r12, r28
{

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
	while( (i < msg->length) && (i < 8) ){
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
 214:	8d 2d       	mov	r24, r13
 216:	0e 94 8f 01 	call	0x31e	; 0x31e <MCP_read>
 21a:	f8 01       	movw	r30, r16
 21c:	81 93       	st	Z+, r24
 21e:	8f 01       	movw	r16, r30
		i++;
 220:	21 96       	adiw	r28, 0x01	; 1

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
 222:	f7 01       	movw	r30, r14
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	c2 17       	cp	r28, r18
 22a:	d3 07       	cpc	r29, r19
 22c:	1c f4       	brge	.+6      	; 0x234 <CAN_msg_receive+0x98>
 22e:	d3 94       	inc	r13
 230:	dc 10       	cpse	r13, r12
 232:	f0 cf       	rjmp	.-32     	; 0x214 <CAN_msg_receive+0x78>
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
		i++;
	}	
	
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	08 95       	ret

00000246 <CAN_handle_interrupt>:

void CAN_handle_interrupt(can_msg *msg)
{
	switch(interrupt_flag){
 246:	20 91 02 03 	lds	r18, 0x0302
 24a:	21 30       	cpi	r18, 0x01	; 1
 24c:	49 f0       	breq	.+18     	; 0x260 <CAN_handle_interrupt+0x1a>
 24e:	18 f0       	brcs	.+6      	; 0x256 <CAN_handle_interrupt+0x10>
 250:	22 30       	cpi	r18, 0x02	; 2
 252:	81 f0       	breq	.+32     	; 0x274 <CAN_handle_interrupt+0x2e>
 254:	19 c0       	rjmp	.+50     	; 0x288 <CAN_handle_interrupt+0x42>
		case no_flag:
		printf("no interrupt 1\n");
 256:	83 e3       	ldi	r24, 0x33	; 51
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 40 03 	call	0x680	; 0x680 <puts>
			break;
 25e:	08 95       	ret
		case RX0:
			CAN_msg_receive(msg, MCP_RXB0CTRL);
 260:	60 e6       	ldi	r22, 0x60	; 96
 262:	0e 94 ce 00 	call	0x19c	; 0x19c <CAN_msg_receive>
			interrupt_flag = no_flag;
 266:	10 92 02 03 	sts	0x0302, r1
			printf("interrupt handled 1\n");
 26a:	82 e4       	ldi	r24, 0x42	; 66
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 40 03 	call	0x680	; 0x680 <puts>
			break;
 272:	08 95       	ret
		case RX1:
			CAN_msg_receive(msg, MCP_RXB1CTRL);
 274:	60 e7       	ldi	r22, 0x70	; 112
 276:	0e 94 ce 00 	call	0x19c	; 0x19c <CAN_msg_receive>
			interrupt_flag = no_flag;
 27a:	10 92 02 03 	sts	0x0302, r1
			printf("interrupt handled 2\n");
 27e:	86 e5       	ldi	r24, 0x56	; 86
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 40 03 	call	0x680	; 0x680 <puts>
			break;
 286:	08 95       	ret
		default:
		printf("no interrupt 2\n");
 288:	8a e6       	ldi	r24, 0x6A	; 106
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 40 03 	call	0x680	; 0x680 <puts>
 290:	08 95       	ret

00000292 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
 2b4:	8c e2       	ldi	r24, 0x2C	; 44
 2b6:	0e 94 8f 01 	call	0x31e	; 0x31e <MCP_read>

	if (interrupt & MCP_RX0IF){
 2ba:	80 ff       	sbrs	r24, 0
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <__vector_1+0x3e>
		interrupt_flag = RX0;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 02 03 	sts	0x0302, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	8c e2       	ldi	r24, 0x2C	; 44
 2ca:	0e 94 08 02 	call	0x410	; 0x410 <MCP_bit_modify>
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
 2d0:	81 ff       	sbrs	r24, 1
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <__vector_1+0x52>
		interrupt_flag = RX1;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	80 93 02 03 	sts	0x0302, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	62 e0       	ldi	r22, 0x02	; 2
 2de:	8c e2       	ldi	r24, 0x2C	; 44
 2e0:	0e 94 08 02 	call	0x410	; 0x410 <MCP_bit_modify>
	}
	
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
 30e:	80 ec       	ldi	r24, 0xC0	; 192
 310:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	SPI_set_ss(1);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
 31c:	08 95       	ret

0000031e <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
	printf("hello from MCP read 1\n");
 32a:	89 e7       	ldi	r24, 0x79	; 121
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	printf("hello from MCP read 2\n");
 338:	8f e8       	ldi	r24, 0x8F	; 143
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	// Send 8-bit address
	SPI_transmit_receive(address);
 340:	8c 2f       	mov	r24, r28
 342:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	printf("hello from MCP read 3\n");
 346:	85 ea       	ldi	r24, 0xA5	; 165
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
 354:	c8 2f       	mov	r28, r24
	printf("hello from MCP read 4\n");
 356:	8b eb       	ldi	r24, 0xBB	; 187
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	SPI_set_ss(1);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
	return received;
}
 366:	8c 2f       	mov	r24, r28
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <MCP_init>:
#include "spi.h"
#include "uart.h"


uint8_t MCP_init( void )
{
 36c:	cf 93       	push	r28
	//SPI_init();
	//printf("hello from MCP init 1\n");
	MCP_reset();
 36e:	0e 94 83 01 	call	0x306	; 0x306 <MCP_reset>
	printf("hello from MCP init 2\n");
 372:	81 ed       	ldi	r24, 0xD1	; 209
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 37a:	8e e0       	ldi	r24, 0x0E	; 14
 37c:	0e 94 8f 01 	call	0x31e	; 0x31e <MCP_read>
 380:	c8 2f       	mov	r28, r24
	printf("hello from MCP init 3\n");
 382:	87 ee       	ldi	r24, 0xE7	; 231
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	printf("Value = %02X\n", value);
 38a:	1f 92       	push	r1
 38c:	cf 93       	push	r28
 38e:	2d ef       	ldi	r18, 0xFD	; 253
 390:	31 e0       	ldi	r19, 0x01	; 1
 392:	3f 93       	push	r19
 394:	2f 93       	push	r18
 396:	0e 94 2c 03 	call	0x658	; 0x658 <printf>
	if ((value & MODE_MASK) != MODE_CONFIG){
 39a:	c0 7e       	andi	r28, 0xE0	; 224
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	c0 38       	cpi	r28, 0x80	; 128
 3a6:	31 f0       	breq	.+12     	; 0x3b4 <MCP_init+0x48>
		printf("MCP2515 is NOT in configuration mode after reset\n");
 3a8:	8b e0       	ldi	r24, 0x0B	; 11
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	0e 94 40 03 	call	0x680	; 0x680 <puts>
		return 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <MCP_init+0x52>
	}
	printf("hello from MCP init 3\n");
 3b4:	87 ee       	ldi	r24, 0xE7	; 231
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	return 0;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
}
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	d8 2f       	mov	r29, r24
 3c8:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	SPI_transmit_receive(address);
 3d8:	8d 2f       	mov	r24, r29
 3da:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	SPI_transmit_receive(data);
 3de:	8c 2f       	mov	r24, r28
 3e0:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
 3f2:	cf 93       	push	r28
 3f4:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
 3fe:	8c 2f       	mov	r24, r28
 400:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	SPI_set_ss(1); //(?)
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
}
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	18 2f       	mov	r17, r24
 418:	d6 2f       	mov	r29, r22
 41a:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 424:	85 e0       	ldi	r24, 0x05	; 5
 426:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 42a:	81 2f       	mov	r24, r17
 42c:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 430:	8d 2f       	mov	r24, r29
 432:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	SPI_transmit_receive(data);
 436:	8c 2f       	mov	r24, r28
 438:	0e 94 2c 02 	call	0x458	; 0x458 <SPI_transmit_receive>
	
	SPI_set_ss(1);
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 39 02 	call	0x472	; 0x472 <SPI_set_ss>
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	08 95       	ret

0000044c <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
 44c:	87 b3       	in	r24, 0x17	; 23
 44e:	80 6b       	ori	r24, 0xB0	; 176
 450:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 452:	81 e5       	ldi	r24, 0x51	; 81
 454:	8d b9       	out	0x0d, r24	; 13
 456:	08 95       	ret

00000458 <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 458:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	printf("Hello from SPI transmit receive 1\n");
 45a:	8c e3       	ldi	r24, 0x3C	; 60
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	while(!(SPSR & (1 << SPIF)));
 462:	77 9b       	sbis	0x0e, 7	; 14
 464:	fe cf       	rjmp	.-4      	; 0x462 <SPI_transmit_receive+0xa>
	printf("Hello from SPI transmit receive 2\n");
 466:	8e e5       	ldi	r24, 0x5E	; 94
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	
	return SPDR;
 46e:	8f b1       	in	r24, 0x0f	; 15
}
 470:	08 95       	ret

00000472 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	91 05       	cpc	r25, r1
 476:	11 f4       	brne	.+4      	; 0x47c <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
 478:	c4 9a       	sbi	0x18, 4	; 24
 47a:	08 95       	ret
	}
	else if (val == 0){
 47c:	89 2b       	or	r24, r25
 47e:	09 f4       	brne	.+2      	; 0x482 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
 480:	c4 98       	cbi	0x18, 4	; 24
 482:	08 95       	ret

00000484 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 484:	5d 9b       	sbis	0x0b, 5	; 11
 486:	fe cf       	rjmp	.-4      	; 0x484 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 488:	8c b9       	out	0x0c, r24	; 12
 48a:	08 95       	ret

0000048c <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
 48c:	5f 9b       	sbis	0x0b, 7	; 11
 48e:	fe cf       	rjmp	.-4      	; 0x48c <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
 490:	8c b1       	in	r24, 0x0c	; 12
 492:	08 95       	ret

00000494 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 494:	20 b5       	in	r18, 0x20	; 32
 496:	92 2b       	or	r25, r18
 498:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
 49a:	99 b1       	in	r25, 0x09	; 9
 49c:	89 2b       	or	r24, r25
 49e:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 4a0:	8a b1       	in	r24, 0x0a	; 10
 4a2:	88 61       	ori	r24, 0x18	; 24
 4a4:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 4a6:	80 b5       	in	r24, 0x20	; 32
 4a8:	8e 68       	ori	r24, 0x8E	; 142
 4aa:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 4ac:	66 e4       	ldi	r22, 0x46	; 70
 4ae:	72 e0       	ldi	r23, 0x02	; 2
 4b0:	82 e4       	ldi	r24, 0x42	; 66
 4b2:	92 e0       	ldi	r25, 0x02	; 2
 4b4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <fdevopen>
 4b8:	08 95       	ret

000004ba <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	set_bit(MCUCR, SRE);
 4ba:	85 b7       	in	r24, 0x35	; 53
 4bc:	80 68       	ori	r24, 0x80	; 128
 4be:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 4c0:	80 b7       	in	r24, 0x30	; 48
 4c2:	80 62       	ori	r24, 0x20	; 32
 4c4:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	clear_bit(DDRD, PD3);
 4c6:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	08 95       	ret

000004ce <main>:
#include <avr/io.h>
#include <util/delay.h>
//#include <stdio.h>
#include <avr/interrupt.h>

int main( void ){
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	66 97       	sbiw	r28, 0x16	; 22
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
	cli();
 4e2:	f8 94       	cli
	// Initializations 
	UART_Init( MYUBRR );
 4e4:	8f e1       	ldi	r24, 0x1F	; 31
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 4a 02 	call	0x494	; 0x494 <UART_Init>
	ADC_init();
 4ec:	0e 94 5d 02 	call	0x4ba	; 0x4ba <ADC_init>
	
	//JOY_init();
	//TOUCH_init();
	//OLED_init();
	//MENU_init();
	SPI_init();
 4f0:	0e 94 26 02 	call	0x44c	; 0x44c <SPI_init>
	MCP_init();
 4f4:	0e 94 b6 01 	call	0x36c	; 0x36c <MCP_init>
	CAN_init();
 4f8:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	printf("\n\n\nInit done\n");
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	0e 94 40 03 	call	0x680	; 0x680 <puts>
	sei();
 504:	78 94       	sei
	//can_msg send = {.id = 1, .length = 1, .data = 130};
	can_msg send;
	send.id = ATmega162_ID;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	9a 83       	std	Y+2, r25	; 0x02
 50c:	89 83       	std	Y+1, r24	; 0x01
	send.length = 4;
 50e:	84 e0       	ldi	r24, 0x04	; 4
 510:	8b 83       	std	Y+3, r24	; 0x03
	send.data[0] = 'H';
 512:	88 e4       	ldi	r24, 0x48	; 72
 514:	8c 83       	std	Y+4, r24	; 0x04
	send.data[1] = 'o';
 516:	8f e6       	ldi	r24, 0x6F	; 111
 518:	8d 83       	std	Y+5, r24	; 0x05
	send.data[2] = 'l';
 51a:	8c e6       	ldi	r24, 0x6C	; 108
 51c:	8e 83       	std	Y+6, r24	; 0x06
	send.data[3] = '\0';
 51e:	1f 82       	std	Y+7, r1	; 0x07
		CAN_msg_send(&send);
		//printf("Message sent\n");
		_delay_us(200);
		CAN_handle_interrupt(&receive);
		//printf("Message received\n");
		printf("\n\nSent message: %s \t Received message: %s \n", send.data, receive.data);
 520:	4e 01       	movw	r8, r28
 522:	2f e0       	ldi	r18, 0x0F	; 15
 524:	82 0e       	add	r8, r18
 526:	91 1c       	adc	r9, r1
 528:	5e 01       	movw	r10, r28
 52a:	84 e0       	ldi	r24, 0x04	; 4
 52c:	a8 0e       	add	r10, r24
 52e:	b1 1c       	adc	r11, r1
 530:	0f 2e       	mov	r0, r31
 532:	fd e8       	ldi	r31, 0x8D	; 141
 534:	cf 2e       	mov	r12, r31
 536:	f2 e0       	ldi	r31, 0x02	; 2
 538:	df 2e       	mov	r13, r31
 53a:	f0 2d       	mov	r31, r0
		printf("Sent id: %d \t Received id: %d \n", send.id, receive.id);
 53c:	0f 2e       	mov	r0, r31
 53e:	f9 eb       	ldi	r31, 0xB9	; 185
 540:	ef 2e       	mov	r14, r31
 542:	f2 e0       	ldi	r31, 0x02	; 2
 544:	ff 2e       	mov	r15, r31
 546:	f0 2d       	mov	r31, r0
		printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
 548:	09 ed       	ldi	r16, 0xD9	; 217
 54a:	12 e0       	ldi	r17, 0x02	; 2
	send.data[3] = '\0';
	can_msg receive;
	
	while(1){
		//printf("While loop\n");
		CAN_msg_send(&send);
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	0e 94 85 00 	call	0x10a	; 0x10a <CAN_msg_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 554:	85 ef       	ldi	r24, 0xF5	; 245
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <__stack+0x59>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <__stack+0x5f>
 55e:	00 00       	nop
		//printf("Message sent\n");
		_delay_us(200);
		CAN_handle_interrupt(&receive);
 560:	ce 01       	movw	r24, r28
 562:	0c 96       	adiw	r24, 0x0c	; 12
 564:	0e 94 23 01 	call	0x246	; 0x246 <CAN_handle_interrupt>
		//printf("Message received\n");
		printf("\n\nSent message: %s \t Received message: %s \n", send.data, receive.data);
 568:	9f 92       	push	r9
 56a:	8f 92       	push	r8
 56c:	bf 92       	push	r11
 56e:	af 92       	push	r10
 570:	df 92       	push	r13
 572:	cf 92       	push	r12
 574:	0e 94 2c 03 	call	0x658	; 0x658 <printf>
		printf("Sent id: %d \t Received id: %d \n", send.id, receive.id);
 578:	8d 85       	ldd	r24, Y+13	; 0x0d
 57a:	8f 93       	push	r24
 57c:	8c 85       	ldd	r24, Y+12	; 0x0c
 57e:	8f 93       	push	r24
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	8f 93       	push	r24
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	8f 93       	push	r24
 588:	ff 92       	push	r15
 58a:	ef 92       	push	r14
 58c:	0e 94 2c 03 	call	0x658	; 0x658 <printf>
		printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
 590:	8e 85       	ldd	r24, Y+14	; 0x0e
 592:	1f 92       	push	r1
 594:	8f 93       	push	r24
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	1f 92       	push	r1
 59a:	8f 93       	push	r24
 59c:	1f 93       	push	r17
 59e:	0f 93       	push	r16
 5a0:	0e 94 2c 03 	call	0x658	; 0x658 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a4:	9f ef       	ldi	r25, 0xFF	; 255
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	8d e1       	ldi	r24, 0x1D	; 29
 5aa:	91 50       	subi	r25, 0x01	; 1
 5ac:	20 40       	sbci	r18, 0x00	; 0
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <__stack+0xab>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__stack+0xb5>
 5b4:	00 00       	nop
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	f8 94       	cli
 5ba:	de bf       	out	0x3e, r29	; 62
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	cd bf       	out	0x3d, r28	; 61
 5c0:	c5 cf       	rjmp	.-118    	; 0x54c <__stack+0x4d>

000005c2 <fdevopen>:
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	ec 01       	movw	r28, r24
 5cc:	8b 01       	movw	r16, r22
 5ce:	00 97       	sbiw	r24, 0x00	; 0
 5d0:	31 f4       	brne	.+12     	; 0x5de <fdevopen+0x1c>
 5d2:	61 15       	cp	r22, r1
 5d4:	71 05       	cpc	r23, r1
 5d6:	19 f4       	brne	.+6      	; 0x5de <fdevopen+0x1c>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	38 c0       	rjmp	.+112    	; 0x64e <fdevopen+0x8c>
 5de:	6e e0       	ldi	r22, 0x0E	; 14
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <calloc>
 5ea:	fc 01       	movw	r30, r24
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	a1 f3       	breq	.-24     	; 0x5d8 <fdevopen+0x16>
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	83 83       	std	Z+3, r24	; 0x03
 5f4:	01 15       	cp	r16, r1
 5f6:	11 05       	cpc	r17, r1
 5f8:	71 f0       	breq	.+28     	; 0x616 <fdevopen+0x54>
 5fa:	13 87       	std	Z+11, r17	; 0x0b
 5fc:	02 87       	std	Z+10, r16	; 0x0a
 5fe:	81 e8       	ldi	r24, 0x81	; 129
 600:	83 83       	std	Z+3, r24	; 0x03
 602:	80 91 03 03 	lds	r24, 0x0303
 606:	90 91 04 03 	lds	r25, 0x0304
 60a:	89 2b       	or	r24, r25
 60c:	21 f4       	brne	.+8      	; 0x616 <fdevopen+0x54>
 60e:	f0 93 04 03 	sts	0x0304, r31
 612:	e0 93 03 03 	sts	0x0303, r30
 616:	20 97       	sbiw	r28, 0x00	; 0
 618:	c9 f0       	breq	.+50     	; 0x64c <fdevopen+0x8a>
 61a:	d1 87       	std	Z+9, r29	; 0x09
 61c:	c0 87       	std	Z+8, r28	; 0x08
 61e:	83 81       	ldd	r24, Z+3	; 0x03
 620:	82 60       	ori	r24, 0x02	; 2
 622:	83 83       	std	Z+3, r24	; 0x03
 624:	80 91 05 03 	lds	r24, 0x0305
 628:	90 91 06 03 	lds	r25, 0x0306
 62c:	89 2b       	or	r24, r25
 62e:	71 f4       	brne	.+28     	; 0x64c <fdevopen+0x8a>
 630:	f0 93 06 03 	sts	0x0306, r31
 634:	e0 93 05 03 	sts	0x0305, r30
 638:	80 91 07 03 	lds	r24, 0x0307
 63c:	90 91 08 03 	lds	r25, 0x0308
 640:	89 2b       	or	r24, r25
 642:	21 f4       	brne	.+8      	; 0x64c <fdevopen+0x8a>
 644:	f0 93 08 03 	sts	0x0308, r31
 648:	e0 93 07 03 	sts	0x0307, r30
 64c:	cf 01       	movw	r24, r30
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	08 95       	ret

00000658 <printf>:
 658:	a0 e0       	ldi	r26, 0x00	; 0
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	e2 e3       	ldi	r30, 0x32	; 50
 65e:	f3 e0       	ldi	r31, 0x03	; 3
 660:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__prologue_saves__+0x20>
 664:	fe 01       	movw	r30, r28
 666:	35 96       	adiw	r30, 0x05	; 5
 668:	61 91       	ld	r22, Z+
 66a:	71 91       	ld	r23, Z+
 66c:	af 01       	movw	r20, r30
 66e:	80 91 05 03 	lds	r24, 0x0305
 672:	90 91 06 03 	lds	r25, 0x0306
 676:	0e 94 6d 03 	call	0x6da	; 0x6da <vfprintf>
 67a:	e2 e0       	ldi	r30, 0x02	; 2
 67c:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__epilogue_restores__+0x20>

00000680 <puts>:
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	e0 91 05 03 	lds	r30, 0x0305
 68c:	f0 91 06 03 	lds	r31, 0x0306
 690:	23 81       	ldd	r18, Z+3	; 0x03
 692:	21 ff       	sbrs	r18, 1
 694:	1b c0       	rjmp	.+54     	; 0x6cc <puts+0x4c>
 696:	ec 01       	movw	r28, r24
 698:	00 e0       	ldi	r16, 0x00	; 0
 69a:	10 e0       	ldi	r17, 0x00	; 0
 69c:	89 91       	ld	r24, Y+
 69e:	60 91 05 03 	lds	r22, 0x0305
 6a2:	70 91 06 03 	lds	r23, 0x0306
 6a6:	db 01       	movw	r26, r22
 6a8:	18 96       	adiw	r26, 0x08	; 8
 6aa:	ed 91       	ld	r30, X+
 6ac:	fc 91       	ld	r31, X
 6ae:	19 97       	sbiw	r26, 0x09	; 9
 6b0:	88 23       	and	r24, r24
 6b2:	31 f0       	breq	.+12     	; 0x6c0 <puts+0x40>
 6b4:	09 95       	icall
 6b6:	89 2b       	or	r24, r25
 6b8:	89 f3       	breq	.-30     	; 0x69c <puts+0x1c>
 6ba:	0f ef       	ldi	r16, 0xFF	; 255
 6bc:	1f ef       	ldi	r17, 0xFF	; 255
 6be:	ee cf       	rjmp	.-36     	; 0x69c <puts+0x1c>
 6c0:	8a e0       	ldi	r24, 0x0A	; 10
 6c2:	09 95       	icall
 6c4:	89 2b       	or	r24, r25
 6c6:	11 f4       	brne	.+4      	; 0x6cc <puts+0x4c>
 6c8:	c8 01       	movw	r24, r16
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <puts+0x50>
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	9f ef       	ldi	r25, 0xFF	; 255
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	1f 91       	pop	r17
 6d6:	0f 91       	pop	r16
 6d8:	08 95       	ret

000006da <vfprintf>:
 6da:	ac e0       	ldi	r26, 0x0C	; 12
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	e3 e7       	ldi	r30, 0x73	; 115
 6e0:	f3 e0       	ldi	r31, 0x03	; 3
 6e2:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__prologue_saves__>
 6e6:	7c 01       	movw	r14, r24
 6e8:	6b 01       	movw	r12, r22
 6ea:	8a 01       	movw	r16, r20
 6ec:	fc 01       	movw	r30, r24
 6ee:	17 82       	std	Z+7, r1	; 0x07
 6f0:	16 82       	std	Z+6, r1	; 0x06
 6f2:	83 81       	ldd	r24, Z+3	; 0x03
 6f4:	81 ff       	sbrs	r24, 1
 6f6:	bd c1       	rjmp	.+890    	; 0xa72 <vfprintf+0x398>
 6f8:	ce 01       	movw	r24, r28
 6fa:	01 96       	adiw	r24, 0x01	; 1
 6fc:	4c 01       	movw	r8, r24
 6fe:	f7 01       	movw	r30, r14
 700:	93 81       	ldd	r25, Z+3	; 0x03
 702:	f6 01       	movw	r30, r12
 704:	93 fd       	sbrc	r25, 3
 706:	85 91       	lpm	r24, Z+
 708:	93 ff       	sbrs	r25, 3
 70a:	81 91       	ld	r24, Z+
 70c:	6f 01       	movw	r12, r30
 70e:	88 23       	and	r24, r24
 710:	09 f4       	brne	.+2      	; 0x714 <vfprintf+0x3a>
 712:	ab c1       	rjmp	.+854    	; 0xa6a <vfprintf+0x390>
 714:	85 32       	cpi	r24, 0x25	; 37
 716:	39 f4       	brne	.+14     	; 0x726 <vfprintf+0x4c>
 718:	93 fd       	sbrc	r25, 3
 71a:	85 91       	lpm	r24, Z+
 71c:	93 ff       	sbrs	r25, 3
 71e:	81 91       	ld	r24, Z+
 720:	6f 01       	movw	r12, r30
 722:	85 32       	cpi	r24, 0x25	; 37
 724:	29 f4       	brne	.+10     	; 0x730 <vfprintf+0x56>
 726:	b7 01       	movw	r22, r14
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 72e:	e7 cf       	rjmp	.-50     	; 0x6fe <vfprintf+0x24>
 730:	51 2c       	mov	r5, r1
 732:	31 2c       	mov	r3, r1
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	20 32       	cpi	r18, 0x20	; 32
 738:	a0 f4       	brcc	.+40     	; 0x762 <vfprintf+0x88>
 73a:	8b 32       	cpi	r24, 0x2B	; 43
 73c:	69 f0       	breq	.+26     	; 0x758 <vfprintf+0x7e>
 73e:	30 f4       	brcc	.+12     	; 0x74c <vfprintf+0x72>
 740:	80 32       	cpi	r24, 0x20	; 32
 742:	59 f0       	breq	.+22     	; 0x75a <vfprintf+0x80>
 744:	83 32       	cpi	r24, 0x23	; 35
 746:	69 f4       	brne	.+26     	; 0x762 <vfprintf+0x88>
 748:	20 61       	ori	r18, 0x10	; 16
 74a:	2c c0       	rjmp	.+88     	; 0x7a4 <vfprintf+0xca>
 74c:	8d 32       	cpi	r24, 0x2D	; 45
 74e:	39 f0       	breq	.+14     	; 0x75e <vfprintf+0x84>
 750:	80 33       	cpi	r24, 0x30	; 48
 752:	39 f4       	brne	.+14     	; 0x762 <vfprintf+0x88>
 754:	21 60       	ori	r18, 0x01	; 1
 756:	26 c0       	rjmp	.+76     	; 0x7a4 <vfprintf+0xca>
 758:	22 60       	ori	r18, 0x02	; 2
 75a:	24 60       	ori	r18, 0x04	; 4
 75c:	23 c0       	rjmp	.+70     	; 0x7a4 <vfprintf+0xca>
 75e:	28 60       	ori	r18, 0x08	; 8
 760:	21 c0       	rjmp	.+66     	; 0x7a4 <vfprintf+0xca>
 762:	27 fd       	sbrc	r18, 7
 764:	27 c0       	rjmp	.+78     	; 0x7b4 <vfprintf+0xda>
 766:	30 ed       	ldi	r19, 0xD0	; 208
 768:	38 0f       	add	r19, r24
 76a:	3a 30       	cpi	r19, 0x0A	; 10
 76c:	78 f4       	brcc	.+30     	; 0x78c <vfprintf+0xb2>
 76e:	26 ff       	sbrs	r18, 6
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0xa4>
 772:	fa e0       	ldi	r31, 0x0A	; 10
 774:	5f 9e       	mul	r5, r31
 776:	30 0d       	add	r19, r0
 778:	11 24       	eor	r1, r1
 77a:	53 2e       	mov	r5, r19
 77c:	13 c0       	rjmp	.+38     	; 0x7a4 <vfprintf+0xca>
 77e:	8a e0       	ldi	r24, 0x0A	; 10
 780:	38 9e       	mul	r3, r24
 782:	30 0d       	add	r19, r0
 784:	11 24       	eor	r1, r1
 786:	33 2e       	mov	r3, r19
 788:	20 62       	ori	r18, 0x20	; 32
 78a:	0c c0       	rjmp	.+24     	; 0x7a4 <vfprintf+0xca>
 78c:	8e 32       	cpi	r24, 0x2E	; 46
 78e:	21 f4       	brne	.+8      	; 0x798 <vfprintf+0xbe>
 790:	26 fd       	sbrc	r18, 6
 792:	6b c1       	rjmp	.+726    	; 0xa6a <vfprintf+0x390>
 794:	20 64       	ori	r18, 0x40	; 64
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0xca>
 798:	8c 36       	cpi	r24, 0x6C	; 108
 79a:	11 f4       	brne	.+4      	; 0x7a0 <vfprintf+0xc6>
 79c:	20 68       	ori	r18, 0x80	; 128
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <vfprintf+0xca>
 7a0:	88 36       	cpi	r24, 0x68	; 104
 7a2:	41 f4       	brne	.+16     	; 0x7b4 <vfprintf+0xda>
 7a4:	f6 01       	movw	r30, r12
 7a6:	93 fd       	sbrc	r25, 3
 7a8:	85 91       	lpm	r24, Z+
 7aa:	93 ff       	sbrs	r25, 3
 7ac:	81 91       	ld	r24, Z+
 7ae:	6f 01       	movw	r12, r30
 7b0:	81 11       	cpse	r24, r1
 7b2:	c1 cf       	rjmp	.-126    	; 0x736 <vfprintf+0x5c>
 7b4:	98 2f       	mov	r25, r24
 7b6:	9f 7d       	andi	r25, 0xDF	; 223
 7b8:	95 54       	subi	r25, 0x45	; 69
 7ba:	93 30       	cpi	r25, 0x03	; 3
 7bc:	28 f4       	brcc	.+10     	; 0x7c8 <vfprintf+0xee>
 7be:	0c 5f       	subi	r16, 0xFC	; 252
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
 7c2:	ff e3       	ldi	r31, 0x3F	; 63
 7c4:	f9 83       	std	Y+1, r31	; 0x01
 7c6:	0d c0       	rjmp	.+26     	; 0x7e2 <vfprintf+0x108>
 7c8:	83 36       	cpi	r24, 0x63	; 99
 7ca:	31 f0       	breq	.+12     	; 0x7d8 <vfprintf+0xfe>
 7cc:	83 37       	cpi	r24, 0x73	; 115
 7ce:	71 f0       	breq	.+28     	; 0x7ec <vfprintf+0x112>
 7d0:	83 35       	cpi	r24, 0x53	; 83
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <vfprintf+0xfc>
 7d4:	5b c0       	rjmp	.+182    	; 0x88c <vfprintf+0x1b2>
 7d6:	22 c0       	rjmp	.+68     	; 0x81c <vfprintf+0x142>
 7d8:	f8 01       	movw	r30, r16
 7da:	80 81       	ld	r24, Z
 7dc:	89 83       	std	Y+1, r24	; 0x01
 7de:	0e 5f       	subi	r16, 0xFE	; 254
 7e0:	1f 4f       	sbci	r17, 0xFF	; 255
 7e2:	44 24       	eor	r4, r4
 7e4:	43 94       	inc	r4
 7e6:	51 2c       	mov	r5, r1
 7e8:	54 01       	movw	r10, r8
 7ea:	15 c0       	rjmp	.+42     	; 0x816 <vfprintf+0x13c>
 7ec:	38 01       	movw	r6, r16
 7ee:	f2 e0       	ldi	r31, 0x02	; 2
 7f0:	6f 0e       	add	r6, r31
 7f2:	71 1c       	adc	r7, r1
 7f4:	f8 01       	movw	r30, r16
 7f6:	a0 80       	ld	r10, Z
 7f8:	b1 80       	ldd	r11, Z+1	; 0x01
 7fa:	26 ff       	sbrs	r18, 6
 7fc:	03 c0       	rjmp	.+6      	; 0x804 <vfprintf+0x12a>
 7fe:	65 2d       	mov	r22, r5
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <vfprintf+0x12e>
 804:	6f ef       	ldi	r22, 0xFF	; 255
 806:	7f ef       	ldi	r23, 0xFF	; 255
 808:	c5 01       	movw	r24, r10
 80a:	2c 87       	std	Y+12, r18	; 0x0c
 80c:	0e 94 94 06 	call	0xd28	; 0xd28 <strnlen>
 810:	2c 01       	movw	r4, r24
 812:	83 01       	movw	r16, r6
 814:	2c 85       	ldd	r18, Y+12	; 0x0c
 816:	2f 77       	andi	r18, 0x7F	; 127
 818:	22 2e       	mov	r2, r18
 81a:	17 c0       	rjmp	.+46     	; 0x84a <vfprintf+0x170>
 81c:	38 01       	movw	r6, r16
 81e:	f2 e0       	ldi	r31, 0x02	; 2
 820:	6f 0e       	add	r6, r31
 822:	71 1c       	adc	r7, r1
 824:	f8 01       	movw	r30, r16
 826:	a0 80       	ld	r10, Z
 828:	b1 80       	ldd	r11, Z+1	; 0x01
 82a:	26 ff       	sbrs	r18, 6
 82c:	03 c0       	rjmp	.+6      	; 0x834 <vfprintf+0x15a>
 82e:	65 2d       	mov	r22, r5
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <vfprintf+0x15e>
 834:	6f ef       	ldi	r22, 0xFF	; 255
 836:	7f ef       	ldi	r23, 0xFF	; 255
 838:	c5 01       	movw	r24, r10
 83a:	2c 87       	std	Y+12, r18	; 0x0c
 83c:	0e 94 82 06 	call	0xd04	; 0xd04 <strnlen_P>
 840:	2c 01       	movw	r4, r24
 842:	2c 85       	ldd	r18, Y+12	; 0x0c
 844:	20 68       	ori	r18, 0x80	; 128
 846:	22 2e       	mov	r2, r18
 848:	83 01       	movw	r16, r6
 84a:	23 fc       	sbrc	r2, 3
 84c:	1b c0       	rjmp	.+54     	; 0x884 <vfprintf+0x1aa>
 84e:	83 2d       	mov	r24, r3
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	48 16       	cp	r4, r24
 854:	59 06       	cpc	r5, r25
 856:	b0 f4       	brcc	.+44     	; 0x884 <vfprintf+0x1aa>
 858:	b7 01       	movw	r22, r14
 85a:	80 e2       	ldi	r24, 0x20	; 32
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 862:	3a 94       	dec	r3
 864:	f4 cf       	rjmp	.-24     	; 0x84e <vfprintf+0x174>
 866:	f5 01       	movw	r30, r10
 868:	27 fc       	sbrc	r2, 7
 86a:	85 91       	lpm	r24, Z+
 86c:	27 fe       	sbrs	r2, 7
 86e:	81 91       	ld	r24, Z+
 870:	5f 01       	movw	r10, r30
 872:	b7 01       	movw	r22, r14
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 87a:	31 10       	cpse	r3, r1
 87c:	3a 94       	dec	r3
 87e:	f1 e0       	ldi	r31, 0x01	; 1
 880:	4f 1a       	sub	r4, r31
 882:	51 08       	sbc	r5, r1
 884:	41 14       	cp	r4, r1
 886:	51 04       	cpc	r5, r1
 888:	71 f7       	brne	.-36     	; 0x866 <vfprintf+0x18c>
 88a:	e5 c0       	rjmp	.+458    	; 0xa56 <vfprintf+0x37c>
 88c:	84 36       	cpi	r24, 0x64	; 100
 88e:	11 f0       	breq	.+4      	; 0x894 <vfprintf+0x1ba>
 890:	89 36       	cpi	r24, 0x69	; 105
 892:	39 f5       	brne	.+78     	; 0x8e2 <vfprintf+0x208>
 894:	f8 01       	movw	r30, r16
 896:	27 ff       	sbrs	r18, 7
 898:	07 c0       	rjmp	.+14     	; 0x8a8 <vfprintf+0x1ce>
 89a:	60 81       	ld	r22, Z
 89c:	71 81       	ldd	r23, Z+1	; 0x01
 89e:	82 81       	ldd	r24, Z+2	; 0x02
 8a0:	93 81       	ldd	r25, Z+3	; 0x03
 8a2:	0c 5f       	subi	r16, 0xFC	; 252
 8a4:	1f 4f       	sbci	r17, 0xFF	; 255
 8a6:	08 c0       	rjmp	.+16     	; 0x8b8 <vfprintf+0x1de>
 8a8:	60 81       	ld	r22, Z
 8aa:	71 81       	ldd	r23, Z+1	; 0x01
 8ac:	88 27       	eor	r24, r24
 8ae:	77 fd       	sbrc	r23, 7
 8b0:	80 95       	com	r24
 8b2:	98 2f       	mov	r25, r24
 8b4:	0e 5f       	subi	r16, 0xFE	; 254
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	2f 76       	andi	r18, 0x6F	; 111
 8ba:	b2 2e       	mov	r11, r18
 8bc:	97 ff       	sbrs	r25, 7
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <vfprintf+0x1f8>
 8c0:	90 95       	com	r25
 8c2:	80 95       	com	r24
 8c4:	70 95       	com	r23
 8c6:	61 95       	neg	r22
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	20 68       	ori	r18, 0x80	; 128
 8d0:	b2 2e       	mov	r11, r18
 8d2:	2a e0       	ldi	r18, 0x0A	; 10
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	a4 01       	movw	r20, r8
 8d8:	0e 94 d1 06 	call	0xda2	; 0xda2 <__ultoa_invert>
 8dc:	a8 2e       	mov	r10, r24
 8de:	a8 18       	sub	r10, r8
 8e0:	44 c0       	rjmp	.+136    	; 0x96a <vfprintf+0x290>
 8e2:	85 37       	cpi	r24, 0x75	; 117
 8e4:	29 f4       	brne	.+10     	; 0x8f0 <vfprintf+0x216>
 8e6:	2f 7e       	andi	r18, 0xEF	; 239
 8e8:	b2 2e       	mov	r11, r18
 8ea:	2a e0       	ldi	r18, 0x0A	; 10
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	25 c0       	rjmp	.+74     	; 0x93a <vfprintf+0x260>
 8f0:	f2 2f       	mov	r31, r18
 8f2:	f9 7f       	andi	r31, 0xF9	; 249
 8f4:	bf 2e       	mov	r11, r31
 8f6:	8f 36       	cpi	r24, 0x6F	; 111
 8f8:	c1 f0       	breq	.+48     	; 0x92a <vfprintf+0x250>
 8fa:	18 f4       	brcc	.+6      	; 0x902 <vfprintf+0x228>
 8fc:	88 35       	cpi	r24, 0x58	; 88
 8fe:	79 f0       	breq	.+30     	; 0x91e <vfprintf+0x244>
 900:	b4 c0       	rjmp	.+360    	; 0xa6a <vfprintf+0x390>
 902:	80 37       	cpi	r24, 0x70	; 112
 904:	19 f0       	breq	.+6      	; 0x90c <vfprintf+0x232>
 906:	88 37       	cpi	r24, 0x78	; 120
 908:	21 f0       	breq	.+8      	; 0x912 <vfprintf+0x238>
 90a:	af c0       	rjmp	.+350    	; 0xa6a <vfprintf+0x390>
 90c:	2f 2f       	mov	r18, r31
 90e:	20 61       	ori	r18, 0x10	; 16
 910:	b2 2e       	mov	r11, r18
 912:	b4 fe       	sbrs	r11, 4
 914:	0d c0       	rjmp	.+26     	; 0x930 <vfprintf+0x256>
 916:	8b 2d       	mov	r24, r11
 918:	84 60       	ori	r24, 0x04	; 4
 91a:	b8 2e       	mov	r11, r24
 91c:	09 c0       	rjmp	.+18     	; 0x930 <vfprintf+0x256>
 91e:	24 ff       	sbrs	r18, 4
 920:	0a c0       	rjmp	.+20     	; 0x936 <vfprintf+0x25c>
 922:	9f 2f       	mov	r25, r31
 924:	96 60       	ori	r25, 0x06	; 6
 926:	b9 2e       	mov	r11, r25
 928:	06 c0       	rjmp	.+12     	; 0x936 <vfprintf+0x25c>
 92a:	28 e0       	ldi	r18, 0x08	; 8
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	05 c0       	rjmp	.+10     	; 0x93a <vfprintf+0x260>
 930:	20 e1       	ldi	r18, 0x10	; 16
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	02 c0       	rjmp	.+4      	; 0x93a <vfprintf+0x260>
 936:	20 e1       	ldi	r18, 0x10	; 16
 938:	32 e0       	ldi	r19, 0x02	; 2
 93a:	f8 01       	movw	r30, r16
 93c:	b7 fe       	sbrs	r11, 7
 93e:	07 c0       	rjmp	.+14     	; 0x94e <vfprintf+0x274>
 940:	60 81       	ld	r22, Z
 942:	71 81       	ldd	r23, Z+1	; 0x01
 944:	82 81       	ldd	r24, Z+2	; 0x02
 946:	93 81       	ldd	r25, Z+3	; 0x03
 948:	0c 5f       	subi	r16, 0xFC	; 252
 94a:	1f 4f       	sbci	r17, 0xFF	; 255
 94c:	06 c0       	rjmp	.+12     	; 0x95a <vfprintf+0x280>
 94e:	60 81       	ld	r22, Z
 950:	71 81       	ldd	r23, Z+1	; 0x01
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 5f       	subi	r16, 0xFE	; 254
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	a4 01       	movw	r20, r8
 95c:	0e 94 d1 06 	call	0xda2	; 0xda2 <__ultoa_invert>
 960:	a8 2e       	mov	r10, r24
 962:	a8 18       	sub	r10, r8
 964:	fb 2d       	mov	r31, r11
 966:	ff 77       	andi	r31, 0x7F	; 127
 968:	bf 2e       	mov	r11, r31
 96a:	b6 fe       	sbrs	r11, 6
 96c:	0b c0       	rjmp	.+22     	; 0x984 <vfprintf+0x2aa>
 96e:	2b 2d       	mov	r18, r11
 970:	2e 7f       	andi	r18, 0xFE	; 254
 972:	a5 14       	cp	r10, r5
 974:	50 f4       	brcc	.+20     	; 0x98a <vfprintf+0x2b0>
 976:	b4 fe       	sbrs	r11, 4
 978:	0a c0       	rjmp	.+20     	; 0x98e <vfprintf+0x2b4>
 97a:	b2 fc       	sbrc	r11, 2
 97c:	08 c0       	rjmp	.+16     	; 0x98e <vfprintf+0x2b4>
 97e:	2b 2d       	mov	r18, r11
 980:	2e 7e       	andi	r18, 0xEE	; 238
 982:	05 c0       	rjmp	.+10     	; 0x98e <vfprintf+0x2b4>
 984:	7a 2c       	mov	r7, r10
 986:	2b 2d       	mov	r18, r11
 988:	03 c0       	rjmp	.+6      	; 0x990 <vfprintf+0x2b6>
 98a:	7a 2c       	mov	r7, r10
 98c:	01 c0       	rjmp	.+2      	; 0x990 <vfprintf+0x2b6>
 98e:	75 2c       	mov	r7, r5
 990:	24 ff       	sbrs	r18, 4
 992:	0d c0       	rjmp	.+26     	; 0x9ae <vfprintf+0x2d4>
 994:	fe 01       	movw	r30, r28
 996:	ea 0d       	add	r30, r10
 998:	f1 1d       	adc	r31, r1
 99a:	80 81       	ld	r24, Z
 99c:	80 33       	cpi	r24, 0x30	; 48
 99e:	11 f4       	brne	.+4      	; 0x9a4 <vfprintf+0x2ca>
 9a0:	29 7e       	andi	r18, 0xE9	; 233
 9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <vfprintf+0x2dc>
 9a4:	22 ff       	sbrs	r18, 2
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <vfprintf+0x2da>
 9a8:	73 94       	inc	r7
 9aa:	73 94       	inc	r7
 9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <vfprintf+0x2dc>
 9ae:	82 2f       	mov	r24, r18
 9b0:	86 78       	andi	r24, 0x86	; 134
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <vfprintf+0x2dc>
 9b4:	73 94       	inc	r7
 9b6:	23 fd       	sbrc	r18, 3
 9b8:	13 c0       	rjmp	.+38     	; 0x9e0 <vfprintf+0x306>
 9ba:	20 ff       	sbrs	r18, 0
 9bc:	06 c0       	rjmp	.+12     	; 0x9ca <vfprintf+0x2f0>
 9be:	5a 2c       	mov	r5, r10
 9c0:	73 14       	cp	r7, r3
 9c2:	18 f4       	brcc	.+6      	; 0x9ca <vfprintf+0x2f0>
 9c4:	53 0c       	add	r5, r3
 9c6:	57 18       	sub	r5, r7
 9c8:	73 2c       	mov	r7, r3
 9ca:	73 14       	cp	r7, r3
 9cc:	68 f4       	brcc	.+26     	; 0x9e8 <vfprintf+0x30e>
 9ce:	b7 01       	movw	r22, r14
 9d0:	80 e2       	ldi	r24, 0x20	; 32
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	2c 87       	std	Y+12, r18	; 0x0c
 9d6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 9da:	73 94       	inc	r7
 9dc:	2c 85       	ldd	r18, Y+12	; 0x0c
 9de:	f5 cf       	rjmp	.-22     	; 0x9ca <vfprintf+0x2f0>
 9e0:	73 14       	cp	r7, r3
 9e2:	10 f4       	brcc	.+4      	; 0x9e8 <vfprintf+0x30e>
 9e4:	37 18       	sub	r3, r7
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <vfprintf+0x310>
 9e8:	31 2c       	mov	r3, r1
 9ea:	24 ff       	sbrs	r18, 4
 9ec:	12 c0       	rjmp	.+36     	; 0xa12 <vfprintf+0x338>
 9ee:	b7 01       	movw	r22, r14
 9f0:	80 e3       	ldi	r24, 0x30	; 48
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	2c 87       	std	Y+12, r18	; 0x0c
 9f6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 9fa:	2c 85       	ldd	r18, Y+12	; 0x0c
 9fc:	22 ff       	sbrs	r18, 2
 9fe:	17 c0       	rjmp	.+46     	; 0xa2e <vfprintf+0x354>
 a00:	21 ff       	sbrs	r18, 1
 a02:	03 c0       	rjmp	.+6      	; 0xa0a <vfprintf+0x330>
 a04:	88 e5       	ldi	r24, 0x58	; 88
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x334>
 a0a:	88 e7       	ldi	r24, 0x78	; 120
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	b7 01       	movw	r22, r14
 a10:	0c c0       	rjmp	.+24     	; 0xa2a <vfprintf+0x350>
 a12:	82 2f       	mov	r24, r18
 a14:	86 78       	andi	r24, 0x86	; 134
 a16:	59 f0       	breq	.+22     	; 0xa2e <vfprintf+0x354>
 a18:	21 fd       	sbrc	r18, 1
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <vfprintf+0x346>
 a1c:	80 e2       	ldi	r24, 0x20	; 32
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <vfprintf+0x348>
 a20:	8b e2       	ldi	r24, 0x2B	; 43
 a22:	27 fd       	sbrc	r18, 7
 a24:	8d e2       	ldi	r24, 0x2D	; 45
 a26:	b7 01       	movw	r22, r14
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 a2e:	a5 14       	cp	r10, r5
 a30:	38 f4       	brcc	.+14     	; 0xa40 <vfprintf+0x366>
 a32:	b7 01       	movw	r22, r14
 a34:	80 e3       	ldi	r24, 0x30	; 48
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 a3c:	5a 94       	dec	r5
 a3e:	f7 cf       	rjmp	.-18     	; 0xa2e <vfprintf+0x354>
 a40:	aa 94       	dec	r10
 a42:	f4 01       	movw	r30, r8
 a44:	ea 0d       	add	r30, r10
 a46:	f1 1d       	adc	r31, r1
 a48:	80 81       	ld	r24, Z
 a4a:	b7 01       	movw	r22, r14
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 a52:	a1 10       	cpse	r10, r1
 a54:	f5 cf       	rjmp	.-22     	; 0xa40 <vfprintf+0x366>
 a56:	33 20       	and	r3, r3
 a58:	09 f4       	brne	.+2      	; 0xa5c <vfprintf+0x382>
 a5a:	51 ce       	rjmp	.-862    	; 0x6fe <vfprintf+0x24>
 a5c:	b7 01       	movw	r22, r14
 a5e:	80 e2       	ldi	r24, 0x20	; 32
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	0e 94 9f 06 	call	0xd3e	; 0xd3e <fputc>
 a66:	3a 94       	dec	r3
 a68:	f6 cf       	rjmp	.-20     	; 0xa56 <vfprintf+0x37c>
 a6a:	f7 01       	movw	r30, r14
 a6c:	86 81       	ldd	r24, Z+6	; 0x06
 a6e:	97 81       	ldd	r25, Z+7	; 0x07
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <vfprintf+0x39c>
 a72:	8f ef       	ldi	r24, 0xFF	; 255
 a74:	9f ef       	ldi	r25, 0xFF	; 255
 a76:	2c 96       	adiw	r28, 0x0c	; 12
 a78:	e2 e1       	ldi	r30, 0x12	; 18
 a7a:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__epilogue_restores__>

00000a7e <calloc>:
 a7e:	0f 93       	push	r16
 a80:	1f 93       	push	r17
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	86 9f       	mul	r24, r22
 a88:	80 01       	movw	r16, r0
 a8a:	87 9f       	mul	r24, r23
 a8c:	10 0d       	add	r17, r0
 a8e:	96 9f       	mul	r25, r22
 a90:	10 0d       	add	r17, r0
 a92:	11 24       	eor	r1, r1
 a94:	c8 01       	movw	r24, r16
 a96:	0e 94 5b 05 	call	0xab6	; 0xab6 <malloc>
 a9a:	ec 01       	movw	r28, r24
 a9c:	00 97       	sbiw	r24, 0x00	; 0
 a9e:	29 f0       	breq	.+10     	; 0xaaa <calloc+0x2c>
 aa0:	a8 01       	movw	r20, r16
 aa2:	60 e0       	ldi	r22, 0x00	; 0
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <memset>
 aaa:	ce 01       	movw	r24, r28
 aac:	df 91       	pop	r29
 aae:	cf 91       	pop	r28
 ab0:	1f 91       	pop	r17
 ab2:	0f 91       	pop	r16
 ab4:	08 95       	ret

00000ab6 <malloc>:
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	82 30       	cpi	r24, 0x02	; 2
 abc:	91 05       	cpc	r25, r1
 abe:	10 f4       	brcc	.+4      	; 0xac4 <malloc+0xe>
 ac0:	82 e0       	ldi	r24, 0x02	; 2
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	e0 91 0b 03 	lds	r30, 0x030B
 ac8:	f0 91 0c 03 	lds	r31, 0x030C
 acc:	20 e0       	ldi	r18, 0x00	; 0
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	a0 e0       	ldi	r26, 0x00	; 0
 ad2:	b0 e0       	ldi	r27, 0x00	; 0
 ad4:	30 97       	sbiw	r30, 0x00	; 0
 ad6:	39 f1       	breq	.+78     	; 0xb26 <malloc+0x70>
 ad8:	40 81       	ld	r20, Z
 ada:	51 81       	ldd	r21, Z+1	; 0x01
 adc:	48 17       	cp	r20, r24
 ade:	59 07       	cpc	r21, r25
 ae0:	b8 f0       	brcs	.+46     	; 0xb10 <malloc+0x5a>
 ae2:	48 17       	cp	r20, r24
 ae4:	59 07       	cpc	r21, r25
 ae6:	71 f4       	brne	.+28     	; 0xb04 <malloc+0x4e>
 ae8:	82 81       	ldd	r24, Z+2	; 0x02
 aea:	93 81       	ldd	r25, Z+3	; 0x03
 aec:	10 97       	sbiw	r26, 0x00	; 0
 aee:	29 f0       	breq	.+10     	; 0xafa <malloc+0x44>
 af0:	13 96       	adiw	r26, 0x03	; 3
 af2:	9c 93       	st	X, r25
 af4:	8e 93       	st	-X, r24
 af6:	12 97       	sbiw	r26, 0x02	; 2
 af8:	2c c0       	rjmp	.+88     	; 0xb52 <malloc+0x9c>
 afa:	90 93 0c 03 	sts	0x030C, r25
 afe:	80 93 0b 03 	sts	0x030B, r24
 b02:	27 c0       	rjmp	.+78     	; 0xb52 <malloc+0x9c>
 b04:	21 15       	cp	r18, r1
 b06:	31 05       	cpc	r19, r1
 b08:	31 f0       	breq	.+12     	; 0xb16 <malloc+0x60>
 b0a:	42 17       	cp	r20, r18
 b0c:	53 07       	cpc	r21, r19
 b0e:	18 f0       	brcs	.+6      	; 0xb16 <malloc+0x60>
 b10:	a9 01       	movw	r20, r18
 b12:	db 01       	movw	r26, r22
 b14:	01 c0       	rjmp	.+2      	; 0xb18 <malloc+0x62>
 b16:	ef 01       	movw	r28, r30
 b18:	9a 01       	movw	r18, r20
 b1a:	bd 01       	movw	r22, r26
 b1c:	df 01       	movw	r26, r30
 b1e:	02 80       	ldd	r0, Z+2	; 0x02
 b20:	f3 81       	ldd	r31, Z+3	; 0x03
 b22:	e0 2d       	mov	r30, r0
 b24:	d7 cf       	rjmp	.-82     	; 0xad4 <malloc+0x1e>
 b26:	21 15       	cp	r18, r1
 b28:	31 05       	cpc	r19, r1
 b2a:	f9 f0       	breq	.+62     	; 0xb6a <malloc+0xb4>
 b2c:	28 1b       	sub	r18, r24
 b2e:	39 0b       	sbc	r19, r25
 b30:	24 30       	cpi	r18, 0x04	; 4
 b32:	31 05       	cpc	r19, r1
 b34:	80 f4       	brcc	.+32     	; 0xb56 <malloc+0xa0>
 b36:	8a 81       	ldd	r24, Y+2	; 0x02
 b38:	9b 81       	ldd	r25, Y+3	; 0x03
 b3a:	61 15       	cp	r22, r1
 b3c:	71 05       	cpc	r23, r1
 b3e:	21 f0       	breq	.+8      	; 0xb48 <malloc+0x92>
 b40:	fb 01       	movw	r30, r22
 b42:	93 83       	std	Z+3, r25	; 0x03
 b44:	82 83       	std	Z+2, r24	; 0x02
 b46:	04 c0       	rjmp	.+8      	; 0xb50 <malloc+0x9a>
 b48:	90 93 0c 03 	sts	0x030C, r25
 b4c:	80 93 0b 03 	sts	0x030B, r24
 b50:	fe 01       	movw	r30, r28
 b52:	32 96       	adiw	r30, 0x02	; 2
 b54:	44 c0       	rjmp	.+136    	; 0xbde <malloc+0x128>
 b56:	fe 01       	movw	r30, r28
 b58:	e2 0f       	add	r30, r18
 b5a:	f3 1f       	adc	r31, r19
 b5c:	81 93       	st	Z+, r24
 b5e:	91 93       	st	Z+, r25
 b60:	22 50       	subi	r18, 0x02	; 2
 b62:	31 09       	sbc	r19, r1
 b64:	39 83       	std	Y+1, r19	; 0x01
 b66:	28 83       	st	Y, r18
 b68:	3a c0       	rjmp	.+116    	; 0xbde <malloc+0x128>
 b6a:	20 91 09 03 	lds	r18, 0x0309
 b6e:	30 91 0a 03 	lds	r19, 0x030A
 b72:	23 2b       	or	r18, r19
 b74:	41 f4       	brne	.+16     	; 0xb86 <malloc+0xd0>
 b76:	20 91 02 01 	lds	r18, 0x0102
 b7a:	30 91 03 01 	lds	r19, 0x0103
 b7e:	30 93 0a 03 	sts	0x030A, r19
 b82:	20 93 09 03 	sts	0x0309, r18
 b86:	20 91 00 01 	lds	r18, 0x0100
 b8a:	30 91 01 01 	lds	r19, 0x0101
 b8e:	21 15       	cp	r18, r1
 b90:	31 05       	cpc	r19, r1
 b92:	41 f4       	brne	.+16     	; 0xba4 <malloc+0xee>
 b94:	2d b7       	in	r18, 0x3d	; 61
 b96:	3e b7       	in	r19, 0x3e	; 62
 b98:	40 91 04 01 	lds	r20, 0x0104
 b9c:	50 91 05 01 	lds	r21, 0x0105
 ba0:	24 1b       	sub	r18, r20
 ba2:	35 0b       	sbc	r19, r21
 ba4:	e0 91 09 03 	lds	r30, 0x0309
 ba8:	f0 91 0a 03 	lds	r31, 0x030A
 bac:	e2 17       	cp	r30, r18
 bae:	f3 07       	cpc	r31, r19
 bb0:	a0 f4       	brcc	.+40     	; 0xbda <malloc+0x124>
 bb2:	2e 1b       	sub	r18, r30
 bb4:	3f 0b       	sbc	r19, r31
 bb6:	28 17       	cp	r18, r24
 bb8:	39 07       	cpc	r19, r25
 bba:	78 f0       	brcs	.+30     	; 0xbda <malloc+0x124>
 bbc:	ac 01       	movw	r20, r24
 bbe:	4e 5f       	subi	r20, 0xFE	; 254
 bc0:	5f 4f       	sbci	r21, 0xFF	; 255
 bc2:	24 17       	cp	r18, r20
 bc4:	35 07       	cpc	r19, r21
 bc6:	48 f0       	brcs	.+18     	; 0xbda <malloc+0x124>
 bc8:	4e 0f       	add	r20, r30
 bca:	5f 1f       	adc	r21, r31
 bcc:	50 93 0a 03 	sts	0x030A, r21
 bd0:	40 93 09 03 	sts	0x0309, r20
 bd4:	81 93       	st	Z+, r24
 bd6:	91 93       	st	Z+, r25
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <malloc+0x128>
 bda:	e0 e0       	ldi	r30, 0x00	; 0
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	cf 01       	movw	r24, r30
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	08 95       	ret

00000be6 <free>:
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	00 97       	sbiw	r24, 0x00	; 0
 bec:	09 f4       	brne	.+2      	; 0xbf0 <free+0xa>
 bee:	87 c0       	rjmp	.+270    	; 0xcfe <free+0x118>
 bf0:	fc 01       	movw	r30, r24
 bf2:	32 97       	sbiw	r30, 0x02	; 2
 bf4:	13 82       	std	Z+3, r1	; 0x03
 bf6:	12 82       	std	Z+2, r1	; 0x02
 bf8:	c0 91 0b 03 	lds	r28, 0x030B
 bfc:	d0 91 0c 03 	lds	r29, 0x030C
 c00:	20 97       	sbiw	r28, 0x00	; 0
 c02:	81 f4       	brne	.+32     	; 0xc24 <free+0x3e>
 c04:	20 81       	ld	r18, Z
 c06:	31 81       	ldd	r19, Z+1	; 0x01
 c08:	28 0f       	add	r18, r24
 c0a:	39 1f       	adc	r19, r25
 c0c:	80 91 09 03 	lds	r24, 0x0309
 c10:	90 91 0a 03 	lds	r25, 0x030A
 c14:	82 17       	cp	r24, r18
 c16:	93 07       	cpc	r25, r19
 c18:	79 f5       	brne	.+94     	; 0xc78 <free+0x92>
 c1a:	f0 93 0a 03 	sts	0x030A, r31
 c1e:	e0 93 09 03 	sts	0x0309, r30
 c22:	6d c0       	rjmp	.+218    	; 0xcfe <free+0x118>
 c24:	de 01       	movw	r26, r28
 c26:	20 e0       	ldi	r18, 0x00	; 0
 c28:	30 e0       	ldi	r19, 0x00	; 0
 c2a:	ae 17       	cp	r26, r30
 c2c:	bf 07       	cpc	r27, r31
 c2e:	50 f4       	brcc	.+20     	; 0xc44 <free+0x5e>
 c30:	12 96       	adiw	r26, 0x02	; 2
 c32:	4d 91       	ld	r20, X+
 c34:	5c 91       	ld	r21, X
 c36:	13 97       	sbiw	r26, 0x03	; 3
 c38:	9d 01       	movw	r18, r26
 c3a:	41 15       	cp	r20, r1
 c3c:	51 05       	cpc	r21, r1
 c3e:	09 f1       	breq	.+66     	; 0xc82 <free+0x9c>
 c40:	da 01       	movw	r26, r20
 c42:	f3 cf       	rjmp	.-26     	; 0xc2a <free+0x44>
 c44:	b3 83       	std	Z+3, r27	; 0x03
 c46:	a2 83       	std	Z+2, r26	; 0x02
 c48:	40 81       	ld	r20, Z
 c4a:	51 81       	ldd	r21, Z+1	; 0x01
 c4c:	84 0f       	add	r24, r20
 c4e:	95 1f       	adc	r25, r21
 c50:	8a 17       	cp	r24, r26
 c52:	9b 07       	cpc	r25, r27
 c54:	71 f4       	brne	.+28     	; 0xc72 <free+0x8c>
 c56:	8d 91       	ld	r24, X+
 c58:	9c 91       	ld	r25, X
 c5a:	11 97       	sbiw	r26, 0x01	; 1
 c5c:	84 0f       	add	r24, r20
 c5e:	95 1f       	adc	r25, r21
 c60:	02 96       	adiw	r24, 0x02	; 2
 c62:	91 83       	std	Z+1, r25	; 0x01
 c64:	80 83       	st	Z, r24
 c66:	12 96       	adiw	r26, 0x02	; 2
 c68:	8d 91       	ld	r24, X+
 c6a:	9c 91       	ld	r25, X
 c6c:	13 97       	sbiw	r26, 0x03	; 3
 c6e:	93 83       	std	Z+3, r25	; 0x03
 c70:	82 83       	std	Z+2, r24	; 0x02
 c72:	21 15       	cp	r18, r1
 c74:	31 05       	cpc	r19, r1
 c76:	29 f4       	brne	.+10     	; 0xc82 <free+0x9c>
 c78:	f0 93 0c 03 	sts	0x030C, r31
 c7c:	e0 93 0b 03 	sts	0x030B, r30
 c80:	3e c0       	rjmp	.+124    	; 0xcfe <free+0x118>
 c82:	d9 01       	movw	r26, r18
 c84:	13 96       	adiw	r26, 0x03	; 3
 c86:	fc 93       	st	X, r31
 c88:	ee 93       	st	-X, r30
 c8a:	12 97       	sbiw	r26, 0x02	; 2
 c8c:	4d 91       	ld	r20, X+
 c8e:	5d 91       	ld	r21, X+
 c90:	a4 0f       	add	r26, r20
 c92:	b5 1f       	adc	r27, r21
 c94:	ea 17       	cp	r30, r26
 c96:	fb 07       	cpc	r31, r27
 c98:	79 f4       	brne	.+30     	; 0xcb8 <free+0xd2>
 c9a:	80 81       	ld	r24, Z
 c9c:	91 81       	ldd	r25, Z+1	; 0x01
 c9e:	84 0f       	add	r24, r20
 ca0:	95 1f       	adc	r25, r21
 ca2:	02 96       	adiw	r24, 0x02	; 2
 ca4:	d9 01       	movw	r26, r18
 ca6:	11 96       	adiw	r26, 0x01	; 1
 ca8:	9c 93       	st	X, r25
 caa:	8e 93       	st	-X, r24
 cac:	82 81       	ldd	r24, Z+2	; 0x02
 cae:	93 81       	ldd	r25, Z+3	; 0x03
 cb0:	13 96       	adiw	r26, 0x03	; 3
 cb2:	9c 93       	st	X, r25
 cb4:	8e 93       	st	-X, r24
 cb6:	12 97       	sbiw	r26, 0x02	; 2
 cb8:	e0 e0       	ldi	r30, 0x00	; 0
 cba:	f0 e0       	ldi	r31, 0x00	; 0
 cbc:	8a 81       	ldd	r24, Y+2	; 0x02
 cbe:	9b 81       	ldd	r25, Y+3	; 0x03
 cc0:	00 97       	sbiw	r24, 0x00	; 0
 cc2:	19 f0       	breq	.+6      	; 0xcca <free+0xe4>
 cc4:	fe 01       	movw	r30, r28
 cc6:	ec 01       	movw	r28, r24
 cc8:	f9 cf       	rjmp	.-14     	; 0xcbc <free+0xd6>
 cca:	ce 01       	movw	r24, r28
 ccc:	02 96       	adiw	r24, 0x02	; 2
 cce:	28 81       	ld	r18, Y
 cd0:	39 81       	ldd	r19, Y+1	; 0x01
 cd2:	82 0f       	add	r24, r18
 cd4:	93 1f       	adc	r25, r19
 cd6:	20 91 09 03 	lds	r18, 0x0309
 cda:	30 91 0a 03 	lds	r19, 0x030A
 cde:	28 17       	cp	r18, r24
 ce0:	39 07       	cpc	r19, r25
 ce2:	69 f4       	brne	.+26     	; 0xcfe <free+0x118>
 ce4:	30 97       	sbiw	r30, 0x00	; 0
 ce6:	29 f4       	brne	.+10     	; 0xcf2 <free+0x10c>
 ce8:	10 92 0c 03 	sts	0x030C, r1
 cec:	10 92 0b 03 	sts	0x030B, r1
 cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <free+0x110>
 cf2:	13 82       	std	Z+3, r1	; 0x03
 cf4:	12 82       	std	Z+2, r1	; 0x02
 cf6:	d0 93 0a 03 	sts	0x030A, r29
 cfa:	c0 93 09 03 	sts	0x0309, r28
 cfe:	df 91       	pop	r29
 d00:	cf 91       	pop	r28
 d02:	08 95       	ret

00000d04 <strnlen_P>:
 d04:	fc 01       	movw	r30, r24
 d06:	05 90       	lpm	r0, Z+
 d08:	61 50       	subi	r22, 0x01	; 1
 d0a:	70 40       	sbci	r23, 0x00	; 0
 d0c:	01 10       	cpse	r0, r1
 d0e:	d8 f7       	brcc	.-10     	; 0xd06 <strnlen_P+0x2>
 d10:	80 95       	com	r24
 d12:	90 95       	com	r25
 d14:	8e 0f       	add	r24, r30
 d16:	9f 1f       	adc	r25, r31
 d18:	08 95       	ret

00000d1a <memset>:
 d1a:	dc 01       	movw	r26, r24
 d1c:	01 c0       	rjmp	.+2      	; 0xd20 <memset+0x6>
 d1e:	6d 93       	st	X+, r22
 d20:	41 50       	subi	r20, 0x01	; 1
 d22:	50 40       	sbci	r21, 0x00	; 0
 d24:	e0 f7       	brcc	.-8      	; 0xd1e <memset+0x4>
 d26:	08 95       	ret

00000d28 <strnlen>:
 d28:	fc 01       	movw	r30, r24
 d2a:	61 50       	subi	r22, 0x01	; 1
 d2c:	70 40       	sbci	r23, 0x00	; 0
 d2e:	01 90       	ld	r0, Z+
 d30:	01 10       	cpse	r0, r1
 d32:	d8 f7       	brcc	.-10     	; 0xd2a <strnlen+0x2>
 d34:	80 95       	com	r24
 d36:	90 95       	com	r25
 d38:	8e 0f       	add	r24, r30
 d3a:	9f 1f       	adc	r25, r31
 d3c:	08 95       	ret

00000d3e <fputc>:
 d3e:	0f 93       	push	r16
 d40:	1f 93       	push	r17
 d42:	cf 93       	push	r28
 d44:	df 93       	push	r29
 d46:	18 2f       	mov	r17, r24
 d48:	09 2f       	mov	r16, r25
 d4a:	eb 01       	movw	r28, r22
 d4c:	8b 81       	ldd	r24, Y+3	; 0x03
 d4e:	81 fd       	sbrc	r24, 1
 d50:	03 c0       	rjmp	.+6      	; 0xd58 <fputc+0x1a>
 d52:	8f ef       	ldi	r24, 0xFF	; 255
 d54:	9f ef       	ldi	r25, 0xFF	; 255
 d56:	20 c0       	rjmp	.+64     	; 0xd98 <fputc+0x5a>
 d58:	82 ff       	sbrs	r24, 2
 d5a:	10 c0       	rjmp	.+32     	; 0xd7c <fputc+0x3e>
 d5c:	4e 81       	ldd	r20, Y+6	; 0x06
 d5e:	5f 81       	ldd	r21, Y+7	; 0x07
 d60:	2c 81       	ldd	r18, Y+4	; 0x04
 d62:	3d 81       	ldd	r19, Y+5	; 0x05
 d64:	42 17       	cp	r20, r18
 d66:	53 07       	cpc	r21, r19
 d68:	7c f4       	brge	.+30     	; 0xd88 <fputc+0x4a>
 d6a:	e8 81       	ld	r30, Y
 d6c:	f9 81       	ldd	r31, Y+1	; 0x01
 d6e:	9f 01       	movw	r18, r30
 d70:	2f 5f       	subi	r18, 0xFF	; 255
 d72:	3f 4f       	sbci	r19, 0xFF	; 255
 d74:	39 83       	std	Y+1, r19	; 0x01
 d76:	28 83       	st	Y, r18
 d78:	10 83       	st	Z, r17
 d7a:	06 c0       	rjmp	.+12     	; 0xd88 <fputc+0x4a>
 d7c:	e8 85       	ldd	r30, Y+8	; 0x08
 d7e:	f9 85       	ldd	r31, Y+9	; 0x09
 d80:	81 2f       	mov	r24, r17
 d82:	09 95       	icall
 d84:	89 2b       	or	r24, r25
 d86:	29 f7       	brne	.-54     	; 0xd52 <fputc+0x14>
 d88:	2e 81       	ldd	r18, Y+6	; 0x06
 d8a:	3f 81       	ldd	r19, Y+7	; 0x07
 d8c:	2f 5f       	subi	r18, 0xFF	; 255
 d8e:	3f 4f       	sbci	r19, 0xFF	; 255
 d90:	3f 83       	std	Y+7, r19	; 0x07
 d92:	2e 83       	std	Y+6, r18	; 0x06
 d94:	81 2f       	mov	r24, r17
 d96:	90 2f       	mov	r25, r16
 d98:	df 91       	pop	r29
 d9a:	cf 91       	pop	r28
 d9c:	1f 91       	pop	r17
 d9e:	0f 91       	pop	r16
 da0:	08 95       	ret

00000da2 <__ultoa_invert>:
 da2:	fa 01       	movw	r30, r20
 da4:	aa 27       	eor	r26, r26
 da6:	28 30       	cpi	r18, 0x08	; 8
 da8:	51 f1       	breq	.+84     	; 0xdfe <__ultoa_invert+0x5c>
 daa:	20 31       	cpi	r18, 0x10	; 16
 dac:	81 f1       	breq	.+96     	; 0xe0e <__ultoa_invert+0x6c>
 dae:	e8 94       	clt
 db0:	6f 93       	push	r22
 db2:	6e 7f       	andi	r22, 0xFE	; 254
 db4:	6e 5f       	subi	r22, 0xFE	; 254
 db6:	7f 4f       	sbci	r23, 0xFF	; 255
 db8:	8f 4f       	sbci	r24, 0xFF	; 255
 dba:	9f 4f       	sbci	r25, 0xFF	; 255
 dbc:	af 4f       	sbci	r26, 0xFF	; 255
 dbe:	b1 e0       	ldi	r27, 0x01	; 1
 dc0:	3e d0       	rcall	.+124    	; 0xe3e <__ultoa_invert+0x9c>
 dc2:	b4 e0       	ldi	r27, 0x04	; 4
 dc4:	3c d0       	rcall	.+120    	; 0xe3e <__ultoa_invert+0x9c>
 dc6:	67 0f       	add	r22, r23
 dc8:	78 1f       	adc	r23, r24
 dca:	89 1f       	adc	r24, r25
 dcc:	9a 1f       	adc	r25, r26
 dce:	a1 1d       	adc	r26, r1
 dd0:	68 0f       	add	r22, r24
 dd2:	79 1f       	adc	r23, r25
 dd4:	8a 1f       	adc	r24, r26
 dd6:	91 1d       	adc	r25, r1
 dd8:	a1 1d       	adc	r26, r1
 dda:	6a 0f       	add	r22, r26
 ddc:	71 1d       	adc	r23, r1
 dde:	81 1d       	adc	r24, r1
 de0:	91 1d       	adc	r25, r1
 de2:	a1 1d       	adc	r26, r1
 de4:	20 d0       	rcall	.+64     	; 0xe26 <__ultoa_invert+0x84>
 de6:	09 f4       	brne	.+2      	; 0xdea <__ultoa_invert+0x48>
 de8:	68 94       	set
 dea:	3f 91       	pop	r19
 dec:	2a e0       	ldi	r18, 0x0A	; 10
 dee:	26 9f       	mul	r18, r22
 df0:	11 24       	eor	r1, r1
 df2:	30 19       	sub	r19, r0
 df4:	30 5d       	subi	r19, 0xD0	; 208
 df6:	31 93       	st	Z+, r19
 df8:	de f6       	brtc	.-74     	; 0xdb0 <__ultoa_invert+0xe>
 dfa:	cf 01       	movw	r24, r30
 dfc:	08 95       	ret
 dfe:	46 2f       	mov	r20, r22
 e00:	47 70       	andi	r20, 0x07	; 7
 e02:	40 5d       	subi	r20, 0xD0	; 208
 e04:	41 93       	st	Z+, r20
 e06:	b3 e0       	ldi	r27, 0x03	; 3
 e08:	0f d0       	rcall	.+30     	; 0xe28 <__ultoa_invert+0x86>
 e0a:	c9 f7       	brne	.-14     	; 0xdfe <__ultoa_invert+0x5c>
 e0c:	f6 cf       	rjmp	.-20     	; 0xdfa <__ultoa_invert+0x58>
 e0e:	46 2f       	mov	r20, r22
 e10:	4f 70       	andi	r20, 0x0F	; 15
 e12:	40 5d       	subi	r20, 0xD0	; 208
 e14:	4a 33       	cpi	r20, 0x3A	; 58
 e16:	18 f0       	brcs	.+6      	; 0xe1e <__ultoa_invert+0x7c>
 e18:	49 5d       	subi	r20, 0xD9	; 217
 e1a:	31 fd       	sbrc	r19, 1
 e1c:	40 52       	subi	r20, 0x20	; 32
 e1e:	41 93       	st	Z+, r20
 e20:	02 d0       	rcall	.+4      	; 0xe26 <__ultoa_invert+0x84>
 e22:	a9 f7       	brne	.-22     	; 0xe0e <__ultoa_invert+0x6c>
 e24:	ea cf       	rjmp	.-44     	; 0xdfa <__ultoa_invert+0x58>
 e26:	b4 e0       	ldi	r27, 0x04	; 4
 e28:	a6 95       	lsr	r26
 e2a:	97 95       	ror	r25
 e2c:	87 95       	ror	r24
 e2e:	77 95       	ror	r23
 e30:	67 95       	ror	r22
 e32:	ba 95       	dec	r27
 e34:	c9 f7       	brne	.-14     	; 0xe28 <__ultoa_invert+0x86>
 e36:	00 97       	sbiw	r24, 0x00	; 0
 e38:	61 05       	cpc	r22, r1
 e3a:	71 05       	cpc	r23, r1
 e3c:	08 95       	ret
 e3e:	9b 01       	movw	r18, r22
 e40:	ac 01       	movw	r20, r24
 e42:	0a 2e       	mov	r0, r26
 e44:	06 94       	lsr	r0
 e46:	57 95       	ror	r21
 e48:	47 95       	ror	r20
 e4a:	37 95       	ror	r19
 e4c:	27 95       	ror	r18
 e4e:	ba 95       	dec	r27
 e50:	c9 f7       	brne	.-14     	; 0xe44 <__ultoa_invert+0xa2>
 e52:	62 0f       	add	r22, r18
 e54:	73 1f       	adc	r23, r19
 e56:	84 1f       	adc	r24, r20
 e58:	95 1f       	adc	r25, r21
 e5a:	a0 1d       	adc	r26, r0
 e5c:	08 95       	ret

00000e5e <__prologue_saves__>:
 e5e:	2f 92       	push	r2
 e60:	3f 92       	push	r3
 e62:	4f 92       	push	r4
 e64:	5f 92       	push	r5
 e66:	6f 92       	push	r6
 e68:	7f 92       	push	r7
 e6a:	8f 92       	push	r8
 e6c:	9f 92       	push	r9
 e6e:	af 92       	push	r10
 e70:	bf 92       	push	r11
 e72:	cf 92       	push	r12
 e74:	df 92       	push	r13
 e76:	ef 92       	push	r14
 e78:	ff 92       	push	r15
 e7a:	0f 93       	push	r16
 e7c:	1f 93       	push	r17
 e7e:	cf 93       	push	r28
 e80:	df 93       	push	r29
 e82:	cd b7       	in	r28, 0x3d	; 61
 e84:	de b7       	in	r29, 0x3e	; 62
 e86:	ca 1b       	sub	r28, r26
 e88:	db 0b       	sbc	r29, r27
 e8a:	0f b6       	in	r0, 0x3f	; 63
 e8c:	f8 94       	cli
 e8e:	de bf       	out	0x3e, r29	; 62
 e90:	0f be       	out	0x3f, r0	; 63
 e92:	cd bf       	out	0x3d, r28	; 61
 e94:	09 94       	ijmp

00000e96 <__epilogue_restores__>:
 e96:	2a 88       	ldd	r2, Y+18	; 0x12
 e98:	39 88       	ldd	r3, Y+17	; 0x11
 e9a:	48 88       	ldd	r4, Y+16	; 0x10
 e9c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e9e:	6e 84       	ldd	r6, Y+14	; 0x0e
 ea0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ea2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ea4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ea6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ea8:	b9 84       	ldd	r11, Y+9	; 0x09
 eaa:	c8 84       	ldd	r12, Y+8	; 0x08
 eac:	df 80       	ldd	r13, Y+7	; 0x07
 eae:	ee 80       	ldd	r14, Y+6	; 0x06
 eb0:	fd 80       	ldd	r15, Y+5	; 0x05
 eb2:	0c 81       	ldd	r16, Y+4	; 0x04
 eb4:	1b 81       	ldd	r17, Y+3	; 0x03
 eb6:	aa 81       	ldd	r26, Y+2	; 0x02
 eb8:	b9 81       	ldd	r27, Y+1	; 0x01
 eba:	ce 0f       	add	r28, r30
 ebc:	d1 1d       	adc	r29, r1
 ebe:	0f b6       	in	r0, 0x3f	; 63
 ec0:	f8 94       	cli
 ec2:	de bf       	out	0x3e, r29	; 62
 ec4:	0f be       	out	0x3f, r0	; 63
 ec6:	cd bf       	out	0x3d, r28	; 61
 ec8:	ed 01       	movw	r28, r26
 eca:	08 95       	ret

00000ecc <_exit>:
 ecc:	f8 94       	cli

00000ece <__stop_program>:
 ece:	ff cf       	rjmp	.-2      	; 0xece <__stop_program>
