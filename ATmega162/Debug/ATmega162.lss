
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d4  00800100  00002aba  00002b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  008003d4  008003d4  00002e22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e22  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000498  00000000  00000000  00002e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003f93  00000000  00000000  00003316  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000194e  00000000  00000000  000072a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b62  00000000  00000000  00008bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b94  00000000  00000000  0000a75c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d37  00000000  00000000  0000b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020d0  00000000  00000000  0000c027  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000388  00000000  00000000  0000e0f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__ctors_end>
       4:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_1>
       8:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
       c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      10:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      14:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      18:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      1c:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_7>
      20:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      24:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      28:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_10>
      2c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      30:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      34:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_13>
      38:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      3c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      40:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      44:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      48:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      4c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      50:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      54:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      58:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      5c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      60:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      64:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      68:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      6c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	0c 0c       	add	r0, r12
      72:	0c 0c       	add	r0, r12
      74:	0c 0c       	add	r0, r12
      76:	0c 0c       	add	r0, r12
      78:	0c 0c       	add	r0, r12
      7a:	0c 0c       	add	r0, r12
      7c:	0c 0c       	add	r0, r12
      7e:	0c 0c       	add	r0, r12
      80:	0c 0c       	add	r0, r12
      82:	0c 0c       	add	r0, r12
      84:	0c 0c       	add	r0, r12
      86:	0c 0c       	add	r0, r12
      88:	0c 0c       	add	r0, r12
      8a:	0c 0c       	add	r0, r12
      8c:	0c 0c       	add	r0, r12
      8e:	0c 0c       	add	r0, r12
      90:	09 09       	sbc	r16, r9
      92:	09 0c       	add	r0, r9
      94:	0c 0c       	add	r0, r12
      96:	0c 0c       	add	r0, r12
      98:	0c 0c       	add	r0, r12
      9a:	0c 0c       	add	r0, r12
      9c:	0c 0c       	add	r0, r12
      9e:	0c 0c       	add	r0, r12
      a0:	0c 0c       	add	r0, r12
      a2:	0c 0c       	add	r0, r12
      a4:	0c 0c       	add	r0, r12
      a6:	0c 0c       	add	r0, r12
      a8:	0c 0c       	add	r0, r12
      aa:	0c 0c       	add	r0, r12
      ac:	0c 0c       	add	r0, r12
      ae:	0c 09       	sbc	r16, r12
      b0:	09 09       	sbc	r16, r9
      b2:	0c 0c       	add	r0, r12
      b4:	0c 0c       	add	r0, r12
      b6:	0c 0c       	add	r0, r12
      b8:	0c 0c       	add	r0, r12
      ba:	0c 0c       	add	r0, r12
      bc:	0c 0c       	add	r0, r12
      be:	00 00       	nop
      c0:	32 32       	cpi	r19, 0x22	; 34
      c2:	32 23       	and	r19, r18
      c4:	0f 32       	cpi	r16, 0x2F	; 47
      c6:	23 0f       	add	r18, r19
      c8:	41 32       	cpi	r20, 0x21	; 33
      ca:	32 32       	cpi	r19, 0x22	; 34
      cc:	32 23       	and	r19, r18
      ce:	0f 32       	cpi	r16, 0x2F	; 47
      d0:	23 0f       	add	r18, r19
      d2:	41 32       	cpi	r20, 0x21	; 33
      d4:	32 1e       	adc	r3, r18
      d6:	0f 32       	cpi	r16, 0x2F	; 47
      d8:	20 11       	cpse	r18, r0
      da:	0c 0c       	add	r0, r12
      dc:	19 20       	and	r1, r9
      de:	19 32       	cpi	r17, 0x29	; 41
      e0:	20 11       	cpse	r18, r0
      e2:	0c 0c       	add	r0, r12
      e4:	19 23       	and	r17, r25
      e6:	19 32       	cpi	r17, 0x29	; 41
      e8:	23 0c       	add	r2, r3
      ea:	32 25       	eor	r19, r2
      ec:	0c 41       	sbci	r16, 0x1C	; 28
      ee:	32 32       	cpi	r19, 0x22	; 34
      f0:	1e 0f       	add	r17, r30
      f2:	32 20       	and	r3, r2
      f4:	11 0c       	add	r1, r1
      f6:	0c 19       	sub	r16, r12
      f8:	20 19       	sub	r18, r0
      fa:	32 20       	and	r3, r2
      fc:	11 0c       	add	r1, r1
      fe:	0c 19       	sub	r16, r12
     100:	23 19       	sub	r18, r3
     102:	32 25       	eor	r19, r2
     104:	0c 32       	cpi	r16, 0x2C	; 44
     106:	25 0c       	add	r2, r5
     108:	41 41       	sbci	r20, 0x11	; 17
     10a:	00 00       	nop
     10c:	00 00       	nop
	...

00000110 <frequency>:
     110:	00 c0 24 44 00 c0 24 44 00 00 00 00 00 c0 24 44     ..$D..$D......$D
     120:	00 00 00 00 00 c0 02 44 00 c0 24 44 00 00 00 00     .......D..$D....
     130:	00 00 44 44 00 00 00 00 00 00 00 00 00 00 00 00     ..DD............
     140:	00 00 c4 43 00 00 00 00 00 00 00 00 00 00 00 00     ...C............
     150:	00 c0 02 44 00 00 00 00 00 00 00 00 00 00 c4 43     ...D...........C
	...
     168:	00 00 a5 43 00 00 00 00 00 00 00 00 00 00 dc 43     ...C...........C
     178:	00 00 00 00 00 00 f7 43 00 00 00 00 00 00 e9 43     .......C.......C
     188:	00 00 dc 43 00 00 00 00 00 00 c4 43 00 c0 24 44     ...C.......C..$D
     198:	00 00 44 44 00 00 5c 44 00 00 00 00 00 80 2e 44     ..DD..\D.......D
     1a8:	00 00 44 44 00 00 00 00 00 c0 24 44 00 00 00 00     ..DD......$D....
     1b8:	00 c0 02 44 00 c0 12 44 00 00 f7 43 00 00 00 00     ...D...D...C....
     1c8:	00 00 00 00 00 c0 02 44 00 00 00 00 00 00 00 00     .......D........
     1d8:	00 00 c4 43 00 00 00 00 00 00 00 00 00 00 a5 43     ...C...........C
	...
     1f0:	00 00 dc 43 00 00 00 00 00 00 f7 43 00 00 00 00     ...C.......C....
     200:	00 00 e9 43 00 00 dc 43 00 00 00 00 00 00 c4 43     ...C...C.......C
     210:	00 c0 24 44 00 00 44 44 00 00 5c 44 00 00 00 00     ..$D..DD..\D....
     220:	00 80 2e 44 00 00 44 44 00 00 00 00 00 c0 24 44     ...D..DD......$D
     230:	00 00 00 00 00 c0 02 44 00 c0 12 44 00 00 f7 43     .......D...D...C
	...
     250:	00 00 dc 43 00 00 dc 43 00 00 dc 43 00 80 ae 43     ...C...C...C...C
     260:	00 c0 02 44 00 00 dc 43 00 80 ae 43 00 c0 02 44     ...D...C...C...D
     270:	00 00 dc 43 00 00 00 00 00 c0 24 44 00 c0 24 44     ...C......$D..$D
     280:	00 c0 24 44 00 80 2e 44 00 c0 02 44 00 80 cf 43     ..$D...D...D...C
     290:	00 80 ae 43 00 c0 02 44 00 00 dc 43 00 00 00 00     ...C...D...C....
     2a0:	00 00 5c 44 00 00 dc 43 00 00 dc 43 00 00 5c 44     ..\D...C...C..\D
     2b0:	00 c0 4f 44 00 00 44 44 00 00 39 44 00 80 2e 44     ..OD..DD..9D...D
     2c0:	00 00 39 44 00 00 00 00 00 00 e9 43 00 80 1b 44     ..9D.......C...D
     2d0:	00 c0 12 44 00 80 0a 44 00 c0 02 44 00 00 f7 43     ...D...D...D...C
     2e0:	00 c0 02 44 00 00 00 00 00 80 ae 43 00 80 cf 43     ...D.......C...C
     2f0:	00 80 ae 43 00 00 dc 43 00 c0 02 44 00 00 dc 43     ...C...C...D...C
     300:	00 c0 02 44 00 c0 24 44 00 00 00 00 00 00 5c 44     ...D..$D......\D
     310:	00 00 dc 43 00 00 dc 43 00 00 5c 44 00 c0 4f 44     ...C...C..\D..OD
     320:	00 00 44 44 00 00 39 44 00 80 2e 44 00 00 39 44     ..DD..9D...D..9D
     330:	00 00 00 00 00 00 e9 43 00 80 1b 44 00 c0 12 44     .......C...D...D
     340:	00 80 0a 44 00 c0 02 44 00 00 f7 43 00 c0 02 44     ...D...D...C...D
     350:	00 00 00 00 00 80 ae 43 00 80 cf 43 00 80 ae 43     .......C...C...C
     360:	00 c0 02 44 00 00 dc 43 00 80 ae 43 00 c0 02 44     ...D...C...C...D
     370:	00 00 dc 43 00 00 00 00 00 00 00 00 00 00 00 00     ...C............
	...

00000390 <font5>:
     390:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     3a0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     3b0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     3c0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     3d0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     3e0:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     3f0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     400:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     410:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     420:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     430:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     440:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     450:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     460:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     470:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     480:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     490:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     4a0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     4b0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     4c0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     4d0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     4e0:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     4f0:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     500:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     510:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     520:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     530:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     540:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     550:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     560:	00 00 41 36 08 00 02 01 03 02 01 00                 ..A6........

0000056c <__ctors_end>:
     56c:	11 24       	eor	r1, r1
     56e:	1f be       	out	0x3f, r1	; 63
     570:	cf ef       	ldi	r28, 0xFF	; 255
     572:	d4 e0       	ldi	r29, 0x04	; 4
     574:	de bf       	out	0x3e, r29	; 62
     576:	cd bf       	out	0x3d, r28	; 61

00000578 <__do_copy_data>:
     578:	13 e0       	ldi	r17, 0x03	; 3
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b1 e0       	ldi	r27, 0x01	; 1
     57e:	ea eb       	ldi	r30, 0xBA	; 186
     580:	fa e2       	ldi	r31, 0x2A	; 42
     582:	02 c0       	rjmp	.+4      	; 0x588 <__do_copy_data+0x10>
     584:	05 90       	lpm	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	a4 3d       	cpi	r26, 0xD4	; 212
     58a:	b1 07       	cpc	r27, r17
     58c:	d9 f7       	brne	.-10     	; 0x584 <__do_copy_data+0xc>

0000058e <__do_clear_bss>:
     58e:	24 e0       	ldi	r18, 0x04	; 4
     590:	a4 ed       	ldi	r26, 0xD4	; 212
     592:	b3 e0       	ldi	r27, 0x03	; 3
     594:	01 c0       	rjmp	.+2      	; 0x598 <.do_clear_bss_start>

00000596 <.do_clear_bss_loop>:
     596:	1d 92       	st	X+, r1

00000598 <.do_clear_bss_start>:
     598:	a0 30       	cpi	r26, 0x00	; 0
     59a:	b2 07       	cpc	r27, r18
     59c:	e1 f7       	brne	.-8      	; 0x596 <.do_clear_bss_loop>
     59e:	0e 94 23 0c 	call	0x1846	; 0x1846 <main>
     5a2:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <_exit>

000005a6 <__bad_interrupt>:
     5a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005aa <CAN_init>:
enum interrupt_flags interrupt_flag = no_flag; 


int CAN_init()
{
	MCP_init();
     5aa:	0e 94 1d 04 	call	0x83a	; 0x83a <MCP_init>
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     5ae:	40 e6       	ldi	r20, 0x60	; 96
     5b0:	60 e6       	ldi	r22, 0x60	; 96
     5b2:	80 e6       	ldi	r24, 0x60	; 96
     5b4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     5b8:	40 e6       	ldi	r20, 0x60	; 96
     5ba:	60 e6       	ldi	r22, 0x60	; 96
     5bc:	80 e7       	ldi	r24, 0x70	; 112
     5be:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     5c2:	44 e0       	ldi	r20, 0x04	; 4
     5c4:	64 e0       	ldi	r22, 0x04	; 4
     5c6:	80 e6       	ldi	r24, 0x60	; 96
     5c8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     5cc:	44 e0       	ldi	r20, 0x04	; 4
     5ce:	64 e0       	ldi	r22, 0x04	; 4
     5d0:	80 e7       	ldi	r24, 0x70	; 112
     5d2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	60 ee       	ldi	r22, 0xE0	; 224
     5da:	8f e0       	ldi	r24, 0x0F	; 15
     5dc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     5e0:	8e e0       	ldi	r24, 0x0E	; 14
     5e2:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     5e6:	80 7e       	andi	r24, 0xE0	; 224
     5e8:	61 f4       	brne	.+24     	; 0x602 <CAN_init+0x58>
		return 1;
	}
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
     5ea:	63 e0       	ldi	r22, 0x03	; 3
     5ec:	8b e2       	ldi	r24, 0x2B	; 43
     5ee:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Low INT0 generates interrupt request
	MCUCR |= (0 << ISC01) | (0 << ISC00);
     5f2:	85 b7       	in	r24, 0x35	; 53
     5f4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     5f6:	8b b7       	in	r24, 0x3b	; 59
     5f8:	80 64       	ori	r24, 0x40	; 64
     5fa:	8b bf       	out	0x3b, r24	; 59
	// Low INT2 generates interrupt request
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	08 95       	ret
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
	
	uint8_t value = MCP_read(MCP_CANSTAT);
	if ((value & MODE_MASK) != MODE_NORMAL){
		return 1;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
}
     606:	08 95       	ret

00000608 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
     616:	fc 01       	movw	r30, r24
     618:	60 81       	ld	r22, Z
     61a:	71 81       	ldd	r23, Z+1	; 0x01
     61c:	76 95       	lsr	r23
     61e:	67 95       	ror	r22
     620:	76 95       	lsr	r23
     622:	67 95       	ror	r22
     624:	76 95       	lsr	r23
     626:	67 95       	ror	r22
     628:	81 e3       	ldi	r24, 0x31	; 49
     62a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
     62e:	f7 01       	movw	r30, r14
     630:	60 81       	ld	r22, Z
     632:	62 95       	swap	r22
     634:	66 0f       	add	r22, r22
     636:	60 7e       	andi	r22, 0xE0	; 224
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	83 e3       	ldi	r24, 0x33	; 51
     642:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	84 e3       	ldi	r24, 0x34	; 52
     64a:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
     64e:	f7 01       	movw	r30, r14
     650:	62 81       	ldd	r22, Z+2	; 0x02
     652:	85 e3       	ldi	r24, 0x35	; 53
     654:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
     658:	f7 01       	movw	r30, r14
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	88 23       	and	r24, r24
     65e:	99 f0       	breq	.+38     	; 0x686 <CAN_msg_send+0x7e>
     660:	87 01       	movw	r16, r14
     662:	0d 5f       	subi	r16, 0xFD	; 253
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	c0 e0       	ldi	r28, 0x00	; 0
     668:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
     66a:	f8 01       	movw	r30, r16
     66c:	61 91       	ld	r22, Z+
     66e:	8f 01       	movw	r16, r30
     670:	8c 2f       	mov	r24, r28
     672:	8a 5c       	subi	r24, 0xCA	; 202
     674:	0e 94 2b 04 	call	0x856	; 0x856 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	f7 01       	movw	r30, r14
     67c:	22 81       	ldd	r18, Z+2	; 0x02
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	c2 17       	cp	r28, r18
     682:	d3 07       	cpc	r29, r19
     684:	94 f3       	brlt	.-28     	; 0x66a <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
     686:	81 e8       	ldi	r24, 0x81	; 129
     688:	0e 94 43 04 	call	0x886	; 0x886 <MCP_request_to_send>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <CAN_msg_receive>:

void CAN_msg_receive(can_msg *msg, uint8_t reg)
{
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	7c 01       	movw	r14, r24
     6ac:	c6 2f       	mov	r28, r22
	// RXBnSIDH and RXBnSIDL (id)
	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	86 0f       	add	r24, r22
     6b2:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6b6:	d8 2f       	mov	r29, r24
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	8c 0f       	add	r24, r28
     6bc:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6c0:	48 2f       	mov	r20, r24
     6c2:	42 95       	swap	r20
     6c4:	46 95       	lsr	r20
     6c6:	47 70       	andi	r20, 0x07	; 7
     6c8:	2d 2f       	mov	r18, r29
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	c9 01       	movw	r24, r18
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	84 2b       	or	r24, r20
     6dc:	f7 01       	movw	r30, r14
     6de:	91 83       	std	Z+1, r25	; 0x01
     6e0:	80 83       	st	Z, r24
	// bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
	msg->length = (MCP_read(reg + 5) & 0x0F ); 
     6e2:	85 e0       	ldi	r24, 0x05	; 5
     6e4:	8c 0f       	add	r24, r28
     6e6:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     6ea:	8f 70       	andi	r24, 0x0F	; 15
     6ec:	f7 01       	movw	r30, r14
     6ee:	82 83       	std	Z+2, r24	; 0x02
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     6f0:	88 23       	and	r24, r24
     6f2:	f9 f0       	breq	.+62     	; 0x732 <CAN_msg_receive+0x98>
     6f4:	0f 2e       	mov	r0, r31
     6f6:	f6 e0       	ldi	r31, 0x06	; 6
     6f8:	df 2e       	mov	r13, r31
     6fa:	f0 2d       	mov	r31, r0
     6fc:	dc 0e       	add	r13, r28
     6fe:	87 01       	movw	r16, r14
     700:	0d 5f       	subi	r16, 0xFD	; 253
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	0f 2e       	mov	r0, r31
     706:	fe e0       	ldi	r31, 0x0E	; 14
     708:	cf 2e       	mov	r12, r31
     70a:	f0 2d       	mov	r31, r0
     70c:	cc 0e       	add	r12, r28
	// RXBnSIDH and RXBnSIDL (id)
	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5);
	// bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
	msg->length = (MCP_read(reg + 5) & 0x0F ); 
		
	int i = 0;
     70e:	c0 e0       	ldi	r28, 0x00	; 0
     710:	d0 e0       	ldi	r29, 0x00	; 0
	while( (i < msg->length) && (i < 8) ){
		//RXBnDM (receive buffer)
		msg->data[i] = MCP_read(reg + 6 + i);	
     712:	8d 2d       	mov	r24, r13
     714:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
     718:	f8 01       	movw	r30, r16
     71a:	81 93       	st	Z+, r24
     71c:	8f 01       	movw	r16, r30
		i++;
     71e:	21 96       	adiw	r28, 0x01	; 1
	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5);
	// bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
	msg->length = (MCP_read(reg + 5) & 0x0F ); 
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     720:	f7 01       	movw	r30, r14
     722:	22 81       	ldd	r18, Z+2	; 0x02
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	c2 17       	cp	r28, r18
     728:	d3 07       	cpc	r29, r19
     72a:	1c f4       	brge	.+6      	; 0x732 <CAN_msg_receive+0x98>
     72c:	d3 94       	inc	r13
     72e:	dc 10       	cpse	r13, r12
     730:	f0 cf       	rjmp	.-32     	; 0x712 <CAN_msg_receive+0x78>
		//RXBnDM (receive buffer)
		msg->data[i] = MCP_read(reg + 6 + i);	
		i++;
	}	
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	08 95       	ret

00000744 <CAN_handle_interrupt>:

void CAN_handle_interrupt(can_msg *msg)
{
	switch(interrupt_flag){
     744:	20 91 d4 03 	lds	r18, 0x03D4
     748:	21 30       	cpi	r18, 0x01	; 1
     74a:	41 f0       	breq	.+16     	; 0x75c <CAN_handle_interrupt+0x18>
     74c:	18 f0       	brcs	.+6      	; 0x754 <CAN_handle_interrupt+0x10>
     74e:	22 30       	cpi	r18, 0x02	; 2
     750:	59 f0       	breq	.+22     	; 0x768 <CAN_handle_interrupt+0x24>
     752:	08 95       	ret
		case no_flag:
			msg->data[0] = CAN_NO_MESSAGE;
     754:	2a e0       	ldi	r18, 0x0A	; 10
     756:	fc 01       	movw	r30, r24
     758:	23 83       	std	Z+3, r18	; 0x03
			break;
     75a:	08 95       	ret
		case RX0:
			CAN_msg_receive(msg, MCP_RXB0CTRL);
     75c:	60 e6       	ldi	r22, 0x60	; 96
     75e:	0e 94 4d 03 	call	0x69a	; 0x69a <CAN_msg_receive>
			interrupt_flag = no_flag;
     762:	10 92 d4 03 	sts	0x03D4, r1
			break;
     766:	08 95       	ret
		case RX1:
			CAN_msg_receive(msg, MCP_RXB1CTRL);
     768:	60 e7       	ldi	r22, 0x70	; 112
     76a:	0e 94 4d 03 	call	0x69a	; 0x69a <CAN_msg_receive>
			interrupt_flag = no_flag;
     76e:	10 92 d4 03 	sts	0x03D4, r1
     772:	08 95       	ret

00000774 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
     796:	8c e2       	ldi	r24, 0x2C	; 44
     798:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>

	if (interrupt & MCP_RX0IF){
     79c:	80 ff       	sbrs	r24, 0
     79e:	09 c0       	rjmp	.+18     	; 0x7b2 <__vector_1+0x3e>
		interrupt_flag = RX0;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 d4 03 	sts	0x03D4, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	8c e2       	ldi	r24, 0x2C	; 44
     7ac:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
     7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
     7b2:	81 ff       	sbrs	r24, 1
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__vector_1+0x52>
		interrupt_flag = RX1;
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	80 93 d4 03 	sts	0x03D4, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	62 e0       	ldi	r22, 0x02	; 2
     7c0:	8c e2       	ldi	r24, 0x2C	; 44
     7c2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <MCP_bit_modify>
	}
}
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
     7f0:	80 ec       	ldi	r24, 0xC0	; 192
     7f2:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f6:	85 ef       	ldi	r24, 0xF5	; 245
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <MCP_reset+0x12>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <MCP_reset+0x18>
     800:	00 00       	nop
	_delay_us(200);
	SPI_set_ss(1);
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
     80a:	08 95       	ret

0000080c <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
     80c:	cf 93       	push	r28
     80e:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	// Send 8-bit address
	SPI_transmit_receive(address);
     81e:	8c 2f       	mov	r24, r28
     820:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
     82a:	c8 2f       	mov	r28, r24
	SPI_set_ss(1);
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	return received;
}
     834:	8c 2f       	mov	r24, r28
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <MCP_init>:
#include <util/delay.h>


uint8_t MCP_init( void )
{
	SPI_init();
     83a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <SPI_init>
	MCP_reset();
     83e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <MCP_reset>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     842:	8e e0       	ldi	r24, 0x0E	; 14
     844:	0e 94 06 04 	call	0x80c	; 0x80c <MCP_read>
	
	if ((value & MODE_MASK) != MODE_CONFIG){
     848:	98 2f       	mov	r25, r24
     84a:	90 7e       	andi	r25, 0xE0	; 224
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 38       	cpi	r25, 0x80	; 128
     850:	09 f4       	brne	.+2      	; 0x854 <MCP_init+0x1a>
     852:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	return 0;
}
     854:	08 95       	ret

00000856 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	d8 2f       	mov	r29, r24
     85c:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(address);
     86c:	8d 2f       	mov	r24, r29
     86e:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(data);
     872:	8c 2f       	mov	r24, r28
     874:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_set_ss(1);
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <MCP_request_to_send>:

// RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
     892:	8c 2f       	mov	r24, r28
     894:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_set_ss(1);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
}
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	18 2f       	mov	r17, r24
     8ac:	d6 2f       	mov	r29, r22
     8ae:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
     8be:	81 2f       	mov	r24, r17
     8c0:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(mask);
     8c4:	8d 2f       	mov	r24, r29
     8c6:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	SPI_transmit_receive(data);
     8ca:	8c 2f       	mov	r24, r28
     8cc:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_transmit_receive>
	
	SPI_set_ss(1);
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 82 04 	call	0x904	; 0x904 <SPI_set_ss>
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	08 95       	ret

000008e0 <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
     8e0:	87 b3       	in	r24, 0x17	; 23
     8e2:	80 6b       	ori	r24, 0xB0	; 176
     8e4:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
     8e6:	81 e1       	ldi	r24, 0x11	; 17
     8e8:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
     8ea:	6e 9a       	sbi	0x0d, 6	; 13
     8ec:	08 95       	ret

000008ee <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
     8ee:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1 << SPIF)));
     8f0:	77 9b       	sbis	0x0e, 7	; 14
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <SPI_transmit_receive+0x2>
     8f4:	85 ef       	ldi	r24, 0xF5	; 245
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <SPI_transmit_receive+0xa>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <SPI_transmit_receive+0x10>
     8fe:	00 00       	nop
	_delay_us(200);
	
	return SPDR;
     900:	8f b1       	in	r24, 0x0f	; 15
	
}
     902:	08 95       	ret

00000904 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	91 05       	cpc	r25, r1
     908:	11 f4       	brne	.+4      	; 0x90e <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     90a:	c4 9a       	sbi	0x18, 4	; 24
     90c:	08 95       	ret
	}
	else if (val == 0){
     90e:	89 2b       	or	r24, r25
     910:	09 f4       	brne	.+2      	; 0x914 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     912:	c4 98       	cbi	0x18, 4	; 24
     914:	08 95       	ret

00000916 <UART_Transmit>:
}

void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
     916:	5d 9b       	sbis	0x0b, 5	; 11
     918:	fe cf       	rjmp	.-4      	; 0x916 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
     91a:	8c b9       	out	0x0c, r24	; 12
     91c:	08 95       	ret

0000091e <UART_Recieve>:
}

unsigned char UART_Recieve (void)
{
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
     91e:	5f 9b       	sbis	0x0b, 7	; 11
     920:	fe cf       	rjmp	.-4      	; 0x91e <UART_Recieve>

	// Get and return received data from buffer
	return UDR0;  
     922:	8c b1       	in	r24, 0x0c	; 12
     924:	08 95       	ret

00000926 <UART_Init>:


void UART_Init( unsigned int ubrr )
{
	// Set baud rate
	UBRR0H |= (unsigned char)(ubrr>>8);
     926:	20 b5       	in	r18, 0x20	; 32
     928:	92 2b       	or	r25, r18
     92a:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
     92c:	99 b1       	in	r25, 0x09	; 9
     92e:	89 2b       	or	r24, r25
     930:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     932:	8a b1       	in	r24, 0x0a	; 10
     934:	88 61       	ori	r24, 0x18	; 24
     936:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     938:	80 b5       	in	r24, 0x20	; 32
     93a:	8e 68       	ori	r24, 0x8E	; 142
     93c:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
     93e:	6f e8       	ldi	r22, 0x8F	; 143
     940:	74 e0       	ldi	r23, 0x04	; 4
     942:	8b e8       	ldi	r24, 0x8B	; 139
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fdevopen>
     94a:	08 95       	ret

0000094c <BUZZ_init>:
int current_song;

void BUZZ_init(void)
{	
	//Timer3 - ctc mode
	TCCR3A &= ~(1 << COM3A1) & ~(1 << COM3A0) & ~(1 << WGM31) & ~(1 << WGM30);
     94c:	eb e8       	ldi	r30, 0x8B	; 139
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	8c 73       	andi	r24, 0x3C	; 60
     954:	80 83       	st	Z, r24
	TCCR3B &= ~(1 << WGM33);
     956:	ea e8       	ldi	r30, 0x8A	; 138
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8f 7e       	andi	r24, 0xEF	; 239
     95e:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32);
     960:	80 81       	ld	r24, Z
     962:	88 60       	ori	r24, 0x08	; 8
     964:	80 83       	st	Z, r24
	
	//Set the compare match interrupt enable
	ETIMSK |= (1 << OCIE3A);
     966:	ed e7       	ldi	r30, 0x7D	; 125
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	80 61       	ori	r24, 0x10	; 16
     96e:	80 83       	st	Z, r24
	
	FREQUENCY_GENERATOR_init();
     970:	0e 94 ae 05 	call	0xb5c	; 0xb5c <FREQUENCY_GENERATOR_init>
     974:	08 95       	ret

00000976 <BUZZ_stop_song>:
	BUZZ_start_note(pgm_read_float(&frequency[current_song][0]),pgm_read_byte(&duration[current_song][0]));
}

void BUZZ_stop_song()
{
	TCCR3B &= ~(1 << CS32) & ~(1 << CS31) & ~(1 << CS30);
     976:	ea e8       	ldi	r30, 0x8A	; 138
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	88 7f       	andi	r24, 0xF8	; 248
     97e:	80 83       	st	Z, r24
	FREQUENCY_GENERATOR_start(0);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 bc 05 	call	0xb78	; 0xb78 <FREQUENCY_GENERATOR_start>
	current_song = 2;	
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	90 93 e9 03 	sts	0x03E9, r25
     98e:	80 93 e8 03 	sts	0x03E8, r24
     992:	08 95       	ret

00000994 <BUZZ_start_note>:
}

void BUZZ_start_note(float freq, uint8_t dur)
{
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	6b 01       	movw	r12, r22
     99e:	7c 01       	movw	r14, r24
	uint8_t match;
	OCR3A = dur*49152000/(64000);
     9a0:	a4 2f       	mov	r26, r20
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	4e ee       	ldi	r20, 0xEE	; 238
     9aa:	52 e0       	ldi	r21, 0x02	; 2
     9ac:	0e 94 9a 10 	call	0x2134	; 0x2134 <__muluhisi3>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	3a ef       	ldi	r19, 0xFA	; 250
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__divmodsi4>
     9bc:	30 93 87 00 	sts	0x0087, r19
     9c0:	20 93 86 00 	sts	0x0086, r18

	if (freq == 0){
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	a9 01       	movw	r20, r18
     9ca:	c7 01       	movw	r24, r14
     9cc:	b6 01       	movw	r22, r12
     9ce:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__cmpsf2>
     9d2:	88 23       	and	r24, r24
     9d4:	a1 f0       	breq	.+40     	; 0x9fe <BUZZ_start_note+0x6a>
		match = 0;
	}
	else {
		match = 4915200/(64*2*freq);
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	53 e4       	ldi	r21, 0x43	; 67
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	86 e9       	ldi	r24, 0x96	; 150
     9f0:	9a e4       	ldi	r25, 0x4A	; 74
     9f2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__divsf3>
     9f6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     9fa:	86 2f       	mov	r24, r22
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <BUZZ_start_note+0x6c>
{
	uint8_t match;
	OCR3A = dur*49152000/(64000);

	if (freq == 0){
		match = 0;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		match = 4915200/(64*2*freq);
	}
	FREQUENCY_GENERATOR_play(match);
     a00:	0e 94 ca 05 	call	0xb94	; 0xb94 <FREQUENCY_GENERATOR_play>
}
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	08 95       	ret

00000a0e <BUZZ_start_song>:
	
	FREQUENCY_GENERATOR_init();
}

void BUZZ_start_song(int song)
{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	ec 01       	movw	r28, r24
	number = 0;
     a14:	10 92 d6 03 	sts	0x03D6, r1
     a18:	10 92 d5 03 	sts	0x03D5, r1
	FREQUENCY_GENERATOR_start(1);
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 bc 05 	call	0xb78	; 0xb78 <FREQUENCY_GENERATOR_start>
	
	// Set prescaler to 64
	TCCR3B &= ~(1 << CS32);
     a22:	ea e8       	ldi	r30, 0x8A	; 138
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8b 7f       	andi	r24, 0xFB	; 251
     a2a:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS31) | (1 << CS30);
     a2c:	80 81       	ld	r24, Z
     a2e:	83 60       	ori	r24, 0x03	; 3
     a30:	80 83       	st	Z, r24
	current_song = song;
     a32:	d0 93 e9 03 	sts	0x03E9, r29
     a36:	c0 93 e8 03 	sts	0x03E8, r28
	
	BUZZ_start_note(pgm_read_float(&frequency[current_song][0]),pgm_read_byte(&duration[current_song][0]));
     a3a:	80 e5       	ldi	r24, 0x50	; 80
     a3c:	8c 9f       	mul	r24, r28
     a3e:	f0 01       	movw	r30, r0
     a40:	8d 9f       	mul	r24, r29
     a42:	f0 0d       	add	r31, r0
     a44:	11 24       	eor	r1, r1
     a46:	e0 59       	subi	r30, 0x90	; 144
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	44 91       	lpm	r20, Z
     a4c:	80 e4       	ldi	r24, 0x40	; 64
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	c8 9f       	mul	r28, r24
     a52:	f0 01       	movw	r30, r0
     a54:	c9 9f       	mul	r28, r25
     a56:	f0 0d       	add	r31, r0
     a58:	d8 9f       	mul	r29, r24
     a5a:	f0 0d       	add	r31, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	e0 5f       	subi	r30, 0xF0	; 240
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	65 91       	lpm	r22, Z+
     a64:	75 91       	lpm	r23, Z+
     a66:	85 91       	lpm	r24, Z+
     a68:	94 91       	lpm	r25, Z
     a6a:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <__vector_7>:
	FREQUENCY_GENERATOR_play(match);
}


ISR(TIMER3_COMPA_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
	if (current_song != 2){
     a96:	80 91 e8 03 	lds	r24, 0x03E8
     a9a:	90 91 e9 03 	lds	r25, 0x03E9
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	91 05       	cpc	r25, r1
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <__vector_7+0x32>
     aa4:	44 c0       	rjmp	.+136    	; 0xb2e <__vector_7+0xba>
		number++;
     aa6:	20 91 d5 03 	lds	r18, 0x03D5
     aaa:	30 91 d6 03 	lds	r19, 0x03D6
     aae:	2f 5f       	subi	r18, 0xFF	; 255
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	30 93 d6 03 	sts	0x03D6, r19
     ab6:	20 93 d5 03 	sts	0x03D5, r18
		switch(current_song){
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	21 f0       	breq	.+8      	; 0xac6 <__vector_7+0x52>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	91 05       	cpc	r25, r1
     ac2:	49 f0       	breq	.+18     	; 0xad6 <__vector_7+0x62>
     ac4:	0f c0       	rjmp	.+30     	; 0xae4 <__vector_7+0x70>
			case 0: // mario
				if (number == 78){
     ac6:	2e 34       	cpi	r18, 0x4E	; 78
     ac8:	31 05       	cpc	r19, r1
     aca:	61 f4       	brne	.+24     	; 0xae4 <__vector_7+0x70>
					number = 0;
     acc:	10 92 d6 03 	sts	0x03D6, r1
     ad0:	10 92 d5 03 	sts	0x03D5, r1
     ad4:	07 c0       	rjmp	.+14     	; 0xae4 <__vector_7+0x70>
				}
				break;
		
			case 1: // star wars
				if (number == 74){
     ad6:	2a 34       	cpi	r18, 0x4A	; 74
     ad8:	31 05       	cpc	r19, r1
     ada:	21 f4       	brne	.+8      	; 0xae4 <__vector_7+0x70>
					number = 0;
     adc:	10 92 d6 03 	sts	0x03D6, r1
     ae0:	10 92 d5 03 	sts	0x03D5, r1
				break;
		
			default:
				break;
		}
		BUZZ_start_note(pgm_read_float(&frequency[current_song][number]), pgm_read_byte(&duration[current_song][number]));
     ae4:	20 91 d5 03 	lds	r18, 0x03D5
     ae8:	30 91 d6 03 	lds	r19, 0x03D6
     aec:	40 e5       	ldi	r20, 0x50	; 80
     aee:	48 9f       	mul	r20, r24
     af0:	f0 01       	movw	r30, r0
     af2:	49 9f       	mul	r20, r25
     af4:	f0 0d       	add	r31, r0
     af6:	11 24       	eor	r1, r1
     af8:	e2 0f       	add	r30, r18
     afa:	f3 1f       	adc	r31, r19
     afc:	e0 59       	subi	r30, 0x90	; 144
     afe:	ff 4f       	sbci	r31, 0xFF	; 255
     b00:	44 91       	lpm	r20, Z
     b02:	50 e5       	ldi	r21, 0x50	; 80
     b04:	58 9f       	mul	r21, r24
     b06:	f0 01       	movw	r30, r0
     b08:	59 9f       	mul	r21, r25
     b0a:	f0 0d       	add	r31, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	2e 0f       	add	r18, r30
     b10:	3f 1f       	adc	r19, r31
     b12:	f9 01       	movw	r30, r18
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	e0 5f       	subi	r30, 0xF0	; 240
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	65 91       	lpm	r22, Z+
     b22:	75 91       	lpm	r23, Z+
     b24:	85 91       	lpm	r24, Z+
     b26:	94 91       	lpm	r25, Z
     b28:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <__vector_7+0xc6>
	}
	else{
		BUZZ_start_note(0, 50);
     b2e:	42 e3       	ldi	r20, 0x32	; 50
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	cb 01       	movw	r24, r22
     b36:	0e 94 ca 04 	call	0x994	; 0x994 <BUZZ_start_note>
	}
     b3a:	ff 91       	pop	r31
     b3c:	ef 91       	pop	r30
     b3e:	bf 91       	pop	r27
     b40:	af 91       	pop	r26
     b42:	9f 91       	pop	r25
     b44:	8f 91       	pop	r24
     b46:	7f 91       	pop	r23
     b48:	6f 91       	pop	r22
     b4a:	5f 91       	pop	r21
     b4c:	4f 91       	pop	r20
     b4e:	3f 91       	pop	r19
     b50:	2f 91       	pop	r18
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <FREQUENCY_GENERATOR_init>:


void FREQUENCY_GENERATOR_init(void)
{
	//Timer0-ctc mode and prescaler=64
	TCCR0 |= (1<<WGM01);
     b5c:	83 b7       	in	r24, 0x33	; 51
     b5e:	88 60       	ori	r24, 0x08	; 8
     b60:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<WGM00);
     b62:	83 b7       	in	r24, 0x33	; 51
     b64:	8f 7b       	andi	r24, 0xBF	; 191
     b66:	83 bf       	out	0x33, r24	; 51
	// Compare output mode: toggle OC0 on compare match
	TCCR0 |= (1 << COM00);
     b68:	83 b7       	in	r24, 0x33	; 51
     b6a:	80 61       	ori	r24, 0x10	; 16
     b6c:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << COM01);
     b6e:	83 b7       	in	r24, 0x33	; 51
     b70:	8f 7d       	andi	r24, 0xDF	; 223
     b72:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1 << PB0);
     b74:	b8 9a       	sbi	0x17, 0	; 23
     b76:	08 95       	ret

00000b78 <FREQUENCY_GENERATOR_start>:

}

void FREQUENCY_GENERATOR_start(uint8_t start)
{
	if (start > 0){
     b78:	88 23       	and	r24, r24
     b7a:	39 f0       	breq	.+14     	; 0xb8a <FREQUENCY_GENERATOR_start+0x12>
		// prescaler=64
		TCCR0 |= (1<<CS01) | (1<<CS00);
     b7c:	83 b7       	in	r24, 0x33	; 51
     b7e:	83 60       	ori	r24, 0x03	; 3
     b80:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~(1<<CS02);
     b82:	83 b7       	in	r24, 0x33	; 51
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	83 bf       	out	0x33, r24	; 51
     b88:	08 95       	ret
	}
	else{
		TCCR0 &= ~(1<<CS02) & ~(1<<CS01) & ~(1<<CS00);
     b8a:	83 b7       	in	r24, 0x33	; 51
     b8c:	88 7f       	andi	r24, 0xF8	; 248
     b8e:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
     b90:	12 be       	out	0x32, r1	; 50
     b92:	08 95       	ret

00000b94 <FREQUENCY_GENERATOR_play>:
	}
}

void FREQUENCY_GENERATOR_play(uint8_t match)
{
     b94:	cf 93       	push	r28
     b96:	c8 2f       	mov	r28, r24
	if (match > 0){
     b98:	88 23       	and	r24, r24
     b9a:	69 f0       	breq	.+26     	; 0xbb6 <FREQUENCY_GENERATOR_play+0x22>
		FREQUENCY_GENERATOR_start(0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 bc 05 	call	0xb78	; 0xb78 <FREQUENCY_GENERATOR_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba2:	89 e9       	ldi	r24, 0x99	; 153
     ba4:	99 e0       	ldi	r25, 0x09	; 9
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <FREQUENCY_GENERATOR_play+0x12>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <FREQUENCY_GENERATOR_play+0x18>
		_delay_ms(2);
		OCR0 = match;
     bac:	c1 bf       	out	0x31, r28	; 49
		FREQUENCY_GENERATOR_start(1);
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	0e 94 bc 05 	call	0xb78	; 0xb78 <FREQUENCY_GENERATOR_start>
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <FREQUENCY_GENERATOR_play+0x28>
	}
	else{
		FREQUENCY_GENERATOR_start(0);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 bc 05 	call	0xb78	; 0xb78 <FREQUENCY_GENERATOR_start>
	}
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	MCUCR |= (1 << SRE);
     bc0:	85 b7       	in	r24, 0x35	; 53
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     bc6:	80 b7       	in	r24, 0x30	; 48
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	DDRD &= ~(1 << PD3);
     bcc:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	08 95       	ret

00000bd4 <ADC_read>:
{
	// Start address for the ADC
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; 
	
	// Bitwise OR
	if (channel > 3){ return 0; }
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	70 f4       	brcc	.+28     	; 0xbf4 <ADC_read+0x20>
	*ext_adc = 0x04 | channel; 
     bd8:	84 60       	ori	r24, 0x04	; 4
     bda:	80 93 00 14 	sts	0x1400, r24
	
	// Wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
     bde:	83 99       	sbic	0x10, 3	; 16
     be0:	fe cf       	rjmp	.-4      	; 0xbde <ADC_read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be2:	85 ef       	ldi	r24, 0xF5	; 245
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <ADC_read+0x12>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <ADC_read+0x18>
     bec:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
     bee:	80 91 00 14 	lds	r24, 0x1400
     bf2:	08 95       	ret
{
	// Start address for the ADC
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; 
	
	// Bitwise OR
	if (channel > 3){ return 0; }
     bf4:	80 e0       	ldi	r24, 0x00	; 0
	// Wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
}
     bf6:	08 95       	ret

00000bf8 <EEPROM_write>:
#include <avr/interrupt.h>


void EEPROM_write(uint8_t data, unsigned int address)
{
	cli();
     bf8:	f8 94       	cli
	
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     bfa:	e1 99       	sbic	0x1c, 1	; 28
     bfc:	fe cf       	rjmp	.-4      	; 0xbfa <EEPROM_write+0x2>
	
	// Set up address and data registers
	EEAR = address;
     bfe:	7f bb       	out	0x1f, r23	; 31
     c00:	6e bb       	out	0x1e, r22	; 30
	EEDR = data;
     c02:	8d bb       	out	0x1d, r24	; 29
	
	// Write logical one to Master Write Enable
	EECR |= (1 << EEMWE);
     c04:	e2 9a       	sbi	0x1c, 2	; 28
	
	// Start eeprom write
	EECR |= (1 << EEWE);
     c06:	e1 9a       	sbi	0x1c, 1	; 28
	
	sei();
     c08:	78 94       	sei
     c0a:	08 95       	ret

00000c0c <EEPROM_read>:
}

uint8_t EEPROM_read(unsigned int address)
{
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     c0c:	e1 99       	sbic	0x1c, 1	; 28
     c0e:	fe cf       	rjmp	.-4      	; 0xc0c <EEPROM_read>
	
	// Set up address register
	EEAR = address;
     c10:	9f bb       	out	0x1f, r25	; 31
     c12:	8e bb       	out	0x1e, r24	; 30
	
	// Start eeprom read
	EECR |= (1 << EERE);
     c14:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     c16:	8d b3       	in	r24, 0x1d	; 29
     c18:	08 95       	ret

00000c1a <SEND2CAN_init>:
uint8_t send2can_interrupt_flag = 0;

void SEND2CAN_init()
{
	// CTC mode, prescaler = 1024
	TCCR2 |= (1 << WGM21) | (1 << CS22) | (1 << CS21) | (1 << CS20);
     c1a:	87 b5       	in	r24, 0x27	; 39
     c1c:	8f 60       	ori	r24, 0x0F	; 15
     c1e:	87 bd       	out	0x27, r24	; 39
	// Synchronous mode
	ASSR &= ~(1 << AS2);
     c20:	86 b5       	in	r24, 0x26	; 38
     c22:	87 7f       	andi	r24, 0xF7	; 247
     c24:	86 bd       	out	0x26, r24	; 38
	
	// Enable interrupt
	TIMSK |= (1 << OCIE2);
     c26:	89 b7       	in	r24, 0x39	; 57
     c28:	80 61       	ori	r24, 0x10	; 16
     c2a:	89 bf       	out	0x39, r24	; 57
	
	// Compare match = 240 (f = 20 Hz)
	OCR2 = 0xF0;
     c2c:	80 ef       	ldi	r24, 0xF0	; 240
     c2e:	82 bd       	out	0x22, r24	; 34
     c30:	08 95       	ret

00000c32 <SEND2CAN_send_joy_pos_x>:
		send2can_interrupt_flag = 0;
	}
}

void SEND2CAN_send_joy_pos_x()
{
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	2b 97       	sbiw	r28, 0x0b	; 11
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
	static JOY_position_t prev_joy_pos;
	can_msg msg;
	
	JOY_position_t joy_pos = JOY_read_adc();
     c4e:	0e 94 19 07 	call	0xe32	; 0xe32 <JOY_read_adc>
     c52:	6b 01       	movw	r12, r22
     c54:	7c 01       	movw	r14, r24
	if(abs(joy_pos.x - prev_joy_pos.x) > 5){
     c56:	80 91 df 03 	lds	r24, 0x03DF
     c5a:	90 91 e0 03 	lds	r25, 0x03E0
     c5e:	97 01       	movw	r18, r14
     c60:	28 1b       	sub	r18, r24
     c62:	39 0b       	sbc	r19, r25
     c64:	c9 01       	movw	r24, r18
     c66:	99 23       	and	r25, r25
     c68:	24 f4       	brge	.+8      	; 0xc72 <SEND2CAN_send_joy_pos_x+0x40>
     c6a:	88 27       	eor	r24, r24
     c6c:	99 27       	eor	r25, r25
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	06 97       	sbiw	r24, 0x06	; 6
     c74:	a4 f0       	brlt	.+40     	; 0xc9e <SEND2CAN_send_joy_pos_x+0x6c>
		msg.id = JOYSTICK_ID;
     c76:	84 e0       	ldi	r24, 0x04	; 4
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	9a 83       	std	Y+2, r25	; 0x02
     c7c:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_JOY_POS_X;
     c7e:	1c 82       	std	Y+4, r1	; 0x04
		msg.data[1] = joy_pos.x;
     c80:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
		prev_joy_pos = joy_pos;
     c8e:	c0 92 dd 03 	sts	0x03DD, r12
     c92:	d0 92 de 03 	sts	0x03DE, r13
     c96:	e0 92 df 03 	sts	0x03DF, r14
     c9a:	f0 92 e0 03 	sts	0x03E0, r15
	}
}
     c9e:	2b 96       	adiw	r28, 0x0b	; 11
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	cf 90       	pop	r12
     cb6:	08 95       	ret

00000cb8 <SEND2CAN_send_slider_pos>:

void SEND2CAN_send_slider_pos()
{
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	2b 97       	sbiw	r28, 0x0b	; 11
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
	static TOUCH_slider_pos_t prev_slider_pos;
	can_msg msg;
	
	TOUCH_slider_pos_t slider_pos = TOUCH_get_slider_position();
     cd4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <TOUCH_get_slider_position>
     cd8:	6b 01       	movw	r12, r22
     cda:	7c 01       	movw	r14, r24
	if(abs(slider_pos.right_slider - prev_slider_pos.right_slider) > 5){
     cdc:	80 91 db 03 	lds	r24, 0x03DB
     ce0:	90 91 dc 03 	lds	r25, 0x03DC
     ce4:	97 01       	movw	r18, r14
     ce6:	28 1b       	sub	r18, r24
     ce8:	39 0b       	sbc	r19, r25
     cea:	c9 01       	movw	r24, r18
     cec:	99 23       	and	r25, r25
     cee:	24 f4       	brge	.+8      	; 0xcf8 <SEND2CAN_send_slider_pos+0x40>
     cf0:	88 27       	eor	r24, r24
     cf2:	99 27       	eor	r25, r25
     cf4:	82 1b       	sub	r24, r18
     cf6:	93 0b       	sbc	r25, r19
     cf8:	06 97       	sbiw	r24, 0x06	; 6
     cfa:	a4 f0       	brlt	.+40     	; 0xd24 <SEND2CAN_send_slider_pos+0x6c>
		msg.id = SLIDER_ID;
     cfc:	83 e0       	ldi	r24, 0x03	; 3
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9a 83       	std	Y+2, r25	; 0x02
     d02:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_SLIDER_POS_R;
     d04:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = slider_pos.right_slider;
     d06:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
		prev_slider_pos = slider_pos;
     d14:	c0 92 d9 03 	sts	0x03D9, r12
     d18:	d0 92 da 03 	sts	0x03DA, r13
     d1c:	e0 92 db 03 	sts	0x03DB, r14
     d20:	f0 92 dc 03 	sts	0x03DC, r15
	}
	
}
     d24:	2b 96       	adiw	r28, 0x0b	; 11
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	08 95       	ret

00000d3e <SEND2CAN_touch_button_pressed>:

void SEND2CAN_touch_button_pressed()
{
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	2b 97       	sbiw	r28, 0x0b	; 11
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
	static int prev_button_pressed;
	can_msg msg;
	
	int button_pressed = TOUCH_button();
     d56:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <TOUCH_button>
     d5a:	8c 01       	movw	r16, r24
	if(button_pressed == 1 && prev_button_pressed == 0){
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	91 05       	cpc	r25, r1
     d60:	a1 f4       	brne	.+40     	; 0xd8a <SEND2CAN_touch_button_pressed+0x4c>
     d62:	80 91 d7 03 	lds	r24, 0x03D7
     d66:	90 91 d8 03 	lds	r25, 0x03D8
     d6a:	89 2b       	or	r24, r25
     d6c:	71 f4       	brne	.+28     	; 0xd8a <SEND2CAN_touch_button_pressed+0x4c>
		msg.id = TOUCH_BUTTON_ID;
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_TOUCH_BUTTON;
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = button_pressed;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	8d 83       	std	Y+5, r24	; 0x05
		msg.length = 2;
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     d82:	ce 01       	movw	r24, r28
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
	}
	prev_button_pressed = button_pressed;
     d8a:	10 93 d8 03 	sts	0x03D8, r17
     d8e:	00 93 d7 03 	sts	0x03D7, r16
}
     d92:	2b 96       	adiw	r28, 0x0b	; 11
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <SEND2CAN_send_messages>:
	OCR2 = 0xF0;
}

void SEND2CAN_send_messages()
{
	if (send2can_interrupt_flag){
     da8:	80 91 e1 03 	lds	r24, 0x03E1
     dac:	88 23       	and	r24, r24
     dae:	41 f0       	breq	.+16     	; 0xdc0 <SEND2CAN_send_messages+0x18>
		SEND2CAN_send_joy_pos_x();
     db0:	0e 94 19 06 	call	0xc32	; 0xc32 <SEND2CAN_send_joy_pos_x>
		SEND2CAN_send_slider_pos();
     db4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <SEND2CAN_send_slider_pos>
		SEND2CAN_touch_button_pressed();
     db8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <SEND2CAN_touch_button_pressed>
		send2can_interrupt_flag = 0;
     dbc:	10 92 e1 03 	sts	0x03E1, r1
     dc0:	08 95       	ret

00000dc2 <SEND2CAN_send_speed>:
	}
	prev_button_pressed = button_pressed;
}

void SEND2CAN_send_speed(int speed)
{
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	2b 97       	sbiw	r28, 0x0b	; 11
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	msg.id = GAME_SPEED_ID;
     dd6:	25 e0       	ldi	r18, 0x05	; 5
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3a 83       	std	Y+2, r19	; 0x02
     ddc:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_SPEED;
     dde:	96 e0       	ldi	r25, 0x06	; 6
     de0:	9c 83       	std	Y+4, r25	; 0x04
	msg.data[1] = (uint8_t)speed;
     de2:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 04 03 	call	0x608	; 0x608 <CAN_msg_send>
}
     df0:	2b 96       	adiw	r28, 0x0b	; 11
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <__vector_10>:

ISR(TIMER2_COMP_vect)
{
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	8f 93       	push	r24
	send2can_interrupt_flag = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	80 93 e1 03 	sts	0x03E1, r24
}
     e14:	8f 91       	pop	r24
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	1f 90       	pop	r1
     e1e:	18 95       	reti

00000e20 <JOY_button>:
	neutral_pos = JOY_read_adc();
}

int JOY_button()
{
	return !(test_bit(PINB, PINB3));
     e20:	86 b3       	in	r24, 0x16	; 22
     e22:	86 95       	lsr	r24
     e24:	86 95       	lsr	r24
     e26:	86 95       	lsr	r24
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	89 27       	eor	r24, r25
}
     e2c:	81 70       	andi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	08 95       	ret

00000e32 <JOY_read_adc>:

JOY_position_t JOY_read_adc( void )
{
     e32:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ADC_read>
     e3a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e3c:	8c ec       	ldi	r24, 0xCC	; 204
     e3e:	94 e0       	ldi	r25, 0x04	; 4
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <JOY_read_adc+0xe>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <JOY_read_adc+0x14>
     e46:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ADC_read>
     e4e:	28 2f       	mov	r18, r24
	
	return pos;
     e50:	6c 2f       	mov	r22, r28
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	82 2f       	mov	r24, r18
     e56:	90 e0       	ldi	r25, 0x00	; 0
}
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <JOY_calibrate>:
	set_bit(PORTB, PB3);
}

void JOY_calibrate( void )
{
	neutral_pos = JOY_read_adc();
     e5c:	0e 94 19 07 	call	0xe32	; 0xe32 <JOY_read_adc>
     e60:	60 93 ea 03 	sts	0x03EA, r22
     e64:	70 93 eb 03 	sts	0x03EB, r23
     e68:	80 93 ec 03 	sts	0x03EC, r24
     e6c:	90 93 ed 03 	sts	0x03ED, r25
     e70:	08 95       	ret

00000e72 <JOY_init>:
JOY_position_t neutral_pos; 


void JOY_init( void )
{
	JOY_calibrate();
     e72:	0e 94 2e 07 	call	0xe5c	; 0xe5c <JOY_calibrate>
	
	// Initialize PORT B, pin 3 (joystick button) as input
	clear_bit(DDRB, PINB3);
     e76:	bb 98       	cbi	0x17, 3	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB3);
     e78:	c3 9a       	sbi	0x18, 3	; 24
     e7a:	08 95       	ret

00000e7c <JOY_get_position>:
	
	return pos;
}

JOY_position_t JOY_get_position()
{
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
	JOY_position_t current_pos = JOY_read_adc();
     e82:	0e 94 19 07 	call	0xe32	; 0xe32 <JOY_read_adc>
     e86:	8b 01       	movw	r16, r22
     e88:	9c 01       	movw	r18, r24
	
	JOY_position_t pos_percentage;
	pos_percentage.y = (current_pos.y - neutral_pos.y) * 100 / neutral_pos.y;
     e8a:	60 91 ea 03 	lds	r22, 0x03EA
     e8e:	70 91 eb 03 	lds	r23, 0x03EB
     e92:	a8 01       	movw	r20, r16
     e94:	46 1b       	sub	r20, r22
     e96:	57 0b       	sbc	r21, r23
     e98:	e4 e6       	ldi	r30, 0x64	; 100
     e9a:	e4 9f       	mul	r30, r20
     e9c:	c0 01       	movw	r24, r0
     e9e:	e5 9f       	mul	r30, r21
     ea0:	90 0d       	add	r25, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	0e 94 67 10 	call	0x20ce	; 0x20ce <__divmodhi4>
     ea8:	c6 2f       	mov	r28, r22
     eaa:	f7 2f       	mov	r31, r23
	pos_percentage.x = (current_pos.x - neutral_pos.x) * 100 / neutral_pos.x;
     eac:	60 91 ec 03 	lds	r22, 0x03EC
     eb0:	70 91 ed 03 	lds	r23, 0x03ED
     eb4:	26 1b       	sub	r18, r22
     eb6:	37 0b       	sbc	r19, r23
     eb8:	e2 9f       	mul	r30, r18
     eba:	c0 01       	movw	r24, r0
     ebc:	e3 9f       	mul	r30, r19
     ebe:	90 0d       	add	r25, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	0e 94 67 10 	call	0x20ce	; 0x20ce <__divmodhi4>
     ec6:	9b 01       	movw	r18, r22
     ec8:	6c 39       	cpi	r22, 0x9C	; 156
     eca:	4f ef       	ldi	r20, 0xFF	; 255
     ecc:	74 07       	cpc	r23, r20
     ece:	14 f4       	brge	.+4      	; 0xed4 <JOY_get_position+0x58>
     ed0:	2c e9       	ldi	r18, 0x9C	; 156
     ed2:	3f ef       	ldi	r19, 0xFF	; 255
     ed4:	8c 2f       	mov	r24, r28
     ed6:	9f 2f       	mov	r25, r31
     ed8:	8c 39       	cpi	r24, 0x9C	; 156
     eda:	4f ef       	ldi	r20, 0xFF	; 255
     edc:	94 07       	cpc	r25, r20
     ede:	14 f4       	brge	.+4      	; 0xee4 <JOY_get_position+0x68>
     ee0:	8c e9       	ldi	r24, 0x9C	; 156
     ee2:	9f ef       	ldi	r25, 0xFF	; 255
     ee4:	ac 01       	movw	r20, r24
     ee6:	85 36       	cpi	r24, 0x65	; 101
     ee8:	91 05       	cpc	r25, r1
     eea:	14 f0       	brlt	.+4      	; 0xef0 <JOY_get_position+0x74>
     eec:	44 e6       	ldi	r20, 0x64	; 100
     eee:	50 e0       	ldi	r21, 0x00	; 0
	else if (pos_percentage.x < -100) { pos_percentage.x = -100; }
	
	if (pos_percentage.y > 100) { pos_percentage.y = 100; }
	else if (pos_percentage.y < -100) { pos_percentage.y = -100; }

	return pos_percentage;
     ef0:	ba 01       	movw	r22, r20
     ef2:	25 36       	cpi	r18, 0x65	; 101
     ef4:	31 05       	cpc	r19, r1
     ef6:	14 f0       	brlt	.+4      	; 0xefc <JOY_get_position+0x80>
     ef8:	24 e6       	ldi	r18, 0x64	; 100
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	c9 01       	movw	r24, r18
}
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <JOY_get_direction>:

JOY_direction_t JOY_get_direction()
{
	JOY_position_t current_pos = JOY_get_position();
     f06:	0e 94 3e 07 	call	0xe7c	; 0xe7c <JOY_get_position>
     f0a:	9b 01       	movw	r18, r22
     f0c:	ac 01       	movw	r20, r24
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
     f0e:	fc 01       	movw	r30, r24
     f10:	7d 96       	adiw	r30, 0x1d	; 29
     f12:	fb 97       	sbiw	r30, 0x3b	; 59
     f14:	20 f4       	brcc	.+8      	; 0xf1e <JOY_get_direction+0x18>
     f16:	fb 01       	movw	r30, r22
     f18:	7d 96       	adiw	r30, 0x1d	; 29
     f1a:	fb 97       	sbiw	r30, 0x3b	; 59
     f1c:	d8 f0       	brcs	.+54     	; 0xf54 <JOY_get_direction+0x4e>
		return NEUTRAL;
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
     f1e:	dc 01       	movw	r26, r24
     f20:	55 23       	and	r21, r21
     f22:	24 f4       	brge	.+8      	; 0xf2c <JOY_get_direction+0x26>
     f24:	aa 27       	eor	r26, r26
     f26:	bb 27       	eor	r27, r27
     f28:	a8 1b       	sub	r26, r24
     f2a:	b9 0b       	sbc	r27, r25
     f2c:	fb 01       	movw	r30, r22
     f2e:	33 23       	and	r19, r19
     f30:	24 f4       	brge	.+8      	; 0xf3a <JOY_get_direction+0x34>
     f32:	ee 27       	eor	r30, r30
     f34:	ff 27       	eor	r31, r31
     f36:	e6 1b       	sub	r30, r22
     f38:	f7 0b       	sbc	r31, r23
     f3a:	ea 17       	cp	r30, r26
     f3c:	fb 07       	cpc	r31, r27
     f3e:	2c f4       	brge	.+10     	; 0xf4a <JOY_get_direction+0x44>
		if (current_pos.x > 0) { return RIGHT; }
     f40:	14 16       	cp	r1, r20
     f42:	15 06       	cpc	r1, r21
     f44:	4c f4       	brge	.+18     	; 0xf58 <JOY_get_direction+0x52>
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	08 95       	ret
		else { return LEFT; }
	}
	else {
		if (current_pos.y > 0) { return UP; }
     f4a:	12 16       	cp	r1, r18
     f4c:	13 06       	cpc	r1, r19
     f4e:	34 f4       	brge	.+12     	; 0xf5c <JOY_get_direction+0x56>
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	08 95       	ret
JOY_direction_t JOY_get_direction()
{
	JOY_position_t current_pos = JOY_get_position();
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
		return NEUTRAL;
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	08 95       	ret
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
		if (current_pos.x > 0) { return RIGHT; }
		else { return LEFT; }
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	08 95       	ret
	}
	else {
		if (current_pos.y > 0) { return UP; }
		else { return DOWN; }
     f5c:	84 e0       	ldi	r24, 0x04	; 4
	}
     f5e:	08 95       	ret

00000f60 <OLED_goto_column>:
}


void OLED_goto_column( uint8_t column )
{
	if (column < NUM_COLUMNS){
     f60:	88 23       	and	r24, r24
     f62:	8c f0       	brlt	.+34     	; 0xf86 <OLED_goto_column+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     f64:	e0 91 16 01 	lds	r30, 0x0116
     f68:	f0 91 17 01 	lds	r31, 0x0117
     f6c:	91 e2       	ldi	r25, 0x21	; 33
     f6e:	90 83       	st	Z, r25
     f70:	e0 91 16 01 	lds	r30, 0x0116
     f74:	f0 91 17 01 	lds	r31, 0x0117
     f78:	80 83       	st	Z, r24
     f7a:	e0 91 16 01 	lds	r30, 0x0116
     f7e:	f0 91 17 01 	lds	r31, 0x0117
     f82:	8f e7       	ldi	r24, 0x7F	; 127
     f84:	80 83       	st	Z, r24
     f86:	08 95       	ret

00000f88 <OLED_goto_line>:
	}
}

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
     f88:	88 30       	cpi	r24, 0x08	; 8
     f8a:	98 f4       	brcc	.+38     	; 0xfb2 <OLED_goto_line+0x2a>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     f8c:	e0 91 16 01 	lds	r30, 0x0116
     f90:	f0 91 17 01 	lds	r31, 0x0117
     f94:	92 e2       	ldi	r25, 0x22	; 34
     f96:	90 83       	st	Z, r25

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
		OLED_write_command(SET_PAGE_ADDRESS);
		line = l;
     f98:	80 93 e4 03 	sts	0x03E4, r24
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     f9c:	e0 91 16 01 	lds	r30, 0x0116
     fa0:	f0 91 17 01 	lds	r31, 0x0117
     fa4:	80 83       	st	Z, r24
     fa6:	e0 91 16 01 	lds	r30, 0x0116
     faa:	f0 91 17 01 	lds	r31, 0x0117
     fae:	87 e0       	ldi	r24, 0x07	; 7
     fb0:	80 83       	st	Z, r24
     fb2:	08 95       	ret

00000fb4 <OLED_pos>:
		OLED_write_command(7);
	}
}

void OLED_pos(uint8_t row, uint8_t column)
{
     fb4:	cf 93       	push	r28
     fb6:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
     fb8:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_goto_line>
	OLED_goto_column(column);
     fbc:	8c 2f       	mov	r24, r28
     fbe:	0e 94 b0 07 	call	0xf60	; 0xf60 <OLED_goto_column>
}
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <OLED_print_char>:
	}
}

void OLED_print_char( char character )
{	
	if ((character) == '\n'){
     fc6:	8a 30       	cpi	r24, 0x0A	; 10
     fc8:	39 f4       	brne	.+14     	; 0xfd8 <OLED_print_char+0x12>
		OLED_pos((line + 1), 0);
     fca:	80 91 e4 03 	lds	r24, 0x03E4
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
     fd6:	08 95       	ret
     fd8:	e8 2f       	mov	r30, r24
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	b0 97       	sbiw	r30, 0x20	; 32
     fde:	cf 01       	movw	r24, r30
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	e8 0f       	add	r30, r24
     fea:	f9 1f       	adc	r31, r25
     fec:	e0 57       	subi	r30, 0x70	; 112
     fee:	fc 4f       	sbci	r31, 0xFC	; 252
	}
}

void OLED_print_char( char character )
{	
	if ((character) == '\n'){
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
			OLED_write_data(pgm_read_byte(&font5[character - ' '][i]));
     ff4:	24 91       	lpm	r18, Z
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     ff6:	a0 91 14 01 	lds	r26, 0x0114
     ffa:	b0 91 15 01 	lds	r27, 0x0115
     ffe:	2c 93       	st	X, r18
{	
	if ((character) == '\n'){
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	31 96       	adiw	r30, 0x01	; 1
    1004:	85 30       	cpi	r24, 0x05	; 5
    1006:	91 05       	cpc	r25, r1
    1008:	a9 f7       	brne	.-22     	; 0xff4 <OLED_print_char+0x2e>
    100a:	08 95       	ret

0000100c <OLED_home>:
	OLED_goto_column(column);
}

void OLED_home( void )
{
	OLED_pos(0, 0);
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
    1014:	08 95       	ret

00001016 <OLED_clear_line>:
}


void OLED_clear_line( uint8_t line )
{
	OLED_pos(line, 0);
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
    101c:	80 e0       	ldi	r24, 0x00	; 0
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
    101e:	e0 91 14 01 	lds	r30, 0x0114
    1022:	f0 91 15 01 	lds	r31, 0x0115
    1026:	10 82       	st	Z, r1

void OLED_clear_line( uint8_t line )
{
	OLED_pos(line, 0);
	
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	80 38       	cpi	r24, 0x80	; 128
    102c:	c1 f7       	brne	.-16     	; 0x101e <OLED_clear_line+0x8>
		// Write 8 bits to each column
		OLED_write_data(0x00);
	}
}
    102e:	08 95       	ret

00001030 <OLED_reset>:

void OLED_reset( void )
{
    1030:	cf 93       	push	r28
	for (uint8_t line = 0; line < NUM_LINES; line++){
    1032:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(line);
    1034:	8c 2f       	mov	r24, r28
    1036:	0e 94 0b 08 	call	0x1016	; 0x1016 <OLED_clear_line>
	}
}

void OLED_reset( void )
{
	for (uint8_t line = 0; line < NUM_LINES; line++){
    103a:	cf 5f       	subi	r28, 0xFF	; 255
    103c:	c8 30       	cpi	r28, 0x08	; 8
    103e:	d1 f7       	brne	.-12     	; 0x1034 <OLED_reset+0x4>
		OLED_clear_line(line);
	}
	OLED_home();
    1040:	0e 94 06 08 	call	0x100c	; 0x100c <OLED_home>
}
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <OLED_init>:
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    1048:	e0 91 16 01 	lds	r30, 0x0116
    104c:	f0 91 17 01 	lds	r31, 0x0117
    1050:	8e ea       	ldi	r24, 0xAE	; 174
    1052:	80 83       	st	Z, r24
    1054:	e0 91 16 01 	lds	r30, 0x0116
    1058:	f0 91 17 01 	lds	r31, 0x0117
    105c:	81 ea       	ldi	r24, 0xA1	; 161
    105e:	80 83       	st	Z, r24
    1060:	e0 91 16 01 	lds	r30, 0x0116
    1064:	f0 91 17 01 	lds	r31, 0x0117
    1068:	8a ed       	ldi	r24, 0xDA	; 218
    106a:	80 83       	st	Z, r24
    106c:	e0 91 16 01 	lds	r30, 0x0116
    1070:	f0 91 17 01 	lds	r31, 0x0117
    1074:	82 e1       	ldi	r24, 0x12	; 18
    1076:	80 83       	st	Z, r24
    1078:	e0 91 16 01 	lds	r30, 0x0116
    107c:	f0 91 17 01 	lds	r31, 0x0117
    1080:	88 ec       	ldi	r24, 0xC8	; 200
    1082:	80 83       	st	Z, r24
    1084:	e0 91 16 01 	lds	r30, 0x0116
    1088:	f0 91 17 01 	lds	r31, 0x0117
    108c:	88 ea       	ldi	r24, 0xA8	; 168
    108e:	80 83       	st	Z, r24
    1090:	e0 91 16 01 	lds	r30, 0x0116
    1094:	f0 91 17 01 	lds	r31, 0x0117
    1098:	8f e3       	ldi	r24, 0x3F	; 63
    109a:	80 83       	st	Z, r24
    109c:	e0 91 16 01 	lds	r30, 0x0116
    10a0:	f0 91 17 01 	lds	r31, 0x0117
    10a4:	85 ed       	ldi	r24, 0xD5	; 213
    10a6:	80 83       	st	Z, r24
    10a8:	e0 91 16 01 	lds	r30, 0x0116
    10ac:	f0 91 17 01 	lds	r31, 0x0117
    10b0:	80 e8       	ldi	r24, 0x80	; 128
    10b2:	80 83       	st	Z, r24
    10b4:	e0 91 16 01 	lds	r30, 0x0116
    10b8:	f0 91 17 01 	lds	r31, 0x0117
    10bc:	81 e8       	ldi	r24, 0x81	; 129
    10be:	80 83       	st	Z, r24
    10c0:	e0 91 16 01 	lds	r30, 0x0116
    10c4:	f0 91 17 01 	lds	r31, 0x0117
    10c8:	80 e5       	ldi	r24, 0x50	; 80
    10ca:	80 83       	st	Z, r24
    10cc:	e0 91 16 01 	lds	r30, 0x0116
    10d0:	f0 91 17 01 	lds	r31, 0x0117
    10d4:	89 ed       	ldi	r24, 0xD9	; 217
    10d6:	80 83       	st	Z, r24
    10d8:	e0 91 16 01 	lds	r30, 0x0116
    10dc:	f0 91 17 01 	lds	r31, 0x0117
    10e0:	81 e2       	ldi	r24, 0x21	; 33
    10e2:	80 83       	st	Z, r24
    10e4:	e0 91 16 01 	lds	r30, 0x0116
    10e8:	f0 91 17 01 	lds	r31, 0x0117
    10ec:	80 e2       	ldi	r24, 0x20	; 32
    10ee:	80 83       	st	Z, r24
    10f0:	e0 91 16 01 	lds	r30, 0x0116
    10f4:	f0 91 17 01 	lds	r31, 0x0117
    10f8:	10 82       	st	Z, r1
    10fa:	e0 91 16 01 	lds	r30, 0x0116
    10fe:	f0 91 17 01 	lds	r31, 0x0117
    1102:	8b ed       	ldi	r24, 0xDB	; 219
    1104:	80 83       	st	Z, r24
    1106:	e0 91 16 01 	lds	r30, 0x0116
    110a:	f0 91 17 01 	lds	r31, 0x0117
    110e:	80 e3       	ldi	r24, 0x30	; 48
    1110:	80 83       	st	Z, r24
    1112:	e0 91 16 01 	lds	r30, 0x0116
    1116:	f0 91 17 01 	lds	r31, 0x0117
    111a:	8d ea       	ldi	r24, 0xAD	; 173
    111c:	80 83       	st	Z, r24
    111e:	e0 91 16 01 	lds	r30, 0x0116
    1122:	f0 91 17 01 	lds	r31, 0x0117
    1126:	10 82       	st	Z, r1
    1128:	e0 91 16 01 	lds	r30, 0x0116
    112c:	f0 91 17 01 	lds	r31, 0x0117
    1130:	84 ea       	ldi	r24, 0xA4	; 164
    1132:	80 83       	st	Z, r24
    1134:	e0 91 16 01 	lds	r30, 0x0116
    1138:	f0 91 17 01 	lds	r31, 0x0117
    113c:	86 ea       	ldi	r24, 0xA6	; 166
    113e:	80 83       	st	Z, r24
    1140:	e0 91 16 01 	lds	r30, 0x0116
    1144:	f0 91 17 01 	lds	r31, 0x0117
    1148:	8f ea       	ldi	r24, 0xAF	; 175
    114a:	80 83       	st	Z, r24
	OLED_write_command(ENTIRE_DISPLAY_ON);			  // Out  follows  RAM  content

	OLED_write_command(SET_NORMAL_DISPLAY);
	OLED_write_command(DISPLAY_ON);
	
	OLED_reset();
    114c:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    1150:	e0 91 16 01 	lds	r30, 0x0116
    1154:	f0 91 17 01 	lds	r31, 0x0117
    1158:	83 ed       	ldi	r24, 0xD3	; 211
    115a:	80 83       	st	Z, r24
    115c:	e0 91 16 01 	lds	r30, 0x0116
    1160:	f0 91 17 01 	lds	r31, 0x0117
    1164:	10 82       	st	Z, r1
    1166:	08 95       	ret

00001168 <OLED_set_contrast>:
    1168:	e0 91 16 01 	lds	r30, 0x0116
    116c:	f0 91 17 01 	lds	r31, 0x0117
    1170:	91 e8       	ldi	r25, 0x81	; 129
    1172:	90 83       	st	Z, r25
    1174:	e0 91 16 01 	lds	r30, 0x0116
    1178:	f0 91 17 01 	lds	r31, 0x0117
    117c:	80 83       	st	Z, r24
    117e:	08 95       	ret

00001180 <OLED_invert_screen>:
}

void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
    1180:	80 91 e2 03 	lds	r24, 0x03E2
    1184:	90 91 e3 03 	lds	r25, 0x03E3
    1188:	89 2b       	or	r24, r25
    118a:	69 f4       	brne	.+26     	; 0x11a6 <OLED_invert_screen+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    118c:	e0 91 16 01 	lds	r30, 0x0116
    1190:	f0 91 17 01 	lds	r31, 0x0117
    1194:	87 ea       	ldi	r24, 0xA7	; 167
    1196:	80 83       	st	Z, r24
void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	90 93 e3 03 	sts	0x03E3, r25
    11a0:	80 93 e2 03 	sts	0x03E2, r24
    11a4:	08 95       	ret
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
    11a6:	e0 91 16 01 	lds	r30, 0x0116
    11aa:	f0 91 17 01 	lds	r31, 0x0117
    11ae:	86 ea       	ldi	r24, 0xA6	; 166
    11b0:	80 83       	st	Z, r24
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
		}else{
		OLED_write_command(SET_NORMAL_DISPLAY);
		inverted = 0;
    11b2:	10 92 e3 03 	sts	0x03E3, r1
    11b6:	10 92 e2 03 	sts	0x03E2, r1
    11ba:	08 95       	ret

000011bc <OLED_printf>:
			OLED_write_data(pgm_read_byte(&font5[character - ' '][i]));
		}
	}
}

void OLED_printf(const char* fmt, ...){
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	fe 01       	movw	r30, r28
    11c6:	35 96       	adiw	r30, 0x05	; 5
    11c8:	61 91       	ld	r22, Z+
    11ca:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, fmt);
	vfprintf(&oled_stdout, fmt, args);
    11cc:	af 01       	movw	r20, r30
    11ce:	86 e0       	ldi	r24, 0x06	; 6
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <vfprintf>
	va_end(args);
}
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <OLED_print_arrow>:
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
    11dc:	e0 91 14 01 	lds	r30, 0x0114
    11e0:	f0 91 15 01 	lds	r31, 0x0115
    11e4:	88 e1       	ldi	r24, 0x18	; 24
    11e6:	80 83       	st	Z, r24
    11e8:	e0 91 14 01 	lds	r30, 0x0114
    11ec:	f0 91 15 01 	lds	r31, 0x0115
    11f0:	80 83       	st	Z, r24
    11f2:	e0 91 14 01 	lds	r30, 0x0114
    11f6:	f0 91 15 01 	lds	r31, 0x0115
    11fa:	80 83       	st	Z, r24
    11fc:	e0 91 14 01 	lds	r30, 0x0114
    1200:	f0 91 15 01 	lds	r31, 0x0115
    1204:	80 83       	st	Z, r24
    1206:	e0 91 14 01 	lds	r30, 0x0114
    120a:	f0 91 15 01 	lds	r31, 0x0115
    120e:	80 83       	st	Z, r24
    1210:	e0 91 14 01 	lds	r30, 0x0114
    1214:	f0 91 15 01 	lds	r31, 0x0115
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	90 83       	st	Z, r25
    121c:	e0 91 14 01 	lds	r30, 0x0114
    1220:	f0 91 15 01 	lds	r31, 0x0115
    1224:	9e e7       	ldi	r25, 0x7E	; 126
    1226:	90 83       	st	Z, r25
    1228:	e0 91 14 01 	lds	r30, 0x0114
    122c:	f0 91 15 01 	lds	r31, 0x0115
    1230:	9c e3       	ldi	r25, 0x3C	; 60
    1232:	90 83       	st	Z, r25
    1234:	e0 91 14 01 	lds	r30, 0x0114
    1238:	f0 91 15 01 	lds	r31, 0x0115
    123c:	80 83       	st	Z, r24
    123e:	e0 91 14 01 	lds	r30, 0x0114
    1242:	f0 91 15 01 	lds	r31, 0x0115
    1246:	10 82       	st	Z, r1
    1248:	08 95       	ret

0000124a <TIMER_init>:
int current_time = 0;

void TIMER_init()
{
	//CTC mode
	TCCR1B |= (1 << WGM12);
    124a:	8e b5       	in	r24, 0x2e	; 46
    124c:	88 60       	ori	r24, 0x08	; 8
    124e:	8e bd       	out	0x2e, r24	; 46
	
	// Prescaler = 256
	TCCR1B |= (1 << CS12);
    1250:	8e b5       	in	r24, 0x2e	; 46
    1252:	84 60       	ori	r24, 0x04	; 4
    1254:	8e bd       	out	0x2e, r24	; 46
	
	// Set output compare value
	OCR1A = 0x4B00;		// 19200, corresponds to match every second
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	9b e4       	ldi	r25, 0x4B	; 75
    125a:	9b bd       	out	0x2b, r25	; 43
    125c:	8a bd       	out	0x2a, r24	; 42
    125e:	08 95       	ret

00001260 <__vector_13>:
}

ISR(TIMER1_COMPA_vect)
{
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
	current_time = current_time + 1;
    126e:	80 91 e5 03 	lds	r24, 0x03E5
    1272:	90 91 e6 03 	lds	r25, 0x03E6
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	90 93 e6 03 	sts	0x03E6, r25
    127c:	80 93 e5 03 	sts	0x03E5, r24
}
    1280:	9f 91       	pop	r25
    1282:	8f 91       	pop	r24
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <TIMER_start>:

void TIMER_start()
{
	TIMSK |= (1 << OCIE1A);
    128e:	89 b7       	in	r24, 0x39	; 57
    1290:	80 64       	ori	r24, 0x40	; 64
    1292:	89 bf       	out	0x39, r24	; 57
	current_time = 0;
    1294:	10 92 e6 03 	sts	0x03E6, r1
    1298:	10 92 e5 03 	sts	0x03E5, r1
    129c:	08 95       	ret

0000129e <TIMER_stop>:
}

int TIMER_stop()
{
	TIMSK &= ~(1 << OCIE1A);
    129e:	89 b7       	in	r24, 0x39	; 57
    12a0:	8f 7b       	andi	r24, 0xBF	; 191
    12a2:	89 bf       	out	0x39, r24	; 57
	return current_time;
    12a4:	80 91 e5 03 	lds	r24, 0x03E5
    12a8:	90 91 e6 03 	lds	r25, 0x03E6
    12ac:	08 95       	ret

000012ae <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 1 and 2 as input
	clear_bit(DDRB, PINB1);
    12ae:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
    12b0:	ba 98       	cbi	0x17, 2	; 23
    12b2:	08 95       	ret

000012b4 <TOUCH_button>:
}

int TOUCH_button( void )
{
	if (test_bit(PINB, PB1) || test_bit(PINB, PB2)){
    12b4:	b1 99       	sbic	0x16, 1	; 22
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <TOUCH_button+0x10>
    12b8:	86 b3       	in	r24, 0x16	; 22
		return 1;
    12ba:	82 fb       	bst	r24, 2
    12bc:	88 27       	eor	r24, r24
    12be:	80 f9       	bld	r24, 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	08 95       	ret
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    12c8:	08 95       	ret

000012ca <TOUCH_read_adc>:

TOUCH_slider_pos_t TOUCH_read_adc( void )
{
    12ca:	cf 93       	push	r28
	TOUCH_slider_pos_t pos;
	pos.left_slider = ADC_read(LEFT_SLIDER_CHANNEL);
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ADC_read>
    12d2:	c8 2f       	mov	r28, r24
    12d4:	8c ec       	ldi	r24, 0xCC	; 204
    12d6:	94 e0       	ldi	r25, 0x04	; 4
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <TOUCH_read_adc+0xe>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <TOUCH_read_adc+0x14>
    12de:	00 00       	nop
	_delay_ms(1);
	pos.right_slider = ADC_read(RIGHT_SLIDER_CHANNEL);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ADC_read>
    12e6:	28 2f       	mov	r18, r24
	
	return pos;
    12e8:	6c 2f       	mov	r22, r28
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	82 2f       	mov	r24, r18
    12ee:	90 e0       	ldi	r25, 0x00	; 0
}
    12f0:	cf 91       	pop	r28
    12f2:	08 95       	ret

000012f4 <TOUCH_get_slider_position>:

TOUCH_slider_pos_t TOUCH_get_slider_position( void )
{
	TOUCH_slider_pos_t current_pos = TOUCH_read_adc();
    12f4:	0e 94 65 09 	call	0x12ca	; 0x12ca <TOUCH_read_adc>
	return current_pos;
    12f8:	08 95       	ret

000012fa <HIGHSCORE_load_from_eeprom>:
		}
	}
}

highscore_info_t HIGHSCORE_load_from_eeprom(int number)
{
    12fa:	8f 92       	push	r8
    12fc:	9f 92       	push	r9
    12fe:	af 92       	push	r10
    1300:	bf 92       	push	r11
    1302:	cf 92       	push	r12
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	2d 97       	sbiw	r28, 0x0d	; 13
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	5c 01       	movw	r10, r24
	highscore_info_t user;
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
    1324:	66 0f       	add	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	8b 01       	movw	r16, r22
    132a:	00 0f       	add	r16, r16
    132c:	11 1f       	adc	r17, r17
    132e:	00 0f       	add	r16, r16
    1330:	11 1f       	adc	r17, r17
    1332:	00 0f       	add	r16, r16
    1334:	11 1f       	adc	r17, r17
    1336:	06 1b       	sub	r16, r22
    1338:	17 0b       	sbc	r17, r23
    133a:	78 01       	movw	r14, r16
    133c:	c8 01       	movw	r24, r16
    133e:	0e 94 06 06 	call	0xc0c	; 0xc0c <EEPROM_read>
    1342:	88 2e       	mov	r8, r24
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
    1344:	c8 01       	movw	r24, r16
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	0e 94 06 06 	call	0xc0c	; 0xc0c <EEPROM_read>
	user.score = score_msb << 8 | score_lsb;
    134c:	91 2c       	mov	r9, r1
    134e:	98 2c       	mov	r9, r8
    1350:	88 24       	eor	r8, r8
    1352:	88 2a       	or	r8, r24
    1354:	8e 01       	movw	r16, r28
    1356:	0d 5f       	subi	r16, 0xFD	; 253
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	6e 01       	movw	r12, r28
    135c:	8e e0       	ldi	r24, 0x0E	; 14
    135e:	c8 0e       	add	r12, r24
    1360:	d1 1c       	adc	r13, r1
    1362:	ce 01       	movw	r24, r28
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	e8 1a       	sub	r14, r24
    1368:	f9 0a       	sbc	r15, r25
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
    136a:	c7 01       	movw	r24, r14
    136c:	80 0f       	add	r24, r16
    136e:	91 1f       	adc	r25, r17
    1370:	0e 94 06 06 	call	0xc0c	; 0xc0c <EEPROM_read>
    1374:	f8 01       	movw	r30, r16
    1376:	81 93       	st	Z+, r24
    1378:	8f 01       	movw	r16, r30
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
	user.score = score_msb << 8 | score_lsb;
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    137a:	ec 15       	cp	r30, r12
    137c:	fd 05       	cpc	r31, r13
    137e:	a9 f7       	brne	.-22     	; 0x136a <HIGHSCORE_load_from_eeprom+0x70>
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
	return user;
    1380:	9a 82       	std	Y+2, r9	; 0x02
    1382:	89 82       	std	Y+1, r8	; 0x01
    1384:	8d e0       	ldi	r24, 0x0D	; 13
    1386:	fe 01       	movw	r30, r28
    1388:	31 96       	adiw	r30, 0x01	; 1
    138a:	d5 01       	movw	r26, r10
    138c:	01 90       	ld	r0, Z+
    138e:	0d 92       	st	X+, r0
    1390:	8a 95       	dec	r24
    1392:	e1 f7       	brne	.-8      	; 0x138c <HIGHSCORE_load_from_eeprom+0x92>
}
    1394:	c5 01       	movw	r24, r10
    1396:	2d 96       	adiw	r28, 0x0d	; 13
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	08 95       	ret

000013bc <HIGHSCORE_load_to_eeprom>:

void HIGHSCORE_load_to_eeprom(uint16_t score, char *name, int number)
{
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	18 2f       	mov	r17, r24
    13ce:	c6 2e       	mov	r12, r22
    13d0:	d7 2e       	mov	r13, r23
	uint8_t score_lsb = score & 0xFF;
	uint8_t score_msb = score >> 8;
	EEPROM_write(score_msb, NUM_HIGHSCORE_BYTES*number);
    13d2:	44 0f       	add	r20, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	ea 01       	movw	r28, r20
    13d8:	cc 0f       	add	r28, r28
    13da:	dd 1f       	adc	r29, r29
    13dc:	cc 0f       	add	r28, r28
    13de:	dd 1f       	adc	r29, r29
    13e0:	cc 0f       	add	r28, r28
    13e2:	dd 1f       	adc	r29, r29
    13e4:	c4 1b       	sub	r28, r20
    13e6:	d5 0b       	sbc	r29, r21
    13e8:	7e 01       	movw	r14, r28
    13ea:	be 01       	movw	r22, r28
    13ec:	89 2f       	mov	r24, r25
    13ee:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <EEPROM_write>
	EEPROM_write(score_lsb, NUM_HIGHSCORE_BYTES*number + 1);
    13f2:	be 01       	movw	r22, r28
    13f4:	6f 5f       	subi	r22, 0xFF	; 255
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	81 2f       	mov	r24, r17
    13fa:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <EEPROM_write>
    13fe:	0c 2d       	mov	r16, r12
    1400:	1d 2d       	mov	r17, r13
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    1402:	c0 e0       	ldi	r28, 0x00	; 0
    1404:	d0 e0       	ldi	r29, 0x00	; 0
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	e8 0e       	add	r14, r24
    140a:	f1 1c       	adc	r15, r1
    140c:	b7 01       	movw	r22, r14
    140e:	6c 0f       	add	r22, r28
    1410:	7d 1f       	adc	r23, r29
		EEPROM_write(name[i], i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
    1412:	f8 01       	movw	r30, r16
    1414:	81 91       	ld	r24, Z+
    1416:	8f 01       	movw	r16, r30
    1418:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <EEPROM_write>
	uint8_t score_lsb = score & 0xFF;
	uint8_t score_msb = score >> 8;
	EEPROM_write(score_msb, NUM_HIGHSCORE_BYTES*number);
	EEPROM_write(score_lsb, NUM_HIGHSCORE_BYTES*number + 1);
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
    141c:	21 96       	adiw	r28, 0x01	; 1
    141e:	cb 30       	cpi	r28, 0x0B	; 11
    1420:	d1 05       	cpc	r29, r1
    1422:	a1 f7       	brne	.-24     	; 0x140c <HIGHSCORE_load_to_eeprom+0x50>
		EEPROM_write(name[i], i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
}
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	08 95       	ret

00001436 <HIGHSCORE_add_score>:
#include <util/delay.h>
#include <stdlib.h>

// When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
    1436:	9f 92       	push	r9
    1438:	af 92       	push	r10
    143a:	bf 92       	push	r11
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	6a 97       	sbiw	r28, 0x1a	; 26
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	7c 01       	movw	r14, r24
    145e:	a6 2e       	mov	r10, r22
    1460:	97 2e       	mov	r9, r23
    1462:	6a 01       	movw	r12, r20
	highscore_info_t element;
	for (int i = start; i < MAX_SCORES; i++){
    1464:	46 30       	cpi	r20, 0x06	; 6
    1466:	51 05       	cpc	r21, r1
    1468:	0c f0       	brlt	.+2      	; 0x146c <HIGHSCORE_add_score+0x36>
    146a:	5b c0       	rjmp	.+182    	; 0x1522 <HIGHSCORE_add_score+0xec>
    146c:	8a 01       	movw	r16, r20
		element = HIGHSCORE_load_from_eeprom(i);
    146e:	0f 2e       	mov	r0, r31
    1470:	fd e0       	ldi	r31, 0x0D	; 13
    1472:	bf 2e       	mov	r11, r31
    1474:	f0 2d       	mov	r31, r0
    1476:	b8 01       	movw	r22, r16
    1478:	ce 01       	movw	r24, r28
    147a:	0e 96       	adiw	r24, 0x0e	; 14
    147c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <HIGHSCORE_load_from_eeprom>
    1480:	fe 01       	movw	r30, r28
    1482:	3e 96       	adiw	r30, 0x0e	; 14
    1484:	de 01       	movw	r26, r28
    1486:	11 96       	adiw	r26, 0x01	; 1
    1488:	8b 2d       	mov	r24, r11
    148a:	01 90       	ld	r0, Z+
    148c:	0d 92       	st	X+, r0
    148e:	8a 95       	dec	r24
    1490:	e1 f7       	brne	.-8      	; 0x148a <HIGHSCORE_add_score+0x54>
		if  (element.score == 0){
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	39 f4       	brne	.+14     	; 0x14a8 <HIGHSCORE_add_score+0x72>
			HIGHSCORE_load_to_eeprom(score, name, i);
    149a:	a8 01       	movw	r20, r16
    149c:	6a 2d       	mov	r22, r10
    149e:	79 2d       	mov	r23, r9
    14a0:	c7 01       	movw	r24, r14
    14a2:	0e 94 de 09 	call	0x13bc	; 0x13bc <HIGHSCORE_load_to_eeprom>
			break;
    14a6:	3d c0       	rjmp	.+122    	; 0x1522 <HIGHSCORE_add_score+0xec>
		}
		else if (element.score < score){
    14a8:	8e 15       	cp	r24, r14
    14aa:	9f 05       	cpc	r25, r15
    14ac:	78 f4       	brcc	.+30     	; 0x14cc <HIGHSCORE_add_score+0x96>
			// Score takes this place and pushes the rest ones back in the list. Start = i + 1
			HIGHSCORE_add_score(element.score, element.name, i + 1);
    14ae:	a8 01       	movw	r20, r16
    14b0:	4f 5f       	subi	r20, 0xFF	; 255
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	be 01       	movw	r22, r28
    14b6:	6d 5f       	subi	r22, 0xFD	; 253
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	0e 94 1b 0a 	call	0x1436	; 0x1436 <HIGHSCORE_add_score>
			HIGHSCORE_load_to_eeprom(score, name, i);
    14be:	a8 01       	movw	r20, r16
    14c0:	6a 2d       	mov	r22, r10
    14c2:	79 2d       	mov	r23, r9
    14c4:	c7 01       	movw	r24, r14
    14c6:	0e 94 de 09 	call	0x13bc	; 0x13bc <HIGHSCORE_load_to_eeprom>
			break;
    14ca:	2b c0       	rjmp	.+86     	; 0x1522 <HIGHSCORE_add_score+0xec>
		}
		else if (element.score > score){
    14cc:	e8 16       	cp	r14, r24
    14ce:	f9 06       	cpc	r15, r25
    14d0:	10 f5       	brcc	.+68     	; 0x1516 <HIGHSCORE_add_score+0xe0>
			if (start == 0 && i == MAX_SCORES-1){
    14d2:	c1 14       	cp	r12, r1
    14d4:	d1 04       	cpc	r13, r1
    14d6:	f9 f4       	brne	.+62     	; 0x1516 <HIGHSCORE_add_score+0xe0>
    14d8:	05 30       	cpi	r16, 0x05	; 5
    14da:	11 05       	cpc	r17, r1
    14dc:	e1 f4       	brne	.+56     	; 0x1516 <HIGHSCORE_add_score+0xe0>
				OLED_reset();
    14de:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
				OLED_pos(4,0);
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	84 e0       	ldi	r24, 0x04	; 4
    14e6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
				OLED_printf(" %s is \n not in the top 6", name);
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	88 e7       	ldi	r24, 0x78	; 120
    14f0:	92 e0       	ldi	r25, 0x02	; 2
    14f2:	9f 93       	push	r25
    14f4:	8f 93       	push	r24
    14f6:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	9f ef       	ldi	r25, 0xFF	; 255
    14fe:	2c e2       	ldi	r18, 0x2C	; 44
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	90 40       	sbci	r25, 0x00	; 0
    1504:	20 40       	sbci	r18, 0x00	; 0
    1506:	e1 f7       	brne	.-8      	; 0x1500 <HIGHSCORE_add_score+0xca>
    1508:	00 c0       	rjmp	.+0      	; 0x150a <HIGHSCORE_add_score+0xd4>
    150a:	00 c0       	rjmp	.+0      	; 0x150c <HIGHSCORE_add_score+0xd6>
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <HIGHSCORE_add_score+0xec>

// When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
	highscore_info_t element;
	for (int i = start; i < MAX_SCORES; i++){
    1516:	0f 5f       	subi	r16, 0xFF	; 255
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	06 30       	cpi	r16, 0x06	; 6
    151c:	11 05       	cpc	r17, r1
    151e:	09 f0       	breq	.+2      	; 0x1522 <HIGHSCORE_add_score+0xec>
    1520:	aa cf       	rjmp	.-172    	; 0x1476 <HIGHSCORE_add_score+0x40>
				OLED_printf(" %s is \n not in the top 6", name);
				_delay_ms(3000);
			}
		}
	}
}
    1522:	6a 96       	adiw	r28, 0x1a	; 26
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	9f 90       	pop	r9
    1544:	08 95       	ret

00001546 <HIGHSCORE_highlight_letter>:
	}
	username[NUM_USERNAME_BYTES - 1] = '\0';
}

void HIGHSCORE_highlight_letter(int line, int prev_line)
{
    1546:	cf 93       	push	r28
    1548:	c8 2f       	mov	r28, r24
    154a:	86 2f       	mov	r24, r22
	OLED_pos(prev_line, 0);
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_printf("  ");
    1552:	22 e9       	ldi	r18, 0x92	; 146
    1554:	32 e0       	ldi	r19, 0x02	; 2
    1556:	3f 93       	push	r19
    1558:	2f 93       	push	r18
    155a:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
	OLED_pos(line, 0);
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	8c 2f       	mov	r24, r28
    1562:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_print_arrow();
    1566:	0e 94 ee 08 	call	0x11dc	; 0x11dc <OLED_print_arrow>
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
}
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <HIGHSCORE_print_character_list>:

void HIGHSCORE_print_character_list(char start)
{
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	d8 2e       	mov	r13, r24
	OLED_reset();
    1582:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
    1586:	25 e9       	ldi	r18, 0x95	; 149
    1588:	32 e0       	ldi	r19, 0x02	; 2
    158a:	3f 93       	push	r19
    158c:	2f 93       	push	r18
    158e:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
	for (char c = start; c < start + 7; c++){
    1592:	cd 2d       	mov	r28, r13
    1594:	d0 e0       	ldi	r29, 0x00	; 0
    1596:	7e 01       	movw	r14, r28
    1598:	87 e0       	ldi	r24, 0x07	; 7
    159a:	e8 0e       	add	r14, r24
    159c:	f1 1c       	adc	r15, r1
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	ce 15       	cp	r28, r14
    15a4:	df 05       	cpc	r29, r15
    15a6:	ac f4       	brge	.+42     	; 0x15d2 <HIGHSCORE_print_character_list+0x60>
		OLED_goto_column(11);
		OLED_printf("%c\n", c);
    15a8:	00 eb       	ldi	r16, 0xB0	; 176
    15aa:	12 e0       	ldi	r17, 0x02	; 2
void HIGHSCORE_print_character_list(char start)
{
	OLED_reset();
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
	for (char c = start; c < start + 7; c++){
		OLED_goto_column(11);
    15ac:	8b e0       	ldi	r24, 0x0B	; 11
    15ae:	0e 94 b0 07 	call	0xf60	; 0xf60 <OLED_goto_column>
		OLED_printf("%c\n", c);
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	1f 93       	push	r17
    15b8:	0f 93       	push	r16
    15ba:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>

void HIGHSCORE_print_character_list(char start)
{
	OLED_reset();
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
	for (char c = start; c < start + 7; c++){
    15be:	d3 94       	inc	r13
    15c0:	cd 2d       	mov	r28, r13
    15c2:	d0 e0       	ldi	r29, 0x00	; 0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	ce 15       	cp	r28, r14
    15ce:	df 05       	cpc	r29, r15
    15d0:	6c f3       	brlt	.-38     	; 0x15ac <HIGHSCORE_print_character_list+0x3a>
		OLED_goto_column(11);
		OLED_printf("%c\n", c);
	}
}
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	08 95       	ret

000015e2 <HIGHSCORE_get_username>:
	}
}


void HIGHSCORE_get_username(char* username)
{
    15e2:	8f 92       	push	r8
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	7c 01       	movw	r14, r24
	int i = 0;
	int line = 1;
	int prev_line = 1;
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
    15f8:	81 e6       	ldi	r24, 0x61	; 97
    15fa:	0e 94 b9 0a 	call	0x1572	; 0x1572 <HIGHSCORE_print_character_list>
	HIGHSCORE_highlight_letter(line, prev_line);
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 a3 0a 	call	0x1546	; 0x1546 <HIGHSCORE_highlight_letter>
void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
	int prev_line = 1;
	char ch = 'a';
    160a:	11 e6       	ldi	r17, 0x61	; 97

void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
	int prev_line = 1;
    160c:	bb 24       	eor	r11, r11
    160e:	b3 94       	inc	r11
    1610:	c1 2c       	mov	r12, r1


void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
    1612:	c1 e0       	ldi	r28, 0x01	; 1
    1614:	d0 e0       	ldi	r29, 0x00	; 0
}


void HIGHSCORE_get_username(char* username)
{
	int i = 0;
    1616:	81 2c       	mov	r8, r1
    1618:	91 2c       	mov	r9, r1
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
	HIGHSCORE_highlight_letter(line, prev_line);
	
	while(i < NUM_USERNAME_BYTES - 1){
		if (JOY_button()){
    161a:	0e 94 10 07 	call	0xe20	; 0xe20 <JOY_button>
    161e:	89 2b       	or	r24, r25
    1620:	59 f0       	breq	.+22     	; 0x1638 <HIGHSCORE_get_username+0x56>
			while(JOY_button());
    1622:	0e 94 10 07 	call	0xe20	; 0xe20 <JOY_button>
    1626:	89 2b       	or	r24, r25
    1628:	e1 f7       	brne	.-8      	; 0x1622 <HIGHSCORE_get_username+0x40>
			username[i] = ch;
    162a:	f7 01       	movw	r30, r14
    162c:	e8 0d       	add	r30, r8
    162e:	f9 1d       	adc	r31, r9
    1630:	10 83       	st	Z, r17
			i++;
    1632:	2f ef       	ldi	r18, 0xFF	; 255
    1634:	82 1a       	sub	r8, r18
    1636:	92 0a       	sbc	r9, r18
		}
		switch(JOY_get_direction()){
    1638:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	29 f1       	breq	.+74     	; 0x168a <HIGHSCORE_get_username+0xa8>
    1640:	84 30       	cpi	r24, 0x04	; 4
    1642:	09 f4       	brne	.+2      	; 0x1646 <HIGHSCORE_get_username+0x64>
    1644:	4a c0       	rjmp	.+148    	; 0x16da <HIGHSCORE_get_username+0xf8>
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	09 f0       	breq	.+2      	; 0x164c <HIGHSCORE_get_username+0x6a>
    164a:	55 c0       	rjmp	.+170    	; 0x16f6 <HIGHSCORE_get_username+0x114>
    164c:	4b c0       	rjmp	.+150    	; 0x16e4 <HIGHSCORE_get_username+0x102>
			
			case UP:
				while(JOY_get_direction() == UP){
					if (ch > 'a'){
    164e:	12 36       	cpi	r17, 0x62	; 98
    1650:	40 f0       	brcs	.+16     	; 0x1662 <HIGHSCORE_get_username+0x80>
						ch--;
    1652:	11 50       	subi	r17, 0x01	; 1
						if (line == 1)
    1654:	c1 30       	cpi	r28, 0x01	; 1
    1656:	d1 05       	cpc	r29, r1
    1658:	21 f4       	brne	.+8      	; 0x1662 <HIGHSCORE_get_username+0x80>
						HIGHSCORE_print_character_list(ch);
    165a:	81 2f       	mov	r24, r17
    165c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <HIGHSCORE_print_character_list>
    1660:	06 c0       	rjmp	.+12     	; 0x166e <HIGHSCORE_get_username+0x8c>
					}
					if (line > 1){
    1662:	c2 30       	cpi	r28, 0x02	; 2
    1664:	d1 05       	cpc	r29, r1
    1666:	1c f0       	brlt	.+6      	; 0x166e <HIGHSCORE_get_username+0x8c>
						prev_line = line;
						line--;
    1668:	bc 2e       	mov	r11, r28
    166a:	cd 2e       	mov	r12, r29
    166c:	21 97       	sbiw	r28, 0x01	; 1
					}
					HIGHSCORE_highlight_letter(line, prev_line);
    166e:	6b 2d       	mov	r22, r11
    1670:	7c 2d       	mov	r23, r12
    1672:	ce 01       	movw	r24, r28
    1674:	0e 94 a3 0a 	call	0x1546	; 0x1546 <HIGHSCORE_highlight_letter>
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	9f ef       	ldi	r25, 0xFF	; 255
    167c:	e2 e0       	ldi	r30, 0x02	; 2
    167e:	81 50       	subi	r24, 0x01	; 1
    1680:	90 40       	sbci	r25, 0x00	; 0
    1682:	e0 40       	sbci	r30, 0x00	; 0
    1684:	e1 f7       	brne	.-8      	; 0x167e <HIGHSCORE_get_username+0x9c>
    1686:	00 c0       	rjmp	.+0      	; 0x1688 <HIGHSCORE_get_username+0xa6>
    1688:	00 c0       	rjmp	.+0      	; 0x168a <HIGHSCORE_get_username+0xa8>
			i++;
		}
		switch(JOY_get_direction()){
			
			case UP:
				while(JOY_get_direction() == UP){
    168a:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	f1 f2       	breq	.-68     	; 0x164e <HIGHSCORE_get_username+0x6c>
    1692:	31 c0       	rjmp	.+98     	; 0x16f6 <HIGHSCORE_get_username+0x114>
				}
				break;
			
			case DOWN:
				while(JOY_get_direction() == DOWN){
					if (ch < 'z'){
    1694:	1a 37       	cpi	r17, 0x7A	; 122
    1696:	68 f4       	brcc	.+26     	; 0x16b2 <HIGHSCORE_get_username+0xd0>
						ch++;
    1698:	aa 24       	eor	r10, r10
    169a:	a3 94       	inc	r10
    169c:	a1 0e       	add	r10, r17
						if (line == 7)
    169e:	c7 30       	cpi	r28, 0x07	; 7
    16a0:	d1 05       	cpc	r29, r1
    16a2:	31 f4       	brne	.+12     	; 0x16b0 <HIGHSCORE_get_username+0xce>
						HIGHSCORE_print_character_list(ch - 6);
    16a4:	8b ef       	ldi	r24, 0xFB	; 251
    16a6:	81 0f       	add	r24, r17
    16a8:	0e 94 b9 0a 	call	0x1572	; 0x1572 <HIGHSCORE_print_character_list>
				break;
			
			case DOWN:
				while(JOY_get_direction() == DOWN){
					if (ch < 'z'){
						ch++;
    16ac:	1a 2d       	mov	r17, r10
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <HIGHSCORE_get_username+0xdc>
    16b0:	1a 2d       	mov	r17, r10
						if (line == 7)
						HIGHSCORE_print_character_list(ch - 6);
					}
					if (line < 7){
    16b2:	c7 30       	cpi	r28, 0x07	; 7
    16b4:	d1 05       	cpc	r29, r1
    16b6:	1c f4       	brge	.+6      	; 0x16be <HIGHSCORE_get_username+0xdc>
						prev_line = line;
						line++;
    16b8:	bc 2e       	mov	r11, r28
    16ba:	cd 2e       	mov	r12, r29
    16bc:	21 96       	adiw	r28, 0x01	; 1
					}
					HIGHSCORE_highlight_letter(line, prev_line);
    16be:	6b 2d       	mov	r22, r11
    16c0:	7c 2d       	mov	r23, r12
    16c2:	ce 01       	movw	r24, r28
    16c4:	0e 94 a3 0a 	call	0x1546	; 0x1546 <HIGHSCORE_highlight_letter>
    16c8:	ff ef       	ldi	r31, 0xFF	; 255
    16ca:	2f ef       	ldi	r18, 0xFF	; 255
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	f1 50       	subi	r31, 0x01	; 1
    16d0:	20 40       	sbci	r18, 0x00	; 0
    16d2:	80 40       	sbci	r24, 0x00	; 0
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <HIGHSCORE_get_username+0xec>
    16d6:	00 c0       	rjmp	.+0      	; 0x16d8 <HIGHSCORE_get_username+0xf6>
    16d8:	00 c0       	rjmp	.+0      	; 0x16da <HIGHSCORE_get_username+0xf8>
					_delay_ms(200);
				}
				break;
			
			case DOWN:
				while(JOY_get_direction() == DOWN){
    16da:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    16de:	84 30       	cpi	r24, 0x04	; 4
    16e0:	c9 f2       	breq	.-78     	; 0x1694 <HIGHSCORE_get_username+0xb2>
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <HIGHSCORE_get_username+0x114>
					_delay_ms(200);
				}
				break;
			
			case RIGHT:
				while(JOY_get_direction() == RIGHT);
    16e4:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	e1 f3       	breq	.-8      	; 0x16e4 <HIGHSCORE_get_username+0x102>
				username[i] = '\0';
    16ec:	f7 01       	movw	r30, r14
    16ee:	e8 0d       	add	r30, r8
    16f0:	f9 1d       	adc	r31, r9
    16f2:	10 82       	st	Z, r1
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <HIGHSCORE_get_username+0x11e>
	int prev_line = 1;
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
	HIGHSCORE_highlight_letter(line, prev_line);
	
	while(i < NUM_USERNAME_BYTES - 1){
    16f6:	9a e0       	ldi	r25, 0x0A	; 10
    16f8:	89 16       	cp	r8, r25
    16fa:	91 04       	cpc	r9, r1
    16fc:	0c f4       	brge	.+2      	; 0x1700 <HIGHSCORE_get_username+0x11e>
    16fe:	8d cf       	rjmp	.-230    	; 0x161a <HIGHSCORE_get_username+0x38>
			
			default:
				break;
		}
	}
	username[NUM_USERNAME_BYTES - 1] = '\0';
    1700:	f7 01       	movw	r30, r14
    1702:	12 86       	std	Z+10, r1	; 0x0a
}
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	9f 90       	pop	r9
    1716:	8f 90       	pop	r8
    1718:	08 95       	ret

0000171a <HIGHSCORE_print>:
		OLED_printf("%c\n", c);
	}
}

void HIGHSCORE_print()
{
    171a:	9f 92       	push	r9
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	6a 97       	sbiw	r28, 0x1a	; 26
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
	int max_num_highscores = 5;
	highscore_info_t user;
	OLED_reset();
    1740:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
	OLED_printf("Highscores");
    1744:	87 e7       	ldi	r24, 0x77	; 119
    1746:	93 e0       	ldi	r25, 0x03	; 3
    1748:	9f 93       	push	r25
    174a:	8f 93       	push	r24
    174c:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
	OLED_pos(1, 0);
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_printf("#  Score");
    1758:	84 eb       	ldi	r24, 0xB4	; 180
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	9f 93       	push	r25
    175e:	8f 93       	push	r24
    1760:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
	OLED_goto_column(55);
    1764:	87 e3       	ldi	r24, 0x37	; 55
    1766:	0e 94 b0 07 	call	0xf60	; 0xf60 <OLED_goto_column>
	OLED_printf("User\n");
    176a:	8d eb       	ldi	r24, 0xBD	; 189
    176c:	92 e0       	ldi	r25, 0x02	; 2
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
	for (int i = 0; i < max_num_highscores; i++){
    1782:	00 e0       	ldi	r16, 0x00	; 0
    1784:	10 e0       	ldi	r17, 0x00	; 0
		user = HIGHSCORE_load_from_eeprom(i);
    1786:	0f 2e       	mov	r0, r31
    1788:	fd e0       	ldi	r31, 0x0D	; 13
    178a:	9f 2e       	mov	r9, r31
    178c:	f0 2d       	mov	r31, r0
		OLED_printf("%d  %d", i+1, user.score);
    178e:	0f 2e       	mov	r0, r31
    1790:	f3 ec       	ldi	r31, 0xC3	; 195
    1792:	af 2e       	mov	r10, r31
    1794:	f2 e0       	ldi	r31, 0x02	; 2
    1796:	bf 2e       	mov	r11, r31
    1798:	f0 2d       	mov	r31, r0
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
    179a:	6e 01       	movw	r12, r28
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	c8 0e       	add	r12, r24
    17a0:	d1 1c       	adc	r13, r1
    17a2:	0f 2e       	mov	r0, r31
    17a4:	fa ec       	ldi	r31, 0xCA	; 202
    17a6:	ef 2e       	mov	r14, r31
    17a8:	f2 e0       	ldi	r31, 0x02	; 2
    17aa:	ff 2e       	mov	r15, r31
    17ac:	f0 2d       	mov	r31, r0
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
		user = HIGHSCORE_load_from_eeprom(i);
    17ae:	b8 01       	movw	r22, r16
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 96       	adiw	r24, 0x0e	; 14
    17b4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <HIGHSCORE_load_from_eeprom>
    17b8:	fe 01       	movw	r30, r28
    17ba:	3e 96       	adiw	r30, 0x0e	; 14
    17bc:	de 01       	movw	r26, r28
    17be:	11 96       	adiw	r26, 0x01	; 1
    17c0:	89 2d       	mov	r24, r9
    17c2:	01 90       	ld	r0, Z+
    17c4:	0d 92       	st	X+, r0
    17c6:	8a 95       	dec	r24
    17c8:	e1 f7       	brne	.-8      	; 0x17c2 <HIGHSCORE_print+0xa8>
		OLED_printf("%d  %d", i+1, user.score);
    17ca:	0f 5f       	subi	r16, 0xFF	; 255
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	8f 93       	push	r24
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	8f 93       	push	r24
    17d6:	1f 93       	push	r17
    17d8:	0f 93       	push	r16
    17da:	bf 92       	push	r11
    17dc:	af 92       	push	r10
    17de:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
		OLED_goto_column(55);
    17e2:	87 e3       	ldi	r24, 0x37	; 55
    17e4:	0e 94 b0 07 	call	0xf60	; 0xf60 <OLED_goto_column>
		OLED_printf("%s\n",user.name);
    17e8:	df 92       	push	r13
    17ea:	cf 92       	push	r12
    17ec:	ff 92       	push	r15
    17ee:	ef 92       	push	r14
    17f0:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
	OLED_printf("Highscores");
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	05 30       	cpi	r16, 0x05	; 5
    1800:	11 05       	cpc	r17, r1
    1802:	a9 f6       	brne	.-86     	; 0x17ae <HIGHSCORE_print+0x94>
		user = HIGHSCORE_load_from_eeprom(i);
		OLED_printf("%d  %d", i+1, user.score);
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
	}
}
    1804:	6a 96       	adiw	r28, 0x1a	; 26
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	bf 90       	pop	r11
    1822:	af 90       	pop	r10
    1824:	9f 90       	pop	r9
    1826:	08 95       	ret

00001828 <HIGHSCORE_clear>:

void HIGHSCORE_clear()
{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    182c:	c0 e0       	ldi	r28, 0x00	; 0
    182e:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_write(0, i);
    1830:	be 01       	movw	r22, r28
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <EEPROM_write>
	}
}

void HIGHSCORE_clear()
{
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    1838:	21 96       	adiw	r28, 0x01	; 1
    183a:	c4 35       	cpi	r28, 0x54	; 84
    183c:	d1 05       	cpc	r29, r1
    183e:	c1 f7       	brne	.-16     	; 0x1830 <HIGHSCORE_clear+0x8>
		EEPROM_write(0, i);
	}
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

int main( void )
{
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	66 97       	sbiw	r28, 0x16	; 22
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
	char username[NUM_USERNAME_BYTES];
	
	cli();
    185a:	f8 94       	cli
	UART_Init( MYUBRR );
    185c:	8f e1       	ldi	r24, 0x1F	; 31
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 93 04 	call	0x926	; 0x926 <UART_Init>
	ADC_init();
    1864:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <ADC_init>
	JOY_init();
    1868:	0e 94 39 07 	call	0xe72	; 0xe72 <JOY_init>
	TOUCH_init();
    186c:	0e 94 57 09 	call	0x12ae	; 0x12ae <TOUCH_init>
	MENU_init();
    1870:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <MENU_init>
	CAN_init();
    1874:	0e 94 d5 02 	call	0x5aa	; 0x5aa <CAN_init>
	TIMER_init();
    1878:	0e 94 25 09 	call	0x124a	; 0x124a <TIMER_init>
	SEND2CAN_init();
    187c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <SEND2CAN_init>
	
	printf("Init done\n");
    1880:	8e ec       	ldi	r24, 0xCE	; 206
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	0e 94 35 11 	call	0x226a	; 0x226a <puts>
	sei();
    1888:	78 94       	sei
	STATE_OPTION_set(menu);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
int main( void )
{
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
    1890:	e1 2c       	mov	r14, r1
    1892:	f1 2c       	mov	r15, r1

int main( void )
{
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
    1894:	03 e0       	ldi	r16, 0x03	; 3
    1896:	10 e0       	ldi	r17, 0x00	; 0
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
    1898:	0f 2e       	mov	r0, r31
    189a:	f3 e0       	ldi	r31, 0x03	; 3
    189c:	cf 2e       	mov	r12, r31
    189e:	f0 2d       	mov	r31, r0
    18a0:	d1 2c       	mov	r13, r1
	printf("Init done\n");
	sei();
	STATE_OPTION_set(menu);

	while(1){
		switch (STATE_OPTION_get()){
    18a2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <STATE_OPTION_get>
    18a6:	82 30       	cpi	r24, 0x02	; 2
    18a8:	01 f1       	breq	.+64     	; 0x18ea <main+0xa4>
    18aa:	28 f4       	brcc	.+10     	; 0x18b6 <main+0x70>
    18ac:	88 23       	and	r24, r24
    18ae:	41 f0       	breq	.+16     	; 0x18c0 <main+0x7a>
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	59 f0       	breq	.+22     	; 0x18ca <main+0x84>
    18b4:	47 c0       	rjmp	.+142    	; 0x1944 <main+0xfe>
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	d9 f0       	breq	.+54     	; 0x18f0 <main+0xaa>
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	29 f1       	breq	.+74     	; 0x1908 <main+0xc2>
    18be:	42 c0       	rjmp	.+132    	; 0x1944 <main+0xfe>
			case menu:
				MENU_select_item();
    18c0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <MENU_select_item>
				MENU_navigate();
    18c4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MENU_navigate>
				break;
    18c8:	40 c0       	rjmp	.+128    	; 0x194a <main+0x104>
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
    18ca:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <STATE_OPTION_get_speed>
    18ce:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <SEND2CAN_send_speed>
				MENU_print_game_screen();
    18d2:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <MENU_print_game_screen>
				remaining_lives = 3;
				score = 0;
				TIMER_start();
    18d6:	0e 94 47 09 	call	0x128e	; 0x128e <TIMER_start>
				STATE_OPTION_set(game);
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
				score = 0;
    18e0:	e1 2c       	mov	r14, r1
    18e2:	f1 2c       	mov	r15, r1
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
    18e4:	0c 2d       	mov	r16, r12
    18e6:	1d 2d       	mov	r17, r13
				score = 0;
				TIMER_start();
				STATE_OPTION_set(game);
				break;
    18e8:	30 c0       	rjmp	.+96     	; 0x194a <main+0x104>
			case game:
				SEND2CAN_send_messages();
    18ea:	0e 94 d4 06 	call	0xda8	; 0xda8 <SEND2CAN_send_messages>
				break;
    18ee:	2d c0       	rjmp	.+90     	; 0x194a <main+0x104>
			case game_pause:
				if(JOY_button()){
    18f0:	0e 94 10 07 	call	0xe20	; 0xe20 <JOY_button>
    18f4:	89 2b       	or	r24, r25
    18f6:	49 f1       	breq	.+82     	; 0x194a <main+0x104>
					STATE_OPTION_set(game);
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
					MENU_print_game_screen();
    18fe:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <MENU_print_game_screen>
					TIMER_start();
    1902:	0e 94 47 09 	call	0x128e	; 0x128e <TIMER_start>
    1906:	21 c0       	rjmp	.+66     	; 0x194a <main+0x104>
				}
				break;
			case game_over:
				MENU_print_game_over_screen(score);
    1908:	c7 01       	movw	r24, r14
    190a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <MENU_print_game_over_screen>
    190e:	2f ef       	ldi	r18, 0xFF	; 255
    1910:	8f ef       	ldi	r24, 0xFF	; 255
    1912:	9b e3       	ldi	r25, 0x3B	; 59
    1914:	21 50       	subi	r18, 0x01	; 1
    1916:	80 40       	sbci	r24, 0x00	; 0
    1918:	90 40       	sbci	r25, 0x00	; 0
    191a:	e1 f7       	brne	.-8      	; 0x1914 <main+0xce>
    191c:	00 c0       	rjmp	.+0      	; 0x191e <main+0xd8>
    191e:	00 00       	nop
				_delay_ms(4000);
				HIGHSCORE_get_username(username);
    1920:	ce 01       	movw	r24, r28
    1922:	0c 96       	adiw	r24, 0x0c	; 12
    1924:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <HIGHSCORE_get_username>
				HIGHSCORE_add_score(score, username, 0);
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	be 01       	movw	r22, r28
    192e:	64 5f       	subi	r22, 0xF4	; 244
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	c7 01       	movw	r24, r14
    1934:	0e 94 1b 0a 	call	0x1436	; 0x1436 <HIGHSCORE_add_score>
				
				STATE_OPTION_set(menu);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
				MENU_start_menu();
    193e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <MENU_start_menu>
				break;
    1942:	03 c0       	rjmp	.+6      	; 0x194a <main+0x104>
			default:
				STATE_OPTION_set(menu);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
				break;
		}
		CAN_handle_interrupt(&receive);
    194a:	ce 01       	movw	r24, r28
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	0e 94 a2 03 	call	0x744	; 0x744 <CAN_handle_interrupt>
		msg_type = receive.data[0];
		switch(msg_type){
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	85 30       	cpi	r24, 0x05	; 5
    1956:	f9 f4       	brne	.+62     	; 0x1996 <main+0x150>
			case CAN_LIVES:
				if(remaining_lives > 1 && STATE_OPTION_get() == game){
    1958:	02 30       	cpi	r16, 0x02	; 2
    195a:	11 05       	cpc	r17, r1
    195c:	8c f0       	brlt	.+34     	; 0x1980 <main+0x13a>
    195e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <STATE_OPTION_get>
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	69 f4       	brne	.+26     	; 0x1980 <main+0x13a>
					score = score + TIMER_stop();
    1966:	0e 94 4f 09 	call	0x129e	; 0x129e <TIMER_stop>
    196a:	e8 0e       	add	r14, r24
    196c:	f9 1e       	adc	r15, r25
					remaining_lives = remaining_lives - 1;
    196e:	01 50       	subi	r16, 0x01	; 1
    1970:	11 09       	sbc	r17, r1
					STATE_OPTION_set(game_pause);
    1972:	83 e0       	ldi	r24, 0x03	; 3
    1974:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
					MENU_print_pause_screen(remaining_lives);
    1978:	c8 01       	movw	r24, r16
    197a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <MENU_print_pause_screen>
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <main+0x150>
					}
					else if (STATE_OPTION_get() == game){
    1980:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <STATE_OPTION_get>
    1984:	82 30       	cpi	r24, 0x02	; 2
    1986:	39 f4       	brne	.+14     	; 0x1996 <main+0x150>
					score = score + TIMER_stop();
    1988:	0e 94 4f 09 	call	0x129e	; 0x129e <TIMER_stop>
    198c:	e8 0e       	add	r14, r24
    198e:	f9 1e       	adc	r15, r25
					STATE_OPTION_set(game_over);
    1990:	84 e0       	ldi	r24, 0x04	; 4
    1992:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	97 e1       	ldi	r25, 0x17	; 23
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <main+0x154>
    199e:	00 c0       	rjmp	.+0      	; 0x19a0 <main+0x15a>
    19a0:	00 00       	nop
    19a2:	7f cf       	rjmp	.-258    	; 0x18a2 <main+0x5c>

000019a4 <contrast_low_func>:
#include <string.h>
#include <util/delay.h>

menu_item_info_t main_menu, play_game, highscores, settings, buzzify, mario, starwars, stop, normal_speed, fast_speed, clear_highscores, contrast_level, invert_screen, contrast_low, contrast_medium, contrast_high;

void contrast_low_func(){ OLED_set_contrast( LOW_CONTRAST ); }
    19a4:	80 e1       	ldi	r24, 0x10	; 16
    19a6:	0e 94 b4 08 	call	0x1168	; 0x1168 <OLED_set_contrast>
    19aa:	08 95       	ret

000019ac <contrast_medium_func>:
void contrast_medium_func(){ OLED_set_contrast( MEDIUM_CONTRAST ); }
    19ac:	80 e5       	ldi	r24, 0x50	; 80
    19ae:	0e 94 b4 08 	call	0x1168	; 0x1168 <OLED_set_contrast>
    19b2:	08 95       	ret

000019b4 <contrast_high_func>:
void contrast_high_func(){ OLED_set_contrast( HIGH_CONTRAST ); }
    19b4:	80 ef       	ldi	r24, 0xF0	; 240
    19b6:	0e 94 b4 08 	call	0x1168	; 0x1168 <OLED_set_contrast>
    19ba:	08 95       	ret

000019bc <normal_speed_func>:
void normal_speed_func(){ STATE_OPTION_set_speed(1); STATE_OPTION_set(game_init); }
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <STATE_OPTION_set_speed>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
    19ca:	08 95       	ret

000019cc <fast_speed_func>:
void fast_speed_func(){ STATE_OPTION_set_speed(2); STATE_OPTION_set(game_init); }
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <STATE_OPTION_set_speed>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <STATE_OPTION_set>
    19da:	08 95       	ret

000019dc <play_mario_func>:
void play_mario_func(){ BUZZ_start_song(0); }
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 07 05 	call	0xa0e	; 0xa0e <BUZZ_start_song>
    19e4:	08 95       	ret

000019e6 <play_sw_func>:
void play_sw_func(){ BUZZ_start_song(1); }
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 07 05 	call	0xa0e	; 0xa0e <BUZZ_start_song>
    19ee:	08 95       	ret

000019f0 <stop_music_func>:
void stop_music_func(){ BUZZ_stop_song(); }
    19f0:	0e 94 bb 04 	call	0x976	; 0x976 <BUZZ_stop_song>
    19f4:	08 95       	ret

000019f6 <MENU_highlight_item>:
	}
}


void MENU_highlight_item( void )
{
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
	for (int i = 1; i < current_menu->child_num + 1; i++){
    19fe:	e0 91 f0 03 	lds	r30, 0x03F0
    1a02:	f0 91 f1 03 	lds	r31, 0x03F1
    1a06:	82 89       	ldd	r24, Z+18	; 0x12
    1a08:	93 89       	ldd	r25, Z+19	; 0x13
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	02 97       	sbiw	r24, 0x02	; 2
    1a0e:	cc f0       	brlt	.+50     	; 0x1a42 <MENU_highlight_item+0x4c>
    1a10:	c1 e0       	ldi	r28, 0x01	; 1
    1a12:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i, 0);
		OLED_printf("  ");
    1a14:	02 e9       	ldi	r16, 0x92	; 146
    1a16:	12 e0       	ldi	r17, 0x02	; 2


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
		OLED_pos(i, 0);
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	8c 2f       	mov	r24, r28
    1a1c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
		OLED_printf("  ");
    1a20:	1f 93       	push	r17
    1a22:	0f 93       	push	r16
    1a24:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
}


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
    1a28:	21 96       	adiw	r28, 0x01	; 1
    1a2a:	e0 91 f0 03 	lds	r30, 0x03F0
    1a2e:	f0 91 f1 03 	lds	r31, 0x03F1
    1a32:	82 89       	ldd	r24, Z+18	; 0x12
    1a34:	93 89       	ldd	r25, Z+19	; 0x13
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	c8 17       	cp	r28, r24
    1a3e:	d9 07       	cpc	r29, r25
    1a40:	5c f3       	brlt	.-42     	; 0x1a18 <MENU_highlight_item+0x22>
		OLED_pos(i, 0);
		OLED_printf("  ");
	}
	
	OLED_pos(line, 0);
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	80 91 ee 03 	lds	r24, 0x03EE
    1a48:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_print_arrow();
    1a4c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <OLED_print_arrow>
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <MENU_print_menu>:
	MENU_highlight_item();
}


void MENU_print_menu( void )
{
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
	OLED_reset();
    1a62:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
	OLED_printf("%s",current_menu->name);
    1a66:	e0 91 f0 03 	lds	r30, 0x03F0
    1a6a:	f0 91 f1 03 	lds	r31, 0x03F1
    1a6e:	81 81       	ldd	r24, Z+1	; 0x01
    1a70:	8f 93       	push	r24
    1a72:	80 81       	ld	r24, Z
    1a74:	8f 93       	push	r24
    1a76:	88 ed       	ldi	r24, 0xD8	; 216
    1a78:	92 e0       	ldi	r25, 0x02	; 2
    1a7a:	9f 93       	push	r25
    1a7c:	8f 93       	push	r24
    1a7e:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
	if (current_child!= NULL){
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	80 91 f2 03 	lds	r24, 0x03F2
    1a8e:	90 91 f3 03 	lds	r25, 0x03F3
    1a92:	89 2b       	or	r24, r25
    1a94:	11 f0       	breq	.+4      	; 0x1a9a <MENU_print_menu+0x40>
		MENU_highlight_item();
    1a96:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MENU_highlight_item>
	}
	for (int i = 0; i < current_menu->child_num; i++){
    1a9a:	e0 91 f0 03 	lds	r30, 0x03F0
    1a9e:	f0 91 f1 03 	lds	r31, 0x03F1
    1aa2:	82 89       	ldd	r24, Z+18	; 0x12
    1aa4:	93 89       	ldd	r25, Z+19	; 0x13
    1aa6:	18 16       	cp	r1, r24
    1aa8:	19 06       	cpc	r1, r25
    1aaa:	7c f5       	brge	.+94     	; 0x1b0a <MENU_print_menu+0xb0>
    1aac:	c0 e0       	ldi	r28, 0x00	; 0
    1aae:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
    1ab0:	08 ed       	ldi	r16, 0xD8	; 216
    1ab2:	12 e0       	ldi	r17, 0x02	; 2
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
		OLED_pos(i + 1, 10);
    1ab4:	6a e0       	ldi	r22, 0x0A	; 10
    1ab6:	8c 2f       	mov	r24, r28
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
		OLED_goto_column(10);
    1abe:	8a e0       	ldi	r24, 0x0A	; 10
    1ac0:	0e 94 b0 07 	call	0xf60	; 0xf60 <OLED_goto_column>
		OLED_printf("%s", current_menu->child[i]->name);
    1ac4:	80 91 f0 03 	lds	r24, 0x03F0
    1ac8:	90 91 f1 03 	lds	r25, 0x03F1
    1acc:	fe 01       	movw	r30, r28
    1ace:	32 96       	adiw	r30, 0x02	; 2
    1ad0:	ee 0f       	add	r30, r30
    1ad2:	ff 1f       	adc	r31, r31
    1ad4:	e8 0f       	add	r30, r24
    1ad6:	f9 1f       	adc	r31, r25
    1ad8:	01 90       	ld	r0, Z+
    1ada:	f0 81       	ld	r31, Z
    1adc:	e0 2d       	mov	r30, r0
    1ade:	81 81       	ldd	r24, Z+1	; 0x01
    1ae0:	8f 93       	push	r24
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 93       	push	r24
    1ae6:	1f 93       	push	r17
    1ae8:	0f 93       	push	r16
    1aea:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
	OLED_reset();
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
    1aee:	21 96       	adiw	r28, 0x01	; 1
    1af0:	e0 91 f0 03 	lds	r30, 0x03F0
    1af4:	f0 91 f1 03 	lds	r31, 0x03F1
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	82 89       	ldd	r24, Z+18	; 0x12
    1b02:	93 89       	ldd	r25, Z+19	; 0x13
    1b04:	c8 17       	cp	r28, r24
    1b06:	d9 07       	cpc	r29, r25
    1b08:	ac f2       	brlt	.-86     	; 0x1ab4 <MENU_print_menu+0x5a>
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
	}
}
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	08 95       	ret

00001b14 <MENU_start_menu>:
	MENU_start_menu();
}

void MENU_start_menu( void )
{
	current_menu = &main_menu;
    1b14:	82 e6       	ldi	r24, 0x62	; 98
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	90 93 f1 03 	sts	0x03F1, r25
    1b1c:	80 93 f0 03 	sts	0x03F0, r24
	current_child = main_menu.child[0];
    1b20:	80 91 66 02 	lds	r24, 0x0266
    1b24:	90 91 67 02 	lds	r25, 0x0267
    1b28:	90 93 f3 03 	sts	0x03F3, r25
    1b2c:	80 93 f2 03 	sts	0x03F2, r24
	line = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	90 93 ef 03 	sts	0x03EF, r25
    1b38:	80 93 ee 03 	sts	0x03EE, r24
	MENU_print_menu();
    1b3c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <MENU_print_menu>
	MENU_highlight_item();
    1b40:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MENU_highlight_item>
    1b44:	08 95       	ret

00001b46 <MENU_init>:
int line;


void MENU_init( void )
{
	OLED_init();
    1b46:	0e 94 24 08 	call	0x1048	; 0x1048 <OLED_init>
	BUZZ_init();
    1b4a:	0e 94 a6 04 	call	0x94c	; 0x94c <BUZZ_init>
	MENU_start_menu();
    1b4e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <MENU_start_menu>
    1b52:	08 95       	ret

00001b54 <MENU_navigate>:



void MENU_navigate( void )
{
	switch (JOY_get_direction()){
    1b54:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	39 f1       	breq	.+78     	; 0x1baa <MENU_navigate+0x56>
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <MENU_navigate+0xe>
    1b60:	47 c0       	rjmp	.+142    	; 0x1bf0 <MENU_navigate+0x9c>
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <MENU_navigate+0x14>
    1b66:	69 c0       	rjmp	.+210    	; 0x1c3a <MENU_navigate+0xe6>
		case LEFT:
			while(JOY_get_direction() == LEFT){}
    1b68:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	e1 f3       	breq	.-8      	; 0x1b68 <MENU_navigate+0x14>
			if (current_menu->parent != NULL){
    1b70:	e0 91 f0 03 	lds	r30, 0x03F0
    1b74:	f0 91 f1 03 	lds	r31, 0x03F1
    1b78:	02 80       	ldd	r0, Z+2	; 0x02
    1b7a:	f3 81       	ldd	r31, Z+3	; 0x03
    1b7c:	e0 2d       	mov	r30, r0
    1b7e:	30 97       	sbiw	r30, 0x00	; 0
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <MENU_navigate+0x30>
    1b82:	5b c0       	rjmp	.+182    	; 0x1c3a <MENU_navigate+0xe6>
				line = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	90 93 ef 03 	sts	0x03EF, r25
    1b8c:	80 93 ee 03 	sts	0x03EE, r24
				current_menu = current_menu->parent;
    1b90:	f0 93 f1 03 	sts	0x03F1, r31
    1b94:	e0 93 f0 03 	sts	0x03F0, r30
				current_child = current_menu->child[0];
    1b98:	84 81       	ldd	r24, Z+4	; 0x04
    1b9a:	95 81       	ldd	r25, Z+5	; 0x05
    1b9c:	90 93 f3 03 	sts	0x03F3, r25
    1ba0:	80 93 f2 03 	sts	0x03F2, r24
				MENU_print_menu();
    1ba4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <MENU_print_menu>
    1ba8:	08 95       	ret
			}
			break;
		case UP:
			while(JOY_get_direction() == UP){}
    1baa:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    1bae:	83 30       	cpi	r24, 0x03	; 3
    1bb0:	e1 f3       	breq	.-8      	; 0x1baa <MENU_navigate+0x56>
			if (line > 1){
    1bb2:	80 91 ee 03 	lds	r24, 0x03EE
    1bb6:	90 91 ef 03 	lds	r25, 0x03EF
    1bba:	82 30       	cpi	r24, 0x02	; 2
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	ec f1       	brlt	.+122    	; 0x1c3a <MENU_navigate+0xe6>
				line = line - 1;
    1bc0:	9c 01       	movw	r18, r24
    1bc2:	21 50       	subi	r18, 0x01	; 1
    1bc4:	31 09       	sbc	r19, r1
    1bc6:	30 93 ef 03 	sts	0x03EF, r19
    1bca:	20 93 ee 03 	sts	0x03EE, r18
				current_child = current_menu->child[line - 1];
    1bce:	e0 91 f0 03 	lds	r30, 0x03F0
    1bd2:	f0 91 f1 03 	lds	r31, 0x03F1
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	e8 0f       	add	r30, r24
    1bdc:	f9 1f       	adc	r31, r25
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	90 93 f3 03 	sts	0x03F3, r25
    1be6:	80 93 f2 03 	sts	0x03F2, r24
				MENU_highlight_item();
    1bea:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MENU_highlight_item>
    1bee:	08 95       	ret
			}
			break;
		case DOWN:
			while(JOY_get_direction() == DOWN){}
    1bf0:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	e1 f3       	breq	.-8      	; 0x1bf0 <MENU_navigate+0x9c>
			if (line < current_menu->child_num){
    1bf8:	e0 91 f0 03 	lds	r30, 0x03F0
    1bfc:	f0 91 f1 03 	lds	r31, 0x03F1
    1c00:	80 91 ee 03 	lds	r24, 0x03EE
    1c04:	90 91 ef 03 	lds	r25, 0x03EF
    1c08:	22 89       	ldd	r18, Z+18	; 0x12
    1c0a:	33 89       	ldd	r19, Z+19	; 0x13
    1c0c:	82 17       	cp	r24, r18
    1c0e:	93 07       	cpc	r25, r19
    1c10:	a4 f4       	brge	.+40     	; 0x1c3a <MENU_navigate+0xe6>
				line = line + 1;
    1c12:	9c 01       	movw	r18, r24
    1c14:	2f 5f       	subi	r18, 0xFF	; 255
    1c16:	3f 4f       	sbci	r19, 0xFF	; 255
    1c18:	30 93 ef 03 	sts	0x03EF, r19
    1c1c:	20 93 ee 03 	sts	0x03EE, r18
				current_child = current_menu->child[line - 1];
    1c20:	02 96       	adiw	r24, 0x02	; 2
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	e8 0f       	add	r30, r24
    1c28:	f9 1f       	adc	r31, r25
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	90 93 f3 03 	sts	0x03F3, r25
    1c32:	80 93 f2 03 	sts	0x03F2, r24
				MENU_highlight_item();
    1c36:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MENU_highlight_item>
    1c3a:	08 95       	ret

00001c3c <MENU_print_pause_screen>:
	OLED_pos(line, 0);
	OLED_print_arrow();
}

void MENU_print_pause_screen(int remaining_lives)
{
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	c8 2f       	mov	r28, r24
    1c42:	d9 2f       	mov	r29, r25
	OLED_reset();
    1c44:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
	OLED_pos(3, 10);
    1c48:	6a e0       	ldi	r22, 0x0A	; 10
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_printf("You have %d lives left", remaining_lives);
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	8b ed       	ldi	r24, 0xDB	; 219
    1c56:	92 e0       	ldi	r25, 0x02	; 2
    1c58:	9f 93       	push	r25
    1c5a:	8f 93       	push	r24
    1c5c:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>

	OLED_pos(5, 10);
    1c60:	6a e0       	ldi	r22, 0x0A	; 10
    1c62:	85 e0       	ldi	r24, 0x05	; 5
    1c64:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_printf("Press joystick");
    1c68:	82 ef       	ldi	r24, 0xF2	; 242
    1c6a:	92 e0       	ldi	r25, 0x02	; 2
    1c6c:	9f 93       	push	r25
    1c6e:	8f 93       	push	r24
    1c70:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0

}
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <MENU_print_game_screen>:

void MENU_print_game_screen( void )
{
	OLED_reset();
    1c86:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
	OLED_pos(3, 30);
    1c8a:	6e e1       	ldi	r22, 0x1E	; 30
    1c8c:	83 e0       	ldi	r24, 0x03	; 3
    1c8e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_printf("Play game :D");
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	93 e0       	ldi	r25, 0x03	; 3
    1c96:	9f 93       	push	r25
    1c98:	8f 93       	push	r24
    1c9a:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	08 95       	ret

00001ca4 <MENU_print_game_over_screen>:
}

void MENU_print_game_over_screen(int score)
{
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	c8 2f       	mov	r28, r24
    1caa:	d9 2f       	mov	r29, r25
	OLED_reset();
    1cac:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
	OLED_pos(3, 35);
    1cb0:	63 e2       	ldi	r22, 0x23	; 35
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_printf("Game over...");
    1cb8:	2e e0       	ldi	r18, 0x0E	; 14
    1cba:	33 e0       	ldi	r19, 0x03	; 3
    1cbc:	3f 93       	push	r19
    1cbe:	2f 93       	push	r18
    1cc0:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
	OLED_pos(4, 10);
    1cc4:	6a e0       	ldi	r22, 0x0A	; 10
    1cc6:	84 e0       	ldi	r24, 0x04	; 4
    1cc8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_printf("You lasted %d seconds", score);
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	8b e1       	ldi	r24, 0x1B	; 27
    1cd2:	93 e0       	ldi	r25, 0x03	; 3
    1cd4:	9f 93       	push	r25
    1cd6:	8f 93       	push	r24
    1cd8:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	08 95       	ret

00001cee <MENU_print_cleared_highscores>:

void MENU_print_cleared_highscores( void )
{
	OLED_reset();
    1cee:	0e 94 18 08 	call	0x1030	; 0x1030 <OLED_reset>
	OLED_pos(3, 15);
    1cf2:	6f e0       	ldi	r22, 0x0F	; 15
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <OLED_pos>
	OLED_printf("Highscores cleared");
    1cfa:	81 e3       	ldi	r24, 0x31	; 49
    1cfc:	93 e0       	ldi	r25, 0x03	; 3
    1cfe:	9f 93       	push	r25
    1d00:	8f 93       	push	r24
    1d02:	0e 94 de 08 	call	0x11bc	; 0x11bc <OLED_printf>
    1d06:	2f ef       	ldi	r18, 0xFF	; 255
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	9d e1       	ldi	r25, 0x1D	; 29
    1d0c:	21 50       	subi	r18, 0x01	; 1
    1d0e:	80 40       	sbci	r24, 0x00	; 0
    1d10:	90 40       	sbci	r25, 0x00	; 0
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <MENU_print_cleared_highscores+0x1e>
    1d14:	00 c0       	rjmp	.+0      	; 0x1d16 <MENU_print_cleared_highscores+0x28>
    1d16:	00 00       	nop
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	08 95       	ret

00001d1e <MENU_select_item>:



void MENU_select_item( void )
{
	if ((JOY_button() || JOY_get_direction() == RIGHT) && current_child!= NULL){
    1d1e:	0e 94 10 07 	call	0xe20	; 0xe20 <JOY_button>
    1d22:	89 2b       	or	r24, r25
    1d24:	29 f4       	brne	.+10     	; 0x1d30 <MENU_select_item+0x12>
    1d26:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <MENU_select_item+0x12>
    1d2e:	4e c0       	rjmp	.+156    	; 0x1dcc <MENU_select_item+0xae>
    1d30:	e0 91 f2 03 	lds	r30, 0x03F2
    1d34:	f0 91 f3 03 	lds	r31, 0x03F3
    1d38:	30 97       	sbiw	r30, 0x00	; 0
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <MENU_select_item+0x20>
    1d3c:	47 c0       	rjmp	.+142    	; 0x1dcc <MENU_select_item+0xae>
		if (current_child->child[0] != NULL){
    1d3e:	84 81       	ldd	r24, Z+4	; 0x04
    1d40:	95 81       	ldd	r25, Z+5	; 0x05
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	89 f0       	breq	.+34     	; 0x1d68 <MENU_select_item+0x4a>
			current_menu = current_child;
    1d46:	f0 93 f1 03 	sts	0x03F1, r31
    1d4a:	e0 93 f0 03 	sts	0x03F0, r30
			current_child = current_child->child[0];
    1d4e:	90 93 f3 03 	sts	0x03F3, r25
    1d52:	80 93 f2 03 	sts	0x03F2, r24
			line = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	90 93 ef 03 	sts	0x03EF, r25
    1d5e:	80 93 ee 03 	sts	0x03EE, r24
			MENU_print_menu();
    1d62:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <MENU_print_menu>
    1d66:	2a c0       	rjmp	.+84     	; 0x1dbc <MENU_select_item+0x9e>
		}
		else if (current_child->functionPtr != NULL){
    1d68:	04 88       	ldd	r0, Z+20	; 0x14
    1d6a:	f5 89       	ldd	r31, Z+21	; 0x15
    1d6c:	e0 2d       	mov	r30, r0
    1d6e:	30 97       	sbiw	r30, 0x00	; 0
    1d70:	29 f1       	breq	.+74     	; 0x1dbc <MENU_select_item+0x9e>
			current_child->functionPtr();
    1d72:	09 95       	icall
			if(current_child == &clear_highscores){
    1d74:	80 91 f2 03 	lds	r24, 0x03F2
    1d78:	90 91 f3 03 	lds	r25, 0x03F3
    1d7c:	21 e0       	ldi	r18, 0x01	; 1
    1d7e:	86 38       	cpi	r24, 0x86	; 134
    1d80:	92 07       	cpc	r25, r18
    1d82:	29 f4       	brne	.+10     	; 0x1d8e <MENU_select_item+0x70>
				MENU_print_cleared_highscores();
    1d84:	0e 94 77 0e 	call	0x1cee	; 0x1cee <MENU_print_cleared_highscores>
				MENU_print_menu();
    1d88:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <MENU_print_menu>
    1d8c:	17 c0       	rjmp	.+46     	; 0x1dbc <MENU_select_item+0x9e>
			}
			else if(current_child == &highscores){
    1d8e:	86 53       	subi	r24, 0x36	; 54
    1d90:	92 40       	sbci	r25, 0x02	; 2
    1d92:	a1 f4       	brne	.+40     	; 0x1dbc <MENU_select_item+0x9e>
				current_menu = current_child;
    1d94:	86 e3       	ldi	r24, 0x36	; 54
    1d96:	92 e0       	ldi	r25, 0x02	; 2
    1d98:	90 93 f1 03 	sts	0x03F1, r25
    1d9c:	80 93 f0 03 	sts	0x03F0, r24
				current_child = current_child->child[0];
    1da0:	80 91 3a 02 	lds	r24, 0x023A
    1da4:	90 91 3b 02 	lds	r25, 0x023B
    1da8:	90 93 f3 03 	sts	0x03F3, r25
    1dac:	80 93 f2 03 	sts	0x03F2, r24
				line = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	90 93 ef 03 	sts	0x03EF, r25
    1db8:	80 93 ee 03 	sts	0x03EE, r24
			}
		}
		while(JOY_button() || JOY_get_direction() == RIGHT);
    1dbc:	0e 94 10 07 	call	0xe20	; 0xe20 <JOY_button>
    1dc0:	89 2b       	or	r24, r25
    1dc2:	e1 f7       	brne	.-8      	; 0x1dbc <MENU_select_item+0x9e>
    1dc4:	0e 94 83 07 	call	0xf06	; 0xf06 <JOY_get_direction>
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	c1 f3       	breq	.-16     	; 0x1dbc <MENU_select_item+0x9e>
    1dcc:	08 95       	ret

00001dce <STATE_OPTION_set>:
state_t state = menu;
int speed;

void STATE_OPTION_set(state_t new_state)
{
	state = new_state;
    1dce:	80 93 e7 03 	sts	0x03E7, r24
    1dd2:	08 95       	ret

00001dd4 <STATE_OPTION_get>:
}

state_t STATE_OPTION_get(void)
{
	return state;
}
    1dd4:	80 91 e7 03 	lds	r24, 0x03E7
    1dd8:	08 95       	ret

00001dda <STATE_OPTION_set_speed>:

void STATE_OPTION_set_speed(int new_speed)
{
	speed = new_speed;
    1dda:	90 93 f5 03 	sts	0x03F5, r25
    1dde:	80 93 f4 03 	sts	0x03F4, r24
    1de2:	08 95       	ret

00001de4 <STATE_OPTION_get_speed>:
}

int STATE_OPTION_get_speed(void)
{
	return speed;
    1de4:	80 91 f4 03 	lds	r24, 0x03F4
    1de8:	90 91 f5 03 	lds	r25, 0x03F5
    1dec:	08 95       	ret

00001dee <__cmpsf2>:
    1dee:	97 d0       	rcall	.+302    	; 0x1f1e <__fp_cmp>
    1df0:	08 f4       	brcc	.+2      	; 0x1df4 <__cmpsf2+0x6>
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	08 95       	ret

00001df6 <__divsf3>:
    1df6:	0c d0       	rcall	.+24     	; 0x1e10 <__divsf3x>
    1df8:	cd c0       	rjmp	.+410    	; 0x1f94 <__fp_round>
    1dfa:	c5 d0       	rcall	.+394    	; 0x1f86 <__fp_pscB>
    1dfc:	40 f0       	brcs	.+16     	; 0x1e0e <__divsf3+0x18>
    1dfe:	bc d0       	rcall	.+376    	; 0x1f78 <__fp_pscA>
    1e00:	30 f0       	brcs	.+12     	; 0x1e0e <__divsf3+0x18>
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <__divsf3+0x16>
    1e04:	5f 3f       	cpi	r21, 0xFF	; 255
    1e06:	19 f0       	breq	.+6      	; 0x1e0e <__divsf3+0x18>
    1e08:	ae c0       	rjmp	.+348    	; 0x1f66 <__fp_inf>
    1e0a:	51 11       	cpse	r21, r1
    1e0c:	f7 c0       	rjmp	.+494    	; 0x1ffc <__fp_szero>
    1e0e:	b1 c0       	rjmp	.+354    	; 0x1f72 <__fp_nan>

00001e10 <__divsf3x>:
    1e10:	d2 d0       	rcall	.+420    	; 0x1fb6 <__fp_split3>
    1e12:	98 f3       	brcs	.-26     	; 0x1dfa <__divsf3+0x4>

00001e14 <__divsf3_pse>:
    1e14:	99 23       	and	r25, r25
    1e16:	c9 f3       	breq	.-14     	; 0x1e0a <__divsf3+0x14>
    1e18:	55 23       	and	r21, r21
    1e1a:	b1 f3       	breq	.-20     	; 0x1e08 <__divsf3+0x12>
    1e1c:	95 1b       	sub	r25, r21
    1e1e:	55 0b       	sbc	r21, r21
    1e20:	bb 27       	eor	r27, r27
    1e22:	aa 27       	eor	r26, r26
    1e24:	62 17       	cp	r22, r18
    1e26:	73 07       	cpc	r23, r19
    1e28:	84 07       	cpc	r24, r20
    1e2a:	38 f0       	brcs	.+14     	; 0x1e3a <__divsf3_pse+0x26>
    1e2c:	9f 5f       	subi	r25, 0xFF	; 255
    1e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	44 1f       	adc	r20, r20
    1e36:	aa 1f       	adc	r26, r26
    1e38:	a9 f3       	breq	.-22     	; 0x1e24 <__divsf3_pse+0x10>
    1e3a:	33 d0       	rcall	.+102    	; 0x1ea2 <__divsf3_pse+0x8e>
    1e3c:	0e 2e       	mov	r0, r30
    1e3e:	3a f0       	brmi	.+14     	; 0x1e4e <__divsf3_pse+0x3a>
    1e40:	e0 e8       	ldi	r30, 0x80	; 128
    1e42:	30 d0       	rcall	.+96     	; 0x1ea4 <__divsf3_pse+0x90>
    1e44:	91 50       	subi	r25, 0x01	; 1
    1e46:	50 40       	sbci	r21, 0x00	; 0
    1e48:	e6 95       	lsr	r30
    1e4a:	00 1c       	adc	r0, r0
    1e4c:	ca f7       	brpl	.-14     	; 0x1e40 <__divsf3_pse+0x2c>
    1e4e:	29 d0       	rcall	.+82     	; 0x1ea2 <__divsf3_pse+0x8e>
    1e50:	fe 2f       	mov	r31, r30
    1e52:	27 d0       	rcall	.+78     	; 0x1ea2 <__divsf3_pse+0x8e>
    1e54:	66 0f       	add	r22, r22
    1e56:	77 1f       	adc	r23, r23
    1e58:	88 1f       	adc	r24, r24
    1e5a:	bb 1f       	adc	r27, r27
    1e5c:	26 17       	cp	r18, r22
    1e5e:	37 07       	cpc	r19, r23
    1e60:	48 07       	cpc	r20, r24
    1e62:	ab 07       	cpc	r26, r27
    1e64:	b0 e8       	ldi	r27, 0x80	; 128
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <__divsf3_pse+0x56>
    1e68:	bb 0b       	sbc	r27, r27
    1e6a:	80 2d       	mov	r24, r0
    1e6c:	bf 01       	movw	r22, r30
    1e6e:	ff 27       	eor	r31, r31
    1e70:	93 58       	subi	r25, 0x83	; 131
    1e72:	5f 4f       	sbci	r21, 0xFF	; 255
    1e74:	2a f0       	brmi	.+10     	; 0x1e80 <__divsf3_pse+0x6c>
    1e76:	9e 3f       	cpi	r25, 0xFE	; 254
    1e78:	51 05       	cpc	r21, r1
    1e7a:	68 f0       	brcs	.+26     	; 0x1e96 <__divsf3_pse+0x82>
    1e7c:	74 c0       	rjmp	.+232    	; 0x1f66 <__fp_inf>
    1e7e:	be c0       	rjmp	.+380    	; 0x1ffc <__fp_szero>
    1e80:	5f 3f       	cpi	r21, 0xFF	; 255
    1e82:	ec f3       	brlt	.-6      	; 0x1e7e <__divsf3_pse+0x6a>
    1e84:	98 3e       	cpi	r25, 0xE8	; 232
    1e86:	dc f3       	brlt	.-10     	; 0x1e7e <__divsf3_pse+0x6a>
    1e88:	86 95       	lsr	r24
    1e8a:	77 95       	ror	r23
    1e8c:	67 95       	ror	r22
    1e8e:	b7 95       	ror	r27
    1e90:	f7 95       	ror	r31
    1e92:	9f 5f       	subi	r25, 0xFF	; 255
    1e94:	c9 f7       	brne	.-14     	; 0x1e88 <__divsf3_pse+0x74>
    1e96:	88 0f       	add	r24, r24
    1e98:	91 1d       	adc	r25, r1
    1e9a:	96 95       	lsr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	97 f9       	bld	r25, 7
    1ea0:	08 95       	ret
    1ea2:	e1 e0       	ldi	r30, 0x01	; 1
    1ea4:	66 0f       	add	r22, r22
    1ea6:	77 1f       	adc	r23, r23
    1ea8:	88 1f       	adc	r24, r24
    1eaa:	bb 1f       	adc	r27, r27
    1eac:	62 17       	cp	r22, r18
    1eae:	73 07       	cpc	r23, r19
    1eb0:	84 07       	cpc	r24, r20
    1eb2:	ba 07       	cpc	r27, r26
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <__divsf3_pse+0xaa>
    1eb6:	62 1b       	sub	r22, r18
    1eb8:	73 0b       	sbc	r23, r19
    1eba:	84 0b       	sbc	r24, r20
    1ebc:	ba 0b       	sbc	r27, r26
    1ebe:	ee 1f       	adc	r30, r30
    1ec0:	88 f7       	brcc	.-30     	; 0x1ea4 <__divsf3_pse+0x90>
    1ec2:	e0 95       	com	r30
    1ec4:	08 95       	ret

00001ec6 <__fixunssfsi>:
    1ec6:	7f d0       	rcall	.+254    	; 0x1fc6 <__fp_splitA>
    1ec8:	88 f0       	brcs	.+34     	; 0x1eec <__fixunssfsi+0x26>
    1eca:	9f 57       	subi	r25, 0x7F	; 127
    1ecc:	90 f0       	brcs	.+36     	; 0x1ef2 <__fixunssfsi+0x2c>
    1ece:	b9 2f       	mov	r27, r25
    1ed0:	99 27       	eor	r25, r25
    1ed2:	b7 51       	subi	r27, 0x17	; 23
    1ed4:	a0 f0       	brcs	.+40     	; 0x1efe <__fixunssfsi+0x38>
    1ed6:	d1 f0       	breq	.+52     	; 0x1f0c <__fixunssfsi+0x46>
    1ed8:	66 0f       	add	r22, r22
    1eda:	77 1f       	adc	r23, r23
    1edc:	88 1f       	adc	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	1a f0       	brmi	.+6      	; 0x1ee8 <__fixunssfsi+0x22>
    1ee2:	ba 95       	dec	r27
    1ee4:	c9 f7       	brne	.-14     	; 0x1ed8 <__fixunssfsi+0x12>
    1ee6:	12 c0       	rjmp	.+36     	; 0x1f0c <__fixunssfsi+0x46>
    1ee8:	b1 30       	cpi	r27, 0x01	; 1
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <__fixunssfsi+0x46>
    1eec:	86 d0       	rcall	.+268    	; 0x1ffa <__fp_zero>
    1eee:	b1 e0       	ldi	r27, 0x01	; 1
    1ef0:	08 95       	ret
    1ef2:	83 c0       	rjmp	.+262    	; 0x1ffa <__fp_zero>
    1ef4:	67 2f       	mov	r22, r23
    1ef6:	78 2f       	mov	r23, r24
    1ef8:	88 27       	eor	r24, r24
    1efa:	b8 5f       	subi	r27, 0xF8	; 248
    1efc:	39 f0       	breq	.+14     	; 0x1f0c <__fixunssfsi+0x46>
    1efe:	b9 3f       	cpi	r27, 0xF9	; 249
    1f00:	cc f3       	brlt	.-14     	; 0x1ef4 <__fixunssfsi+0x2e>
    1f02:	86 95       	lsr	r24
    1f04:	77 95       	ror	r23
    1f06:	67 95       	ror	r22
    1f08:	b3 95       	inc	r27
    1f0a:	d9 f7       	brne	.-10     	; 0x1f02 <__fixunssfsi+0x3c>
    1f0c:	3e f4       	brtc	.+14     	; 0x1f1c <__fixunssfsi+0x56>
    1f0e:	90 95       	com	r25
    1f10:	80 95       	com	r24
    1f12:	70 95       	com	r23
    1f14:	61 95       	neg	r22
    1f16:	7f 4f       	sbci	r23, 0xFF	; 255
    1f18:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1c:	08 95       	ret

00001f1e <__fp_cmp>:
    1f1e:	99 0f       	add	r25, r25
    1f20:	00 08       	sbc	r0, r0
    1f22:	55 0f       	add	r21, r21
    1f24:	aa 0b       	sbc	r26, r26
    1f26:	e0 e8       	ldi	r30, 0x80	; 128
    1f28:	fe ef       	ldi	r31, 0xFE	; 254
    1f2a:	16 16       	cp	r1, r22
    1f2c:	17 06       	cpc	r1, r23
    1f2e:	e8 07       	cpc	r30, r24
    1f30:	f9 07       	cpc	r31, r25
    1f32:	c0 f0       	brcs	.+48     	; 0x1f64 <__fp_cmp+0x46>
    1f34:	12 16       	cp	r1, r18
    1f36:	13 06       	cpc	r1, r19
    1f38:	e4 07       	cpc	r30, r20
    1f3a:	f5 07       	cpc	r31, r21
    1f3c:	98 f0       	brcs	.+38     	; 0x1f64 <__fp_cmp+0x46>
    1f3e:	62 1b       	sub	r22, r18
    1f40:	73 0b       	sbc	r23, r19
    1f42:	84 0b       	sbc	r24, r20
    1f44:	95 0b       	sbc	r25, r21
    1f46:	39 f4       	brne	.+14     	; 0x1f56 <__fp_cmp+0x38>
    1f48:	0a 26       	eor	r0, r26
    1f4a:	61 f0       	breq	.+24     	; 0x1f64 <__fp_cmp+0x46>
    1f4c:	23 2b       	or	r18, r19
    1f4e:	24 2b       	or	r18, r20
    1f50:	25 2b       	or	r18, r21
    1f52:	21 f4       	brne	.+8      	; 0x1f5c <__fp_cmp+0x3e>
    1f54:	08 95       	ret
    1f56:	0a 26       	eor	r0, r26
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <__fp_cmp+0x3e>
    1f5a:	a1 40       	sbci	r26, 0x01	; 1
    1f5c:	a6 95       	lsr	r26
    1f5e:	8f ef       	ldi	r24, 0xFF	; 255
    1f60:	81 1d       	adc	r24, r1
    1f62:	81 1d       	adc	r24, r1
    1f64:	08 95       	ret

00001f66 <__fp_inf>:
    1f66:	97 f9       	bld	r25, 7
    1f68:	9f 67       	ori	r25, 0x7F	; 127
    1f6a:	80 e8       	ldi	r24, 0x80	; 128
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	08 95       	ret

00001f72 <__fp_nan>:
    1f72:	9f ef       	ldi	r25, 0xFF	; 255
    1f74:	80 ec       	ldi	r24, 0xC0	; 192
    1f76:	08 95       	ret

00001f78 <__fp_pscA>:
    1f78:	00 24       	eor	r0, r0
    1f7a:	0a 94       	dec	r0
    1f7c:	16 16       	cp	r1, r22
    1f7e:	17 06       	cpc	r1, r23
    1f80:	18 06       	cpc	r1, r24
    1f82:	09 06       	cpc	r0, r25
    1f84:	08 95       	ret

00001f86 <__fp_pscB>:
    1f86:	00 24       	eor	r0, r0
    1f88:	0a 94       	dec	r0
    1f8a:	12 16       	cp	r1, r18
    1f8c:	13 06       	cpc	r1, r19
    1f8e:	14 06       	cpc	r1, r20
    1f90:	05 06       	cpc	r0, r21
    1f92:	08 95       	ret

00001f94 <__fp_round>:
    1f94:	09 2e       	mov	r0, r25
    1f96:	03 94       	inc	r0
    1f98:	00 0c       	add	r0, r0
    1f9a:	11 f4       	brne	.+4      	; 0x1fa0 <__fp_round+0xc>
    1f9c:	88 23       	and	r24, r24
    1f9e:	52 f0       	brmi	.+20     	; 0x1fb4 <__fp_round+0x20>
    1fa0:	bb 0f       	add	r27, r27
    1fa2:	40 f4       	brcc	.+16     	; 0x1fb4 <__fp_round+0x20>
    1fa4:	bf 2b       	or	r27, r31
    1fa6:	11 f4       	brne	.+4      	; 0x1fac <__fp_round+0x18>
    1fa8:	60 ff       	sbrs	r22, 0
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <__fp_round+0x20>
    1fac:	6f 5f       	subi	r22, 0xFF	; 255
    1fae:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb4:	08 95       	ret

00001fb6 <__fp_split3>:
    1fb6:	57 fd       	sbrc	r21, 7
    1fb8:	90 58       	subi	r25, 0x80	; 128
    1fba:	44 0f       	add	r20, r20
    1fbc:	55 1f       	adc	r21, r21
    1fbe:	59 f0       	breq	.+22     	; 0x1fd6 <__fp_splitA+0x10>
    1fc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc2:	71 f0       	breq	.+28     	; 0x1fe0 <__fp_splitA+0x1a>
    1fc4:	47 95       	ror	r20

00001fc6 <__fp_splitA>:
    1fc6:	88 0f       	add	r24, r24
    1fc8:	97 fb       	bst	r25, 7
    1fca:	99 1f       	adc	r25, r25
    1fcc:	61 f0       	breq	.+24     	; 0x1fe6 <__fp_splitA+0x20>
    1fce:	9f 3f       	cpi	r25, 0xFF	; 255
    1fd0:	79 f0       	breq	.+30     	; 0x1ff0 <__fp_splitA+0x2a>
    1fd2:	87 95       	ror	r24
    1fd4:	08 95       	ret
    1fd6:	12 16       	cp	r1, r18
    1fd8:	13 06       	cpc	r1, r19
    1fda:	14 06       	cpc	r1, r20
    1fdc:	55 1f       	adc	r21, r21
    1fde:	f2 cf       	rjmp	.-28     	; 0x1fc4 <__fp_split3+0xe>
    1fe0:	46 95       	lsr	r20
    1fe2:	f1 df       	rcall	.-30     	; 0x1fc6 <__fp_splitA>
    1fe4:	08 c0       	rjmp	.+16     	; 0x1ff6 <__fp_splitA+0x30>
    1fe6:	16 16       	cp	r1, r22
    1fe8:	17 06       	cpc	r1, r23
    1fea:	18 06       	cpc	r1, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	f1 cf       	rjmp	.-30     	; 0x1fd2 <__fp_splitA+0xc>
    1ff0:	86 95       	lsr	r24
    1ff2:	71 05       	cpc	r23, r1
    1ff4:	61 05       	cpc	r22, r1
    1ff6:	08 94       	sec
    1ff8:	08 95       	ret

00001ffa <__fp_zero>:
    1ffa:	e8 94       	clt

00001ffc <__fp_szero>:
    1ffc:	bb 27       	eor	r27, r27
    1ffe:	66 27       	eor	r22, r22
    2000:	77 27       	eor	r23, r23
    2002:	cb 01       	movw	r24, r22
    2004:	97 f9       	bld	r25, 7
    2006:	08 95       	ret

00002008 <__mulsf3>:
    2008:	0b d0       	rcall	.+22     	; 0x2020 <__mulsf3x>
    200a:	c4 cf       	rjmp	.-120    	; 0x1f94 <__fp_round>
    200c:	b5 df       	rcall	.-150    	; 0x1f78 <__fp_pscA>
    200e:	28 f0       	brcs	.+10     	; 0x201a <__mulsf3+0x12>
    2010:	ba df       	rcall	.-140    	; 0x1f86 <__fp_pscB>
    2012:	18 f0       	brcs	.+6      	; 0x201a <__mulsf3+0x12>
    2014:	95 23       	and	r25, r21
    2016:	09 f0       	breq	.+2      	; 0x201a <__mulsf3+0x12>
    2018:	a6 cf       	rjmp	.-180    	; 0x1f66 <__fp_inf>
    201a:	ab cf       	rjmp	.-170    	; 0x1f72 <__fp_nan>
    201c:	11 24       	eor	r1, r1
    201e:	ee cf       	rjmp	.-36     	; 0x1ffc <__fp_szero>

00002020 <__mulsf3x>:
    2020:	ca df       	rcall	.-108    	; 0x1fb6 <__fp_split3>
    2022:	a0 f3       	brcs	.-24     	; 0x200c <__mulsf3+0x4>

00002024 <__mulsf3_pse>:
    2024:	95 9f       	mul	r25, r21
    2026:	d1 f3       	breq	.-12     	; 0x201c <__mulsf3+0x14>
    2028:	95 0f       	add	r25, r21
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	55 1f       	adc	r21, r21
    202e:	62 9f       	mul	r22, r18
    2030:	f0 01       	movw	r30, r0
    2032:	72 9f       	mul	r23, r18
    2034:	bb 27       	eor	r27, r27
    2036:	f0 0d       	add	r31, r0
    2038:	b1 1d       	adc	r27, r1
    203a:	63 9f       	mul	r22, r19
    203c:	aa 27       	eor	r26, r26
    203e:	f0 0d       	add	r31, r0
    2040:	b1 1d       	adc	r27, r1
    2042:	aa 1f       	adc	r26, r26
    2044:	64 9f       	mul	r22, r20
    2046:	66 27       	eor	r22, r22
    2048:	b0 0d       	add	r27, r0
    204a:	a1 1d       	adc	r26, r1
    204c:	66 1f       	adc	r22, r22
    204e:	82 9f       	mul	r24, r18
    2050:	22 27       	eor	r18, r18
    2052:	b0 0d       	add	r27, r0
    2054:	a1 1d       	adc	r26, r1
    2056:	62 1f       	adc	r22, r18
    2058:	73 9f       	mul	r23, r19
    205a:	b0 0d       	add	r27, r0
    205c:	a1 1d       	adc	r26, r1
    205e:	62 1f       	adc	r22, r18
    2060:	83 9f       	mul	r24, r19
    2062:	a0 0d       	add	r26, r0
    2064:	61 1d       	adc	r22, r1
    2066:	22 1f       	adc	r18, r18
    2068:	74 9f       	mul	r23, r20
    206a:	33 27       	eor	r19, r19
    206c:	a0 0d       	add	r26, r0
    206e:	61 1d       	adc	r22, r1
    2070:	23 1f       	adc	r18, r19
    2072:	84 9f       	mul	r24, r20
    2074:	60 0d       	add	r22, r0
    2076:	21 1d       	adc	r18, r1
    2078:	82 2f       	mov	r24, r18
    207a:	76 2f       	mov	r23, r22
    207c:	6a 2f       	mov	r22, r26
    207e:	11 24       	eor	r1, r1
    2080:	9f 57       	subi	r25, 0x7F	; 127
    2082:	50 40       	sbci	r21, 0x00	; 0
    2084:	8a f0       	brmi	.+34     	; 0x20a8 <__mulsf3_pse+0x84>
    2086:	e1 f0       	breq	.+56     	; 0x20c0 <__mulsf3_pse+0x9c>
    2088:	88 23       	and	r24, r24
    208a:	4a f0       	brmi	.+18     	; 0x209e <__mulsf3_pse+0x7a>
    208c:	ee 0f       	add	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	bb 1f       	adc	r27, r27
    2092:	66 1f       	adc	r22, r22
    2094:	77 1f       	adc	r23, r23
    2096:	88 1f       	adc	r24, r24
    2098:	91 50       	subi	r25, 0x01	; 1
    209a:	50 40       	sbci	r21, 0x00	; 0
    209c:	a9 f7       	brne	.-22     	; 0x2088 <__mulsf3_pse+0x64>
    209e:	9e 3f       	cpi	r25, 0xFE	; 254
    20a0:	51 05       	cpc	r21, r1
    20a2:	70 f0       	brcs	.+28     	; 0x20c0 <__mulsf3_pse+0x9c>
    20a4:	60 cf       	rjmp	.-320    	; 0x1f66 <__fp_inf>
    20a6:	aa cf       	rjmp	.-172    	; 0x1ffc <__fp_szero>
    20a8:	5f 3f       	cpi	r21, 0xFF	; 255
    20aa:	ec f3       	brlt	.-6      	; 0x20a6 <__mulsf3_pse+0x82>
    20ac:	98 3e       	cpi	r25, 0xE8	; 232
    20ae:	dc f3       	brlt	.-10     	; 0x20a6 <__mulsf3_pse+0x82>
    20b0:	86 95       	lsr	r24
    20b2:	77 95       	ror	r23
    20b4:	67 95       	ror	r22
    20b6:	b7 95       	ror	r27
    20b8:	f7 95       	ror	r31
    20ba:	e7 95       	ror	r30
    20bc:	9f 5f       	subi	r25, 0xFF	; 255
    20be:	c1 f7       	brne	.-16     	; 0x20b0 <__mulsf3_pse+0x8c>
    20c0:	fe 2b       	or	r31, r30
    20c2:	88 0f       	add	r24, r24
    20c4:	91 1d       	adc	r25, r1
    20c6:	96 95       	lsr	r25
    20c8:	87 95       	ror	r24
    20ca:	97 f9       	bld	r25, 7
    20cc:	08 95       	ret

000020ce <__divmodhi4>:
    20ce:	97 fb       	bst	r25, 7
    20d0:	07 2e       	mov	r0, r23
    20d2:	16 f4       	brtc	.+4      	; 0x20d8 <__divmodhi4+0xa>
    20d4:	00 94       	com	r0
    20d6:	07 d0       	rcall	.+14     	; 0x20e6 <__divmodhi4_neg1>
    20d8:	77 fd       	sbrc	r23, 7
    20da:	09 d0       	rcall	.+18     	; 0x20ee <__divmodhi4_neg2>
    20dc:	0e 94 a5 10 	call	0x214a	; 0x214a <__udivmodhi4>
    20e0:	07 fc       	sbrc	r0, 7
    20e2:	05 d0       	rcall	.+10     	; 0x20ee <__divmodhi4_neg2>
    20e4:	3e f4       	brtc	.+14     	; 0x20f4 <__divmodhi4_exit>

000020e6 <__divmodhi4_neg1>:
    20e6:	90 95       	com	r25
    20e8:	81 95       	neg	r24
    20ea:	9f 4f       	sbci	r25, 0xFF	; 255
    20ec:	08 95       	ret

000020ee <__divmodhi4_neg2>:
    20ee:	70 95       	com	r23
    20f0:	61 95       	neg	r22
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255

000020f4 <__divmodhi4_exit>:
    20f4:	08 95       	ret

000020f6 <__divmodsi4>:
    20f6:	05 2e       	mov	r0, r21
    20f8:	97 fb       	bst	r25, 7
    20fa:	1e f4       	brtc	.+6      	; 0x2102 <__divmodsi4+0xc>
    20fc:	00 94       	com	r0
    20fe:	0e 94 92 10 	call	0x2124	; 0x2124 <__negsi2>
    2102:	57 fd       	sbrc	r21, 7
    2104:	07 d0       	rcall	.+14     	; 0x2114 <__divmodsi4_neg2>
    2106:	0e 94 b9 10 	call	0x2172	; 0x2172 <__udivmodsi4>
    210a:	07 fc       	sbrc	r0, 7
    210c:	03 d0       	rcall	.+6      	; 0x2114 <__divmodsi4_neg2>
    210e:	4e f4       	brtc	.+18     	; 0x2122 <__divmodsi4_exit>
    2110:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__negsi2>

00002114 <__divmodsi4_neg2>:
    2114:	50 95       	com	r21
    2116:	40 95       	com	r20
    2118:	30 95       	com	r19
    211a:	21 95       	neg	r18
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	4f 4f       	sbci	r20, 0xFF	; 255
    2120:	5f 4f       	sbci	r21, 0xFF	; 255

00002122 <__divmodsi4_exit>:
    2122:	08 95       	ret

00002124 <__negsi2>:
    2124:	90 95       	com	r25
    2126:	80 95       	com	r24
    2128:	70 95       	com	r23
    212a:	61 95       	neg	r22
    212c:	7f 4f       	sbci	r23, 0xFF	; 255
    212e:	8f 4f       	sbci	r24, 0xFF	; 255
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	08 95       	ret

00002134 <__muluhisi3>:
    2134:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__umulhisi3>
    2138:	a5 9f       	mul	r26, r21
    213a:	90 0d       	add	r25, r0
    213c:	b4 9f       	mul	r27, r20
    213e:	90 0d       	add	r25, r0
    2140:	a4 9f       	mul	r26, r20
    2142:	80 0d       	add	r24, r0
    2144:	91 1d       	adc	r25, r1
    2146:	11 24       	eor	r1, r1
    2148:	08 95       	ret

0000214a <__udivmodhi4>:
    214a:	aa 1b       	sub	r26, r26
    214c:	bb 1b       	sub	r27, r27
    214e:	51 e1       	ldi	r21, 0x11	; 17
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <__udivmodhi4_ep>

00002152 <__udivmodhi4_loop>:
    2152:	aa 1f       	adc	r26, r26
    2154:	bb 1f       	adc	r27, r27
    2156:	a6 17       	cp	r26, r22
    2158:	b7 07       	cpc	r27, r23
    215a:	10 f0       	brcs	.+4      	; 0x2160 <__udivmodhi4_ep>
    215c:	a6 1b       	sub	r26, r22
    215e:	b7 0b       	sbc	r27, r23

00002160 <__udivmodhi4_ep>:
    2160:	88 1f       	adc	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	5a 95       	dec	r21
    2166:	a9 f7       	brne	.-22     	; 0x2152 <__udivmodhi4_loop>
    2168:	80 95       	com	r24
    216a:	90 95       	com	r25
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	08 95       	ret

00002172 <__udivmodsi4>:
    2172:	a1 e2       	ldi	r26, 0x21	; 33
    2174:	1a 2e       	mov	r1, r26
    2176:	aa 1b       	sub	r26, r26
    2178:	bb 1b       	sub	r27, r27
    217a:	fd 01       	movw	r30, r26
    217c:	0d c0       	rjmp	.+26     	; 0x2198 <__udivmodsi4_ep>

0000217e <__udivmodsi4_loop>:
    217e:	aa 1f       	adc	r26, r26
    2180:	bb 1f       	adc	r27, r27
    2182:	ee 1f       	adc	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	a2 17       	cp	r26, r18
    2188:	b3 07       	cpc	r27, r19
    218a:	e4 07       	cpc	r30, r20
    218c:	f5 07       	cpc	r31, r21
    218e:	20 f0       	brcs	.+8      	; 0x2198 <__udivmodsi4_ep>
    2190:	a2 1b       	sub	r26, r18
    2192:	b3 0b       	sbc	r27, r19
    2194:	e4 0b       	sbc	r30, r20
    2196:	f5 0b       	sbc	r31, r21

00002198 <__udivmodsi4_ep>:
    2198:	66 1f       	adc	r22, r22
    219a:	77 1f       	adc	r23, r23
    219c:	88 1f       	adc	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	1a 94       	dec	r1
    21a2:	69 f7       	brne	.-38     	; 0x217e <__udivmodsi4_loop>
    21a4:	60 95       	com	r22
    21a6:	70 95       	com	r23
    21a8:	80 95       	com	r24
    21aa:	90 95       	com	r25
    21ac:	9b 01       	movw	r18, r22
    21ae:	ac 01       	movw	r20, r24
    21b0:	bd 01       	movw	r22, r26
    21b2:	cf 01       	movw	r24, r30
    21b4:	08 95       	ret

000021b6 <__umulhisi3>:
    21b6:	a2 9f       	mul	r26, r18
    21b8:	b0 01       	movw	r22, r0
    21ba:	b3 9f       	mul	r27, r19
    21bc:	c0 01       	movw	r24, r0
    21be:	a3 9f       	mul	r26, r19
    21c0:	70 0d       	add	r23, r0
    21c2:	81 1d       	adc	r24, r1
    21c4:	11 24       	eor	r1, r1
    21c6:	91 1d       	adc	r25, r1
    21c8:	b2 9f       	mul	r27, r18
    21ca:	70 0d       	add	r23, r0
    21cc:	81 1d       	adc	r24, r1
    21ce:	11 24       	eor	r1, r1
    21d0:	91 1d       	adc	r25, r1
    21d2:	08 95       	ret

000021d4 <fdevopen>:
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	ec 01       	movw	r28, r24
    21de:	8b 01       	movw	r16, r22
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <fdevopen+0x1c>
    21e4:	61 15       	cp	r22, r1
    21e6:	71 05       	cpc	r23, r1
    21e8:	19 f4       	brne	.+6      	; 0x21f0 <fdevopen+0x1c>
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	38 c0       	rjmp	.+112    	; 0x2260 <fdevopen+0x8c>
    21f0:	6e e0       	ldi	r22, 0x0E	; 14
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 34 13 	call	0x2668	; 0x2668 <calloc>
    21fc:	fc 01       	movw	r30, r24
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	a1 f3       	breq	.-24     	; 0x21ea <fdevopen+0x16>
    2202:	80 e8       	ldi	r24, 0x80	; 128
    2204:	83 83       	std	Z+3, r24	; 0x03
    2206:	01 15       	cp	r16, r1
    2208:	11 05       	cpc	r17, r1
    220a:	71 f0       	breq	.+28     	; 0x2228 <fdevopen+0x54>
    220c:	13 87       	std	Z+11, r17	; 0x0b
    220e:	02 87       	std	Z+10, r16	; 0x0a
    2210:	81 e8       	ldi	r24, 0x81	; 129
    2212:	83 83       	std	Z+3, r24	; 0x03
    2214:	80 91 f6 03 	lds	r24, 0x03F6
    2218:	90 91 f7 03 	lds	r25, 0x03F7
    221c:	89 2b       	or	r24, r25
    221e:	21 f4       	brne	.+8      	; 0x2228 <fdevopen+0x54>
    2220:	f0 93 f7 03 	sts	0x03F7, r31
    2224:	e0 93 f6 03 	sts	0x03F6, r30
    2228:	20 97       	sbiw	r28, 0x00	; 0
    222a:	c9 f0       	breq	.+50     	; 0x225e <fdevopen+0x8a>
    222c:	d1 87       	std	Z+9, r29	; 0x09
    222e:	c0 87       	std	Z+8, r28	; 0x08
    2230:	83 81       	ldd	r24, Z+3	; 0x03
    2232:	82 60       	ori	r24, 0x02	; 2
    2234:	83 83       	std	Z+3, r24	; 0x03
    2236:	80 91 f8 03 	lds	r24, 0x03F8
    223a:	90 91 f9 03 	lds	r25, 0x03F9
    223e:	89 2b       	or	r24, r25
    2240:	71 f4       	brne	.+28     	; 0x225e <fdevopen+0x8a>
    2242:	f0 93 f9 03 	sts	0x03F9, r31
    2246:	e0 93 f8 03 	sts	0x03F8, r30
    224a:	80 91 fa 03 	lds	r24, 0x03FA
    224e:	90 91 fb 03 	lds	r25, 0x03FB
    2252:	89 2b       	or	r24, r25
    2254:	21 f4       	brne	.+8      	; 0x225e <fdevopen+0x8a>
    2256:	f0 93 fb 03 	sts	0x03FB, r31
    225a:	e0 93 fa 03 	sts	0x03FA, r30
    225e:	cf 01       	movw	r24, r30
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	1f 91       	pop	r17
    2266:	0f 91       	pop	r16
    2268:	08 95       	ret

0000226a <puts>:
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	e0 91 f8 03 	lds	r30, 0x03F8
    2276:	f0 91 f9 03 	lds	r31, 0x03F9
    227a:	23 81       	ldd	r18, Z+3	; 0x03
    227c:	21 ff       	sbrs	r18, 1
    227e:	1b c0       	rjmp	.+54     	; 0x22b6 <puts+0x4c>
    2280:	ec 01       	movw	r28, r24
    2282:	00 e0       	ldi	r16, 0x00	; 0
    2284:	10 e0       	ldi	r17, 0x00	; 0
    2286:	89 91       	ld	r24, Y+
    2288:	60 91 f8 03 	lds	r22, 0x03F8
    228c:	70 91 f9 03 	lds	r23, 0x03F9
    2290:	db 01       	movw	r26, r22
    2292:	18 96       	adiw	r26, 0x08	; 8
    2294:	ed 91       	ld	r30, X+
    2296:	fc 91       	ld	r31, X
    2298:	19 97       	sbiw	r26, 0x09	; 9
    229a:	88 23       	and	r24, r24
    229c:	31 f0       	breq	.+12     	; 0x22aa <puts+0x40>
    229e:	09 95       	icall
    22a0:	89 2b       	or	r24, r25
    22a2:	89 f3       	breq	.-30     	; 0x2286 <puts+0x1c>
    22a4:	0f ef       	ldi	r16, 0xFF	; 255
    22a6:	1f ef       	ldi	r17, 0xFF	; 255
    22a8:	ee cf       	rjmp	.-36     	; 0x2286 <puts+0x1c>
    22aa:	8a e0       	ldi	r24, 0x0A	; 10
    22ac:	09 95       	icall
    22ae:	89 2b       	or	r24, r25
    22b0:	11 f4       	brne	.+4      	; 0x22b6 <puts+0x4c>
    22b2:	c8 01       	movw	r24, r16
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <puts+0x50>
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	08 95       	ret

000022c4 <vfprintf>:
    22c4:	ac e0       	ldi	r26, 0x0C	; 12
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e8 e6       	ldi	r30, 0x68	; 104
    22ca:	f1 e1       	ldi	r31, 0x11	; 17
    22cc:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <__prologue_saves__>
    22d0:	7c 01       	movw	r14, r24
    22d2:	6b 01       	movw	r12, r22
    22d4:	8a 01       	movw	r16, r20
    22d6:	fc 01       	movw	r30, r24
    22d8:	17 82       	std	Z+7, r1	; 0x07
    22da:	16 82       	std	Z+6, r1	; 0x06
    22dc:	83 81       	ldd	r24, Z+3	; 0x03
    22de:	81 ff       	sbrs	r24, 1
    22e0:	bd c1       	rjmp	.+890    	; 0x265c <vfprintf+0x398>
    22e2:	ce 01       	movw	r24, r28
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	4c 01       	movw	r8, r24
    22e8:	f7 01       	movw	r30, r14
    22ea:	93 81       	ldd	r25, Z+3	; 0x03
    22ec:	f6 01       	movw	r30, r12
    22ee:	93 fd       	sbrc	r25, 3
    22f0:	85 91       	lpm	r24, Z+
    22f2:	93 ff       	sbrs	r25, 3
    22f4:	81 91       	ld	r24, Z+
    22f6:	6f 01       	movw	r12, r30
    22f8:	88 23       	and	r24, r24
    22fa:	09 f4       	brne	.+2      	; 0x22fe <vfprintf+0x3a>
    22fc:	ab c1       	rjmp	.+854    	; 0x2654 <vfprintf+0x390>
    22fe:	85 32       	cpi	r24, 0x25	; 37
    2300:	39 f4       	brne	.+14     	; 0x2310 <vfprintf+0x4c>
    2302:	93 fd       	sbrc	r25, 3
    2304:	85 91       	lpm	r24, Z+
    2306:	93 ff       	sbrs	r25, 3
    2308:	81 91       	ld	r24, Z+
    230a:	6f 01       	movw	r12, r30
    230c:	85 32       	cpi	r24, 0x25	; 37
    230e:	29 f4       	brne	.+10     	; 0x231a <vfprintf+0x56>
    2310:	b7 01       	movw	r22, r14
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    2318:	e7 cf       	rjmp	.-50     	; 0x22e8 <vfprintf+0x24>
    231a:	51 2c       	mov	r5, r1
    231c:	31 2c       	mov	r3, r1
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	20 32       	cpi	r18, 0x20	; 32
    2322:	a0 f4       	brcc	.+40     	; 0x234c <vfprintf+0x88>
    2324:	8b 32       	cpi	r24, 0x2B	; 43
    2326:	69 f0       	breq	.+26     	; 0x2342 <vfprintf+0x7e>
    2328:	30 f4       	brcc	.+12     	; 0x2336 <vfprintf+0x72>
    232a:	80 32       	cpi	r24, 0x20	; 32
    232c:	59 f0       	breq	.+22     	; 0x2344 <vfprintf+0x80>
    232e:	83 32       	cpi	r24, 0x23	; 35
    2330:	69 f4       	brne	.+26     	; 0x234c <vfprintf+0x88>
    2332:	20 61       	ori	r18, 0x10	; 16
    2334:	2c c0       	rjmp	.+88     	; 0x238e <vfprintf+0xca>
    2336:	8d 32       	cpi	r24, 0x2D	; 45
    2338:	39 f0       	breq	.+14     	; 0x2348 <vfprintf+0x84>
    233a:	80 33       	cpi	r24, 0x30	; 48
    233c:	39 f4       	brne	.+14     	; 0x234c <vfprintf+0x88>
    233e:	21 60       	ori	r18, 0x01	; 1
    2340:	26 c0       	rjmp	.+76     	; 0x238e <vfprintf+0xca>
    2342:	22 60       	ori	r18, 0x02	; 2
    2344:	24 60       	ori	r18, 0x04	; 4
    2346:	23 c0       	rjmp	.+70     	; 0x238e <vfprintf+0xca>
    2348:	28 60       	ori	r18, 0x08	; 8
    234a:	21 c0       	rjmp	.+66     	; 0x238e <vfprintf+0xca>
    234c:	27 fd       	sbrc	r18, 7
    234e:	27 c0       	rjmp	.+78     	; 0x239e <vfprintf+0xda>
    2350:	30 ed       	ldi	r19, 0xD0	; 208
    2352:	38 0f       	add	r19, r24
    2354:	3a 30       	cpi	r19, 0x0A	; 10
    2356:	78 f4       	brcc	.+30     	; 0x2376 <vfprintf+0xb2>
    2358:	26 ff       	sbrs	r18, 6
    235a:	06 c0       	rjmp	.+12     	; 0x2368 <vfprintf+0xa4>
    235c:	fa e0       	ldi	r31, 0x0A	; 10
    235e:	5f 9e       	mul	r5, r31
    2360:	30 0d       	add	r19, r0
    2362:	11 24       	eor	r1, r1
    2364:	53 2e       	mov	r5, r19
    2366:	13 c0       	rjmp	.+38     	; 0x238e <vfprintf+0xca>
    2368:	8a e0       	ldi	r24, 0x0A	; 10
    236a:	38 9e       	mul	r3, r24
    236c:	30 0d       	add	r19, r0
    236e:	11 24       	eor	r1, r1
    2370:	33 2e       	mov	r3, r19
    2372:	20 62       	ori	r18, 0x20	; 32
    2374:	0c c0       	rjmp	.+24     	; 0x238e <vfprintf+0xca>
    2376:	8e 32       	cpi	r24, 0x2E	; 46
    2378:	21 f4       	brne	.+8      	; 0x2382 <vfprintf+0xbe>
    237a:	26 fd       	sbrc	r18, 6
    237c:	6b c1       	rjmp	.+726    	; 0x2654 <vfprintf+0x390>
    237e:	20 64       	ori	r18, 0x40	; 64
    2380:	06 c0       	rjmp	.+12     	; 0x238e <vfprintf+0xca>
    2382:	8c 36       	cpi	r24, 0x6C	; 108
    2384:	11 f4       	brne	.+4      	; 0x238a <vfprintf+0xc6>
    2386:	20 68       	ori	r18, 0x80	; 128
    2388:	02 c0       	rjmp	.+4      	; 0x238e <vfprintf+0xca>
    238a:	88 36       	cpi	r24, 0x68	; 104
    238c:	41 f4       	brne	.+16     	; 0x239e <vfprintf+0xda>
    238e:	f6 01       	movw	r30, r12
    2390:	93 fd       	sbrc	r25, 3
    2392:	85 91       	lpm	r24, Z+
    2394:	93 ff       	sbrs	r25, 3
    2396:	81 91       	ld	r24, Z+
    2398:	6f 01       	movw	r12, r30
    239a:	81 11       	cpse	r24, r1
    239c:	c1 cf       	rjmp	.-126    	; 0x2320 <vfprintf+0x5c>
    239e:	98 2f       	mov	r25, r24
    23a0:	9f 7d       	andi	r25, 0xDF	; 223
    23a2:	95 54       	subi	r25, 0x45	; 69
    23a4:	93 30       	cpi	r25, 0x03	; 3
    23a6:	28 f4       	brcc	.+10     	; 0x23b2 <vfprintf+0xee>
    23a8:	0c 5f       	subi	r16, 0xFC	; 252
    23aa:	1f 4f       	sbci	r17, 0xFF	; 255
    23ac:	ff e3       	ldi	r31, 0x3F	; 63
    23ae:	f9 83       	std	Y+1, r31	; 0x01
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <vfprintf+0x108>
    23b2:	83 36       	cpi	r24, 0x63	; 99
    23b4:	31 f0       	breq	.+12     	; 0x23c2 <vfprintf+0xfe>
    23b6:	83 37       	cpi	r24, 0x73	; 115
    23b8:	71 f0       	breq	.+28     	; 0x23d6 <vfprintf+0x112>
    23ba:	83 35       	cpi	r24, 0x53	; 83
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <vfprintf+0xfc>
    23be:	5b c0       	rjmp	.+182    	; 0x2476 <vfprintf+0x1b2>
    23c0:	22 c0       	rjmp	.+68     	; 0x2406 <vfprintf+0x142>
    23c2:	f8 01       	movw	r30, r16
    23c4:	80 81       	ld	r24, Z
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	0e 5f       	subi	r16, 0xFE	; 254
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	44 24       	eor	r4, r4
    23ce:	43 94       	inc	r4
    23d0:	51 2c       	mov	r5, r1
    23d2:	54 01       	movw	r10, r8
    23d4:	15 c0       	rjmp	.+42     	; 0x2400 <vfprintf+0x13c>
    23d6:	38 01       	movw	r6, r16
    23d8:	f2 e0       	ldi	r31, 0x02	; 2
    23da:	6f 0e       	add	r6, r31
    23dc:	71 1c       	adc	r7, r1
    23de:	f8 01       	movw	r30, r16
    23e0:	a0 80       	ld	r10, Z
    23e2:	b1 80       	ldd	r11, Z+1	; 0x01
    23e4:	26 ff       	sbrs	r18, 6
    23e6:	03 c0       	rjmp	.+6      	; 0x23ee <vfprintf+0x12a>
    23e8:	65 2d       	mov	r22, r5
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <vfprintf+0x12e>
    23ee:	6f ef       	ldi	r22, 0xFF	; 255
    23f0:	7f ef       	ldi	r23, 0xFF	; 255
    23f2:	c5 01       	movw	r24, r10
    23f4:	2c 87       	std	Y+12, r18	; 0x0c
    23f6:	0e 94 89 14 	call	0x2912	; 0x2912 <strnlen>
    23fa:	2c 01       	movw	r4, r24
    23fc:	83 01       	movw	r16, r6
    23fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2400:	2f 77       	andi	r18, 0x7F	; 127
    2402:	22 2e       	mov	r2, r18
    2404:	17 c0       	rjmp	.+46     	; 0x2434 <vfprintf+0x170>
    2406:	38 01       	movw	r6, r16
    2408:	f2 e0       	ldi	r31, 0x02	; 2
    240a:	6f 0e       	add	r6, r31
    240c:	71 1c       	adc	r7, r1
    240e:	f8 01       	movw	r30, r16
    2410:	a0 80       	ld	r10, Z
    2412:	b1 80       	ldd	r11, Z+1	; 0x01
    2414:	26 ff       	sbrs	r18, 6
    2416:	03 c0       	rjmp	.+6      	; 0x241e <vfprintf+0x15a>
    2418:	65 2d       	mov	r22, r5
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <vfprintf+0x15e>
    241e:	6f ef       	ldi	r22, 0xFF	; 255
    2420:	7f ef       	ldi	r23, 0xFF	; 255
    2422:	c5 01       	movw	r24, r10
    2424:	2c 87       	std	Y+12, r18	; 0x0c
    2426:	0e 94 77 14 	call	0x28ee	; 0x28ee <strnlen_P>
    242a:	2c 01       	movw	r4, r24
    242c:	2c 85       	ldd	r18, Y+12	; 0x0c
    242e:	20 68       	ori	r18, 0x80	; 128
    2430:	22 2e       	mov	r2, r18
    2432:	83 01       	movw	r16, r6
    2434:	23 fc       	sbrc	r2, 3
    2436:	1b c0       	rjmp	.+54     	; 0x246e <vfprintf+0x1aa>
    2438:	83 2d       	mov	r24, r3
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	48 16       	cp	r4, r24
    243e:	59 06       	cpc	r5, r25
    2440:	b0 f4       	brcc	.+44     	; 0x246e <vfprintf+0x1aa>
    2442:	b7 01       	movw	r22, r14
    2444:	80 e2       	ldi	r24, 0x20	; 32
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    244c:	3a 94       	dec	r3
    244e:	f4 cf       	rjmp	.-24     	; 0x2438 <vfprintf+0x174>
    2450:	f5 01       	movw	r30, r10
    2452:	27 fc       	sbrc	r2, 7
    2454:	85 91       	lpm	r24, Z+
    2456:	27 fe       	sbrs	r2, 7
    2458:	81 91       	ld	r24, Z+
    245a:	5f 01       	movw	r10, r30
    245c:	b7 01       	movw	r22, r14
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    2464:	31 10       	cpse	r3, r1
    2466:	3a 94       	dec	r3
    2468:	f1 e0       	ldi	r31, 0x01	; 1
    246a:	4f 1a       	sub	r4, r31
    246c:	51 08       	sbc	r5, r1
    246e:	41 14       	cp	r4, r1
    2470:	51 04       	cpc	r5, r1
    2472:	71 f7       	brne	.-36     	; 0x2450 <vfprintf+0x18c>
    2474:	e5 c0       	rjmp	.+458    	; 0x2640 <vfprintf+0x37c>
    2476:	84 36       	cpi	r24, 0x64	; 100
    2478:	11 f0       	breq	.+4      	; 0x247e <vfprintf+0x1ba>
    247a:	89 36       	cpi	r24, 0x69	; 105
    247c:	39 f5       	brne	.+78     	; 0x24cc <vfprintf+0x208>
    247e:	f8 01       	movw	r30, r16
    2480:	27 ff       	sbrs	r18, 7
    2482:	07 c0       	rjmp	.+14     	; 0x2492 <vfprintf+0x1ce>
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	0c 5f       	subi	r16, 0xFC	; 252
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	08 c0       	rjmp	.+16     	; 0x24a2 <vfprintf+0x1de>
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	88 27       	eor	r24, r24
    2498:	77 fd       	sbrc	r23, 7
    249a:	80 95       	com	r24
    249c:	98 2f       	mov	r25, r24
    249e:	0e 5f       	subi	r16, 0xFE	; 254
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	2f 76       	andi	r18, 0x6F	; 111
    24a4:	b2 2e       	mov	r11, r18
    24a6:	97 ff       	sbrs	r25, 7
    24a8:	09 c0       	rjmp	.+18     	; 0x24bc <vfprintf+0x1f8>
    24aa:	90 95       	com	r25
    24ac:	80 95       	com	r24
    24ae:	70 95       	com	r23
    24b0:	61 95       	neg	r22
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255
    24b4:	8f 4f       	sbci	r24, 0xFF	; 255
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	20 68       	ori	r18, 0x80	; 128
    24ba:	b2 2e       	mov	r11, r18
    24bc:	2a e0       	ldi	r18, 0x0A	; 10
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	a4 01       	movw	r20, r8
    24c2:	0e 94 c6 14 	call	0x298c	; 0x298c <__ultoa_invert>
    24c6:	a8 2e       	mov	r10, r24
    24c8:	a8 18       	sub	r10, r8
    24ca:	44 c0       	rjmp	.+136    	; 0x2554 <vfprintf+0x290>
    24cc:	85 37       	cpi	r24, 0x75	; 117
    24ce:	29 f4       	brne	.+10     	; 0x24da <vfprintf+0x216>
    24d0:	2f 7e       	andi	r18, 0xEF	; 239
    24d2:	b2 2e       	mov	r11, r18
    24d4:	2a e0       	ldi	r18, 0x0A	; 10
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	25 c0       	rjmp	.+74     	; 0x2524 <vfprintf+0x260>
    24da:	f2 2f       	mov	r31, r18
    24dc:	f9 7f       	andi	r31, 0xF9	; 249
    24de:	bf 2e       	mov	r11, r31
    24e0:	8f 36       	cpi	r24, 0x6F	; 111
    24e2:	c1 f0       	breq	.+48     	; 0x2514 <vfprintf+0x250>
    24e4:	18 f4       	brcc	.+6      	; 0x24ec <vfprintf+0x228>
    24e6:	88 35       	cpi	r24, 0x58	; 88
    24e8:	79 f0       	breq	.+30     	; 0x2508 <vfprintf+0x244>
    24ea:	b4 c0       	rjmp	.+360    	; 0x2654 <vfprintf+0x390>
    24ec:	80 37       	cpi	r24, 0x70	; 112
    24ee:	19 f0       	breq	.+6      	; 0x24f6 <vfprintf+0x232>
    24f0:	88 37       	cpi	r24, 0x78	; 120
    24f2:	21 f0       	breq	.+8      	; 0x24fc <vfprintf+0x238>
    24f4:	af c0       	rjmp	.+350    	; 0x2654 <vfprintf+0x390>
    24f6:	2f 2f       	mov	r18, r31
    24f8:	20 61       	ori	r18, 0x10	; 16
    24fa:	b2 2e       	mov	r11, r18
    24fc:	b4 fe       	sbrs	r11, 4
    24fe:	0d c0       	rjmp	.+26     	; 0x251a <vfprintf+0x256>
    2500:	8b 2d       	mov	r24, r11
    2502:	84 60       	ori	r24, 0x04	; 4
    2504:	b8 2e       	mov	r11, r24
    2506:	09 c0       	rjmp	.+18     	; 0x251a <vfprintf+0x256>
    2508:	24 ff       	sbrs	r18, 4
    250a:	0a c0       	rjmp	.+20     	; 0x2520 <vfprintf+0x25c>
    250c:	9f 2f       	mov	r25, r31
    250e:	96 60       	ori	r25, 0x06	; 6
    2510:	b9 2e       	mov	r11, r25
    2512:	06 c0       	rjmp	.+12     	; 0x2520 <vfprintf+0x25c>
    2514:	28 e0       	ldi	r18, 0x08	; 8
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <vfprintf+0x260>
    251a:	20 e1       	ldi	r18, 0x10	; 16
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <vfprintf+0x260>
    2520:	20 e1       	ldi	r18, 0x10	; 16
    2522:	32 e0       	ldi	r19, 0x02	; 2
    2524:	f8 01       	movw	r30, r16
    2526:	b7 fe       	sbrs	r11, 7
    2528:	07 c0       	rjmp	.+14     	; 0x2538 <vfprintf+0x274>
    252a:	60 81       	ld	r22, Z
    252c:	71 81       	ldd	r23, Z+1	; 0x01
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	93 81       	ldd	r25, Z+3	; 0x03
    2532:	0c 5f       	subi	r16, 0xFC	; 252
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <vfprintf+0x280>
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 5f       	subi	r16, 0xFE	; 254
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	a4 01       	movw	r20, r8
    2546:	0e 94 c6 14 	call	0x298c	; 0x298c <__ultoa_invert>
    254a:	a8 2e       	mov	r10, r24
    254c:	a8 18       	sub	r10, r8
    254e:	fb 2d       	mov	r31, r11
    2550:	ff 77       	andi	r31, 0x7F	; 127
    2552:	bf 2e       	mov	r11, r31
    2554:	b6 fe       	sbrs	r11, 6
    2556:	0b c0       	rjmp	.+22     	; 0x256e <vfprintf+0x2aa>
    2558:	2b 2d       	mov	r18, r11
    255a:	2e 7f       	andi	r18, 0xFE	; 254
    255c:	a5 14       	cp	r10, r5
    255e:	50 f4       	brcc	.+20     	; 0x2574 <vfprintf+0x2b0>
    2560:	b4 fe       	sbrs	r11, 4
    2562:	0a c0       	rjmp	.+20     	; 0x2578 <vfprintf+0x2b4>
    2564:	b2 fc       	sbrc	r11, 2
    2566:	08 c0       	rjmp	.+16     	; 0x2578 <vfprintf+0x2b4>
    2568:	2b 2d       	mov	r18, r11
    256a:	2e 7e       	andi	r18, 0xEE	; 238
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <vfprintf+0x2b4>
    256e:	7a 2c       	mov	r7, r10
    2570:	2b 2d       	mov	r18, r11
    2572:	03 c0       	rjmp	.+6      	; 0x257a <vfprintf+0x2b6>
    2574:	7a 2c       	mov	r7, r10
    2576:	01 c0       	rjmp	.+2      	; 0x257a <vfprintf+0x2b6>
    2578:	75 2c       	mov	r7, r5
    257a:	24 ff       	sbrs	r18, 4
    257c:	0d c0       	rjmp	.+26     	; 0x2598 <vfprintf+0x2d4>
    257e:	fe 01       	movw	r30, r28
    2580:	ea 0d       	add	r30, r10
    2582:	f1 1d       	adc	r31, r1
    2584:	80 81       	ld	r24, Z
    2586:	80 33       	cpi	r24, 0x30	; 48
    2588:	11 f4       	brne	.+4      	; 0x258e <vfprintf+0x2ca>
    258a:	29 7e       	andi	r18, 0xE9	; 233
    258c:	09 c0       	rjmp	.+18     	; 0x25a0 <vfprintf+0x2dc>
    258e:	22 ff       	sbrs	r18, 2
    2590:	06 c0       	rjmp	.+12     	; 0x259e <vfprintf+0x2da>
    2592:	73 94       	inc	r7
    2594:	73 94       	inc	r7
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <vfprintf+0x2dc>
    2598:	82 2f       	mov	r24, r18
    259a:	86 78       	andi	r24, 0x86	; 134
    259c:	09 f0       	breq	.+2      	; 0x25a0 <vfprintf+0x2dc>
    259e:	73 94       	inc	r7
    25a0:	23 fd       	sbrc	r18, 3
    25a2:	13 c0       	rjmp	.+38     	; 0x25ca <vfprintf+0x306>
    25a4:	20 ff       	sbrs	r18, 0
    25a6:	06 c0       	rjmp	.+12     	; 0x25b4 <vfprintf+0x2f0>
    25a8:	5a 2c       	mov	r5, r10
    25aa:	73 14       	cp	r7, r3
    25ac:	18 f4       	brcc	.+6      	; 0x25b4 <vfprintf+0x2f0>
    25ae:	53 0c       	add	r5, r3
    25b0:	57 18       	sub	r5, r7
    25b2:	73 2c       	mov	r7, r3
    25b4:	73 14       	cp	r7, r3
    25b6:	68 f4       	brcc	.+26     	; 0x25d2 <vfprintf+0x30e>
    25b8:	b7 01       	movw	r22, r14
    25ba:	80 e2       	ldi	r24, 0x20	; 32
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	2c 87       	std	Y+12, r18	; 0x0c
    25c0:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    25c4:	73 94       	inc	r7
    25c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    25c8:	f5 cf       	rjmp	.-22     	; 0x25b4 <vfprintf+0x2f0>
    25ca:	73 14       	cp	r7, r3
    25cc:	10 f4       	brcc	.+4      	; 0x25d2 <vfprintf+0x30e>
    25ce:	37 18       	sub	r3, r7
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <vfprintf+0x310>
    25d2:	31 2c       	mov	r3, r1
    25d4:	24 ff       	sbrs	r18, 4
    25d6:	12 c0       	rjmp	.+36     	; 0x25fc <vfprintf+0x338>
    25d8:	b7 01       	movw	r22, r14
    25da:	80 e3       	ldi	r24, 0x30	; 48
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	2c 87       	std	Y+12, r18	; 0x0c
    25e0:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    25e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    25e6:	22 ff       	sbrs	r18, 2
    25e8:	17 c0       	rjmp	.+46     	; 0x2618 <vfprintf+0x354>
    25ea:	21 ff       	sbrs	r18, 1
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <vfprintf+0x330>
    25ee:	88 e5       	ldi	r24, 0x58	; 88
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <vfprintf+0x334>
    25f4:	88 e7       	ldi	r24, 0x78	; 120
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	b7 01       	movw	r22, r14
    25fa:	0c c0       	rjmp	.+24     	; 0x2614 <vfprintf+0x350>
    25fc:	82 2f       	mov	r24, r18
    25fe:	86 78       	andi	r24, 0x86	; 134
    2600:	59 f0       	breq	.+22     	; 0x2618 <vfprintf+0x354>
    2602:	21 fd       	sbrc	r18, 1
    2604:	02 c0       	rjmp	.+4      	; 0x260a <vfprintf+0x346>
    2606:	80 e2       	ldi	r24, 0x20	; 32
    2608:	01 c0       	rjmp	.+2      	; 0x260c <vfprintf+0x348>
    260a:	8b e2       	ldi	r24, 0x2B	; 43
    260c:	27 fd       	sbrc	r18, 7
    260e:	8d e2       	ldi	r24, 0x2D	; 45
    2610:	b7 01       	movw	r22, r14
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    2618:	a5 14       	cp	r10, r5
    261a:	38 f4       	brcc	.+14     	; 0x262a <vfprintf+0x366>
    261c:	b7 01       	movw	r22, r14
    261e:	80 e3       	ldi	r24, 0x30	; 48
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    2626:	5a 94       	dec	r5
    2628:	f7 cf       	rjmp	.-18     	; 0x2618 <vfprintf+0x354>
    262a:	aa 94       	dec	r10
    262c:	f4 01       	movw	r30, r8
    262e:	ea 0d       	add	r30, r10
    2630:	f1 1d       	adc	r31, r1
    2632:	80 81       	ld	r24, Z
    2634:	b7 01       	movw	r22, r14
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    263c:	a1 10       	cpse	r10, r1
    263e:	f5 cf       	rjmp	.-22     	; 0x262a <vfprintf+0x366>
    2640:	33 20       	and	r3, r3
    2642:	09 f4       	brne	.+2      	; 0x2646 <vfprintf+0x382>
    2644:	51 ce       	rjmp	.-862    	; 0x22e8 <vfprintf+0x24>
    2646:	b7 01       	movw	r22, r14
    2648:	80 e2       	ldi	r24, 0x20	; 32
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0e 94 94 14 	call	0x2928	; 0x2928 <fputc>
    2650:	3a 94       	dec	r3
    2652:	f6 cf       	rjmp	.-20     	; 0x2640 <vfprintf+0x37c>
    2654:	f7 01       	movw	r30, r14
    2656:	86 81       	ldd	r24, Z+6	; 0x06
    2658:	97 81       	ldd	r25, Z+7	; 0x07
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <vfprintf+0x39c>
    265c:	8f ef       	ldi	r24, 0xFF	; 255
    265e:	9f ef       	ldi	r25, 0xFF	; 255
    2660:	2c 96       	adiw	r28, 0x0c	; 12
    2662:	e2 e1       	ldi	r30, 0x12	; 18
    2664:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <__epilogue_restores__>

00002668 <calloc>:
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	86 9f       	mul	r24, r22
    2672:	80 01       	movw	r16, r0
    2674:	87 9f       	mul	r24, r23
    2676:	10 0d       	add	r17, r0
    2678:	96 9f       	mul	r25, r22
    267a:	10 0d       	add	r17, r0
    267c:	11 24       	eor	r1, r1
    267e:	c8 01       	movw	r24, r16
    2680:	0e 94 50 13 	call	0x26a0	; 0x26a0 <malloc>
    2684:	ec 01       	movw	r28, r24
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	29 f0       	breq	.+10     	; 0x2694 <calloc+0x2c>
    268a:	a8 01       	movw	r20, r16
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	0e 94 82 14 	call	0x2904	; 0x2904 <memset>
    2694:	ce 01       	movw	r24, r28
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	08 95       	ret

000026a0 <malloc>:
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	91 05       	cpc	r25, r1
    26a8:	10 f4       	brcc	.+4      	; 0x26ae <malloc+0xe>
    26aa:	82 e0       	ldi	r24, 0x02	; 2
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	e0 91 fe 03 	lds	r30, 0x03FE
    26b2:	f0 91 ff 03 	lds	r31, 0x03FF
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	a0 e0       	ldi	r26, 0x00	; 0
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	30 97       	sbiw	r30, 0x00	; 0
    26c0:	39 f1       	breq	.+78     	; 0x2710 <malloc+0x70>
    26c2:	40 81       	ld	r20, Z
    26c4:	51 81       	ldd	r21, Z+1	; 0x01
    26c6:	48 17       	cp	r20, r24
    26c8:	59 07       	cpc	r21, r25
    26ca:	b8 f0       	brcs	.+46     	; 0x26fa <malloc+0x5a>
    26cc:	48 17       	cp	r20, r24
    26ce:	59 07       	cpc	r21, r25
    26d0:	71 f4       	brne	.+28     	; 0x26ee <malloc+0x4e>
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	10 97       	sbiw	r26, 0x00	; 0
    26d8:	29 f0       	breq	.+10     	; 0x26e4 <malloc+0x44>
    26da:	13 96       	adiw	r26, 0x03	; 3
    26dc:	9c 93       	st	X, r25
    26de:	8e 93       	st	-X, r24
    26e0:	12 97       	sbiw	r26, 0x02	; 2
    26e2:	2c c0       	rjmp	.+88     	; 0x273c <malloc+0x9c>
    26e4:	90 93 ff 03 	sts	0x03FF, r25
    26e8:	80 93 fe 03 	sts	0x03FE, r24
    26ec:	27 c0       	rjmp	.+78     	; 0x273c <malloc+0x9c>
    26ee:	21 15       	cp	r18, r1
    26f0:	31 05       	cpc	r19, r1
    26f2:	31 f0       	breq	.+12     	; 0x2700 <malloc+0x60>
    26f4:	42 17       	cp	r20, r18
    26f6:	53 07       	cpc	r21, r19
    26f8:	18 f0       	brcs	.+6      	; 0x2700 <malloc+0x60>
    26fa:	a9 01       	movw	r20, r18
    26fc:	db 01       	movw	r26, r22
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <malloc+0x62>
    2700:	ef 01       	movw	r28, r30
    2702:	9a 01       	movw	r18, r20
    2704:	bd 01       	movw	r22, r26
    2706:	df 01       	movw	r26, r30
    2708:	02 80       	ldd	r0, Z+2	; 0x02
    270a:	f3 81       	ldd	r31, Z+3	; 0x03
    270c:	e0 2d       	mov	r30, r0
    270e:	d7 cf       	rjmp	.-82     	; 0x26be <malloc+0x1e>
    2710:	21 15       	cp	r18, r1
    2712:	31 05       	cpc	r19, r1
    2714:	f9 f0       	breq	.+62     	; 0x2754 <malloc+0xb4>
    2716:	28 1b       	sub	r18, r24
    2718:	39 0b       	sbc	r19, r25
    271a:	24 30       	cpi	r18, 0x04	; 4
    271c:	31 05       	cpc	r19, r1
    271e:	80 f4       	brcc	.+32     	; 0x2740 <malloc+0xa0>
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	9b 81       	ldd	r25, Y+3	; 0x03
    2724:	61 15       	cp	r22, r1
    2726:	71 05       	cpc	r23, r1
    2728:	21 f0       	breq	.+8      	; 0x2732 <malloc+0x92>
    272a:	fb 01       	movw	r30, r22
    272c:	93 83       	std	Z+3, r25	; 0x03
    272e:	82 83       	std	Z+2, r24	; 0x02
    2730:	04 c0       	rjmp	.+8      	; 0x273a <malloc+0x9a>
    2732:	90 93 ff 03 	sts	0x03FF, r25
    2736:	80 93 fe 03 	sts	0x03FE, r24
    273a:	fe 01       	movw	r30, r28
    273c:	32 96       	adiw	r30, 0x02	; 2
    273e:	44 c0       	rjmp	.+136    	; 0x27c8 <malloc+0x128>
    2740:	fe 01       	movw	r30, r28
    2742:	e2 0f       	add	r30, r18
    2744:	f3 1f       	adc	r31, r19
    2746:	81 93       	st	Z+, r24
    2748:	91 93       	st	Z+, r25
    274a:	22 50       	subi	r18, 0x02	; 2
    274c:	31 09       	sbc	r19, r1
    274e:	39 83       	std	Y+1, r19	; 0x01
    2750:	28 83       	st	Y, r18
    2752:	3a c0       	rjmp	.+116    	; 0x27c8 <malloc+0x128>
    2754:	20 91 fc 03 	lds	r18, 0x03FC
    2758:	30 91 fd 03 	lds	r19, 0x03FD
    275c:	23 2b       	or	r18, r19
    275e:	41 f4       	brne	.+16     	; 0x2770 <malloc+0xd0>
    2760:	20 91 02 01 	lds	r18, 0x0102
    2764:	30 91 03 01 	lds	r19, 0x0103
    2768:	30 93 fd 03 	sts	0x03FD, r19
    276c:	20 93 fc 03 	sts	0x03FC, r18
    2770:	20 91 00 01 	lds	r18, 0x0100
    2774:	30 91 01 01 	lds	r19, 0x0101
    2778:	21 15       	cp	r18, r1
    277a:	31 05       	cpc	r19, r1
    277c:	41 f4       	brne	.+16     	; 0x278e <malloc+0xee>
    277e:	2d b7       	in	r18, 0x3d	; 61
    2780:	3e b7       	in	r19, 0x3e	; 62
    2782:	40 91 04 01 	lds	r20, 0x0104
    2786:	50 91 05 01 	lds	r21, 0x0105
    278a:	24 1b       	sub	r18, r20
    278c:	35 0b       	sbc	r19, r21
    278e:	e0 91 fc 03 	lds	r30, 0x03FC
    2792:	f0 91 fd 03 	lds	r31, 0x03FD
    2796:	e2 17       	cp	r30, r18
    2798:	f3 07       	cpc	r31, r19
    279a:	a0 f4       	brcc	.+40     	; 0x27c4 <malloc+0x124>
    279c:	2e 1b       	sub	r18, r30
    279e:	3f 0b       	sbc	r19, r31
    27a0:	28 17       	cp	r18, r24
    27a2:	39 07       	cpc	r19, r25
    27a4:	78 f0       	brcs	.+30     	; 0x27c4 <malloc+0x124>
    27a6:	ac 01       	movw	r20, r24
    27a8:	4e 5f       	subi	r20, 0xFE	; 254
    27aa:	5f 4f       	sbci	r21, 0xFF	; 255
    27ac:	24 17       	cp	r18, r20
    27ae:	35 07       	cpc	r19, r21
    27b0:	48 f0       	brcs	.+18     	; 0x27c4 <malloc+0x124>
    27b2:	4e 0f       	add	r20, r30
    27b4:	5f 1f       	adc	r21, r31
    27b6:	50 93 fd 03 	sts	0x03FD, r21
    27ba:	40 93 fc 03 	sts	0x03FC, r20
    27be:	81 93       	st	Z+, r24
    27c0:	91 93       	st	Z+, r25
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <malloc+0x128>
    27c4:	e0 e0       	ldi	r30, 0x00	; 0
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	cf 01       	movw	r24, r30
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	08 95       	ret

000027d0 <free>:
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	09 f4       	brne	.+2      	; 0x27da <free+0xa>
    27d8:	87 c0       	rjmp	.+270    	; 0x28e8 <free+0x118>
    27da:	fc 01       	movw	r30, r24
    27dc:	32 97       	sbiw	r30, 0x02	; 2
    27de:	13 82       	std	Z+3, r1	; 0x03
    27e0:	12 82       	std	Z+2, r1	; 0x02
    27e2:	c0 91 fe 03 	lds	r28, 0x03FE
    27e6:	d0 91 ff 03 	lds	r29, 0x03FF
    27ea:	20 97       	sbiw	r28, 0x00	; 0
    27ec:	81 f4       	brne	.+32     	; 0x280e <free+0x3e>
    27ee:	20 81       	ld	r18, Z
    27f0:	31 81       	ldd	r19, Z+1	; 0x01
    27f2:	28 0f       	add	r18, r24
    27f4:	39 1f       	adc	r19, r25
    27f6:	80 91 fc 03 	lds	r24, 0x03FC
    27fa:	90 91 fd 03 	lds	r25, 0x03FD
    27fe:	82 17       	cp	r24, r18
    2800:	93 07       	cpc	r25, r19
    2802:	79 f5       	brne	.+94     	; 0x2862 <free+0x92>
    2804:	f0 93 fd 03 	sts	0x03FD, r31
    2808:	e0 93 fc 03 	sts	0x03FC, r30
    280c:	6d c0       	rjmp	.+218    	; 0x28e8 <free+0x118>
    280e:	de 01       	movw	r26, r28
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	ae 17       	cp	r26, r30
    2816:	bf 07       	cpc	r27, r31
    2818:	50 f4       	brcc	.+20     	; 0x282e <free+0x5e>
    281a:	12 96       	adiw	r26, 0x02	; 2
    281c:	4d 91       	ld	r20, X+
    281e:	5c 91       	ld	r21, X
    2820:	13 97       	sbiw	r26, 0x03	; 3
    2822:	9d 01       	movw	r18, r26
    2824:	41 15       	cp	r20, r1
    2826:	51 05       	cpc	r21, r1
    2828:	09 f1       	breq	.+66     	; 0x286c <free+0x9c>
    282a:	da 01       	movw	r26, r20
    282c:	f3 cf       	rjmp	.-26     	; 0x2814 <free+0x44>
    282e:	b3 83       	std	Z+3, r27	; 0x03
    2830:	a2 83       	std	Z+2, r26	; 0x02
    2832:	40 81       	ld	r20, Z
    2834:	51 81       	ldd	r21, Z+1	; 0x01
    2836:	84 0f       	add	r24, r20
    2838:	95 1f       	adc	r25, r21
    283a:	8a 17       	cp	r24, r26
    283c:	9b 07       	cpc	r25, r27
    283e:	71 f4       	brne	.+28     	; 0x285c <free+0x8c>
    2840:	8d 91       	ld	r24, X+
    2842:	9c 91       	ld	r25, X
    2844:	11 97       	sbiw	r26, 0x01	; 1
    2846:	84 0f       	add	r24, r20
    2848:	95 1f       	adc	r25, r21
    284a:	02 96       	adiw	r24, 0x02	; 2
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
    2850:	12 96       	adiw	r26, 0x02	; 2
    2852:	8d 91       	ld	r24, X+
    2854:	9c 91       	ld	r25, X
    2856:	13 97       	sbiw	r26, 0x03	; 3
    2858:	93 83       	std	Z+3, r25	; 0x03
    285a:	82 83       	std	Z+2, r24	; 0x02
    285c:	21 15       	cp	r18, r1
    285e:	31 05       	cpc	r19, r1
    2860:	29 f4       	brne	.+10     	; 0x286c <free+0x9c>
    2862:	f0 93 ff 03 	sts	0x03FF, r31
    2866:	e0 93 fe 03 	sts	0x03FE, r30
    286a:	3e c0       	rjmp	.+124    	; 0x28e8 <free+0x118>
    286c:	d9 01       	movw	r26, r18
    286e:	13 96       	adiw	r26, 0x03	; 3
    2870:	fc 93       	st	X, r31
    2872:	ee 93       	st	-X, r30
    2874:	12 97       	sbiw	r26, 0x02	; 2
    2876:	4d 91       	ld	r20, X+
    2878:	5d 91       	ld	r21, X+
    287a:	a4 0f       	add	r26, r20
    287c:	b5 1f       	adc	r27, r21
    287e:	ea 17       	cp	r30, r26
    2880:	fb 07       	cpc	r31, r27
    2882:	79 f4       	brne	.+30     	; 0x28a2 <free+0xd2>
    2884:	80 81       	ld	r24, Z
    2886:	91 81       	ldd	r25, Z+1	; 0x01
    2888:	84 0f       	add	r24, r20
    288a:	95 1f       	adc	r25, r21
    288c:	02 96       	adiw	r24, 0x02	; 2
    288e:	d9 01       	movw	r26, r18
    2890:	11 96       	adiw	r26, 0x01	; 1
    2892:	9c 93       	st	X, r25
    2894:	8e 93       	st	-X, r24
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	13 96       	adiw	r26, 0x03	; 3
    289c:	9c 93       	st	X, r25
    289e:	8e 93       	st	-X, r24
    28a0:	12 97       	sbiw	r26, 0x02	; 2
    28a2:	e0 e0       	ldi	r30, 0x00	; 0
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	9b 81       	ldd	r25, Y+3	; 0x03
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	19 f0       	breq	.+6      	; 0x28b4 <free+0xe4>
    28ae:	fe 01       	movw	r30, r28
    28b0:	ec 01       	movw	r28, r24
    28b2:	f9 cf       	rjmp	.-14     	; 0x28a6 <free+0xd6>
    28b4:	ce 01       	movw	r24, r28
    28b6:	02 96       	adiw	r24, 0x02	; 2
    28b8:	28 81       	ld	r18, Y
    28ba:	39 81       	ldd	r19, Y+1	; 0x01
    28bc:	82 0f       	add	r24, r18
    28be:	93 1f       	adc	r25, r19
    28c0:	20 91 fc 03 	lds	r18, 0x03FC
    28c4:	30 91 fd 03 	lds	r19, 0x03FD
    28c8:	28 17       	cp	r18, r24
    28ca:	39 07       	cpc	r19, r25
    28cc:	69 f4       	brne	.+26     	; 0x28e8 <free+0x118>
    28ce:	30 97       	sbiw	r30, 0x00	; 0
    28d0:	29 f4       	brne	.+10     	; 0x28dc <free+0x10c>
    28d2:	10 92 ff 03 	sts	0x03FF, r1
    28d6:	10 92 fe 03 	sts	0x03FE, r1
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <free+0x110>
    28dc:	13 82       	std	Z+3, r1	; 0x03
    28de:	12 82       	std	Z+2, r1	; 0x02
    28e0:	d0 93 fd 03 	sts	0x03FD, r29
    28e4:	c0 93 fc 03 	sts	0x03FC, r28
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <strnlen_P>:
    28ee:	fc 01       	movw	r30, r24
    28f0:	05 90       	lpm	r0, Z+
    28f2:	61 50       	subi	r22, 0x01	; 1
    28f4:	70 40       	sbci	r23, 0x00	; 0
    28f6:	01 10       	cpse	r0, r1
    28f8:	d8 f7       	brcc	.-10     	; 0x28f0 <strnlen_P+0x2>
    28fa:	80 95       	com	r24
    28fc:	90 95       	com	r25
    28fe:	8e 0f       	add	r24, r30
    2900:	9f 1f       	adc	r25, r31
    2902:	08 95       	ret

00002904 <memset>:
    2904:	dc 01       	movw	r26, r24
    2906:	01 c0       	rjmp	.+2      	; 0x290a <memset+0x6>
    2908:	6d 93       	st	X+, r22
    290a:	41 50       	subi	r20, 0x01	; 1
    290c:	50 40       	sbci	r21, 0x00	; 0
    290e:	e0 f7       	brcc	.-8      	; 0x2908 <memset+0x4>
    2910:	08 95       	ret

00002912 <strnlen>:
    2912:	fc 01       	movw	r30, r24
    2914:	61 50       	subi	r22, 0x01	; 1
    2916:	70 40       	sbci	r23, 0x00	; 0
    2918:	01 90       	ld	r0, Z+
    291a:	01 10       	cpse	r0, r1
    291c:	d8 f7       	brcc	.-10     	; 0x2914 <strnlen+0x2>
    291e:	80 95       	com	r24
    2920:	90 95       	com	r25
    2922:	8e 0f       	add	r24, r30
    2924:	9f 1f       	adc	r25, r31
    2926:	08 95       	ret

00002928 <fputc>:
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	18 2f       	mov	r17, r24
    2932:	09 2f       	mov	r16, r25
    2934:	eb 01       	movw	r28, r22
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	81 fd       	sbrc	r24, 1
    293a:	03 c0       	rjmp	.+6      	; 0x2942 <fputc+0x1a>
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	9f ef       	ldi	r25, 0xFF	; 255
    2940:	20 c0       	rjmp	.+64     	; 0x2982 <fputc+0x5a>
    2942:	82 ff       	sbrs	r24, 2
    2944:	10 c0       	rjmp	.+32     	; 0x2966 <fputc+0x3e>
    2946:	4e 81       	ldd	r20, Y+6	; 0x06
    2948:	5f 81       	ldd	r21, Y+7	; 0x07
    294a:	2c 81       	ldd	r18, Y+4	; 0x04
    294c:	3d 81       	ldd	r19, Y+5	; 0x05
    294e:	42 17       	cp	r20, r18
    2950:	53 07       	cpc	r21, r19
    2952:	7c f4       	brge	.+30     	; 0x2972 <fputc+0x4a>
    2954:	e8 81       	ld	r30, Y
    2956:	f9 81       	ldd	r31, Y+1	; 0x01
    2958:	9f 01       	movw	r18, r30
    295a:	2f 5f       	subi	r18, 0xFF	; 255
    295c:	3f 4f       	sbci	r19, 0xFF	; 255
    295e:	39 83       	std	Y+1, r19	; 0x01
    2960:	28 83       	st	Y, r18
    2962:	10 83       	st	Z, r17
    2964:	06 c0       	rjmp	.+12     	; 0x2972 <fputc+0x4a>
    2966:	e8 85       	ldd	r30, Y+8	; 0x08
    2968:	f9 85       	ldd	r31, Y+9	; 0x09
    296a:	81 2f       	mov	r24, r17
    296c:	09 95       	icall
    296e:	89 2b       	or	r24, r25
    2970:	29 f7       	brne	.-54     	; 0x293c <fputc+0x14>
    2972:	2e 81       	ldd	r18, Y+6	; 0x06
    2974:	3f 81       	ldd	r19, Y+7	; 0x07
    2976:	2f 5f       	subi	r18, 0xFF	; 255
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	3f 83       	std	Y+7, r19	; 0x07
    297c:	2e 83       	std	Y+6, r18	; 0x06
    297e:	81 2f       	mov	r24, r17
    2980:	90 2f       	mov	r25, r16
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	08 95       	ret

0000298c <__ultoa_invert>:
    298c:	fa 01       	movw	r30, r20
    298e:	aa 27       	eor	r26, r26
    2990:	28 30       	cpi	r18, 0x08	; 8
    2992:	51 f1       	breq	.+84     	; 0x29e8 <__ultoa_invert+0x5c>
    2994:	20 31       	cpi	r18, 0x10	; 16
    2996:	81 f1       	breq	.+96     	; 0x29f8 <__ultoa_invert+0x6c>
    2998:	e8 94       	clt
    299a:	6f 93       	push	r22
    299c:	6e 7f       	andi	r22, 0xFE	; 254
    299e:	6e 5f       	subi	r22, 0xFE	; 254
    29a0:	7f 4f       	sbci	r23, 0xFF	; 255
    29a2:	8f 4f       	sbci	r24, 0xFF	; 255
    29a4:	9f 4f       	sbci	r25, 0xFF	; 255
    29a6:	af 4f       	sbci	r26, 0xFF	; 255
    29a8:	b1 e0       	ldi	r27, 0x01	; 1
    29aa:	3e d0       	rcall	.+124    	; 0x2a28 <__ultoa_invert+0x9c>
    29ac:	b4 e0       	ldi	r27, 0x04	; 4
    29ae:	3c d0       	rcall	.+120    	; 0x2a28 <__ultoa_invert+0x9c>
    29b0:	67 0f       	add	r22, r23
    29b2:	78 1f       	adc	r23, r24
    29b4:	89 1f       	adc	r24, r25
    29b6:	9a 1f       	adc	r25, r26
    29b8:	a1 1d       	adc	r26, r1
    29ba:	68 0f       	add	r22, r24
    29bc:	79 1f       	adc	r23, r25
    29be:	8a 1f       	adc	r24, r26
    29c0:	91 1d       	adc	r25, r1
    29c2:	a1 1d       	adc	r26, r1
    29c4:	6a 0f       	add	r22, r26
    29c6:	71 1d       	adc	r23, r1
    29c8:	81 1d       	adc	r24, r1
    29ca:	91 1d       	adc	r25, r1
    29cc:	a1 1d       	adc	r26, r1
    29ce:	20 d0       	rcall	.+64     	; 0x2a10 <__ultoa_invert+0x84>
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <__ultoa_invert+0x48>
    29d2:	68 94       	set
    29d4:	3f 91       	pop	r19
    29d6:	2a e0       	ldi	r18, 0x0A	; 10
    29d8:	26 9f       	mul	r18, r22
    29da:	11 24       	eor	r1, r1
    29dc:	30 19       	sub	r19, r0
    29de:	30 5d       	subi	r19, 0xD0	; 208
    29e0:	31 93       	st	Z+, r19
    29e2:	de f6       	brtc	.-74     	; 0x299a <__ultoa_invert+0xe>
    29e4:	cf 01       	movw	r24, r30
    29e6:	08 95       	ret
    29e8:	46 2f       	mov	r20, r22
    29ea:	47 70       	andi	r20, 0x07	; 7
    29ec:	40 5d       	subi	r20, 0xD0	; 208
    29ee:	41 93       	st	Z+, r20
    29f0:	b3 e0       	ldi	r27, 0x03	; 3
    29f2:	0f d0       	rcall	.+30     	; 0x2a12 <__ultoa_invert+0x86>
    29f4:	c9 f7       	brne	.-14     	; 0x29e8 <__ultoa_invert+0x5c>
    29f6:	f6 cf       	rjmp	.-20     	; 0x29e4 <__ultoa_invert+0x58>
    29f8:	46 2f       	mov	r20, r22
    29fa:	4f 70       	andi	r20, 0x0F	; 15
    29fc:	40 5d       	subi	r20, 0xD0	; 208
    29fe:	4a 33       	cpi	r20, 0x3A	; 58
    2a00:	18 f0       	brcs	.+6      	; 0x2a08 <__ultoa_invert+0x7c>
    2a02:	49 5d       	subi	r20, 0xD9	; 217
    2a04:	31 fd       	sbrc	r19, 1
    2a06:	40 52       	subi	r20, 0x20	; 32
    2a08:	41 93       	st	Z+, r20
    2a0a:	02 d0       	rcall	.+4      	; 0x2a10 <__ultoa_invert+0x84>
    2a0c:	a9 f7       	brne	.-22     	; 0x29f8 <__ultoa_invert+0x6c>
    2a0e:	ea cf       	rjmp	.-44     	; 0x29e4 <__ultoa_invert+0x58>
    2a10:	b4 e0       	ldi	r27, 0x04	; 4
    2a12:	a6 95       	lsr	r26
    2a14:	97 95       	ror	r25
    2a16:	87 95       	ror	r24
    2a18:	77 95       	ror	r23
    2a1a:	67 95       	ror	r22
    2a1c:	ba 95       	dec	r27
    2a1e:	c9 f7       	brne	.-14     	; 0x2a12 <__ultoa_invert+0x86>
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	61 05       	cpc	r22, r1
    2a24:	71 05       	cpc	r23, r1
    2a26:	08 95       	ret
    2a28:	9b 01       	movw	r18, r22
    2a2a:	ac 01       	movw	r20, r24
    2a2c:	0a 2e       	mov	r0, r26
    2a2e:	06 94       	lsr	r0
    2a30:	57 95       	ror	r21
    2a32:	47 95       	ror	r20
    2a34:	37 95       	ror	r19
    2a36:	27 95       	ror	r18
    2a38:	ba 95       	dec	r27
    2a3a:	c9 f7       	brne	.-14     	; 0x2a2e <__ultoa_invert+0xa2>
    2a3c:	62 0f       	add	r22, r18
    2a3e:	73 1f       	adc	r23, r19
    2a40:	84 1f       	adc	r24, r20
    2a42:	95 1f       	adc	r25, r21
    2a44:	a0 1d       	adc	r26, r0
    2a46:	08 95       	ret

00002a48 <__prologue_saves__>:
    2a48:	2f 92       	push	r2
    2a4a:	3f 92       	push	r3
    2a4c:	4f 92       	push	r4
    2a4e:	5f 92       	push	r5
    2a50:	6f 92       	push	r6
    2a52:	7f 92       	push	r7
    2a54:	8f 92       	push	r8
    2a56:	9f 92       	push	r9
    2a58:	af 92       	push	r10
    2a5a:	bf 92       	push	r11
    2a5c:	cf 92       	push	r12
    2a5e:	df 92       	push	r13
    2a60:	ef 92       	push	r14
    2a62:	ff 92       	push	r15
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	ca 1b       	sub	r28, r26
    2a72:	db 0b       	sbc	r29, r27
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	09 94       	ijmp

00002a80 <__epilogue_restores__>:
    2a80:	2a 88       	ldd	r2, Y+18	; 0x12
    2a82:	39 88       	ldd	r3, Y+17	; 0x11
    2a84:	48 88       	ldd	r4, Y+16	; 0x10
    2a86:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a88:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a90:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a92:	b9 84       	ldd	r11, Y+9	; 0x09
    2a94:	c8 84       	ldd	r12, Y+8	; 0x08
    2a96:	df 80       	ldd	r13, Y+7	; 0x07
    2a98:	ee 80       	ldd	r14, Y+6	; 0x06
    2a9a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a9c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a9e:	1b 81       	ldd	r17, Y+3	; 0x03
    2aa0:	aa 81       	ldd	r26, Y+2	; 0x02
    2aa2:	b9 81       	ldd	r27, Y+1	; 0x01
    2aa4:	ce 0f       	add	r28, r30
    2aa6:	d1 1d       	adc	r29, r1
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	ed 01       	movw	r28, r26
    2ab4:	08 95       	ret

00002ab6 <_exit>:
    2ab6:	f8 94       	cli

00002ab8 <__stop_program>:
    2ab8:	ff cf       	rjmp	.-2      	; 0x2ab8 <__stop_program>
