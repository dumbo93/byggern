
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00000dfc  00000e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008001b8  008001b8  00000f48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001058  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000852  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000855  00000000  00000000  0000298e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  000031e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006bb  00000000  00000000  00003862  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ef       	ldi	r30, 0xFC	; 252
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 3b       	cpi	r26, 0xB8	; 184
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 eb       	ldi	r26, 0xB8	; 184
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 3c       	cpi	r26, 0xC3	; 195
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 01 02 	call	0x402	; 0x402 <main>
  a6:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:


void CAN_init()
{
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
  ae:	63 e0       	ldi	r22, 0x03	; 3
  b0:	8b e2       	ldi	r24, 0x2B	; 43
  b2:	0e 94 85 01 	call	0x30a	; 0x30a <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (1 << ISC01) | (0 << ISC00);
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
  bc:	8b b7       	in	r24, 0x3b	; 59
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8b bf       	out	0x3b, r24	; 59
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	
	//Set to loop-back mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
  c2:	40 e4       	ldi	r20, 0x40	; 64
  c4:	60 ee       	ldi	r22, 0xE0	; 224
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	0e 94 ac 01 	call	0x358	; 0x358 <MCP_bit_modify>
  cc:	08 95       	ret

000000ce <CAN_msg_send>:
}

void CAN_msg_send(can_msg *message)
{
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
  dc:	fc 01       	movw	r30, r24
  de:	60 81       	ld	r22, Z
  e0:	71 81       	ldd	r23, Z+1	; 0x01
  e2:	76 95       	lsr	r23
  e4:	67 95       	ror	r22
  e6:	76 95       	lsr	r23
  e8:	67 95       	ror	r22
  ea:	76 95       	lsr	r23
  ec:	67 95       	ror	r22
  ee:	81 e3       	ldi	r24, 0x31	; 49
  f0:	0e 94 85 01 	call	0x30a	; 0x30a <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
  f4:	f7 01       	movw	r30, r14
  f6:	60 81       	ld	r22, Z
  f8:	62 95       	swap	r22
  fa:	66 0f       	add	r22, r22
  fc:	60 7e       	andi	r22, 0xE0	; 224
  fe:	82 e3       	ldi	r24, 0x32	; 50
 100:	0e 94 85 01 	call	0x30a	; 0x30a <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	83 e3       	ldi	r24, 0x33	; 51
 108:	0e 94 85 01 	call	0x30a	; 0x30a <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	84 e3       	ldi	r24, 0x34	; 52
 110:	0e 94 85 01 	call	0x30a	; 0x30a <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
 114:	f7 01       	movw	r30, r14
 116:	62 81       	ldd	r22, Z+2	; 0x02
 118:	85 e3       	ldi	r24, 0x35	; 53
 11a:	0e 94 85 01 	call	0x30a	; 0x30a <MCP_write>
	
	for (int i = 0; i < message->length; i++){
 11e:	f7 01       	movw	r30, r14
 120:	82 81       	ldd	r24, Z+2	; 0x02
 122:	88 23       	and	r24, r24
 124:	99 f0       	breq	.+38     	; 0x14c <CAN_msg_send+0x7e>
 126:	87 01       	movw	r16, r14
 128:	0d 5f       	subi	r16, 0xFD	; 253
 12a:	1f 4f       	sbci	r17, 0xFF	; 255
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
 130:	f8 01       	movw	r30, r16
 132:	61 91       	ld	r22, Z+
 134:	8f 01       	movw	r16, r30
 136:	8c 2f       	mov	r24, r28
 138:	8a 5c       	subi	r24, 0xCA	; 202
 13a:	0e 94 85 01 	call	0x30a	; 0x30a <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
 13e:	21 96       	adiw	r28, 0x01	; 1
 140:	f7 01       	movw	r30, r14
 142:	22 81       	ldd	r18, Z+2	; 0x02
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	c2 17       	cp	r28, r18
 148:	d3 07       	cpc	r29, r19
 14a:	94 f3       	brlt	.-28     	; 0x130 <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
 14c:	81 e8       	ldi	r24, 0x81	; 129
 14e:	0e 94 9d 01 	call	0x33a	; 0x33a <MCP_request_to_send>
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	ef 90       	pop	r14
 15e:	08 95       	ret

00000160 <CAN_msg_receive>:

void CAN_msg_receive(can_msg *msg, uint8_t reg)
{
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	7c 01       	movw	r14, r24
 172:	c6 2f       	mov	r28, r22

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	86 0f       	add	r24, r22
 178:	0e 94 5e 01 	call	0x2bc	; 0x2bc <MCP_read>
 17c:	d8 2f       	mov	r29, r24
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	8c 0f       	add	r24, r28
 182:	0e 94 5e 01 	call	0x2bc	; 0x2bc <MCP_read>
 186:	48 2f       	mov	r20, r24
 188:	42 95       	swap	r20
 18a:	46 95       	lsr	r20
 18c:	47 70       	andi	r20, 0x07	; 7
 18e:	2d 2f       	mov	r18, r29
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	c9 01       	movw	r24, r18
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	84 2b       	or	r24, r20
 1a2:	f7 01       	movw	r30, r14
 1a4:	91 83       	std	Z+1, r25	; 0x01
 1a6:	80 83       	st	Z, r24
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	8c 0f       	add	r24, r28
 1ac:	0e 94 5e 01 	call	0x2bc	; 0x2bc <MCP_read>
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	f7 01       	movw	r30, r14
 1b4:	82 83       	std	Z+2, r24	; 0x02
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
 1b6:	88 23       	and	r24, r24
 1b8:	f9 f0       	breq	.+62     	; 0x1f8 <CAN_msg_receive+0x98>
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f6 e0       	ldi	r31, 0x06	; 6
 1be:	df 2e       	mov	r13, r31
 1c0:	f0 2d       	mov	r31, r0
 1c2:	dc 0e       	add	r13, r28
 1c4:	87 01       	movw	r16, r14
 1c6:	0d 5f       	subi	r16, 0xFD	; 253
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ca:	0f 2e       	mov	r0, r31
 1cc:	fe e0       	ldi	r31, 0x0E	; 14
 1ce:	cf 2e       	mov	r12, r31
 1d0:	f0 2d       	mov	r31, r0
 1d2:	cc 0e       	add	r12, r28
{

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
	while( (i < msg->length) && (i < 8) ){
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
 1d8:	8d 2d       	mov	r24, r13
 1da:	0e 94 5e 01 	call	0x2bc	; 0x2bc <MCP_read>
 1de:	f8 01       	movw	r30, r16
 1e0:	81 93       	st	Z+, r24
 1e2:	8f 01       	movw	r16, r30
		i++;
 1e4:	21 96       	adiw	r28, 0x01	; 1

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
 1e6:	f7 01       	movw	r30, r14
 1e8:	22 81       	ldd	r18, Z+2	; 0x02
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	c2 17       	cp	r28, r18
 1ee:	d3 07       	cpc	r29, r19
 1f0:	1c f4       	brge	.+6      	; 0x1f8 <CAN_msg_receive+0x98>
 1f2:	d3 94       	inc	r13
 1f4:	dc 10       	cpse	r13, r12
 1f6:	f0 cf       	rjmp	.-32     	; 0x1d8 <CAN_msg_receive+0x78>
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
		i++;
	}	
	
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <CAN_handle_interrupt>:

void CAN_handle_interrupt(can_msg *msg)
{
	switch(interrupt_flag){
 20a:	20 91 b8 01 	lds	r18, 0x01B8
 20e:	21 30       	cpi	r18, 0x01	; 1
 210:	19 f0       	breq	.+6      	; 0x218 <CAN_handle_interrupt+0xe>
 212:	22 30       	cpi	r18, 0x02	; 2
 214:	39 f0       	breq	.+14     	; 0x224 <CAN_handle_interrupt+0x1a>
 216:	08 95       	ret
		case no_flag:
			break;
		case RX0:
			CAN_msg_receive(msg, MCP_RXB0CTRL);
 218:	60 e6       	ldi	r22, 0x60	; 96
 21a:	0e 94 b0 00 	call	0x160	; 0x160 <CAN_msg_receive>
			interrupt_flag = no_flag;
 21e:	10 92 b8 01 	sts	0x01B8, r1
			break;
 222:	08 95       	ret
		case RX1:
			CAN_msg_receive(msg, MCP_RXB1CTRL);
 224:	60 e7       	ldi	r22, 0x70	; 112
 226:	0e 94 b0 00 	call	0x160	; 0x160 <CAN_msg_receive>
			interrupt_flag = no_flag;
 22a:	10 92 b8 01 	sts	0x01B8, r1
 22e:	08 95       	ret

00000230 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
 252:	8c e2       	ldi	r24, 0x2C	; 44
 254:	0e 94 5e 01 	call	0x2bc	; 0x2bc <MCP_read>

	if (interrupt & MCP_RX0IF){
 258:	80 ff       	sbrs	r24, 0
 25a:	09 c0       	rjmp	.+18     	; 0x26e <__vector_1+0x3e>
		interrupt_flag = RX0;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 b8 01 	sts	0x01B8, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	8c e2       	ldi	r24, 0x2C	; 44
 268:	0e 94 ac 01 	call	0x358	; 0x358 <MCP_bit_modify>
 26c:	0a c0       	rjmp	.+20     	; 0x282 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
 26e:	81 ff       	sbrs	r24, 1
 270:	08 c0       	rjmp	.+16     	; 0x282 <__vector_1+0x52>
		interrupt_flag = RX1;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 b8 01 	sts	0x01B8, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	8c e2       	ldi	r24, 0x2C	; 44
 27e:	0e 94 ac 01 	call	0x358	; 0x358 <MCP_bit_modify>
	}
	
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
 2ac:	80 ec       	ldi	r24, 0xC0	; 192
 2ae:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	SPI_set_ss(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
 2ba:	08 95       	ret

000002bc <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
 2bc:	cf 93       	push	r28
 2be:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
	//printf("hello from MCP read 1\n");
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	//printf("hello from MCP read 2\n");
	// Send 8-bit address
	SPI_transmit_receive(address);
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	//printf("hello from MCP read 3\n");
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
 2da:	c8 2f       	mov	r28, r24
	//printf("hello from MCP read 4\n");
	SPI_set_ss(1);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
	return received;
}
 2e4:	8c 2f       	mov	r24, r28
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <MCP_init>:

uint8_t MCP_init( void )
{
	//SPI_init();
	//printf("hello from MCP init 1\n");
	MCP_reset();
 2ea:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MCP_reset>
	//printf("hello from MCP init 2\n");
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 2ee:	8e e0       	ldi	r24, 0x0E	; 14
 2f0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <MCP_read>
	//printf("hello from MCP init 3\n");
	if ((value & MODE_MASK) != MODE_CONFIG){
 2f4:	80 7e       	andi	r24, 0xE0	; 224
 2f6:	80 38       	cpi	r24, 0x80	; 128
 2f8:	31 f0       	breq	.+12     	; 0x306 <MCP_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset\n");
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 d6 02 	call	0x5ac	; 0x5ac <puts>
		return 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
	}
	
	return 0;
 306:	80 e0       	ldi	r24, 0x00	; 0
}
 308:	08 95       	ret

0000030a <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	d8 2f       	mov	r29, r24
 310:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	SPI_transmit_receive(address);
 320:	8d 2f       	mov	r24, r29
 322:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	SPI_transmit_receive(data);
 326:	8c 2f       	mov	r24, r28
 328:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
 33a:	cf 93       	push	r28
 33c:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
 346:	8c 2f       	mov	r24, r28
 348:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	SPI_set_ss(1); //(?)
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
}
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	18 2f       	mov	r17, r24
 360:	d6 2f       	mov	r29, r22
 362:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 372:	81 2f       	mov	r24, r17
 374:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 378:	8d 2f       	mov	r24, r29
 37a:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	SPI_transmit_receive(data);
 37e:	8c 2f       	mov	r24, r28
 380:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_transmit_receive>
	
	SPI_set_ss(1);
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SPI_set_ss>
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	08 95       	ret

00000394 <SPI_init>:
#include <avr/io.h>

void SPI_init( void )
{
	// Enable SPI, Master, set clock rate
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 394:	81 e5       	ldi	r24, 0x51	; 81
 396:	8d b9       	out	0x0d, r24	; 13
	
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB = (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
 398:	80 eb       	ldi	r24, 0xB0	; 176
 39a:	87 bb       	out	0x17, r24	; 23
 39c:	08 95       	ret

0000039e <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 39e:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
 3a0:	77 9b       	sbis	0x0e, 7	; 14
 3a2:	fe cf       	rjmp	.-4      	; 0x3a0 <SPI_transmit_receive+0x2>
	//printf("Hello from SPI transmit receive 2\n");
	
	return SPDR;
 3a4:	8f b1       	in	r24, 0x0f	; 15
}
 3a6:	08 95       	ret

000003a8 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	91 05       	cpc	r25, r1
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
 3ae:	c4 9a       	sbi	0x18, 4	; 24
 3b0:	08 95       	ret
	}
	else if (val == 0){
 3b2:	89 2b       	or	r24, r25
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
 3b6:	c4 98       	cbi	0x18, 4	; 24
 3b8:	08 95       	ret

000003ba <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 3ba:	5d 9b       	sbis	0x0b, 5	; 11
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 3be:	8c b9       	out	0x0c, r24	; 12
 3c0:	08 95       	ret

000003c2 <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A) & (1<<RXC0));  
 3c2:	8b b1       	in	r24, 0x0b	; 11
	
	//Get and return received data from buffer
	return UDR0;  
 3c4:	8c b1       	in	r24, 0x0c	; 12
 3c6:	08 95       	ret

000003c8 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 3c8:	20 b5       	in	r18, 0x20	; 32
 3ca:	92 2b       	or	r25, r18
 3cc:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
 3ce:	99 b1       	in	r25, 0x09	; 9
 3d0:	89 2b       	or	r24, r25
 3d2:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 3d4:	8a b1       	in	r24, 0x0a	; 10
 3d6:	88 61       	ori	r24, 0x18	; 24
 3d8:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 3da:	80 b5       	in	r24, 0x20	; 32
 3dc:	8e 68       	ori	r24, 0x8E	; 142
 3de:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 3e0:	61 ee       	ldi	r22, 0xE1	; 225
 3e2:	71 e0       	ldi	r23, 0x01	; 1
 3e4:	8d ed       	ldi	r24, 0xDD	; 221
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 77 02 	call	0x4ee	; 0x4ee <fdevopen>
 3ec:	08 95       	ret

000003ee <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	set_bit(MCUCR, SRE);
 3ee:	85 b7       	in	r24, 0x35	; 53
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 3f4:	80 b7       	in	r24, 0x30	; 48
 3f6:	80 62       	ori	r24, 0x20	; 32
 3f8:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	clear_bit(DDRD, PD3);
 3fa:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 95       	ret

00000402 <main>:
#include <avr/io.h>
#include <util/delay.h>
//#include <stdio.h>
#include <avr/interrupt.h>

int main( void ){
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	66 97       	sbiw	r28, 0x16	; 22
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
	cli();
 416:	f8 94       	cli
	// Initializations 
	UART_Init( MYUBRR );
 418:	8f e1       	ldi	r24, 0x1F	; 31
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <UART_Init>
	ADC_init();
 420:	0e 94 f7 01 	call	0x3ee	; 0x3ee <ADC_init>
	
	//JOY_init();
	//TOUCH_init();
	//OLED_init();
	//MENU_init();
	SPI_init();
 424:	0e 94 ca 01 	call	0x394	; 0x394 <SPI_init>
	MCP_init();
 428:	0e 94 75 01 	call	0x2ea	; 0x2ea <MCP_init>
	CAN_init();
 42c:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	printf("\n\n\nInit done\n");
 430:	87 e3       	ldi	r24, 0x37	; 55
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 d6 02 	call	0x5ac	; 0x5ac <puts>
	sei();
 438:	78 94       	sei
	can_msg send = {.id = 3, .length = 1, .data[0] = 200};
 43a:	fe 01       	movw	r30, r28
 43c:	31 96       	adiw	r30, 0x01	; 1
 43e:	8b e0       	ldi	r24, 0x0B	; 11
 440:	df 01       	movw	r26, r30
 442:	1d 92       	st	X+, r1
 444:	8a 95       	dec	r24
 446:	e9 f7       	brne	.-6      	; 0x442 <main+0x40>
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	9a 83       	std	Y+2, r25	; 0x02
 44e:	89 83       	std	Y+1, r24	; 0x01
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	8b 83       	std	Y+3, r24	; 0x03
 454:	88 ec       	ldi	r24, 0xC8	; 200
 456:	8c 83       	std	Y+4, r24	; 0x04
		CAN_msg_send(&send);
		//printf("Message sent\n");
		_delay_us(200);
		CAN_handle_interrupt(&receive);
		//printf("Message received\n");
		printf("\n\nSent message: %d \t Received message: %d \n", send.data[0], receive.data[0]);
 458:	0f 2e       	mov	r0, r31
 45a:	f4 e4       	ldi	r31, 0x44	; 68
 45c:	cf 2e       	mov	r12, r31
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	df 2e       	mov	r13, r31
 462:	f0 2d       	mov	r31, r0
		printf("Sent id: %d \t Received id: %d \n", send.id, receive.id);
 464:	0f 2e       	mov	r0, r31
 466:	f0 e7       	ldi	r31, 0x70	; 112
 468:	ef 2e       	mov	r14, r31
 46a:	f1 e0       	ldi	r31, 0x01	; 1
 46c:	ff 2e       	mov	r15, r31
 46e:	f0 2d       	mov	r31, r0
		printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
 470:	00 e9       	ldi	r16, 0x90	; 144
 472:	11 e0       	ldi	r17, 0x01	; 1
	can_msg send = {.id = 3, .length = 1, .data[0] = 200};
	can_msg receive;
	
	while(1){
		//printf("While loop\n");
		CAN_msg_send(&send);
 474:	ce 01       	movw	r24, r28
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	0e 94 67 00 	call	0xce	; 0xce <CAN_msg_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	85 ef       	ldi	r24, 0xF5	; 245
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <main+0x7e>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x84>
 486:	00 00       	nop
		//printf("Message sent\n");
		_delay_us(200);
		CAN_handle_interrupt(&receive);
 488:	ce 01       	movw	r24, r28
 48a:	0c 96       	adiw	r24, 0x0c	; 12
 48c:	0e 94 05 01 	call	0x20a	; 0x20a <CAN_handle_interrupt>
		//printf("Message received\n");
		printf("\n\nSent message: %d \t Received message: %d \n", send.data[0], receive.data[0]);
 490:	8f 85       	ldd	r24, Y+15	; 0x0f
 492:	1f 92       	push	r1
 494:	8f 93       	push	r24
 496:	8c 81       	ldd	r24, Y+4	; 0x04
 498:	1f 92       	push	r1
 49a:	8f 93       	push	r24
 49c:	df 92       	push	r13
 49e:	cf 92       	push	r12
 4a0:	0e 94 c2 02 	call	0x584	; 0x584 <printf>
		printf("Sent id: %d \t Received id: %d \n", send.id, receive.id);
 4a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 4a6:	8f 93       	push	r24
 4a8:	8c 85       	ldd	r24, Y+12	; 0x0c
 4aa:	8f 93       	push	r24
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	8f 93       	push	r24
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	8f 93       	push	r24
 4b4:	ff 92       	push	r15
 4b6:	ef 92       	push	r14
 4b8:	0e 94 c2 02 	call	0x584	; 0x584 <printf>
		printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
 4bc:	8e 85       	ldd	r24, Y+14	; 0x0e
 4be:	1f 92       	push	r1
 4c0:	8f 93       	push	r24
 4c2:	8b 81       	ldd	r24, Y+3	; 0x03
 4c4:	1f 92       	push	r1
 4c6:	8f 93       	push	r24
 4c8:	1f 93       	push	r17
 4ca:	0f 93       	push	r16
 4cc:	0e 94 c2 02 	call	0x584	; 0x584 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d0:	9f ef       	ldi	r25, 0xFF	; 255
 4d2:	af ef       	ldi	r26, 0xFF	; 255
 4d4:	bd e1       	ldi	r27, 0x1D	; 29
 4d6:	91 50       	subi	r25, 0x01	; 1
 4d8:	a0 40       	sbci	r26, 0x00	; 0
 4da:	b0 40       	sbci	r27, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <main+0xd4>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <main+0xde>
 4e0:	00 00       	nop
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	c3 cf       	rjmp	.-122    	; 0x474 <main+0x72>

000004ee <fdevopen>:
 4ee:	0f 93       	push	r16
 4f0:	1f 93       	push	r17
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
 4f8:	8b 01       	movw	r16, r22
 4fa:	00 97       	sbiw	r24, 0x00	; 0
 4fc:	31 f4       	brne	.+12     	; 0x50a <__stack+0xb>
 4fe:	61 15       	cp	r22, r1
 500:	71 05       	cpc	r23, r1
 502:	19 f4       	brne	.+6      	; 0x50a <__stack+0xb>
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	38 c0       	rjmp	.+112    	; 0x57a <__stack+0x7b>
 50a:	6e e0       	ldi	r22, 0x0E	; 14
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 d5 04 	call	0x9aa	; 0x9aa <calloc>
 516:	fc 01       	movw	r30, r24
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	a1 f3       	breq	.-24     	; 0x504 <__stack+0x5>
 51c:	80 e8       	ldi	r24, 0x80	; 128
 51e:	83 83       	std	Z+3, r24	; 0x03
 520:	01 15       	cp	r16, r1
 522:	11 05       	cpc	r17, r1
 524:	71 f0       	breq	.+28     	; 0x542 <__stack+0x43>
 526:	13 87       	std	Z+11, r17	; 0x0b
 528:	02 87       	std	Z+10, r16	; 0x0a
 52a:	81 e8       	ldi	r24, 0x81	; 129
 52c:	83 83       	std	Z+3, r24	; 0x03
 52e:	80 91 b9 01 	lds	r24, 0x01B9
 532:	90 91 ba 01 	lds	r25, 0x01BA
 536:	89 2b       	or	r24, r25
 538:	21 f4       	brne	.+8      	; 0x542 <__stack+0x43>
 53a:	f0 93 ba 01 	sts	0x01BA, r31
 53e:	e0 93 b9 01 	sts	0x01B9, r30
 542:	20 97       	sbiw	r28, 0x00	; 0
 544:	c9 f0       	breq	.+50     	; 0x578 <__stack+0x79>
 546:	d1 87       	std	Z+9, r29	; 0x09
 548:	c0 87       	std	Z+8, r28	; 0x08
 54a:	83 81       	ldd	r24, Z+3	; 0x03
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	83 83       	std	Z+3, r24	; 0x03
 550:	80 91 bb 01 	lds	r24, 0x01BB
 554:	90 91 bc 01 	lds	r25, 0x01BC
 558:	89 2b       	or	r24, r25
 55a:	71 f4       	brne	.+28     	; 0x578 <__stack+0x79>
 55c:	f0 93 bc 01 	sts	0x01BC, r31
 560:	e0 93 bb 01 	sts	0x01BB, r30
 564:	80 91 bd 01 	lds	r24, 0x01BD
 568:	90 91 be 01 	lds	r25, 0x01BE
 56c:	89 2b       	or	r24, r25
 56e:	21 f4       	brne	.+8      	; 0x578 <__stack+0x79>
 570:	f0 93 be 01 	sts	0x01BE, r31
 574:	e0 93 bd 01 	sts	0x01BD, r30
 578:	cf 01       	movw	r24, r30
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	08 95       	ret

00000584 <printf>:
 584:	a0 e0       	ldi	r26, 0x00	; 0
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	e8 ec       	ldi	r30, 0xC8	; 200
 58a:	f2 e0       	ldi	r31, 0x02	; 2
 58c:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__prologue_saves__+0x20>
 590:	fe 01       	movw	r30, r28
 592:	35 96       	adiw	r30, 0x05	; 5
 594:	61 91       	ld	r22, Z+
 596:	71 91       	ld	r23, Z+
 598:	af 01       	movw	r20, r30
 59a:	80 91 bb 01 	lds	r24, 0x01BB
 59e:	90 91 bc 01 	lds	r25, 0x01BC
 5a2:	0e 94 03 03 	call	0x606	; 0x606 <vfprintf>
 5a6:	e2 e0       	ldi	r30, 0x02	; 2
 5a8:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__epilogue_restores__+0x20>

000005ac <puts>:
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	e0 91 bb 01 	lds	r30, 0x01BB
 5b8:	f0 91 bc 01 	lds	r31, 0x01BC
 5bc:	23 81       	ldd	r18, Z+3	; 0x03
 5be:	21 ff       	sbrs	r18, 1
 5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <puts+0x4c>
 5c2:	ec 01       	movw	r28, r24
 5c4:	00 e0       	ldi	r16, 0x00	; 0
 5c6:	10 e0       	ldi	r17, 0x00	; 0
 5c8:	89 91       	ld	r24, Y+
 5ca:	60 91 bb 01 	lds	r22, 0x01BB
 5ce:	70 91 bc 01 	lds	r23, 0x01BC
 5d2:	db 01       	movw	r26, r22
 5d4:	18 96       	adiw	r26, 0x08	; 8
 5d6:	ed 91       	ld	r30, X+
 5d8:	fc 91       	ld	r31, X
 5da:	19 97       	sbiw	r26, 0x09	; 9
 5dc:	88 23       	and	r24, r24
 5de:	31 f0       	breq	.+12     	; 0x5ec <puts+0x40>
 5e0:	09 95       	icall
 5e2:	89 2b       	or	r24, r25
 5e4:	89 f3       	breq	.-30     	; 0x5c8 <puts+0x1c>
 5e6:	0f ef       	ldi	r16, 0xFF	; 255
 5e8:	1f ef       	ldi	r17, 0xFF	; 255
 5ea:	ee cf       	rjmp	.-36     	; 0x5c8 <puts+0x1c>
 5ec:	8a e0       	ldi	r24, 0x0A	; 10
 5ee:	09 95       	icall
 5f0:	89 2b       	or	r24, r25
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <puts+0x4c>
 5f4:	c8 01       	movw	r24, r16
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <puts+0x50>
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	9f ef       	ldi	r25, 0xFF	; 255
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	08 95       	ret

00000606 <vfprintf>:
 606:	ac e0       	ldi	r26, 0x0C	; 12
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e9 e0       	ldi	r30, 0x09	; 9
 60c:	f3 e0       	ldi	r31, 0x03	; 3
 60e:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__prologue_saves__>
 612:	7c 01       	movw	r14, r24
 614:	6b 01       	movw	r12, r22
 616:	8a 01       	movw	r16, r20
 618:	fc 01       	movw	r30, r24
 61a:	17 82       	std	Z+7, r1	; 0x07
 61c:	16 82       	std	Z+6, r1	; 0x06
 61e:	83 81       	ldd	r24, Z+3	; 0x03
 620:	81 ff       	sbrs	r24, 1
 622:	bd c1       	rjmp	.+890    	; 0x99e <vfprintf+0x398>
 624:	ce 01       	movw	r24, r28
 626:	01 96       	adiw	r24, 0x01	; 1
 628:	4c 01       	movw	r8, r24
 62a:	f7 01       	movw	r30, r14
 62c:	93 81       	ldd	r25, Z+3	; 0x03
 62e:	f6 01       	movw	r30, r12
 630:	93 fd       	sbrc	r25, 3
 632:	85 91       	lpm	r24, Z+
 634:	93 ff       	sbrs	r25, 3
 636:	81 91       	ld	r24, Z+
 638:	6f 01       	movw	r12, r30
 63a:	88 23       	and	r24, r24
 63c:	09 f4       	brne	.+2      	; 0x640 <vfprintf+0x3a>
 63e:	ab c1       	rjmp	.+854    	; 0x996 <vfprintf+0x390>
 640:	85 32       	cpi	r24, 0x25	; 37
 642:	39 f4       	brne	.+14     	; 0x652 <vfprintf+0x4c>
 644:	93 fd       	sbrc	r25, 3
 646:	85 91       	lpm	r24, Z+
 648:	93 ff       	sbrs	r25, 3
 64a:	81 91       	ld	r24, Z+
 64c:	6f 01       	movw	r12, r30
 64e:	85 32       	cpi	r24, 0x25	; 37
 650:	29 f4       	brne	.+10     	; 0x65c <vfprintf+0x56>
 652:	b7 01       	movw	r22, r14
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 65a:	e7 cf       	rjmp	.-50     	; 0x62a <vfprintf+0x24>
 65c:	51 2c       	mov	r5, r1
 65e:	31 2c       	mov	r3, r1
 660:	20 e0       	ldi	r18, 0x00	; 0
 662:	20 32       	cpi	r18, 0x20	; 32
 664:	a0 f4       	brcc	.+40     	; 0x68e <vfprintf+0x88>
 666:	8b 32       	cpi	r24, 0x2B	; 43
 668:	69 f0       	breq	.+26     	; 0x684 <vfprintf+0x7e>
 66a:	30 f4       	brcc	.+12     	; 0x678 <vfprintf+0x72>
 66c:	80 32       	cpi	r24, 0x20	; 32
 66e:	59 f0       	breq	.+22     	; 0x686 <vfprintf+0x80>
 670:	83 32       	cpi	r24, 0x23	; 35
 672:	69 f4       	brne	.+26     	; 0x68e <vfprintf+0x88>
 674:	20 61       	ori	r18, 0x10	; 16
 676:	2c c0       	rjmp	.+88     	; 0x6d0 <vfprintf+0xca>
 678:	8d 32       	cpi	r24, 0x2D	; 45
 67a:	39 f0       	breq	.+14     	; 0x68a <vfprintf+0x84>
 67c:	80 33       	cpi	r24, 0x30	; 48
 67e:	39 f4       	brne	.+14     	; 0x68e <vfprintf+0x88>
 680:	21 60       	ori	r18, 0x01	; 1
 682:	26 c0       	rjmp	.+76     	; 0x6d0 <vfprintf+0xca>
 684:	22 60       	ori	r18, 0x02	; 2
 686:	24 60       	ori	r18, 0x04	; 4
 688:	23 c0       	rjmp	.+70     	; 0x6d0 <vfprintf+0xca>
 68a:	28 60       	ori	r18, 0x08	; 8
 68c:	21 c0       	rjmp	.+66     	; 0x6d0 <vfprintf+0xca>
 68e:	27 fd       	sbrc	r18, 7
 690:	27 c0       	rjmp	.+78     	; 0x6e0 <vfprintf+0xda>
 692:	30 ed       	ldi	r19, 0xD0	; 208
 694:	38 0f       	add	r19, r24
 696:	3a 30       	cpi	r19, 0x0A	; 10
 698:	78 f4       	brcc	.+30     	; 0x6b8 <vfprintf+0xb2>
 69a:	26 ff       	sbrs	r18, 6
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <vfprintf+0xa4>
 69e:	fa e0       	ldi	r31, 0x0A	; 10
 6a0:	5f 9e       	mul	r5, r31
 6a2:	30 0d       	add	r19, r0
 6a4:	11 24       	eor	r1, r1
 6a6:	53 2e       	mov	r5, r19
 6a8:	13 c0       	rjmp	.+38     	; 0x6d0 <vfprintf+0xca>
 6aa:	8a e0       	ldi	r24, 0x0A	; 10
 6ac:	38 9e       	mul	r3, r24
 6ae:	30 0d       	add	r19, r0
 6b0:	11 24       	eor	r1, r1
 6b2:	33 2e       	mov	r3, r19
 6b4:	20 62       	ori	r18, 0x20	; 32
 6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <vfprintf+0xca>
 6b8:	8e 32       	cpi	r24, 0x2E	; 46
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <vfprintf+0xbe>
 6bc:	26 fd       	sbrc	r18, 6
 6be:	6b c1       	rjmp	.+726    	; 0x996 <vfprintf+0x390>
 6c0:	20 64       	ori	r18, 0x40	; 64
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <vfprintf+0xca>
 6c4:	8c 36       	cpi	r24, 0x6C	; 108
 6c6:	11 f4       	brne	.+4      	; 0x6cc <vfprintf+0xc6>
 6c8:	20 68       	ori	r18, 0x80	; 128
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <vfprintf+0xca>
 6cc:	88 36       	cpi	r24, 0x68	; 104
 6ce:	41 f4       	brne	.+16     	; 0x6e0 <vfprintf+0xda>
 6d0:	f6 01       	movw	r30, r12
 6d2:	93 fd       	sbrc	r25, 3
 6d4:	85 91       	lpm	r24, Z+
 6d6:	93 ff       	sbrs	r25, 3
 6d8:	81 91       	ld	r24, Z+
 6da:	6f 01       	movw	r12, r30
 6dc:	81 11       	cpse	r24, r1
 6de:	c1 cf       	rjmp	.-126    	; 0x662 <vfprintf+0x5c>
 6e0:	98 2f       	mov	r25, r24
 6e2:	9f 7d       	andi	r25, 0xDF	; 223
 6e4:	95 54       	subi	r25, 0x45	; 69
 6e6:	93 30       	cpi	r25, 0x03	; 3
 6e8:	28 f4       	brcc	.+10     	; 0x6f4 <vfprintf+0xee>
 6ea:	0c 5f       	subi	r16, 0xFC	; 252
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	ff e3       	ldi	r31, 0x3F	; 63
 6f0:	f9 83       	std	Y+1, r31	; 0x01
 6f2:	0d c0       	rjmp	.+26     	; 0x70e <vfprintf+0x108>
 6f4:	83 36       	cpi	r24, 0x63	; 99
 6f6:	31 f0       	breq	.+12     	; 0x704 <vfprintf+0xfe>
 6f8:	83 37       	cpi	r24, 0x73	; 115
 6fa:	71 f0       	breq	.+28     	; 0x718 <vfprintf+0x112>
 6fc:	83 35       	cpi	r24, 0x53	; 83
 6fe:	09 f0       	breq	.+2      	; 0x702 <vfprintf+0xfc>
 700:	5b c0       	rjmp	.+182    	; 0x7b8 <vfprintf+0x1b2>
 702:	22 c0       	rjmp	.+68     	; 0x748 <vfprintf+0x142>
 704:	f8 01       	movw	r30, r16
 706:	80 81       	ld	r24, Z
 708:	89 83       	std	Y+1, r24	; 0x01
 70a:	0e 5f       	subi	r16, 0xFE	; 254
 70c:	1f 4f       	sbci	r17, 0xFF	; 255
 70e:	44 24       	eor	r4, r4
 710:	43 94       	inc	r4
 712:	51 2c       	mov	r5, r1
 714:	54 01       	movw	r10, r8
 716:	15 c0       	rjmp	.+42     	; 0x742 <vfprintf+0x13c>
 718:	38 01       	movw	r6, r16
 71a:	f2 e0       	ldi	r31, 0x02	; 2
 71c:	6f 0e       	add	r6, r31
 71e:	71 1c       	adc	r7, r1
 720:	f8 01       	movw	r30, r16
 722:	a0 80       	ld	r10, Z
 724:	b1 80       	ldd	r11, Z+1	; 0x01
 726:	26 ff       	sbrs	r18, 6
 728:	03 c0       	rjmp	.+6      	; 0x730 <vfprintf+0x12a>
 72a:	65 2d       	mov	r22, r5
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <vfprintf+0x12e>
 730:	6f ef       	ldi	r22, 0xFF	; 255
 732:	7f ef       	ldi	r23, 0xFF	; 255
 734:	c5 01       	movw	r24, r10
 736:	2c 87       	std	Y+12, r18	; 0x0c
 738:	0e 94 2a 06 	call	0xc54	; 0xc54 <strnlen>
 73c:	2c 01       	movw	r4, r24
 73e:	83 01       	movw	r16, r6
 740:	2c 85       	ldd	r18, Y+12	; 0x0c
 742:	2f 77       	andi	r18, 0x7F	; 127
 744:	22 2e       	mov	r2, r18
 746:	17 c0       	rjmp	.+46     	; 0x776 <vfprintf+0x170>
 748:	38 01       	movw	r6, r16
 74a:	f2 e0       	ldi	r31, 0x02	; 2
 74c:	6f 0e       	add	r6, r31
 74e:	71 1c       	adc	r7, r1
 750:	f8 01       	movw	r30, r16
 752:	a0 80       	ld	r10, Z
 754:	b1 80       	ldd	r11, Z+1	; 0x01
 756:	26 ff       	sbrs	r18, 6
 758:	03 c0       	rjmp	.+6      	; 0x760 <vfprintf+0x15a>
 75a:	65 2d       	mov	r22, r5
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	02 c0       	rjmp	.+4      	; 0x764 <vfprintf+0x15e>
 760:	6f ef       	ldi	r22, 0xFF	; 255
 762:	7f ef       	ldi	r23, 0xFF	; 255
 764:	c5 01       	movw	r24, r10
 766:	2c 87       	std	Y+12, r18	; 0x0c
 768:	0e 94 18 06 	call	0xc30	; 0xc30 <strnlen_P>
 76c:	2c 01       	movw	r4, r24
 76e:	2c 85       	ldd	r18, Y+12	; 0x0c
 770:	20 68       	ori	r18, 0x80	; 128
 772:	22 2e       	mov	r2, r18
 774:	83 01       	movw	r16, r6
 776:	23 fc       	sbrc	r2, 3
 778:	1b c0       	rjmp	.+54     	; 0x7b0 <vfprintf+0x1aa>
 77a:	83 2d       	mov	r24, r3
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	48 16       	cp	r4, r24
 780:	59 06       	cpc	r5, r25
 782:	b0 f4       	brcc	.+44     	; 0x7b0 <vfprintf+0x1aa>
 784:	b7 01       	movw	r22, r14
 786:	80 e2       	ldi	r24, 0x20	; 32
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 78e:	3a 94       	dec	r3
 790:	f4 cf       	rjmp	.-24     	; 0x77a <vfprintf+0x174>
 792:	f5 01       	movw	r30, r10
 794:	27 fc       	sbrc	r2, 7
 796:	85 91       	lpm	r24, Z+
 798:	27 fe       	sbrs	r2, 7
 79a:	81 91       	ld	r24, Z+
 79c:	5f 01       	movw	r10, r30
 79e:	b7 01       	movw	r22, r14
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 7a6:	31 10       	cpse	r3, r1
 7a8:	3a 94       	dec	r3
 7aa:	f1 e0       	ldi	r31, 0x01	; 1
 7ac:	4f 1a       	sub	r4, r31
 7ae:	51 08       	sbc	r5, r1
 7b0:	41 14       	cp	r4, r1
 7b2:	51 04       	cpc	r5, r1
 7b4:	71 f7       	brne	.-36     	; 0x792 <vfprintf+0x18c>
 7b6:	e5 c0       	rjmp	.+458    	; 0x982 <vfprintf+0x37c>
 7b8:	84 36       	cpi	r24, 0x64	; 100
 7ba:	11 f0       	breq	.+4      	; 0x7c0 <vfprintf+0x1ba>
 7bc:	89 36       	cpi	r24, 0x69	; 105
 7be:	39 f5       	brne	.+78     	; 0x80e <vfprintf+0x208>
 7c0:	f8 01       	movw	r30, r16
 7c2:	27 ff       	sbrs	r18, 7
 7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <vfprintf+0x1ce>
 7c6:	60 81       	ld	r22, Z
 7c8:	71 81       	ldd	r23, Z+1	; 0x01
 7ca:	82 81       	ldd	r24, Z+2	; 0x02
 7cc:	93 81       	ldd	r25, Z+3	; 0x03
 7ce:	0c 5f       	subi	r16, 0xFC	; 252
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <vfprintf+0x1de>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	88 27       	eor	r24, r24
 7da:	77 fd       	sbrc	r23, 7
 7dc:	80 95       	com	r24
 7de:	98 2f       	mov	r25, r24
 7e0:	0e 5f       	subi	r16, 0xFE	; 254
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	2f 76       	andi	r18, 0x6F	; 111
 7e6:	b2 2e       	mov	r11, r18
 7e8:	97 ff       	sbrs	r25, 7
 7ea:	09 c0       	rjmp	.+18     	; 0x7fe <vfprintf+0x1f8>
 7ec:	90 95       	com	r25
 7ee:	80 95       	com	r24
 7f0:	70 95       	com	r23
 7f2:	61 95       	neg	r22
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	20 68       	ori	r18, 0x80	; 128
 7fc:	b2 2e       	mov	r11, r18
 7fe:	2a e0       	ldi	r18, 0x0A	; 10
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	a4 01       	movw	r20, r8
 804:	0e 94 67 06 	call	0xcce	; 0xcce <__ultoa_invert>
 808:	a8 2e       	mov	r10, r24
 80a:	a8 18       	sub	r10, r8
 80c:	44 c0       	rjmp	.+136    	; 0x896 <vfprintf+0x290>
 80e:	85 37       	cpi	r24, 0x75	; 117
 810:	29 f4       	brne	.+10     	; 0x81c <vfprintf+0x216>
 812:	2f 7e       	andi	r18, 0xEF	; 239
 814:	b2 2e       	mov	r11, r18
 816:	2a e0       	ldi	r18, 0x0A	; 10
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	25 c0       	rjmp	.+74     	; 0x866 <vfprintf+0x260>
 81c:	f2 2f       	mov	r31, r18
 81e:	f9 7f       	andi	r31, 0xF9	; 249
 820:	bf 2e       	mov	r11, r31
 822:	8f 36       	cpi	r24, 0x6F	; 111
 824:	c1 f0       	breq	.+48     	; 0x856 <vfprintf+0x250>
 826:	18 f4       	brcc	.+6      	; 0x82e <vfprintf+0x228>
 828:	88 35       	cpi	r24, 0x58	; 88
 82a:	79 f0       	breq	.+30     	; 0x84a <vfprintf+0x244>
 82c:	b4 c0       	rjmp	.+360    	; 0x996 <vfprintf+0x390>
 82e:	80 37       	cpi	r24, 0x70	; 112
 830:	19 f0       	breq	.+6      	; 0x838 <vfprintf+0x232>
 832:	88 37       	cpi	r24, 0x78	; 120
 834:	21 f0       	breq	.+8      	; 0x83e <vfprintf+0x238>
 836:	af c0       	rjmp	.+350    	; 0x996 <vfprintf+0x390>
 838:	2f 2f       	mov	r18, r31
 83a:	20 61       	ori	r18, 0x10	; 16
 83c:	b2 2e       	mov	r11, r18
 83e:	b4 fe       	sbrs	r11, 4
 840:	0d c0       	rjmp	.+26     	; 0x85c <vfprintf+0x256>
 842:	8b 2d       	mov	r24, r11
 844:	84 60       	ori	r24, 0x04	; 4
 846:	b8 2e       	mov	r11, r24
 848:	09 c0       	rjmp	.+18     	; 0x85c <vfprintf+0x256>
 84a:	24 ff       	sbrs	r18, 4
 84c:	0a c0       	rjmp	.+20     	; 0x862 <vfprintf+0x25c>
 84e:	9f 2f       	mov	r25, r31
 850:	96 60       	ori	r25, 0x06	; 6
 852:	b9 2e       	mov	r11, r25
 854:	06 c0       	rjmp	.+12     	; 0x862 <vfprintf+0x25c>
 856:	28 e0       	ldi	r18, 0x08	; 8
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	05 c0       	rjmp	.+10     	; 0x866 <vfprintf+0x260>
 85c:	20 e1       	ldi	r18, 0x10	; 16
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	02 c0       	rjmp	.+4      	; 0x866 <vfprintf+0x260>
 862:	20 e1       	ldi	r18, 0x10	; 16
 864:	32 e0       	ldi	r19, 0x02	; 2
 866:	f8 01       	movw	r30, r16
 868:	b7 fe       	sbrs	r11, 7
 86a:	07 c0       	rjmp	.+14     	; 0x87a <vfprintf+0x274>
 86c:	60 81       	ld	r22, Z
 86e:	71 81       	ldd	r23, Z+1	; 0x01
 870:	82 81       	ldd	r24, Z+2	; 0x02
 872:	93 81       	ldd	r25, Z+3	; 0x03
 874:	0c 5f       	subi	r16, 0xFC	; 252
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	06 c0       	rjmp	.+12     	; 0x886 <vfprintf+0x280>
 87a:	60 81       	ld	r22, Z
 87c:	71 81       	ldd	r23, Z+1	; 0x01
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 5f       	subi	r16, 0xFE	; 254
 884:	1f 4f       	sbci	r17, 0xFF	; 255
 886:	a4 01       	movw	r20, r8
 888:	0e 94 67 06 	call	0xcce	; 0xcce <__ultoa_invert>
 88c:	a8 2e       	mov	r10, r24
 88e:	a8 18       	sub	r10, r8
 890:	fb 2d       	mov	r31, r11
 892:	ff 77       	andi	r31, 0x7F	; 127
 894:	bf 2e       	mov	r11, r31
 896:	b6 fe       	sbrs	r11, 6
 898:	0b c0       	rjmp	.+22     	; 0x8b0 <vfprintf+0x2aa>
 89a:	2b 2d       	mov	r18, r11
 89c:	2e 7f       	andi	r18, 0xFE	; 254
 89e:	a5 14       	cp	r10, r5
 8a0:	50 f4       	brcc	.+20     	; 0x8b6 <vfprintf+0x2b0>
 8a2:	b4 fe       	sbrs	r11, 4
 8a4:	0a c0       	rjmp	.+20     	; 0x8ba <vfprintf+0x2b4>
 8a6:	b2 fc       	sbrc	r11, 2
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <vfprintf+0x2b4>
 8aa:	2b 2d       	mov	r18, r11
 8ac:	2e 7e       	andi	r18, 0xEE	; 238
 8ae:	05 c0       	rjmp	.+10     	; 0x8ba <vfprintf+0x2b4>
 8b0:	7a 2c       	mov	r7, r10
 8b2:	2b 2d       	mov	r18, r11
 8b4:	03 c0       	rjmp	.+6      	; 0x8bc <vfprintf+0x2b6>
 8b6:	7a 2c       	mov	r7, r10
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <vfprintf+0x2b6>
 8ba:	75 2c       	mov	r7, r5
 8bc:	24 ff       	sbrs	r18, 4
 8be:	0d c0       	rjmp	.+26     	; 0x8da <vfprintf+0x2d4>
 8c0:	fe 01       	movw	r30, r28
 8c2:	ea 0d       	add	r30, r10
 8c4:	f1 1d       	adc	r31, r1
 8c6:	80 81       	ld	r24, Z
 8c8:	80 33       	cpi	r24, 0x30	; 48
 8ca:	11 f4       	brne	.+4      	; 0x8d0 <vfprintf+0x2ca>
 8cc:	29 7e       	andi	r18, 0xE9	; 233
 8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <vfprintf+0x2dc>
 8d0:	22 ff       	sbrs	r18, 2
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <vfprintf+0x2da>
 8d4:	73 94       	inc	r7
 8d6:	73 94       	inc	r7
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <vfprintf+0x2dc>
 8da:	82 2f       	mov	r24, r18
 8dc:	86 78       	andi	r24, 0x86	; 134
 8de:	09 f0       	breq	.+2      	; 0x8e2 <vfprintf+0x2dc>
 8e0:	73 94       	inc	r7
 8e2:	23 fd       	sbrc	r18, 3
 8e4:	13 c0       	rjmp	.+38     	; 0x90c <vfprintf+0x306>
 8e6:	20 ff       	sbrs	r18, 0
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0x2f0>
 8ea:	5a 2c       	mov	r5, r10
 8ec:	73 14       	cp	r7, r3
 8ee:	18 f4       	brcc	.+6      	; 0x8f6 <vfprintf+0x2f0>
 8f0:	53 0c       	add	r5, r3
 8f2:	57 18       	sub	r5, r7
 8f4:	73 2c       	mov	r7, r3
 8f6:	73 14       	cp	r7, r3
 8f8:	68 f4       	brcc	.+26     	; 0x914 <vfprintf+0x30e>
 8fa:	b7 01       	movw	r22, r14
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	2c 87       	std	Y+12, r18	; 0x0c
 902:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 906:	73 94       	inc	r7
 908:	2c 85       	ldd	r18, Y+12	; 0x0c
 90a:	f5 cf       	rjmp	.-22     	; 0x8f6 <vfprintf+0x2f0>
 90c:	73 14       	cp	r7, r3
 90e:	10 f4       	brcc	.+4      	; 0x914 <vfprintf+0x30e>
 910:	37 18       	sub	r3, r7
 912:	01 c0       	rjmp	.+2      	; 0x916 <vfprintf+0x310>
 914:	31 2c       	mov	r3, r1
 916:	24 ff       	sbrs	r18, 4
 918:	12 c0       	rjmp	.+36     	; 0x93e <vfprintf+0x338>
 91a:	b7 01       	movw	r22, r14
 91c:	80 e3       	ldi	r24, 0x30	; 48
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	2c 87       	std	Y+12, r18	; 0x0c
 922:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 926:	2c 85       	ldd	r18, Y+12	; 0x0c
 928:	22 ff       	sbrs	r18, 2
 92a:	17 c0       	rjmp	.+46     	; 0x95a <vfprintf+0x354>
 92c:	21 ff       	sbrs	r18, 1
 92e:	03 c0       	rjmp	.+6      	; 0x936 <vfprintf+0x330>
 930:	88 e5       	ldi	r24, 0x58	; 88
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	02 c0       	rjmp	.+4      	; 0x93a <vfprintf+0x334>
 936:	88 e7       	ldi	r24, 0x78	; 120
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	b7 01       	movw	r22, r14
 93c:	0c c0       	rjmp	.+24     	; 0x956 <vfprintf+0x350>
 93e:	82 2f       	mov	r24, r18
 940:	86 78       	andi	r24, 0x86	; 134
 942:	59 f0       	breq	.+22     	; 0x95a <vfprintf+0x354>
 944:	21 fd       	sbrc	r18, 1
 946:	02 c0       	rjmp	.+4      	; 0x94c <vfprintf+0x346>
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	01 c0       	rjmp	.+2      	; 0x94e <vfprintf+0x348>
 94c:	8b e2       	ldi	r24, 0x2B	; 43
 94e:	27 fd       	sbrc	r18, 7
 950:	8d e2       	ldi	r24, 0x2D	; 45
 952:	b7 01       	movw	r22, r14
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 95a:	a5 14       	cp	r10, r5
 95c:	38 f4       	brcc	.+14     	; 0x96c <vfprintf+0x366>
 95e:	b7 01       	movw	r22, r14
 960:	80 e3       	ldi	r24, 0x30	; 48
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 968:	5a 94       	dec	r5
 96a:	f7 cf       	rjmp	.-18     	; 0x95a <vfprintf+0x354>
 96c:	aa 94       	dec	r10
 96e:	f4 01       	movw	r30, r8
 970:	ea 0d       	add	r30, r10
 972:	f1 1d       	adc	r31, r1
 974:	80 81       	ld	r24, Z
 976:	b7 01       	movw	r22, r14
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 97e:	a1 10       	cpse	r10, r1
 980:	f5 cf       	rjmp	.-22     	; 0x96c <vfprintf+0x366>
 982:	33 20       	and	r3, r3
 984:	09 f4       	brne	.+2      	; 0x988 <vfprintf+0x382>
 986:	51 ce       	rjmp	.-862    	; 0x62a <vfprintf+0x24>
 988:	b7 01       	movw	r22, r14
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 35 06 	call	0xc6a	; 0xc6a <fputc>
 992:	3a 94       	dec	r3
 994:	f6 cf       	rjmp	.-20     	; 0x982 <vfprintf+0x37c>
 996:	f7 01       	movw	r30, r14
 998:	86 81       	ldd	r24, Z+6	; 0x06
 99a:	97 81       	ldd	r25, Z+7	; 0x07
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <vfprintf+0x39c>
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	9f ef       	ldi	r25, 0xFF	; 255
 9a2:	2c 96       	adiw	r28, 0x0c	; 12
 9a4:	e2 e1       	ldi	r30, 0x12	; 18
 9a6:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__epilogue_restores__>

000009aa <calloc>:
 9aa:	0f 93       	push	r16
 9ac:	1f 93       	push	r17
 9ae:	cf 93       	push	r28
 9b0:	df 93       	push	r29
 9b2:	86 9f       	mul	r24, r22
 9b4:	80 01       	movw	r16, r0
 9b6:	87 9f       	mul	r24, r23
 9b8:	10 0d       	add	r17, r0
 9ba:	96 9f       	mul	r25, r22
 9bc:	10 0d       	add	r17, r0
 9be:	11 24       	eor	r1, r1
 9c0:	c8 01       	movw	r24, r16
 9c2:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <malloc>
 9c6:	ec 01       	movw	r28, r24
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	29 f0       	breq	.+10     	; 0x9d6 <calloc+0x2c>
 9cc:	a8 01       	movw	r20, r16
 9ce:	60 e0       	ldi	r22, 0x00	; 0
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	0e 94 23 06 	call	0xc46	; 0xc46 <memset>
 9d6:	ce 01       	movw	r24, r28
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	08 95       	ret

000009e2 <malloc>:
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
 9e6:	82 30       	cpi	r24, 0x02	; 2
 9e8:	91 05       	cpc	r25, r1
 9ea:	10 f4       	brcc	.+4      	; 0x9f0 <malloc+0xe>
 9ec:	82 e0       	ldi	r24, 0x02	; 2
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	e0 91 c1 01 	lds	r30, 0x01C1
 9f4:	f0 91 c2 01 	lds	r31, 0x01C2
 9f8:	20 e0       	ldi	r18, 0x00	; 0
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	a0 e0       	ldi	r26, 0x00	; 0
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	30 97       	sbiw	r30, 0x00	; 0
 a02:	39 f1       	breq	.+78     	; 0xa52 <malloc+0x70>
 a04:	40 81       	ld	r20, Z
 a06:	51 81       	ldd	r21, Z+1	; 0x01
 a08:	48 17       	cp	r20, r24
 a0a:	59 07       	cpc	r21, r25
 a0c:	b8 f0       	brcs	.+46     	; 0xa3c <malloc+0x5a>
 a0e:	48 17       	cp	r20, r24
 a10:	59 07       	cpc	r21, r25
 a12:	71 f4       	brne	.+28     	; 0xa30 <malloc+0x4e>
 a14:	82 81       	ldd	r24, Z+2	; 0x02
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	10 97       	sbiw	r26, 0x00	; 0
 a1a:	29 f0       	breq	.+10     	; 0xa26 <malloc+0x44>
 a1c:	13 96       	adiw	r26, 0x03	; 3
 a1e:	9c 93       	st	X, r25
 a20:	8e 93       	st	-X, r24
 a22:	12 97       	sbiw	r26, 0x02	; 2
 a24:	2c c0       	rjmp	.+88     	; 0xa7e <malloc+0x9c>
 a26:	90 93 c2 01 	sts	0x01C2, r25
 a2a:	80 93 c1 01 	sts	0x01C1, r24
 a2e:	27 c0       	rjmp	.+78     	; 0xa7e <malloc+0x9c>
 a30:	21 15       	cp	r18, r1
 a32:	31 05       	cpc	r19, r1
 a34:	31 f0       	breq	.+12     	; 0xa42 <malloc+0x60>
 a36:	42 17       	cp	r20, r18
 a38:	53 07       	cpc	r21, r19
 a3a:	18 f0       	brcs	.+6      	; 0xa42 <malloc+0x60>
 a3c:	a9 01       	movw	r20, r18
 a3e:	db 01       	movw	r26, r22
 a40:	01 c0       	rjmp	.+2      	; 0xa44 <malloc+0x62>
 a42:	ef 01       	movw	r28, r30
 a44:	9a 01       	movw	r18, r20
 a46:	bd 01       	movw	r22, r26
 a48:	df 01       	movw	r26, r30
 a4a:	02 80       	ldd	r0, Z+2	; 0x02
 a4c:	f3 81       	ldd	r31, Z+3	; 0x03
 a4e:	e0 2d       	mov	r30, r0
 a50:	d7 cf       	rjmp	.-82     	; 0xa00 <malloc+0x1e>
 a52:	21 15       	cp	r18, r1
 a54:	31 05       	cpc	r19, r1
 a56:	f9 f0       	breq	.+62     	; 0xa96 <malloc+0xb4>
 a58:	28 1b       	sub	r18, r24
 a5a:	39 0b       	sbc	r19, r25
 a5c:	24 30       	cpi	r18, 0x04	; 4
 a5e:	31 05       	cpc	r19, r1
 a60:	80 f4       	brcc	.+32     	; 0xa82 <malloc+0xa0>
 a62:	8a 81       	ldd	r24, Y+2	; 0x02
 a64:	9b 81       	ldd	r25, Y+3	; 0x03
 a66:	61 15       	cp	r22, r1
 a68:	71 05       	cpc	r23, r1
 a6a:	21 f0       	breq	.+8      	; 0xa74 <malloc+0x92>
 a6c:	fb 01       	movw	r30, r22
 a6e:	93 83       	std	Z+3, r25	; 0x03
 a70:	82 83       	std	Z+2, r24	; 0x02
 a72:	04 c0       	rjmp	.+8      	; 0xa7c <malloc+0x9a>
 a74:	90 93 c2 01 	sts	0x01C2, r25
 a78:	80 93 c1 01 	sts	0x01C1, r24
 a7c:	fe 01       	movw	r30, r28
 a7e:	32 96       	adiw	r30, 0x02	; 2
 a80:	44 c0       	rjmp	.+136    	; 0xb0a <malloc+0x128>
 a82:	fe 01       	movw	r30, r28
 a84:	e2 0f       	add	r30, r18
 a86:	f3 1f       	adc	r31, r19
 a88:	81 93       	st	Z+, r24
 a8a:	91 93       	st	Z+, r25
 a8c:	22 50       	subi	r18, 0x02	; 2
 a8e:	31 09       	sbc	r19, r1
 a90:	39 83       	std	Y+1, r19	; 0x01
 a92:	28 83       	st	Y, r18
 a94:	3a c0       	rjmp	.+116    	; 0xb0a <malloc+0x128>
 a96:	20 91 bf 01 	lds	r18, 0x01BF
 a9a:	30 91 c0 01 	lds	r19, 0x01C0
 a9e:	23 2b       	or	r18, r19
 aa0:	41 f4       	brne	.+16     	; 0xab2 <malloc+0xd0>
 aa2:	20 91 02 01 	lds	r18, 0x0102
 aa6:	30 91 03 01 	lds	r19, 0x0103
 aaa:	30 93 c0 01 	sts	0x01C0, r19
 aae:	20 93 bf 01 	sts	0x01BF, r18
 ab2:	20 91 00 01 	lds	r18, 0x0100
 ab6:	30 91 01 01 	lds	r19, 0x0101
 aba:	21 15       	cp	r18, r1
 abc:	31 05       	cpc	r19, r1
 abe:	41 f4       	brne	.+16     	; 0xad0 <malloc+0xee>
 ac0:	2d b7       	in	r18, 0x3d	; 61
 ac2:	3e b7       	in	r19, 0x3e	; 62
 ac4:	40 91 04 01 	lds	r20, 0x0104
 ac8:	50 91 05 01 	lds	r21, 0x0105
 acc:	24 1b       	sub	r18, r20
 ace:	35 0b       	sbc	r19, r21
 ad0:	e0 91 bf 01 	lds	r30, 0x01BF
 ad4:	f0 91 c0 01 	lds	r31, 0x01C0
 ad8:	e2 17       	cp	r30, r18
 ada:	f3 07       	cpc	r31, r19
 adc:	a0 f4       	brcc	.+40     	; 0xb06 <malloc+0x124>
 ade:	2e 1b       	sub	r18, r30
 ae0:	3f 0b       	sbc	r19, r31
 ae2:	28 17       	cp	r18, r24
 ae4:	39 07       	cpc	r19, r25
 ae6:	78 f0       	brcs	.+30     	; 0xb06 <malloc+0x124>
 ae8:	ac 01       	movw	r20, r24
 aea:	4e 5f       	subi	r20, 0xFE	; 254
 aec:	5f 4f       	sbci	r21, 0xFF	; 255
 aee:	24 17       	cp	r18, r20
 af0:	35 07       	cpc	r19, r21
 af2:	48 f0       	brcs	.+18     	; 0xb06 <malloc+0x124>
 af4:	4e 0f       	add	r20, r30
 af6:	5f 1f       	adc	r21, r31
 af8:	50 93 c0 01 	sts	0x01C0, r21
 afc:	40 93 bf 01 	sts	0x01BF, r20
 b00:	81 93       	st	Z+, r24
 b02:	91 93       	st	Z+, r25
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <malloc+0x128>
 b06:	e0 e0       	ldi	r30, 0x00	; 0
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	cf 01       	movw	r24, r30
 b0c:	df 91       	pop	r29
 b0e:	cf 91       	pop	r28
 b10:	08 95       	ret

00000b12 <free>:
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	00 97       	sbiw	r24, 0x00	; 0
 b18:	09 f4       	brne	.+2      	; 0xb1c <free+0xa>
 b1a:	87 c0       	rjmp	.+270    	; 0xc2a <free+0x118>
 b1c:	fc 01       	movw	r30, r24
 b1e:	32 97       	sbiw	r30, 0x02	; 2
 b20:	13 82       	std	Z+3, r1	; 0x03
 b22:	12 82       	std	Z+2, r1	; 0x02
 b24:	c0 91 c1 01 	lds	r28, 0x01C1
 b28:	d0 91 c2 01 	lds	r29, 0x01C2
 b2c:	20 97       	sbiw	r28, 0x00	; 0
 b2e:	81 f4       	brne	.+32     	; 0xb50 <free+0x3e>
 b30:	20 81       	ld	r18, Z
 b32:	31 81       	ldd	r19, Z+1	; 0x01
 b34:	28 0f       	add	r18, r24
 b36:	39 1f       	adc	r19, r25
 b38:	80 91 bf 01 	lds	r24, 0x01BF
 b3c:	90 91 c0 01 	lds	r25, 0x01C0
 b40:	82 17       	cp	r24, r18
 b42:	93 07       	cpc	r25, r19
 b44:	79 f5       	brne	.+94     	; 0xba4 <free+0x92>
 b46:	f0 93 c0 01 	sts	0x01C0, r31
 b4a:	e0 93 bf 01 	sts	0x01BF, r30
 b4e:	6d c0       	rjmp	.+218    	; 0xc2a <free+0x118>
 b50:	de 01       	movw	r26, r28
 b52:	20 e0       	ldi	r18, 0x00	; 0
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	ae 17       	cp	r26, r30
 b58:	bf 07       	cpc	r27, r31
 b5a:	50 f4       	brcc	.+20     	; 0xb70 <free+0x5e>
 b5c:	12 96       	adiw	r26, 0x02	; 2
 b5e:	4d 91       	ld	r20, X+
 b60:	5c 91       	ld	r21, X
 b62:	13 97       	sbiw	r26, 0x03	; 3
 b64:	9d 01       	movw	r18, r26
 b66:	41 15       	cp	r20, r1
 b68:	51 05       	cpc	r21, r1
 b6a:	09 f1       	breq	.+66     	; 0xbae <free+0x9c>
 b6c:	da 01       	movw	r26, r20
 b6e:	f3 cf       	rjmp	.-26     	; 0xb56 <free+0x44>
 b70:	b3 83       	std	Z+3, r27	; 0x03
 b72:	a2 83       	std	Z+2, r26	; 0x02
 b74:	40 81       	ld	r20, Z
 b76:	51 81       	ldd	r21, Z+1	; 0x01
 b78:	84 0f       	add	r24, r20
 b7a:	95 1f       	adc	r25, r21
 b7c:	8a 17       	cp	r24, r26
 b7e:	9b 07       	cpc	r25, r27
 b80:	71 f4       	brne	.+28     	; 0xb9e <free+0x8c>
 b82:	8d 91       	ld	r24, X+
 b84:	9c 91       	ld	r25, X
 b86:	11 97       	sbiw	r26, 0x01	; 1
 b88:	84 0f       	add	r24, r20
 b8a:	95 1f       	adc	r25, r21
 b8c:	02 96       	adiw	r24, 0x02	; 2
 b8e:	91 83       	std	Z+1, r25	; 0x01
 b90:	80 83       	st	Z, r24
 b92:	12 96       	adiw	r26, 0x02	; 2
 b94:	8d 91       	ld	r24, X+
 b96:	9c 91       	ld	r25, X
 b98:	13 97       	sbiw	r26, 0x03	; 3
 b9a:	93 83       	std	Z+3, r25	; 0x03
 b9c:	82 83       	std	Z+2, r24	; 0x02
 b9e:	21 15       	cp	r18, r1
 ba0:	31 05       	cpc	r19, r1
 ba2:	29 f4       	brne	.+10     	; 0xbae <free+0x9c>
 ba4:	f0 93 c2 01 	sts	0x01C2, r31
 ba8:	e0 93 c1 01 	sts	0x01C1, r30
 bac:	3e c0       	rjmp	.+124    	; 0xc2a <free+0x118>
 bae:	d9 01       	movw	r26, r18
 bb0:	13 96       	adiw	r26, 0x03	; 3
 bb2:	fc 93       	st	X, r31
 bb4:	ee 93       	st	-X, r30
 bb6:	12 97       	sbiw	r26, 0x02	; 2
 bb8:	4d 91       	ld	r20, X+
 bba:	5d 91       	ld	r21, X+
 bbc:	a4 0f       	add	r26, r20
 bbe:	b5 1f       	adc	r27, r21
 bc0:	ea 17       	cp	r30, r26
 bc2:	fb 07       	cpc	r31, r27
 bc4:	79 f4       	brne	.+30     	; 0xbe4 <free+0xd2>
 bc6:	80 81       	ld	r24, Z
 bc8:	91 81       	ldd	r25, Z+1	; 0x01
 bca:	84 0f       	add	r24, r20
 bcc:	95 1f       	adc	r25, r21
 bce:	02 96       	adiw	r24, 0x02	; 2
 bd0:	d9 01       	movw	r26, r18
 bd2:	11 96       	adiw	r26, 0x01	; 1
 bd4:	9c 93       	st	X, r25
 bd6:	8e 93       	st	-X, r24
 bd8:	82 81       	ldd	r24, Z+2	; 0x02
 bda:	93 81       	ldd	r25, Z+3	; 0x03
 bdc:	13 96       	adiw	r26, 0x03	; 3
 bde:	9c 93       	st	X, r25
 be0:	8e 93       	st	-X, r24
 be2:	12 97       	sbiw	r26, 0x02	; 2
 be4:	e0 e0       	ldi	r30, 0x00	; 0
 be6:	f0 e0       	ldi	r31, 0x00	; 0
 be8:	8a 81       	ldd	r24, Y+2	; 0x02
 bea:	9b 81       	ldd	r25, Y+3	; 0x03
 bec:	00 97       	sbiw	r24, 0x00	; 0
 bee:	19 f0       	breq	.+6      	; 0xbf6 <free+0xe4>
 bf0:	fe 01       	movw	r30, r28
 bf2:	ec 01       	movw	r28, r24
 bf4:	f9 cf       	rjmp	.-14     	; 0xbe8 <free+0xd6>
 bf6:	ce 01       	movw	r24, r28
 bf8:	02 96       	adiw	r24, 0x02	; 2
 bfa:	28 81       	ld	r18, Y
 bfc:	39 81       	ldd	r19, Y+1	; 0x01
 bfe:	82 0f       	add	r24, r18
 c00:	93 1f       	adc	r25, r19
 c02:	20 91 bf 01 	lds	r18, 0x01BF
 c06:	30 91 c0 01 	lds	r19, 0x01C0
 c0a:	28 17       	cp	r18, r24
 c0c:	39 07       	cpc	r19, r25
 c0e:	69 f4       	brne	.+26     	; 0xc2a <free+0x118>
 c10:	30 97       	sbiw	r30, 0x00	; 0
 c12:	29 f4       	brne	.+10     	; 0xc1e <free+0x10c>
 c14:	10 92 c2 01 	sts	0x01C2, r1
 c18:	10 92 c1 01 	sts	0x01C1, r1
 c1c:	02 c0       	rjmp	.+4      	; 0xc22 <free+0x110>
 c1e:	13 82       	std	Z+3, r1	; 0x03
 c20:	12 82       	std	Z+2, r1	; 0x02
 c22:	d0 93 c0 01 	sts	0x01C0, r29
 c26:	c0 93 bf 01 	sts	0x01BF, r28
 c2a:	df 91       	pop	r29
 c2c:	cf 91       	pop	r28
 c2e:	08 95       	ret

00000c30 <strnlen_P>:
 c30:	fc 01       	movw	r30, r24
 c32:	05 90       	lpm	r0, Z+
 c34:	61 50       	subi	r22, 0x01	; 1
 c36:	70 40       	sbci	r23, 0x00	; 0
 c38:	01 10       	cpse	r0, r1
 c3a:	d8 f7       	brcc	.-10     	; 0xc32 <strnlen_P+0x2>
 c3c:	80 95       	com	r24
 c3e:	90 95       	com	r25
 c40:	8e 0f       	add	r24, r30
 c42:	9f 1f       	adc	r25, r31
 c44:	08 95       	ret

00000c46 <memset>:
 c46:	dc 01       	movw	r26, r24
 c48:	01 c0       	rjmp	.+2      	; 0xc4c <memset+0x6>
 c4a:	6d 93       	st	X+, r22
 c4c:	41 50       	subi	r20, 0x01	; 1
 c4e:	50 40       	sbci	r21, 0x00	; 0
 c50:	e0 f7       	brcc	.-8      	; 0xc4a <memset+0x4>
 c52:	08 95       	ret

00000c54 <strnlen>:
 c54:	fc 01       	movw	r30, r24
 c56:	61 50       	subi	r22, 0x01	; 1
 c58:	70 40       	sbci	r23, 0x00	; 0
 c5a:	01 90       	ld	r0, Z+
 c5c:	01 10       	cpse	r0, r1
 c5e:	d8 f7       	brcc	.-10     	; 0xc56 <strnlen+0x2>
 c60:	80 95       	com	r24
 c62:	90 95       	com	r25
 c64:	8e 0f       	add	r24, r30
 c66:	9f 1f       	adc	r25, r31
 c68:	08 95       	ret

00000c6a <fputc>:
 c6a:	0f 93       	push	r16
 c6c:	1f 93       	push	r17
 c6e:	cf 93       	push	r28
 c70:	df 93       	push	r29
 c72:	18 2f       	mov	r17, r24
 c74:	09 2f       	mov	r16, r25
 c76:	eb 01       	movw	r28, r22
 c78:	8b 81       	ldd	r24, Y+3	; 0x03
 c7a:	81 fd       	sbrc	r24, 1
 c7c:	03 c0       	rjmp	.+6      	; 0xc84 <fputc+0x1a>
 c7e:	8f ef       	ldi	r24, 0xFF	; 255
 c80:	9f ef       	ldi	r25, 0xFF	; 255
 c82:	20 c0       	rjmp	.+64     	; 0xcc4 <fputc+0x5a>
 c84:	82 ff       	sbrs	r24, 2
 c86:	10 c0       	rjmp	.+32     	; 0xca8 <fputc+0x3e>
 c88:	4e 81       	ldd	r20, Y+6	; 0x06
 c8a:	5f 81       	ldd	r21, Y+7	; 0x07
 c8c:	2c 81       	ldd	r18, Y+4	; 0x04
 c8e:	3d 81       	ldd	r19, Y+5	; 0x05
 c90:	42 17       	cp	r20, r18
 c92:	53 07       	cpc	r21, r19
 c94:	7c f4       	brge	.+30     	; 0xcb4 <fputc+0x4a>
 c96:	e8 81       	ld	r30, Y
 c98:	f9 81       	ldd	r31, Y+1	; 0x01
 c9a:	9f 01       	movw	r18, r30
 c9c:	2f 5f       	subi	r18, 0xFF	; 255
 c9e:	3f 4f       	sbci	r19, 0xFF	; 255
 ca0:	39 83       	std	Y+1, r19	; 0x01
 ca2:	28 83       	st	Y, r18
 ca4:	10 83       	st	Z, r17
 ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <fputc+0x4a>
 ca8:	e8 85       	ldd	r30, Y+8	; 0x08
 caa:	f9 85       	ldd	r31, Y+9	; 0x09
 cac:	81 2f       	mov	r24, r17
 cae:	09 95       	icall
 cb0:	89 2b       	or	r24, r25
 cb2:	29 f7       	brne	.-54     	; 0xc7e <fputc+0x14>
 cb4:	2e 81       	ldd	r18, Y+6	; 0x06
 cb6:	3f 81       	ldd	r19, Y+7	; 0x07
 cb8:	2f 5f       	subi	r18, 0xFF	; 255
 cba:	3f 4f       	sbci	r19, 0xFF	; 255
 cbc:	3f 83       	std	Y+7, r19	; 0x07
 cbe:	2e 83       	std	Y+6, r18	; 0x06
 cc0:	81 2f       	mov	r24, r17
 cc2:	90 2f       	mov	r25, r16
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	1f 91       	pop	r17
 cca:	0f 91       	pop	r16
 ccc:	08 95       	ret

00000cce <__ultoa_invert>:
 cce:	fa 01       	movw	r30, r20
 cd0:	aa 27       	eor	r26, r26
 cd2:	28 30       	cpi	r18, 0x08	; 8
 cd4:	51 f1       	breq	.+84     	; 0xd2a <__ultoa_invert+0x5c>
 cd6:	20 31       	cpi	r18, 0x10	; 16
 cd8:	81 f1       	breq	.+96     	; 0xd3a <__ultoa_invert+0x6c>
 cda:	e8 94       	clt
 cdc:	6f 93       	push	r22
 cde:	6e 7f       	andi	r22, 0xFE	; 254
 ce0:	6e 5f       	subi	r22, 0xFE	; 254
 ce2:	7f 4f       	sbci	r23, 0xFF	; 255
 ce4:	8f 4f       	sbci	r24, 0xFF	; 255
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	af 4f       	sbci	r26, 0xFF	; 255
 cea:	b1 e0       	ldi	r27, 0x01	; 1
 cec:	3e d0       	rcall	.+124    	; 0xd6a <__ultoa_invert+0x9c>
 cee:	b4 e0       	ldi	r27, 0x04	; 4
 cf0:	3c d0       	rcall	.+120    	; 0xd6a <__ultoa_invert+0x9c>
 cf2:	67 0f       	add	r22, r23
 cf4:	78 1f       	adc	r23, r24
 cf6:	89 1f       	adc	r24, r25
 cf8:	9a 1f       	adc	r25, r26
 cfa:	a1 1d       	adc	r26, r1
 cfc:	68 0f       	add	r22, r24
 cfe:	79 1f       	adc	r23, r25
 d00:	8a 1f       	adc	r24, r26
 d02:	91 1d       	adc	r25, r1
 d04:	a1 1d       	adc	r26, r1
 d06:	6a 0f       	add	r22, r26
 d08:	71 1d       	adc	r23, r1
 d0a:	81 1d       	adc	r24, r1
 d0c:	91 1d       	adc	r25, r1
 d0e:	a1 1d       	adc	r26, r1
 d10:	20 d0       	rcall	.+64     	; 0xd52 <__ultoa_invert+0x84>
 d12:	09 f4       	brne	.+2      	; 0xd16 <__ultoa_invert+0x48>
 d14:	68 94       	set
 d16:	3f 91       	pop	r19
 d18:	2a e0       	ldi	r18, 0x0A	; 10
 d1a:	26 9f       	mul	r18, r22
 d1c:	11 24       	eor	r1, r1
 d1e:	30 19       	sub	r19, r0
 d20:	30 5d       	subi	r19, 0xD0	; 208
 d22:	31 93       	st	Z+, r19
 d24:	de f6       	brtc	.-74     	; 0xcdc <__ultoa_invert+0xe>
 d26:	cf 01       	movw	r24, r30
 d28:	08 95       	ret
 d2a:	46 2f       	mov	r20, r22
 d2c:	47 70       	andi	r20, 0x07	; 7
 d2e:	40 5d       	subi	r20, 0xD0	; 208
 d30:	41 93       	st	Z+, r20
 d32:	b3 e0       	ldi	r27, 0x03	; 3
 d34:	0f d0       	rcall	.+30     	; 0xd54 <__ultoa_invert+0x86>
 d36:	c9 f7       	brne	.-14     	; 0xd2a <__ultoa_invert+0x5c>
 d38:	f6 cf       	rjmp	.-20     	; 0xd26 <__ultoa_invert+0x58>
 d3a:	46 2f       	mov	r20, r22
 d3c:	4f 70       	andi	r20, 0x0F	; 15
 d3e:	40 5d       	subi	r20, 0xD0	; 208
 d40:	4a 33       	cpi	r20, 0x3A	; 58
 d42:	18 f0       	brcs	.+6      	; 0xd4a <__ultoa_invert+0x7c>
 d44:	49 5d       	subi	r20, 0xD9	; 217
 d46:	31 fd       	sbrc	r19, 1
 d48:	40 52       	subi	r20, 0x20	; 32
 d4a:	41 93       	st	Z+, r20
 d4c:	02 d0       	rcall	.+4      	; 0xd52 <__ultoa_invert+0x84>
 d4e:	a9 f7       	brne	.-22     	; 0xd3a <__ultoa_invert+0x6c>
 d50:	ea cf       	rjmp	.-44     	; 0xd26 <__ultoa_invert+0x58>
 d52:	b4 e0       	ldi	r27, 0x04	; 4
 d54:	a6 95       	lsr	r26
 d56:	97 95       	ror	r25
 d58:	87 95       	ror	r24
 d5a:	77 95       	ror	r23
 d5c:	67 95       	ror	r22
 d5e:	ba 95       	dec	r27
 d60:	c9 f7       	brne	.-14     	; 0xd54 <__ultoa_invert+0x86>
 d62:	00 97       	sbiw	r24, 0x00	; 0
 d64:	61 05       	cpc	r22, r1
 d66:	71 05       	cpc	r23, r1
 d68:	08 95       	ret
 d6a:	9b 01       	movw	r18, r22
 d6c:	ac 01       	movw	r20, r24
 d6e:	0a 2e       	mov	r0, r26
 d70:	06 94       	lsr	r0
 d72:	57 95       	ror	r21
 d74:	47 95       	ror	r20
 d76:	37 95       	ror	r19
 d78:	27 95       	ror	r18
 d7a:	ba 95       	dec	r27
 d7c:	c9 f7       	brne	.-14     	; 0xd70 <__ultoa_invert+0xa2>
 d7e:	62 0f       	add	r22, r18
 d80:	73 1f       	adc	r23, r19
 d82:	84 1f       	adc	r24, r20
 d84:	95 1f       	adc	r25, r21
 d86:	a0 1d       	adc	r26, r0
 d88:	08 95       	ret

00000d8a <__prologue_saves__>:
 d8a:	2f 92       	push	r2
 d8c:	3f 92       	push	r3
 d8e:	4f 92       	push	r4
 d90:	5f 92       	push	r5
 d92:	6f 92       	push	r6
 d94:	7f 92       	push	r7
 d96:	8f 92       	push	r8
 d98:	9f 92       	push	r9
 d9a:	af 92       	push	r10
 d9c:	bf 92       	push	r11
 d9e:	cf 92       	push	r12
 da0:	df 92       	push	r13
 da2:	ef 92       	push	r14
 da4:	ff 92       	push	r15
 da6:	0f 93       	push	r16
 da8:	1f 93       	push	r17
 daa:	cf 93       	push	r28
 dac:	df 93       	push	r29
 dae:	cd b7       	in	r28, 0x3d	; 61
 db0:	de b7       	in	r29, 0x3e	; 62
 db2:	ca 1b       	sub	r28, r26
 db4:	db 0b       	sbc	r29, r27
 db6:	0f b6       	in	r0, 0x3f	; 63
 db8:	f8 94       	cli
 dba:	de bf       	out	0x3e, r29	; 62
 dbc:	0f be       	out	0x3f, r0	; 63
 dbe:	cd bf       	out	0x3d, r28	; 61
 dc0:	09 94       	ijmp

00000dc2 <__epilogue_restores__>:
 dc2:	2a 88       	ldd	r2, Y+18	; 0x12
 dc4:	39 88       	ldd	r3, Y+17	; 0x11
 dc6:	48 88       	ldd	r4, Y+16	; 0x10
 dc8:	5f 84       	ldd	r5, Y+15	; 0x0f
 dca:	6e 84       	ldd	r6, Y+14	; 0x0e
 dcc:	7d 84       	ldd	r7, Y+13	; 0x0d
 dce:	8c 84       	ldd	r8, Y+12	; 0x0c
 dd0:	9b 84       	ldd	r9, Y+11	; 0x0b
 dd2:	aa 84       	ldd	r10, Y+10	; 0x0a
 dd4:	b9 84       	ldd	r11, Y+9	; 0x09
 dd6:	c8 84       	ldd	r12, Y+8	; 0x08
 dd8:	df 80       	ldd	r13, Y+7	; 0x07
 dda:	ee 80       	ldd	r14, Y+6	; 0x06
 ddc:	fd 80       	ldd	r15, Y+5	; 0x05
 dde:	0c 81       	ldd	r16, Y+4	; 0x04
 de0:	1b 81       	ldd	r17, Y+3	; 0x03
 de2:	aa 81       	ldd	r26, Y+2	; 0x02
 de4:	b9 81       	ldd	r27, Y+1	; 0x01
 de6:	ce 0f       	add	r28, r30
 de8:	d1 1d       	adc	r29, r1
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	de bf       	out	0x3e, r29	; 62
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	cd bf       	out	0x3d, r28	; 61
 df4:	ed 01       	movw	r28, r26
 df6:	08 95       	ret

00000df8 <_exit>:
 df8:	f8 94       	cli

00000dfa <__stop_program>:
 dfa:	ff cf       	rjmp	.-2      	; 0xdfa <__stop_program>
