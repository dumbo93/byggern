
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000de6  00000e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800206  00800206  00000f80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001754  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c80  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c30  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  00004188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d1  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c9  00000000  00000000  000049d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000053a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ee       	ldi	r30, 0xE6	; 230
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a5 31       	cpi	r26, 0x15	; 21
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
  a6:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:


int CAN_init()
{
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  ae:	40 e6       	ldi	r20, 0x60	; 96
  b0:	60 e6       	ldi	r22, 0x60	; 96
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  b8:	40 e6       	ldi	r20, 0x60	; 96
  ba:	60 e6       	ldi	r22, 0x60	; 96
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	64 e0       	ldi	r22, 0x04	; 4
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  cc:	44 e0       	ldi	r20, 0x04	; 4
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	60 ee       	ldi	r22, 0xE0	; 224
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
  e6:	80 7e       	andi	r24, 0xE0	; 224
  e8:	39 f0       	breq	.+14     	; 0xf8 <CAN_init+0x4a>
		printf("MCP2515 is NOT in normal mode after CAN init\n");
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 cb 02 	call	0x596	; 0x596 <puts>
		return 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret
	}
	
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	8b e2       	ldi	r24, 0x2B	; 43
  fc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (1 << ISC01) | (0 << ISC00);
 100:	85 b7       	in	r24, 0x35	; 53
 102:	82 60       	ori	r24, 0x02	; 2
 104:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
 106:	8b b7       	in	r24, 0x3b	; 59
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	8b bf       	out	0x3b, r24	; 59
	// Falling edge of INT2 generates interrupt request
	EICRA |= (1 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
}
 110:	08 95       	ret

00000112 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
 120:	fc 01       	movw	r30, r24
 122:	60 81       	ld	r22, Z
 124:	71 81       	ldd	r23, Z+1	; 0x01
 126:	76 95       	lsr	r23
 128:	67 95       	ror	r22
 12a:	76 95       	lsr	r23
 12c:	67 95       	ror	r22
 12e:	76 95       	lsr	r23
 130:	67 95       	ror	r22
 132:	81 e3       	ldi	r24, 0x31	; 49
 134:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
 138:	f7 01       	movw	r30, r14
 13a:	60 81       	ld	r22, Z
 13c:	62 95       	swap	r22
 13e:	66 0f       	add	r22, r22
 140:	60 7e       	andi	r22, 0xE0	; 224
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	84 e3       	ldi	r24, 0x34	; 52
 154:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
 158:	f7 01       	movw	r30, r14
 15a:	62 81       	ldd	r22, Z+2	; 0x02
 15c:	85 e3       	ldi	r24, 0x35	; 53
 15e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
 162:	f7 01       	movw	r30, r14
 164:	82 81       	ldd	r24, Z+2	; 0x02
 166:	88 23       	and	r24, r24
 168:	99 f0       	breq	.+38     	; 0x190 <CAN_msg_send+0x7e>
 16a:	87 01       	movw	r16, r14
 16c:	0d 5f       	subi	r16, 0xFD	; 253
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
 174:	f8 01       	movw	r30, r16
 176:	61 91       	ld	r22, Z+
 178:	8f 01       	movw	r16, r30
 17a:	8c 2f       	mov	r24, r28
 17c:	8a 5c       	subi	r24, 0xCA	; 202
 17e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	f7 01       	movw	r30, r14
 186:	22 81       	ldd	r18, Z+2	; 0x02
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	c2 17       	cp	r28, r18
 18c:	d3 07       	cpc	r29, r19
 18e:	94 f3       	brlt	.-28     	; 0x174 <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
 190:	81 e8       	ldi	r24, 0x81	; 129
 192:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_request_to_send>
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>

	if (interrupt & MCP_RX0IF){
 1cc:	80 ff       	sbrs	r24, 0
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__vector_1+0x3e>
		interrupt_flag = RX0;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 06 02 	sts	0x0206, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	8c e2       	ldi	r24, 0x2C	; 44
 1dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MCP_bit_modify>
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
 1e2:	81 ff       	sbrs	r24, 1
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <__vector_1+0x52>
		interrupt_flag = RX1;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 06 02 	sts	0x0206, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <MCP_bit_modify>
	}
	
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
 220:	80 ec       	ldi	r24, 0xC0	; 192
 222:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	82 e4       	ldi	r24, 0x42	; 66
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <MCP_reset+0x10>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <MCP_reset+0x16>
	_delay_us(200);
	SPI_set_ss(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
 236:	08 95       	ret

00000238 <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
	//printf("hello from MCP read 1\n");
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	//printf("hello from MCP read 2\n");
	// Send 8-bit address
	SPI_transmit_receive(address);
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	//printf("hello from MCP read 3\n");
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
 256:	c8 2f       	mov	r28, r24
	//printf("hello from MCP read 4\n");
	SPI_set_ss(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
	return received;
}
 260:	8c 2f       	mov	r24, r28
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <MCP_init>:
#include "uart.h"
#include <util/delay.h>


uint8_t MCP_init( void )
{
 266:	cf 93       	push	r28
	//SPI_init();
	//printf("hello from MCP init 1\n");
	MCP_reset();
 268:	0e 94 0c 01 	call	0x218	; 0x218 <MCP_reset>
	//printf("hello from MCP init 2\n");
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 26c:	8e e0       	ldi	r24, 0x0E	; 14
 26e:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>
 272:	c8 2f       	mov	r28, r24
	//printf("hello from MCP init 3\n");
	printf("Value = %X\n", value);
 274:	1f 92       	push	r1
 276:	8f 93       	push	r24
 278:	29 e7       	ldi	r18, 0x79	; 121
 27a:	31 e0       	ldi	r19, 0x01	; 1
 27c:	3f 93       	push	r19
 27e:	2f 93       	push	r18
 280:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
	if ((value & MODE_MASK) != MODE_CONFIG){
 284:	c0 7e       	andi	r28, 0xE0	; 224
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	c0 38       	cpi	r28, 0x80	; 128
 290:	31 f0       	breq	.+12     	; 0x29e <MCP_init+0x38>
		printf("MCP2515 is NOT in configuration mode after reset\n");
 292:	85 e8       	ldi	r24, 0x85	; 133
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 cb 02 	call	0x596	; 0x596 <puts>
		return 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <MCP_init+0x3a>
	}
	//printf("hello from MCP init 4\n");
	return 0;
 29e:	80 e0       	ldi	r24, 0x00	; 0
}
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	d8 2f       	mov	r29, r24
 2aa:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	SPI_transmit_receive(address);
 2ba:	8d 2f       	mov	r24, r29
 2bc:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	SPI_transmit_receive(data);
 2c0:	8c 2f       	mov	r24, r28
 2c2:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
 2d4:	cf 93       	push	r28
 2d6:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
 2e0:	8c 2f       	mov	r24, r28
 2e2:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	SPI_set_ss(1); //(?)
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
}
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	18 2f       	mov	r17, r24
 2fa:	d6 2f       	mov	r29, r22
 2fc:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 30c:	81 2f       	mov	r24, r17
 30e:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 312:	8d 2f       	mov	r24, r29
 314:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	SPI_transmit_receive(data);
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_transmit_receive>
	
	SPI_set_ss(1);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 a7 01 	call	0x34e	; 0x34e <SPI_set_ss>
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	08 95       	ret

0000032e <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
 32e:	87 b3       	in	r24, 0x17	; 23
 330:	80 6b       	ori	r24, 0xB0	; 176
 332:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
 334:	81 e1       	ldi	r24, 0x11	; 17
 336:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
 338:	6e 9a       	sbi	0x0d, 6	; 13
 33a:	08 95       	ret

0000033c <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 33c:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
 33e:	77 9b       	sbis	0x0e, 7	; 14
 340:	fe cf       	rjmp	.-4      	; 0x33e <SPI_transmit_receive+0x2>
 342:	82 e4       	ldi	r24, 0x42	; 66
 344:	8a 95       	dec	r24
 346:	f1 f7       	brne	.-4      	; 0x344 <SPI_transmit_receive+0x8>
 348:	00 c0       	rjmp	.+0      	; 0x34a <SPI_transmit_receive+0xe>
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
 34a:	8f b1       	in	r24, 0x0f	; 15
	
}
 34c:	08 95       	ret

0000034e <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	91 05       	cpc	r25, r1
 352:	11 f4       	brne	.+4      	; 0x358 <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
 354:	c4 9a       	sbi	0x18, 4	; 24
 356:	08 95       	ret
	}
	else if (val == 0){
 358:	89 2b       	or	r24, r25
 35a:	09 f4       	brne	.+2      	; 0x35e <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
 35c:	c4 98       	cbi	0x18, 4	; 24
 35e:	08 95       	ret

00000360 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 360:	5d 9b       	sbis	0x0b, 5	; 11
 362:	fe cf       	rjmp	.-4      	; 0x360 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 364:	8c b9       	out	0x0c, r24	; 12
 366:	08 95       	ret

00000368 <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
 368:	5f 9b       	sbis	0x0b, 7	; 11
 36a:	fe cf       	rjmp	.-4      	; 0x368 <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
 36c:	8c b1       	in	r24, 0x0c	; 12
 36e:	08 95       	ret

00000370 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 370:	20 b5       	in	r18, 0x20	; 32
 372:	92 2b       	or	r25, r18
 374:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
 376:	99 b1       	in	r25, 0x09	; 9
 378:	89 2b       	or	r24, r25
 37a:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 37c:	8a b1       	in	r24, 0x0a	; 10
 37e:	88 61       	ori	r24, 0x18	; 24
 380:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 382:	80 b5       	in	r24, 0x20	; 32
 384:	8e 68       	ori	r24, 0x8E	; 142
 386:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 388:	64 eb       	ldi	r22, 0xB4	; 180
 38a:	71 e0       	ldi	r23, 0x01	; 1
 38c:	80 eb       	ldi	r24, 0xB0	; 176
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <fdevopen>
 394:	08 95       	ret

00000396 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	set_bit(MCUCR, SRE);
 396:	85 b7       	in	r24, 0x35	; 53
 398:	80 68       	ori	r24, 0x80	; 128
 39a:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 39c:	80 b7       	in	r24, 0x30	; 48
 39e:	80 62       	ori	r24, 0x20	; 32
 3a0:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	clear_bit(DDRD, PD3);
 3a2:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret

000003aa <ADC_read>:

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
 3aa:	84 30       	cpi	r24, 0x04	; 4
 3ac:	70 f4       	brcc	.+28     	; 0x3ca <ADC_read+0x20>
	*ext_adc = 0x04 | channel; // bitwise OR
 3ae:	84 60       	ori	r24, 0x04	; 4
 3b0:	80 93 00 14 	sts	0x1400, r24
	
	// wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
 3b4:	83 99       	sbic	0x10, 3	; 16
 3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
 3b8:	85 ef       	ldi	r24, 0xF5	; 245
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <ADC_read+0x12>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <ADC_read+0x18>
 3c2:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
 3c4:	80 91 00 14 	lds	r24, 0x1400
 3c8:	08 95       	ret

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
 3ca:	80 e0       	ldi	r24, 0x00	; 0
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
	
}
 3cc:	08 95       	ret

000003ce <JOY2CAN_send_pos>:
#include "joystick.h"
#include "../../../communication_drivers/can.h"
#include <stdlib.h>

void JOY2CAN_send_pos()
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	2b 97       	sbiw	r28, 0x0b	; 11
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
	JOY_position_t pos = JOY_read_adc();
 3e2:	0e 94 2c 02 	call	0x458	; 0x458 <JOY_read_adc>
	can_msg msg;
	msg.id = ATmega162_ID;
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	3a 83       	std	Y+2, r19	; 0x02
 3ec:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = pos.x;
 3ee:	8c 83       	std	Y+4, r24	; 0x04
	msg.data[1] = pos.y;
 3f0:	6d 83       	std	Y+5, r22	; 0x05
	msg.length = 2;
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
 3f6:	ce 01       	movw	r24, r28
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	0e 94 89 00 	call	0x112	; 0x112 <CAN_msg_send>
	printf("\n\nSent message (x, y): (%d, %d) \n",msg.data[0], msg.data[1]);
 3fe:	8d 81       	ldd	r24, Y+5	; 0x05
 400:	1f 92       	push	r1
 402:	8f 93       	push	r24
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	1f 92       	push	r1
 408:	8f 93       	push	r24
 40a:	86 eb       	ldi	r24, 0xB6	; 182
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
	printf("Sent id: %d \n", msg.id);
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	8f 93       	push	r24
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	8f 93       	push	r24
 41e:	88 ed       	ldi	r24, 0xD8	; 216
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	9f 93       	push	r25
 424:	8f 93       	push	r24
 426:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
	printf("Sent length: %d  \n", msg.length);
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	1f 92       	push	r1
 42e:	8f 93       	push	r24
 430:	86 ee       	ldi	r24, 0xE6	; 230
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	9f 93       	push	r25
 436:	8f 93       	push	r24
 438:	0e 94 b7 02 	call	0x56e	; 0x56e <printf>
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	2b 96       	adiw	r28, 0x0b	; 11
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <JOY_read_adc>:

int JOY_button(){
	return !(test_bit(PINB, PINB0));
}

JOY_position_t JOY_read_adc( void ){
 458:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
 460:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 462:	8c ec       	ldi	r24, 0xCC	; 204
 464:	94 e0       	ldi	r25, 0x04	; 4
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <JOY_read_adc+0xe>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <JOY_read_adc+0x14>
 46c:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
 474:	28 2f       	mov	r18, r24
	
	return pos;
 476:	6c 2f       	mov	r22, r28
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	82 2f       	mov	r24, r18
 47c:	90 e0       	ldi	r25, 0x00	; 0
}
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <JOY_calibrate>:
	set_bit(PORTB, PB0);
	
}

void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
 482:	0e 94 2c 02 	call	0x458	; 0x458 <JOY_read_adc>
 486:	60 93 07 02 	sts	0x0207, r22
 48a:	70 93 08 02 	sts	0x0208, r23
 48e:	80 93 09 02 	sts	0x0209, r24
 492:	90 93 0a 02 	sts	0x020A, r25
 496:	08 95       	ret

00000498 <JOY_init>:

JOY_position_t neutral_pos; 


void JOY_init( void ){
	JOY_calibrate();
 498:	0e 94 41 02 	call	0x482	; 0x482 <JOY_calibrate>
	
	// Initialize PORT B, pin 0 (joystick button) as input
	clear_bit(DDRB, PINB0);
 49c:	b8 98       	cbi	0x17, 0	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB0);
 49e:	c0 9a       	sbi	0x18, 0	; 24
 4a0:	08 95       	ret

000004a2 <main>:
#include <util/delay.h>
//#include <stdio.h>
#include <avr/interrupt.h>

int main( void ){
	cli();
 4a2:	f8 94       	cli
	// Initializations 
	UART_Init( MYUBRR );
 4a4:	8f e1       	ldi	r24, 0x1F	; 31
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 b8 01 	call	0x370	; 0x370 <UART_Init>
	ADC_init();
 4ac:	0e 94 cb 01 	call	0x396	; 0x396 <ADC_init>
	
	JOY_init();
 4b0:	0e 94 4c 02 	call	0x498	; 0x498 <JOY_init>
	//TOUCH_init();
	//OLED_init();
	//MENU_init();
	SPI_init();
 4b4:	0e 94 97 01 	call	0x32e	; 0x32e <SPI_init>
	MCP_init();
 4b8:	0e 94 33 01 	call	0x266	; 0x266 <MCP_init>
	CAN_init();
 4bc:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	printf("\n\n\nInit done\n");
 4c0:	89 ef       	ldi	r24, 0xF9	; 249
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 cb 02 	call	0x596	; 0x596 <puts>
	sei();
 4c8:	78 94       	sei
		//printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
		//printf("\n\nSent message: %s \n", send.data);
		//printf("Sent id: %d \n", send.id);
		//printf("Sent length: %d \n", send.length);
		
		JOY2CAN_send_pos();
 4ca:	0e 94 e7 01 	call	0x3ce	; 0x3ce <JOY2CAN_send_pos>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 ef       	ldi	r25, 0xF0	; 240
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <main+0x30>
 4d6:	f9 cf       	rjmp	.-14     	; 0x4ca <main+0x28>

000004d8 <fdevopen>:
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	ec 01       	movw	r28, r24
 4e2:	8b 01       	movw	r16, r22
 4e4:	00 97       	sbiw	r24, 0x00	; 0
 4e6:	31 f4       	brne	.+12     	; 0x4f4 <fdevopen+0x1c>
 4e8:	61 15       	cp	r22, r1
 4ea:	71 05       	cpc	r23, r1
 4ec:	19 f4       	brne	.+6      	; 0x4f4 <fdevopen+0x1c>
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	38 c0       	rjmp	.+112    	; 0x564 <__stack+0x65>
 4f4:	6e e0       	ldi	r22, 0x0E	; 14
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 ca 04 	call	0x994	; 0x994 <calloc>
 500:	fc 01       	movw	r30, r24
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	a1 f3       	breq	.-24     	; 0x4ee <fdevopen+0x16>
 506:	80 e8       	ldi	r24, 0x80	; 128
 508:	83 83       	std	Z+3, r24	; 0x03
 50a:	01 15       	cp	r16, r1
 50c:	11 05       	cpc	r17, r1
 50e:	71 f0       	breq	.+28     	; 0x52c <__stack+0x2d>
 510:	13 87       	std	Z+11, r17	; 0x0b
 512:	02 87       	std	Z+10, r16	; 0x0a
 514:	81 e8       	ldi	r24, 0x81	; 129
 516:	83 83       	std	Z+3, r24	; 0x03
 518:	80 91 0b 02 	lds	r24, 0x020B
 51c:	90 91 0c 02 	lds	r25, 0x020C
 520:	89 2b       	or	r24, r25
 522:	21 f4       	brne	.+8      	; 0x52c <__stack+0x2d>
 524:	f0 93 0c 02 	sts	0x020C, r31
 528:	e0 93 0b 02 	sts	0x020B, r30
 52c:	20 97       	sbiw	r28, 0x00	; 0
 52e:	c9 f0       	breq	.+50     	; 0x562 <__stack+0x63>
 530:	d1 87       	std	Z+9, r29	; 0x09
 532:	c0 87       	std	Z+8, r28	; 0x08
 534:	83 81       	ldd	r24, Z+3	; 0x03
 536:	82 60       	ori	r24, 0x02	; 2
 538:	83 83       	std	Z+3, r24	; 0x03
 53a:	80 91 0d 02 	lds	r24, 0x020D
 53e:	90 91 0e 02 	lds	r25, 0x020E
 542:	89 2b       	or	r24, r25
 544:	71 f4       	brne	.+28     	; 0x562 <__stack+0x63>
 546:	f0 93 0e 02 	sts	0x020E, r31
 54a:	e0 93 0d 02 	sts	0x020D, r30
 54e:	80 91 0f 02 	lds	r24, 0x020F
 552:	90 91 10 02 	lds	r25, 0x0210
 556:	89 2b       	or	r24, r25
 558:	21 f4       	brne	.+8      	; 0x562 <__stack+0x63>
 55a:	f0 93 10 02 	sts	0x0210, r31
 55e:	e0 93 0f 02 	sts	0x020F, r30
 562:	cf 01       	movw	r24, r30
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	08 95       	ret

0000056e <printf>:
 56e:	a0 e0       	ldi	r26, 0x00	; 0
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	ed eb       	ldi	r30, 0xBD	; 189
 574:	f2 e0       	ldi	r31, 0x02	; 2
 576:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__prologue_saves__+0x20>
 57a:	fe 01       	movw	r30, r28
 57c:	35 96       	adiw	r30, 0x05	; 5
 57e:	61 91       	ld	r22, Z+
 580:	71 91       	ld	r23, Z+
 582:	af 01       	movw	r20, r30
 584:	80 91 0d 02 	lds	r24, 0x020D
 588:	90 91 0e 02 	lds	r25, 0x020E
 58c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <vfprintf>
 590:	e2 e0       	ldi	r30, 0x02	; 2
 592:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__epilogue_restores__+0x20>

00000596 <puts>:
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	e0 91 0d 02 	lds	r30, 0x020D
 5a2:	f0 91 0e 02 	lds	r31, 0x020E
 5a6:	23 81       	ldd	r18, Z+3	; 0x03
 5a8:	21 ff       	sbrs	r18, 1
 5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <puts+0x4c>
 5ac:	ec 01       	movw	r28, r24
 5ae:	00 e0       	ldi	r16, 0x00	; 0
 5b0:	10 e0       	ldi	r17, 0x00	; 0
 5b2:	89 91       	ld	r24, Y+
 5b4:	60 91 0d 02 	lds	r22, 0x020D
 5b8:	70 91 0e 02 	lds	r23, 0x020E
 5bc:	db 01       	movw	r26, r22
 5be:	18 96       	adiw	r26, 0x08	; 8
 5c0:	ed 91       	ld	r30, X+
 5c2:	fc 91       	ld	r31, X
 5c4:	19 97       	sbiw	r26, 0x09	; 9
 5c6:	88 23       	and	r24, r24
 5c8:	31 f0       	breq	.+12     	; 0x5d6 <puts+0x40>
 5ca:	09 95       	icall
 5cc:	89 2b       	or	r24, r25
 5ce:	89 f3       	breq	.-30     	; 0x5b2 <puts+0x1c>
 5d0:	0f ef       	ldi	r16, 0xFF	; 255
 5d2:	1f ef       	ldi	r17, 0xFF	; 255
 5d4:	ee cf       	rjmp	.-36     	; 0x5b2 <puts+0x1c>
 5d6:	8a e0       	ldi	r24, 0x0A	; 10
 5d8:	09 95       	icall
 5da:	89 2b       	or	r24, r25
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <puts+0x4c>
 5de:	c8 01       	movw	r24, r16
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <puts+0x50>
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	9f ef       	ldi	r25, 0xFF	; 255
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	08 95       	ret

000005f0 <vfprintf>:
 5f0:	ac e0       	ldi	r26, 0x0C	; 12
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	ee ef       	ldi	r30, 0xFE	; 254
 5f6:	f2 e0       	ldi	r31, 0x02	; 2
 5f8:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__prologue_saves__>
 5fc:	7c 01       	movw	r14, r24
 5fe:	6b 01       	movw	r12, r22
 600:	8a 01       	movw	r16, r20
 602:	fc 01       	movw	r30, r24
 604:	17 82       	std	Z+7, r1	; 0x07
 606:	16 82       	std	Z+6, r1	; 0x06
 608:	83 81       	ldd	r24, Z+3	; 0x03
 60a:	81 ff       	sbrs	r24, 1
 60c:	bd c1       	rjmp	.+890    	; 0x988 <vfprintf+0x398>
 60e:	ce 01       	movw	r24, r28
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	4c 01       	movw	r8, r24
 614:	f7 01       	movw	r30, r14
 616:	93 81       	ldd	r25, Z+3	; 0x03
 618:	f6 01       	movw	r30, r12
 61a:	93 fd       	sbrc	r25, 3
 61c:	85 91       	lpm	r24, Z+
 61e:	93 ff       	sbrs	r25, 3
 620:	81 91       	ld	r24, Z+
 622:	6f 01       	movw	r12, r30
 624:	88 23       	and	r24, r24
 626:	09 f4       	brne	.+2      	; 0x62a <vfprintf+0x3a>
 628:	ab c1       	rjmp	.+854    	; 0x980 <vfprintf+0x390>
 62a:	85 32       	cpi	r24, 0x25	; 37
 62c:	39 f4       	brne	.+14     	; 0x63c <vfprintf+0x4c>
 62e:	93 fd       	sbrc	r25, 3
 630:	85 91       	lpm	r24, Z+
 632:	93 ff       	sbrs	r25, 3
 634:	81 91       	ld	r24, Z+
 636:	6f 01       	movw	r12, r30
 638:	85 32       	cpi	r24, 0x25	; 37
 63a:	29 f4       	brne	.+10     	; 0x646 <vfprintf+0x56>
 63c:	b7 01       	movw	r22, r14
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 644:	e7 cf       	rjmp	.-50     	; 0x614 <vfprintf+0x24>
 646:	51 2c       	mov	r5, r1
 648:	31 2c       	mov	r3, r1
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	20 32       	cpi	r18, 0x20	; 32
 64e:	a0 f4       	brcc	.+40     	; 0x678 <vfprintf+0x88>
 650:	8b 32       	cpi	r24, 0x2B	; 43
 652:	69 f0       	breq	.+26     	; 0x66e <vfprintf+0x7e>
 654:	30 f4       	brcc	.+12     	; 0x662 <vfprintf+0x72>
 656:	80 32       	cpi	r24, 0x20	; 32
 658:	59 f0       	breq	.+22     	; 0x670 <vfprintf+0x80>
 65a:	83 32       	cpi	r24, 0x23	; 35
 65c:	69 f4       	brne	.+26     	; 0x678 <vfprintf+0x88>
 65e:	20 61       	ori	r18, 0x10	; 16
 660:	2c c0       	rjmp	.+88     	; 0x6ba <vfprintf+0xca>
 662:	8d 32       	cpi	r24, 0x2D	; 45
 664:	39 f0       	breq	.+14     	; 0x674 <vfprintf+0x84>
 666:	80 33       	cpi	r24, 0x30	; 48
 668:	39 f4       	brne	.+14     	; 0x678 <vfprintf+0x88>
 66a:	21 60       	ori	r18, 0x01	; 1
 66c:	26 c0       	rjmp	.+76     	; 0x6ba <vfprintf+0xca>
 66e:	22 60       	ori	r18, 0x02	; 2
 670:	24 60       	ori	r18, 0x04	; 4
 672:	23 c0       	rjmp	.+70     	; 0x6ba <vfprintf+0xca>
 674:	28 60       	ori	r18, 0x08	; 8
 676:	21 c0       	rjmp	.+66     	; 0x6ba <vfprintf+0xca>
 678:	27 fd       	sbrc	r18, 7
 67a:	27 c0       	rjmp	.+78     	; 0x6ca <vfprintf+0xda>
 67c:	30 ed       	ldi	r19, 0xD0	; 208
 67e:	38 0f       	add	r19, r24
 680:	3a 30       	cpi	r19, 0x0A	; 10
 682:	78 f4       	brcc	.+30     	; 0x6a2 <vfprintf+0xb2>
 684:	26 ff       	sbrs	r18, 6
 686:	06 c0       	rjmp	.+12     	; 0x694 <vfprintf+0xa4>
 688:	fa e0       	ldi	r31, 0x0A	; 10
 68a:	5f 9e       	mul	r5, r31
 68c:	30 0d       	add	r19, r0
 68e:	11 24       	eor	r1, r1
 690:	53 2e       	mov	r5, r19
 692:	13 c0       	rjmp	.+38     	; 0x6ba <vfprintf+0xca>
 694:	8a e0       	ldi	r24, 0x0A	; 10
 696:	38 9e       	mul	r3, r24
 698:	30 0d       	add	r19, r0
 69a:	11 24       	eor	r1, r1
 69c:	33 2e       	mov	r3, r19
 69e:	20 62       	ori	r18, 0x20	; 32
 6a0:	0c c0       	rjmp	.+24     	; 0x6ba <vfprintf+0xca>
 6a2:	8e 32       	cpi	r24, 0x2E	; 46
 6a4:	21 f4       	brne	.+8      	; 0x6ae <vfprintf+0xbe>
 6a6:	26 fd       	sbrc	r18, 6
 6a8:	6b c1       	rjmp	.+726    	; 0x980 <vfprintf+0x390>
 6aa:	20 64       	ori	r18, 0x40	; 64
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <vfprintf+0xca>
 6ae:	8c 36       	cpi	r24, 0x6C	; 108
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <vfprintf+0xc6>
 6b2:	20 68       	ori	r18, 0x80	; 128
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <vfprintf+0xca>
 6b6:	88 36       	cpi	r24, 0x68	; 104
 6b8:	41 f4       	brne	.+16     	; 0x6ca <vfprintf+0xda>
 6ba:	f6 01       	movw	r30, r12
 6bc:	93 fd       	sbrc	r25, 3
 6be:	85 91       	lpm	r24, Z+
 6c0:	93 ff       	sbrs	r25, 3
 6c2:	81 91       	ld	r24, Z+
 6c4:	6f 01       	movw	r12, r30
 6c6:	81 11       	cpse	r24, r1
 6c8:	c1 cf       	rjmp	.-126    	; 0x64c <vfprintf+0x5c>
 6ca:	98 2f       	mov	r25, r24
 6cc:	9f 7d       	andi	r25, 0xDF	; 223
 6ce:	95 54       	subi	r25, 0x45	; 69
 6d0:	93 30       	cpi	r25, 0x03	; 3
 6d2:	28 f4       	brcc	.+10     	; 0x6de <vfprintf+0xee>
 6d4:	0c 5f       	subi	r16, 0xFC	; 252
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	ff e3       	ldi	r31, 0x3F	; 63
 6da:	f9 83       	std	Y+1, r31	; 0x01
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <vfprintf+0x108>
 6de:	83 36       	cpi	r24, 0x63	; 99
 6e0:	31 f0       	breq	.+12     	; 0x6ee <vfprintf+0xfe>
 6e2:	83 37       	cpi	r24, 0x73	; 115
 6e4:	71 f0       	breq	.+28     	; 0x702 <vfprintf+0x112>
 6e6:	83 35       	cpi	r24, 0x53	; 83
 6e8:	09 f0       	breq	.+2      	; 0x6ec <vfprintf+0xfc>
 6ea:	5b c0       	rjmp	.+182    	; 0x7a2 <vfprintf+0x1b2>
 6ec:	22 c0       	rjmp	.+68     	; 0x732 <vfprintf+0x142>
 6ee:	f8 01       	movw	r30, r16
 6f0:	80 81       	ld	r24, Z
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	0e 5f       	subi	r16, 0xFE	; 254
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	44 24       	eor	r4, r4
 6fa:	43 94       	inc	r4
 6fc:	51 2c       	mov	r5, r1
 6fe:	54 01       	movw	r10, r8
 700:	15 c0       	rjmp	.+42     	; 0x72c <vfprintf+0x13c>
 702:	38 01       	movw	r6, r16
 704:	f2 e0       	ldi	r31, 0x02	; 2
 706:	6f 0e       	add	r6, r31
 708:	71 1c       	adc	r7, r1
 70a:	f8 01       	movw	r30, r16
 70c:	a0 80       	ld	r10, Z
 70e:	b1 80       	ldd	r11, Z+1	; 0x01
 710:	26 ff       	sbrs	r18, 6
 712:	03 c0       	rjmp	.+6      	; 0x71a <vfprintf+0x12a>
 714:	65 2d       	mov	r22, r5
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <vfprintf+0x12e>
 71a:	6f ef       	ldi	r22, 0xFF	; 255
 71c:	7f ef       	ldi	r23, 0xFF	; 255
 71e:	c5 01       	movw	r24, r10
 720:	2c 87       	std	Y+12, r18	; 0x0c
 722:	0e 94 1f 06 	call	0xc3e	; 0xc3e <strnlen>
 726:	2c 01       	movw	r4, r24
 728:	83 01       	movw	r16, r6
 72a:	2c 85       	ldd	r18, Y+12	; 0x0c
 72c:	2f 77       	andi	r18, 0x7F	; 127
 72e:	22 2e       	mov	r2, r18
 730:	17 c0       	rjmp	.+46     	; 0x760 <vfprintf+0x170>
 732:	38 01       	movw	r6, r16
 734:	f2 e0       	ldi	r31, 0x02	; 2
 736:	6f 0e       	add	r6, r31
 738:	71 1c       	adc	r7, r1
 73a:	f8 01       	movw	r30, r16
 73c:	a0 80       	ld	r10, Z
 73e:	b1 80       	ldd	r11, Z+1	; 0x01
 740:	26 ff       	sbrs	r18, 6
 742:	03 c0       	rjmp	.+6      	; 0x74a <vfprintf+0x15a>
 744:	65 2d       	mov	r22, r5
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <vfprintf+0x15e>
 74a:	6f ef       	ldi	r22, 0xFF	; 255
 74c:	7f ef       	ldi	r23, 0xFF	; 255
 74e:	c5 01       	movw	r24, r10
 750:	2c 87       	std	Y+12, r18	; 0x0c
 752:	0e 94 0d 06 	call	0xc1a	; 0xc1a <strnlen_P>
 756:	2c 01       	movw	r4, r24
 758:	2c 85       	ldd	r18, Y+12	; 0x0c
 75a:	20 68       	ori	r18, 0x80	; 128
 75c:	22 2e       	mov	r2, r18
 75e:	83 01       	movw	r16, r6
 760:	23 fc       	sbrc	r2, 3
 762:	1b c0       	rjmp	.+54     	; 0x79a <vfprintf+0x1aa>
 764:	83 2d       	mov	r24, r3
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	48 16       	cp	r4, r24
 76a:	59 06       	cpc	r5, r25
 76c:	b0 f4       	brcc	.+44     	; 0x79a <vfprintf+0x1aa>
 76e:	b7 01       	movw	r22, r14
 770:	80 e2       	ldi	r24, 0x20	; 32
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 778:	3a 94       	dec	r3
 77a:	f4 cf       	rjmp	.-24     	; 0x764 <vfprintf+0x174>
 77c:	f5 01       	movw	r30, r10
 77e:	27 fc       	sbrc	r2, 7
 780:	85 91       	lpm	r24, Z+
 782:	27 fe       	sbrs	r2, 7
 784:	81 91       	ld	r24, Z+
 786:	5f 01       	movw	r10, r30
 788:	b7 01       	movw	r22, r14
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 790:	31 10       	cpse	r3, r1
 792:	3a 94       	dec	r3
 794:	f1 e0       	ldi	r31, 0x01	; 1
 796:	4f 1a       	sub	r4, r31
 798:	51 08       	sbc	r5, r1
 79a:	41 14       	cp	r4, r1
 79c:	51 04       	cpc	r5, r1
 79e:	71 f7       	brne	.-36     	; 0x77c <vfprintf+0x18c>
 7a0:	e5 c0       	rjmp	.+458    	; 0x96c <vfprintf+0x37c>
 7a2:	84 36       	cpi	r24, 0x64	; 100
 7a4:	11 f0       	breq	.+4      	; 0x7aa <vfprintf+0x1ba>
 7a6:	89 36       	cpi	r24, 0x69	; 105
 7a8:	39 f5       	brne	.+78     	; 0x7f8 <vfprintf+0x208>
 7aa:	f8 01       	movw	r30, r16
 7ac:	27 ff       	sbrs	r18, 7
 7ae:	07 c0       	rjmp	.+14     	; 0x7be <vfprintf+0x1ce>
 7b0:	60 81       	ld	r22, Z
 7b2:	71 81       	ldd	r23, Z+1	; 0x01
 7b4:	82 81       	ldd	r24, Z+2	; 0x02
 7b6:	93 81       	ldd	r25, Z+3	; 0x03
 7b8:	0c 5f       	subi	r16, 0xFC	; 252
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	08 c0       	rjmp	.+16     	; 0x7ce <vfprintf+0x1de>
 7be:	60 81       	ld	r22, Z
 7c0:	71 81       	ldd	r23, Z+1	; 0x01
 7c2:	88 27       	eor	r24, r24
 7c4:	77 fd       	sbrc	r23, 7
 7c6:	80 95       	com	r24
 7c8:	98 2f       	mov	r25, r24
 7ca:	0e 5f       	subi	r16, 0xFE	; 254
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	2f 76       	andi	r18, 0x6F	; 111
 7d0:	b2 2e       	mov	r11, r18
 7d2:	97 ff       	sbrs	r25, 7
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <vfprintf+0x1f8>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	20 68       	ori	r18, 0x80	; 128
 7e6:	b2 2e       	mov	r11, r18
 7e8:	2a e0       	ldi	r18, 0x0A	; 10
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	a4 01       	movw	r20, r8
 7ee:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__ultoa_invert>
 7f2:	a8 2e       	mov	r10, r24
 7f4:	a8 18       	sub	r10, r8
 7f6:	44 c0       	rjmp	.+136    	; 0x880 <vfprintf+0x290>
 7f8:	85 37       	cpi	r24, 0x75	; 117
 7fa:	29 f4       	brne	.+10     	; 0x806 <vfprintf+0x216>
 7fc:	2f 7e       	andi	r18, 0xEF	; 239
 7fe:	b2 2e       	mov	r11, r18
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	25 c0       	rjmp	.+74     	; 0x850 <vfprintf+0x260>
 806:	f2 2f       	mov	r31, r18
 808:	f9 7f       	andi	r31, 0xF9	; 249
 80a:	bf 2e       	mov	r11, r31
 80c:	8f 36       	cpi	r24, 0x6F	; 111
 80e:	c1 f0       	breq	.+48     	; 0x840 <vfprintf+0x250>
 810:	18 f4       	brcc	.+6      	; 0x818 <vfprintf+0x228>
 812:	88 35       	cpi	r24, 0x58	; 88
 814:	79 f0       	breq	.+30     	; 0x834 <vfprintf+0x244>
 816:	b4 c0       	rjmp	.+360    	; 0x980 <vfprintf+0x390>
 818:	80 37       	cpi	r24, 0x70	; 112
 81a:	19 f0       	breq	.+6      	; 0x822 <vfprintf+0x232>
 81c:	88 37       	cpi	r24, 0x78	; 120
 81e:	21 f0       	breq	.+8      	; 0x828 <vfprintf+0x238>
 820:	af c0       	rjmp	.+350    	; 0x980 <vfprintf+0x390>
 822:	2f 2f       	mov	r18, r31
 824:	20 61       	ori	r18, 0x10	; 16
 826:	b2 2e       	mov	r11, r18
 828:	b4 fe       	sbrs	r11, 4
 82a:	0d c0       	rjmp	.+26     	; 0x846 <vfprintf+0x256>
 82c:	8b 2d       	mov	r24, r11
 82e:	84 60       	ori	r24, 0x04	; 4
 830:	b8 2e       	mov	r11, r24
 832:	09 c0       	rjmp	.+18     	; 0x846 <vfprintf+0x256>
 834:	24 ff       	sbrs	r18, 4
 836:	0a c0       	rjmp	.+20     	; 0x84c <vfprintf+0x25c>
 838:	9f 2f       	mov	r25, r31
 83a:	96 60       	ori	r25, 0x06	; 6
 83c:	b9 2e       	mov	r11, r25
 83e:	06 c0       	rjmp	.+12     	; 0x84c <vfprintf+0x25c>
 840:	28 e0       	ldi	r18, 0x08	; 8
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	05 c0       	rjmp	.+10     	; 0x850 <vfprintf+0x260>
 846:	20 e1       	ldi	r18, 0x10	; 16
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x260>
 84c:	20 e1       	ldi	r18, 0x10	; 16
 84e:	32 e0       	ldi	r19, 0x02	; 2
 850:	f8 01       	movw	r30, r16
 852:	b7 fe       	sbrs	r11, 7
 854:	07 c0       	rjmp	.+14     	; 0x864 <vfprintf+0x274>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	82 81       	ldd	r24, Z+2	; 0x02
 85c:	93 81       	ldd	r25, Z+3	; 0x03
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	06 c0       	rjmp	.+12     	; 0x870 <vfprintf+0x280>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 5f       	subi	r16, 0xFE	; 254
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	a4 01       	movw	r20, r8
 872:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__ultoa_invert>
 876:	a8 2e       	mov	r10, r24
 878:	a8 18       	sub	r10, r8
 87a:	fb 2d       	mov	r31, r11
 87c:	ff 77       	andi	r31, 0x7F	; 127
 87e:	bf 2e       	mov	r11, r31
 880:	b6 fe       	sbrs	r11, 6
 882:	0b c0       	rjmp	.+22     	; 0x89a <vfprintf+0x2aa>
 884:	2b 2d       	mov	r18, r11
 886:	2e 7f       	andi	r18, 0xFE	; 254
 888:	a5 14       	cp	r10, r5
 88a:	50 f4       	brcc	.+20     	; 0x8a0 <vfprintf+0x2b0>
 88c:	b4 fe       	sbrs	r11, 4
 88e:	0a c0       	rjmp	.+20     	; 0x8a4 <vfprintf+0x2b4>
 890:	b2 fc       	sbrc	r11, 2
 892:	08 c0       	rjmp	.+16     	; 0x8a4 <vfprintf+0x2b4>
 894:	2b 2d       	mov	r18, r11
 896:	2e 7e       	andi	r18, 0xEE	; 238
 898:	05 c0       	rjmp	.+10     	; 0x8a4 <vfprintf+0x2b4>
 89a:	7a 2c       	mov	r7, r10
 89c:	2b 2d       	mov	r18, r11
 89e:	03 c0       	rjmp	.+6      	; 0x8a6 <vfprintf+0x2b6>
 8a0:	7a 2c       	mov	r7, r10
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <vfprintf+0x2b6>
 8a4:	75 2c       	mov	r7, r5
 8a6:	24 ff       	sbrs	r18, 4
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <vfprintf+0x2d4>
 8aa:	fe 01       	movw	r30, r28
 8ac:	ea 0d       	add	r30, r10
 8ae:	f1 1d       	adc	r31, r1
 8b0:	80 81       	ld	r24, Z
 8b2:	80 33       	cpi	r24, 0x30	; 48
 8b4:	11 f4       	brne	.+4      	; 0x8ba <vfprintf+0x2ca>
 8b6:	29 7e       	andi	r18, 0xE9	; 233
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <vfprintf+0x2dc>
 8ba:	22 ff       	sbrs	r18, 2
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x2da>
 8be:	73 94       	inc	r7
 8c0:	73 94       	inc	r7
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <vfprintf+0x2dc>
 8c4:	82 2f       	mov	r24, r18
 8c6:	86 78       	andi	r24, 0x86	; 134
 8c8:	09 f0       	breq	.+2      	; 0x8cc <vfprintf+0x2dc>
 8ca:	73 94       	inc	r7
 8cc:	23 fd       	sbrc	r18, 3
 8ce:	13 c0       	rjmp	.+38     	; 0x8f6 <vfprintf+0x306>
 8d0:	20 ff       	sbrs	r18, 0
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <vfprintf+0x2f0>
 8d4:	5a 2c       	mov	r5, r10
 8d6:	73 14       	cp	r7, r3
 8d8:	18 f4       	brcc	.+6      	; 0x8e0 <vfprintf+0x2f0>
 8da:	53 0c       	add	r5, r3
 8dc:	57 18       	sub	r5, r7
 8de:	73 2c       	mov	r7, r3
 8e0:	73 14       	cp	r7, r3
 8e2:	68 f4       	brcc	.+26     	; 0x8fe <vfprintf+0x30e>
 8e4:	b7 01       	movw	r22, r14
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	2c 87       	std	Y+12, r18	; 0x0c
 8ec:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 8f0:	73 94       	inc	r7
 8f2:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f4:	f5 cf       	rjmp	.-22     	; 0x8e0 <vfprintf+0x2f0>
 8f6:	73 14       	cp	r7, r3
 8f8:	10 f4       	brcc	.+4      	; 0x8fe <vfprintf+0x30e>
 8fa:	37 18       	sub	r3, r7
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <vfprintf+0x310>
 8fe:	31 2c       	mov	r3, r1
 900:	24 ff       	sbrs	r18, 4
 902:	12 c0       	rjmp	.+36     	; 0x928 <vfprintf+0x338>
 904:	b7 01       	movw	r22, r14
 906:	80 e3       	ldi	r24, 0x30	; 48
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	2c 87       	std	Y+12, r18	; 0x0c
 90c:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 910:	2c 85       	ldd	r18, Y+12	; 0x0c
 912:	22 ff       	sbrs	r18, 2
 914:	17 c0       	rjmp	.+46     	; 0x944 <vfprintf+0x354>
 916:	21 ff       	sbrs	r18, 1
 918:	03 c0       	rjmp	.+6      	; 0x920 <vfprintf+0x330>
 91a:	88 e5       	ldi	r24, 0x58	; 88
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <vfprintf+0x334>
 920:	88 e7       	ldi	r24, 0x78	; 120
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	b7 01       	movw	r22, r14
 926:	0c c0       	rjmp	.+24     	; 0x940 <vfprintf+0x350>
 928:	82 2f       	mov	r24, r18
 92a:	86 78       	andi	r24, 0x86	; 134
 92c:	59 f0       	breq	.+22     	; 0x944 <vfprintf+0x354>
 92e:	21 fd       	sbrc	r18, 1
 930:	02 c0       	rjmp	.+4      	; 0x936 <vfprintf+0x346>
 932:	80 e2       	ldi	r24, 0x20	; 32
 934:	01 c0       	rjmp	.+2      	; 0x938 <vfprintf+0x348>
 936:	8b e2       	ldi	r24, 0x2B	; 43
 938:	27 fd       	sbrc	r18, 7
 93a:	8d e2       	ldi	r24, 0x2D	; 45
 93c:	b7 01       	movw	r22, r14
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 944:	a5 14       	cp	r10, r5
 946:	38 f4       	brcc	.+14     	; 0x956 <vfprintf+0x366>
 948:	b7 01       	movw	r22, r14
 94a:	80 e3       	ldi	r24, 0x30	; 48
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 952:	5a 94       	dec	r5
 954:	f7 cf       	rjmp	.-18     	; 0x944 <vfprintf+0x354>
 956:	aa 94       	dec	r10
 958:	f4 01       	movw	r30, r8
 95a:	ea 0d       	add	r30, r10
 95c:	f1 1d       	adc	r31, r1
 95e:	80 81       	ld	r24, Z
 960:	b7 01       	movw	r22, r14
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 968:	a1 10       	cpse	r10, r1
 96a:	f5 cf       	rjmp	.-22     	; 0x956 <vfprintf+0x366>
 96c:	33 20       	and	r3, r3
 96e:	09 f4       	brne	.+2      	; 0x972 <vfprintf+0x382>
 970:	51 ce       	rjmp	.-862    	; 0x614 <vfprintf+0x24>
 972:	b7 01       	movw	r22, r14
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 2a 06 	call	0xc54	; 0xc54 <fputc>
 97c:	3a 94       	dec	r3
 97e:	f6 cf       	rjmp	.-20     	; 0x96c <vfprintf+0x37c>
 980:	f7 01       	movw	r30, r14
 982:	86 81       	ldd	r24, Z+6	; 0x06
 984:	97 81       	ldd	r25, Z+7	; 0x07
 986:	02 c0       	rjmp	.+4      	; 0x98c <vfprintf+0x39c>
 988:	8f ef       	ldi	r24, 0xFF	; 255
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	2c 96       	adiw	r28, 0x0c	; 12
 98e:	e2 e1       	ldi	r30, 0x12	; 18
 990:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__epilogue_restores__>

00000994 <calloc>:
 994:	0f 93       	push	r16
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	86 9f       	mul	r24, r22
 99e:	80 01       	movw	r16, r0
 9a0:	87 9f       	mul	r24, r23
 9a2:	10 0d       	add	r17, r0
 9a4:	96 9f       	mul	r25, r22
 9a6:	10 0d       	add	r17, r0
 9a8:	11 24       	eor	r1, r1
 9aa:	c8 01       	movw	r24, r16
 9ac:	0e 94 e6 04 	call	0x9cc	; 0x9cc <malloc>
 9b0:	ec 01       	movw	r28, r24
 9b2:	00 97       	sbiw	r24, 0x00	; 0
 9b4:	29 f0       	breq	.+10     	; 0x9c0 <calloc+0x2c>
 9b6:	a8 01       	movw	r20, r16
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	0e 94 18 06 	call	0xc30	; 0xc30 <memset>
 9c0:	ce 01       	movw	r24, r28
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	0f 91       	pop	r16
 9ca:	08 95       	ret

000009cc <malloc>:
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
 9d0:	82 30       	cpi	r24, 0x02	; 2
 9d2:	91 05       	cpc	r25, r1
 9d4:	10 f4       	brcc	.+4      	; 0x9da <malloc+0xe>
 9d6:	82 e0       	ldi	r24, 0x02	; 2
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	e0 91 13 02 	lds	r30, 0x0213
 9de:	f0 91 14 02 	lds	r31, 0x0214
 9e2:	20 e0       	ldi	r18, 0x00	; 0
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	a0 e0       	ldi	r26, 0x00	; 0
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	30 97       	sbiw	r30, 0x00	; 0
 9ec:	39 f1       	breq	.+78     	; 0xa3c <malloc+0x70>
 9ee:	40 81       	ld	r20, Z
 9f0:	51 81       	ldd	r21, Z+1	; 0x01
 9f2:	48 17       	cp	r20, r24
 9f4:	59 07       	cpc	r21, r25
 9f6:	b8 f0       	brcs	.+46     	; 0xa26 <malloc+0x5a>
 9f8:	48 17       	cp	r20, r24
 9fa:	59 07       	cpc	r21, r25
 9fc:	71 f4       	brne	.+28     	; 0xa1a <malloc+0x4e>
 9fe:	82 81       	ldd	r24, Z+2	; 0x02
 a00:	93 81       	ldd	r25, Z+3	; 0x03
 a02:	10 97       	sbiw	r26, 0x00	; 0
 a04:	29 f0       	breq	.+10     	; 0xa10 <malloc+0x44>
 a06:	13 96       	adiw	r26, 0x03	; 3
 a08:	9c 93       	st	X, r25
 a0a:	8e 93       	st	-X, r24
 a0c:	12 97       	sbiw	r26, 0x02	; 2
 a0e:	2c c0       	rjmp	.+88     	; 0xa68 <malloc+0x9c>
 a10:	90 93 14 02 	sts	0x0214, r25
 a14:	80 93 13 02 	sts	0x0213, r24
 a18:	27 c0       	rjmp	.+78     	; 0xa68 <malloc+0x9c>
 a1a:	21 15       	cp	r18, r1
 a1c:	31 05       	cpc	r19, r1
 a1e:	31 f0       	breq	.+12     	; 0xa2c <malloc+0x60>
 a20:	42 17       	cp	r20, r18
 a22:	53 07       	cpc	r21, r19
 a24:	18 f0       	brcs	.+6      	; 0xa2c <malloc+0x60>
 a26:	a9 01       	movw	r20, r18
 a28:	db 01       	movw	r26, r22
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <malloc+0x62>
 a2c:	ef 01       	movw	r28, r30
 a2e:	9a 01       	movw	r18, r20
 a30:	bd 01       	movw	r22, r26
 a32:	df 01       	movw	r26, r30
 a34:	02 80       	ldd	r0, Z+2	; 0x02
 a36:	f3 81       	ldd	r31, Z+3	; 0x03
 a38:	e0 2d       	mov	r30, r0
 a3a:	d7 cf       	rjmp	.-82     	; 0x9ea <malloc+0x1e>
 a3c:	21 15       	cp	r18, r1
 a3e:	31 05       	cpc	r19, r1
 a40:	f9 f0       	breq	.+62     	; 0xa80 <malloc+0xb4>
 a42:	28 1b       	sub	r18, r24
 a44:	39 0b       	sbc	r19, r25
 a46:	24 30       	cpi	r18, 0x04	; 4
 a48:	31 05       	cpc	r19, r1
 a4a:	80 f4       	brcc	.+32     	; 0xa6c <malloc+0xa0>
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	9b 81       	ldd	r25, Y+3	; 0x03
 a50:	61 15       	cp	r22, r1
 a52:	71 05       	cpc	r23, r1
 a54:	21 f0       	breq	.+8      	; 0xa5e <malloc+0x92>
 a56:	fb 01       	movw	r30, r22
 a58:	93 83       	std	Z+3, r25	; 0x03
 a5a:	82 83       	std	Z+2, r24	; 0x02
 a5c:	04 c0       	rjmp	.+8      	; 0xa66 <malloc+0x9a>
 a5e:	90 93 14 02 	sts	0x0214, r25
 a62:	80 93 13 02 	sts	0x0213, r24
 a66:	fe 01       	movw	r30, r28
 a68:	32 96       	adiw	r30, 0x02	; 2
 a6a:	44 c0       	rjmp	.+136    	; 0xaf4 <malloc+0x128>
 a6c:	fe 01       	movw	r30, r28
 a6e:	e2 0f       	add	r30, r18
 a70:	f3 1f       	adc	r31, r19
 a72:	81 93       	st	Z+, r24
 a74:	91 93       	st	Z+, r25
 a76:	22 50       	subi	r18, 0x02	; 2
 a78:	31 09       	sbc	r19, r1
 a7a:	39 83       	std	Y+1, r19	; 0x01
 a7c:	28 83       	st	Y, r18
 a7e:	3a c0       	rjmp	.+116    	; 0xaf4 <malloc+0x128>
 a80:	20 91 11 02 	lds	r18, 0x0211
 a84:	30 91 12 02 	lds	r19, 0x0212
 a88:	23 2b       	or	r18, r19
 a8a:	41 f4       	brne	.+16     	; 0xa9c <malloc+0xd0>
 a8c:	20 91 02 01 	lds	r18, 0x0102
 a90:	30 91 03 01 	lds	r19, 0x0103
 a94:	30 93 12 02 	sts	0x0212, r19
 a98:	20 93 11 02 	sts	0x0211, r18
 a9c:	20 91 00 01 	lds	r18, 0x0100
 aa0:	30 91 01 01 	lds	r19, 0x0101
 aa4:	21 15       	cp	r18, r1
 aa6:	31 05       	cpc	r19, r1
 aa8:	41 f4       	brne	.+16     	; 0xaba <malloc+0xee>
 aaa:	2d b7       	in	r18, 0x3d	; 61
 aac:	3e b7       	in	r19, 0x3e	; 62
 aae:	40 91 04 01 	lds	r20, 0x0104
 ab2:	50 91 05 01 	lds	r21, 0x0105
 ab6:	24 1b       	sub	r18, r20
 ab8:	35 0b       	sbc	r19, r21
 aba:	e0 91 11 02 	lds	r30, 0x0211
 abe:	f0 91 12 02 	lds	r31, 0x0212
 ac2:	e2 17       	cp	r30, r18
 ac4:	f3 07       	cpc	r31, r19
 ac6:	a0 f4       	brcc	.+40     	; 0xaf0 <malloc+0x124>
 ac8:	2e 1b       	sub	r18, r30
 aca:	3f 0b       	sbc	r19, r31
 acc:	28 17       	cp	r18, r24
 ace:	39 07       	cpc	r19, r25
 ad0:	78 f0       	brcs	.+30     	; 0xaf0 <malloc+0x124>
 ad2:	ac 01       	movw	r20, r24
 ad4:	4e 5f       	subi	r20, 0xFE	; 254
 ad6:	5f 4f       	sbci	r21, 0xFF	; 255
 ad8:	24 17       	cp	r18, r20
 ada:	35 07       	cpc	r19, r21
 adc:	48 f0       	brcs	.+18     	; 0xaf0 <malloc+0x124>
 ade:	4e 0f       	add	r20, r30
 ae0:	5f 1f       	adc	r21, r31
 ae2:	50 93 12 02 	sts	0x0212, r21
 ae6:	40 93 11 02 	sts	0x0211, r20
 aea:	81 93       	st	Z+, r24
 aec:	91 93       	st	Z+, r25
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <malloc+0x128>
 af0:	e0 e0       	ldi	r30, 0x00	; 0
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	cf 01       	movw	r24, r30
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	08 95       	ret

00000afc <free>:
 afc:	cf 93       	push	r28
 afe:	df 93       	push	r29
 b00:	00 97       	sbiw	r24, 0x00	; 0
 b02:	09 f4       	brne	.+2      	; 0xb06 <free+0xa>
 b04:	87 c0       	rjmp	.+270    	; 0xc14 <free+0x118>
 b06:	fc 01       	movw	r30, r24
 b08:	32 97       	sbiw	r30, 0x02	; 2
 b0a:	13 82       	std	Z+3, r1	; 0x03
 b0c:	12 82       	std	Z+2, r1	; 0x02
 b0e:	c0 91 13 02 	lds	r28, 0x0213
 b12:	d0 91 14 02 	lds	r29, 0x0214
 b16:	20 97       	sbiw	r28, 0x00	; 0
 b18:	81 f4       	brne	.+32     	; 0xb3a <free+0x3e>
 b1a:	20 81       	ld	r18, Z
 b1c:	31 81       	ldd	r19, Z+1	; 0x01
 b1e:	28 0f       	add	r18, r24
 b20:	39 1f       	adc	r19, r25
 b22:	80 91 11 02 	lds	r24, 0x0211
 b26:	90 91 12 02 	lds	r25, 0x0212
 b2a:	82 17       	cp	r24, r18
 b2c:	93 07       	cpc	r25, r19
 b2e:	79 f5       	brne	.+94     	; 0xb8e <free+0x92>
 b30:	f0 93 12 02 	sts	0x0212, r31
 b34:	e0 93 11 02 	sts	0x0211, r30
 b38:	6d c0       	rjmp	.+218    	; 0xc14 <free+0x118>
 b3a:	de 01       	movw	r26, r28
 b3c:	20 e0       	ldi	r18, 0x00	; 0
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	ae 17       	cp	r26, r30
 b42:	bf 07       	cpc	r27, r31
 b44:	50 f4       	brcc	.+20     	; 0xb5a <free+0x5e>
 b46:	12 96       	adiw	r26, 0x02	; 2
 b48:	4d 91       	ld	r20, X+
 b4a:	5c 91       	ld	r21, X
 b4c:	13 97       	sbiw	r26, 0x03	; 3
 b4e:	9d 01       	movw	r18, r26
 b50:	41 15       	cp	r20, r1
 b52:	51 05       	cpc	r21, r1
 b54:	09 f1       	breq	.+66     	; 0xb98 <free+0x9c>
 b56:	da 01       	movw	r26, r20
 b58:	f3 cf       	rjmp	.-26     	; 0xb40 <free+0x44>
 b5a:	b3 83       	std	Z+3, r27	; 0x03
 b5c:	a2 83       	std	Z+2, r26	; 0x02
 b5e:	40 81       	ld	r20, Z
 b60:	51 81       	ldd	r21, Z+1	; 0x01
 b62:	84 0f       	add	r24, r20
 b64:	95 1f       	adc	r25, r21
 b66:	8a 17       	cp	r24, r26
 b68:	9b 07       	cpc	r25, r27
 b6a:	71 f4       	brne	.+28     	; 0xb88 <free+0x8c>
 b6c:	8d 91       	ld	r24, X+
 b6e:	9c 91       	ld	r25, X
 b70:	11 97       	sbiw	r26, 0x01	; 1
 b72:	84 0f       	add	r24, r20
 b74:	95 1f       	adc	r25, r21
 b76:	02 96       	adiw	r24, 0x02	; 2
 b78:	91 83       	std	Z+1, r25	; 0x01
 b7a:	80 83       	st	Z, r24
 b7c:	12 96       	adiw	r26, 0x02	; 2
 b7e:	8d 91       	ld	r24, X+
 b80:	9c 91       	ld	r25, X
 b82:	13 97       	sbiw	r26, 0x03	; 3
 b84:	93 83       	std	Z+3, r25	; 0x03
 b86:	82 83       	std	Z+2, r24	; 0x02
 b88:	21 15       	cp	r18, r1
 b8a:	31 05       	cpc	r19, r1
 b8c:	29 f4       	brne	.+10     	; 0xb98 <free+0x9c>
 b8e:	f0 93 14 02 	sts	0x0214, r31
 b92:	e0 93 13 02 	sts	0x0213, r30
 b96:	3e c0       	rjmp	.+124    	; 0xc14 <free+0x118>
 b98:	d9 01       	movw	r26, r18
 b9a:	13 96       	adiw	r26, 0x03	; 3
 b9c:	fc 93       	st	X, r31
 b9e:	ee 93       	st	-X, r30
 ba0:	12 97       	sbiw	r26, 0x02	; 2
 ba2:	4d 91       	ld	r20, X+
 ba4:	5d 91       	ld	r21, X+
 ba6:	a4 0f       	add	r26, r20
 ba8:	b5 1f       	adc	r27, r21
 baa:	ea 17       	cp	r30, r26
 bac:	fb 07       	cpc	r31, r27
 bae:	79 f4       	brne	.+30     	; 0xbce <free+0xd2>
 bb0:	80 81       	ld	r24, Z
 bb2:	91 81       	ldd	r25, Z+1	; 0x01
 bb4:	84 0f       	add	r24, r20
 bb6:	95 1f       	adc	r25, r21
 bb8:	02 96       	adiw	r24, 0x02	; 2
 bba:	d9 01       	movw	r26, r18
 bbc:	11 96       	adiw	r26, 0x01	; 1
 bbe:	9c 93       	st	X, r25
 bc0:	8e 93       	st	-X, r24
 bc2:	82 81       	ldd	r24, Z+2	; 0x02
 bc4:	93 81       	ldd	r25, Z+3	; 0x03
 bc6:	13 96       	adiw	r26, 0x03	; 3
 bc8:	9c 93       	st	X, r25
 bca:	8e 93       	st	-X, r24
 bcc:	12 97       	sbiw	r26, 0x02	; 2
 bce:	e0 e0       	ldi	r30, 0x00	; 0
 bd0:	f0 e0       	ldi	r31, 0x00	; 0
 bd2:	8a 81       	ldd	r24, Y+2	; 0x02
 bd4:	9b 81       	ldd	r25, Y+3	; 0x03
 bd6:	00 97       	sbiw	r24, 0x00	; 0
 bd8:	19 f0       	breq	.+6      	; 0xbe0 <free+0xe4>
 bda:	fe 01       	movw	r30, r28
 bdc:	ec 01       	movw	r28, r24
 bde:	f9 cf       	rjmp	.-14     	; 0xbd2 <free+0xd6>
 be0:	ce 01       	movw	r24, r28
 be2:	02 96       	adiw	r24, 0x02	; 2
 be4:	28 81       	ld	r18, Y
 be6:	39 81       	ldd	r19, Y+1	; 0x01
 be8:	82 0f       	add	r24, r18
 bea:	93 1f       	adc	r25, r19
 bec:	20 91 11 02 	lds	r18, 0x0211
 bf0:	30 91 12 02 	lds	r19, 0x0212
 bf4:	28 17       	cp	r18, r24
 bf6:	39 07       	cpc	r19, r25
 bf8:	69 f4       	brne	.+26     	; 0xc14 <free+0x118>
 bfa:	30 97       	sbiw	r30, 0x00	; 0
 bfc:	29 f4       	brne	.+10     	; 0xc08 <free+0x10c>
 bfe:	10 92 14 02 	sts	0x0214, r1
 c02:	10 92 13 02 	sts	0x0213, r1
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <free+0x110>
 c08:	13 82       	std	Z+3, r1	; 0x03
 c0a:	12 82       	std	Z+2, r1	; 0x02
 c0c:	d0 93 12 02 	sts	0x0212, r29
 c10:	c0 93 11 02 	sts	0x0211, r28
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	08 95       	ret

00000c1a <strnlen_P>:
 c1a:	fc 01       	movw	r30, r24
 c1c:	05 90       	lpm	r0, Z+
 c1e:	61 50       	subi	r22, 0x01	; 1
 c20:	70 40       	sbci	r23, 0x00	; 0
 c22:	01 10       	cpse	r0, r1
 c24:	d8 f7       	brcc	.-10     	; 0xc1c <strnlen_P+0x2>
 c26:	80 95       	com	r24
 c28:	90 95       	com	r25
 c2a:	8e 0f       	add	r24, r30
 c2c:	9f 1f       	adc	r25, r31
 c2e:	08 95       	ret

00000c30 <memset>:
 c30:	dc 01       	movw	r26, r24
 c32:	01 c0       	rjmp	.+2      	; 0xc36 <memset+0x6>
 c34:	6d 93       	st	X+, r22
 c36:	41 50       	subi	r20, 0x01	; 1
 c38:	50 40       	sbci	r21, 0x00	; 0
 c3a:	e0 f7       	brcc	.-8      	; 0xc34 <memset+0x4>
 c3c:	08 95       	ret

00000c3e <strnlen>:
 c3e:	fc 01       	movw	r30, r24
 c40:	61 50       	subi	r22, 0x01	; 1
 c42:	70 40       	sbci	r23, 0x00	; 0
 c44:	01 90       	ld	r0, Z+
 c46:	01 10       	cpse	r0, r1
 c48:	d8 f7       	brcc	.-10     	; 0xc40 <strnlen+0x2>
 c4a:	80 95       	com	r24
 c4c:	90 95       	com	r25
 c4e:	8e 0f       	add	r24, r30
 c50:	9f 1f       	adc	r25, r31
 c52:	08 95       	ret

00000c54 <fputc>:
 c54:	0f 93       	push	r16
 c56:	1f 93       	push	r17
 c58:	cf 93       	push	r28
 c5a:	df 93       	push	r29
 c5c:	18 2f       	mov	r17, r24
 c5e:	09 2f       	mov	r16, r25
 c60:	eb 01       	movw	r28, r22
 c62:	8b 81       	ldd	r24, Y+3	; 0x03
 c64:	81 fd       	sbrc	r24, 1
 c66:	03 c0       	rjmp	.+6      	; 0xc6e <fputc+0x1a>
 c68:	8f ef       	ldi	r24, 0xFF	; 255
 c6a:	9f ef       	ldi	r25, 0xFF	; 255
 c6c:	20 c0       	rjmp	.+64     	; 0xcae <fputc+0x5a>
 c6e:	82 ff       	sbrs	r24, 2
 c70:	10 c0       	rjmp	.+32     	; 0xc92 <fputc+0x3e>
 c72:	4e 81       	ldd	r20, Y+6	; 0x06
 c74:	5f 81       	ldd	r21, Y+7	; 0x07
 c76:	2c 81       	ldd	r18, Y+4	; 0x04
 c78:	3d 81       	ldd	r19, Y+5	; 0x05
 c7a:	42 17       	cp	r20, r18
 c7c:	53 07       	cpc	r21, r19
 c7e:	7c f4       	brge	.+30     	; 0xc9e <fputc+0x4a>
 c80:	e8 81       	ld	r30, Y
 c82:	f9 81       	ldd	r31, Y+1	; 0x01
 c84:	9f 01       	movw	r18, r30
 c86:	2f 5f       	subi	r18, 0xFF	; 255
 c88:	3f 4f       	sbci	r19, 0xFF	; 255
 c8a:	39 83       	std	Y+1, r19	; 0x01
 c8c:	28 83       	st	Y, r18
 c8e:	10 83       	st	Z, r17
 c90:	06 c0       	rjmp	.+12     	; 0xc9e <fputc+0x4a>
 c92:	e8 85       	ldd	r30, Y+8	; 0x08
 c94:	f9 85       	ldd	r31, Y+9	; 0x09
 c96:	81 2f       	mov	r24, r17
 c98:	09 95       	icall
 c9a:	89 2b       	or	r24, r25
 c9c:	29 f7       	brne	.-54     	; 0xc68 <fputc+0x14>
 c9e:	2e 81       	ldd	r18, Y+6	; 0x06
 ca0:	3f 81       	ldd	r19, Y+7	; 0x07
 ca2:	2f 5f       	subi	r18, 0xFF	; 255
 ca4:	3f 4f       	sbci	r19, 0xFF	; 255
 ca6:	3f 83       	std	Y+7, r19	; 0x07
 ca8:	2e 83       	std	Y+6, r18	; 0x06
 caa:	81 2f       	mov	r24, r17
 cac:	90 2f       	mov	r25, r16
 cae:	df 91       	pop	r29
 cb0:	cf 91       	pop	r28
 cb2:	1f 91       	pop	r17
 cb4:	0f 91       	pop	r16
 cb6:	08 95       	ret

00000cb8 <__ultoa_invert>:
 cb8:	fa 01       	movw	r30, r20
 cba:	aa 27       	eor	r26, r26
 cbc:	28 30       	cpi	r18, 0x08	; 8
 cbe:	51 f1       	breq	.+84     	; 0xd14 <__ultoa_invert+0x5c>
 cc0:	20 31       	cpi	r18, 0x10	; 16
 cc2:	81 f1       	breq	.+96     	; 0xd24 <__ultoa_invert+0x6c>
 cc4:	e8 94       	clt
 cc6:	6f 93       	push	r22
 cc8:	6e 7f       	andi	r22, 0xFE	; 254
 cca:	6e 5f       	subi	r22, 0xFE	; 254
 ccc:	7f 4f       	sbci	r23, 0xFF	; 255
 cce:	8f 4f       	sbci	r24, 0xFF	; 255
 cd0:	9f 4f       	sbci	r25, 0xFF	; 255
 cd2:	af 4f       	sbci	r26, 0xFF	; 255
 cd4:	b1 e0       	ldi	r27, 0x01	; 1
 cd6:	3e d0       	rcall	.+124    	; 0xd54 <__ultoa_invert+0x9c>
 cd8:	b4 e0       	ldi	r27, 0x04	; 4
 cda:	3c d0       	rcall	.+120    	; 0xd54 <__ultoa_invert+0x9c>
 cdc:	67 0f       	add	r22, r23
 cde:	78 1f       	adc	r23, r24
 ce0:	89 1f       	adc	r24, r25
 ce2:	9a 1f       	adc	r25, r26
 ce4:	a1 1d       	adc	r26, r1
 ce6:	68 0f       	add	r22, r24
 ce8:	79 1f       	adc	r23, r25
 cea:	8a 1f       	adc	r24, r26
 cec:	91 1d       	adc	r25, r1
 cee:	a1 1d       	adc	r26, r1
 cf0:	6a 0f       	add	r22, r26
 cf2:	71 1d       	adc	r23, r1
 cf4:	81 1d       	adc	r24, r1
 cf6:	91 1d       	adc	r25, r1
 cf8:	a1 1d       	adc	r26, r1
 cfa:	20 d0       	rcall	.+64     	; 0xd3c <__ultoa_invert+0x84>
 cfc:	09 f4       	brne	.+2      	; 0xd00 <__ultoa_invert+0x48>
 cfe:	68 94       	set
 d00:	3f 91       	pop	r19
 d02:	2a e0       	ldi	r18, 0x0A	; 10
 d04:	26 9f       	mul	r18, r22
 d06:	11 24       	eor	r1, r1
 d08:	30 19       	sub	r19, r0
 d0a:	30 5d       	subi	r19, 0xD0	; 208
 d0c:	31 93       	st	Z+, r19
 d0e:	de f6       	brtc	.-74     	; 0xcc6 <__ultoa_invert+0xe>
 d10:	cf 01       	movw	r24, r30
 d12:	08 95       	ret
 d14:	46 2f       	mov	r20, r22
 d16:	47 70       	andi	r20, 0x07	; 7
 d18:	40 5d       	subi	r20, 0xD0	; 208
 d1a:	41 93       	st	Z+, r20
 d1c:	b3 e0       	ldi	r27, 0x03	; 3
 d1e:	0f d0       	rcall	.+30     	; 0xd3e <__ultoa_invert+0x86>
 d20:	c9 f7       	brne	.-14     	; 0xd14 <__ultoa_invert+0x5c>
 d22:	f6 cf       	rjmp	.-20     	; 0xd10 <__ultoa_invert+0x58>
 d24:	46 2f       	mov	r20, r22
 d26:	4f 70       	andi	r20, 0x0F	; 15
 d28:	40 5d       	subi	r20, 0xD0	; 208
 d2a:	4a 33       	cpi	r20, 0x3A	; 58
 d2c:	18 f0       	brcs	.+6      	; 0xd34 <__ultoa_invert+0x7c>
 d2e:	49 5d       	subi	r20, 0xD9	; 217
 d30:	31 fd       	sbrc	r19, 1
 d32:	40 52       	subi	r20, 0x20	; 32
 d34:	41 93       	st	Z+, r20
 d36:	02 d0       	rcall	.+4      	; 0xd3c <__ultoa_invert+0x84>
 d38:	a9 f7       	brne	.-22     	; 0xd24 <__ultoa_invert+0x6c>
 d3a:	ea cf       	rjmp	.-44     	; 0xd10 <__ultoa_invert+0x58>
 d3c:	b4 e0       	ldi	r27, 0x04	; 4
 d3e:	a6 95       	lsr	r26
 d40:	97 95       	ror	r25
 d42:	87 95       	ror	r24
 d44:	77 95       	ror	r23
 d46:	67 95       	ror	r22
 d48:	ba 95       	dec	r27
 d4a:	c9 f7       	brne	.-14     	; 0xd3e <__ultoa_invert+0x86>
 d4c:	00 97       	sbiw	r24, 0x00	; 0
 d4e:	61 05       	cpc	r22, r1
 d50:	71 05       	cpc	r23, r1
 d52:	08 95       	ret
 d54:	9b 01       	movw	r18, r22
 d56:	ac 01       	movw	r20, r24
 d58:	0a 2e       	mov	r0, r26
 d5a:	06 94       	lsr	r0
 d5c:	57 95       	ror	r21
 d5e:	47 95       	ror	r20
 d60:	37 95       	ror	r19
 d62:	27 95       	ror	r18
 d64:	ba 95       	dec	r27
 d66:	c9 f7       	brne	.-14     	; 0xd5a <__ultoa_invert+0xa2>
 d68:	62 0f       	add	r22, r18
 d6a:	73 1f       	adc	r23, r19
 d6c:	84 1f       	adc	r24, r20
 d6e:	95 1f       	adc	r25, r21
 d70:	a0 1d       	adc	r26, r0
 d72:	08 95       	ret

00000d74 <__prologue_saves__>:
 d74:	2f 92       	push	r2
 d76:	3f 92       	push	r3
 d78:	4f 92       	push	r4
 d7a:	5f 92       	push	r5
 d7c:	6f 92       	push	r6
 d7e:	7f 92       	push	r7
 d80:	8f 92       	push	r8
 d82:	9f 92       	push	r9
 d84:	af 92       	push	r10
 d86:	bf 92       	push	r11
 d88:	cf 92       	push	r12
 d8a:	df 92       	push	r13
 d8c:	ef 92       	push	r14
 d8e:	ff 92       	push	r15
 d90:	0f 93       	push	r16
 d92:	1f 93       	push	r17
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	cd b7       	in	r28, 0x3d	; 61
 d9a:	de b7       	in	r29, 0x3e	; 62
 d9c:	ca 1b       	sub	r28, r26
 d9e:	db 0b       	sbc	r29, r27
 da0:	0f b6       	in	r0, 0x3f	; 63
 da2:	f8 94       	cli
 da4:	de bf       	out	0x3e, r29	; 62
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	cd bf       	out	0x3d, r28	; 61
 daa:	09 94       	ijmp

00000dac <__epilogue_restores__>:
 dac:	2a 88       	ldd	r2, Y+18	; 0x12
 dae:	39 88       	ldd	r3, Y+17	; 0x11
 db0:	48 88       	ldd	r4, Y+16	; 0x10
 db2:	5f 84       	ldd	r5, Y+15	; 0x0f
 db4:	6e 84       	ldd	r6, Y+14	; 0x0e
 db6:	7d 84       	ldd	r7, Y+13	; 0x0d
 db8:	8c 84       	ldd	r8, Y+12	; 0x0c
 dba:	9b 84       	ldd	r9, Y+11	; 0x0b
 dbc:	aa 84       	ldd	r10, Y+10	; 0x0a
 dbe:	b9 84       	ldd	r11, Y+9	; 0x09
 dc0:	c8 84       	ldd	r12, Y+8	; 0x08
 dc2:	df 80       	ldd	r13, Y+7	; 0x07
 dc4:	ee 80       	ldd	r14, Y+6	; 0x06
 dc6:	fd 80       	ldd	r15, Y+5	; 0x05
 dc8:	0c 81       	ldd	r16, Y+4	; 0x04
 dca:	1b 81       	ldd	r17, Y+3	; 0x03
 dcc:	aa 81       	ldd	r26, Y+2	; 0x02
 dce:	b9 81       	ldd	r27, Y+1	; 0x01
 dd0:	ce 0f       	add	r28, r30
 dd2:	d1 1d       	adc	r29, r1
 dd4:	0f b6       	in	r0, 0x3f	; 63
 dd6:	f8 94       	cli
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	0f be       	out	0x3f, r0	; 63
 ddc:	cd bf       	out	0x3d, r28	; 61
 dde:	ed 01       	movw	r28, r26
 de0:	08 95       	ret

00000de2 <_exit>:
 de2:	f8 94       	cli

00000de4 <__stop_program>:
 de4:	ff cf       	rjmp	.-2      	; 0xde4 <__stop_program>
