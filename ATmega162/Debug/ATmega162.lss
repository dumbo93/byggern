
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000630  000006c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  000006ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b78  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000523  00000000  00000000  00001366  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ca  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e5  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033c  00000000  00000000  000021e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e3       	ldi	r30, 0x30	; 48
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 30       	cpi	r26, 0x0A	; 10
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e0       	ldi	r26, 0x0A	; 10
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 31       	cpi	r26, 0x14	; 20
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  a6:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
#include "../memory_mapping.h"
#include <avr/io.h>

int ADC_init(void)
{
	set_bit(MCUCR, SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	clear_bit(DDRD, PD3);
  ba:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <OLED_init>:
volatile uint8_t *oled_cmd = (uint8_t *) OLED_COMMAND_ADDRESS;	// Start address for the OLED command
volatile uint8_t *oled_data = (uint8_t *) OLED_DATA_ADDRESS;	// Start address for the OLED data

void OLED_init( void )
{
	ADC_init();
  c2:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	OLED_write_command(DISPLAY_ON);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
  c6:	e0 91 08 01 	lds	r30, 0x0108
  ca:	f0 91 09 01 	lds	r31, 0x0109
  ce:	8e ea       	ldi	r24, 0xAE	; 174
  d0:	80 83       	st	Z, r24
  d2:	e0 91 08 01 	lds	r30, 0x0108
  d6:	f0 91 09 01 	lds	r31, 0x0109
  da:	81 ea       	ldi	r24, 0xA1	; 161
  dc:	80 83       	st	Z, r24
  de:	e0 91 08 01 	lds	r30, 0x0108
  e2:	f0 91 09 01 	lds	r31, 0x0109
  e6:	8a ed       	ldi	r24, 0xDA	; 218
  e8:	80 83       	st	Z, r24
  ea:	e0 91 08 01 	lds	r30, 0x0108
  ee:	f0 91 09 01 	lds	r31, 0x0109
  f2:	82 e1       	ldi	r24, 0x12	; 18
  f4:	80 83       	st	Z, r24
  f6:	e0 91 08 01 	lds	r30, 0x0108
  fa:	f0 91 09 01 	lds	r31, 0x0109
  fe:	88 ec       	ldi	r24, 0xC8	; 200
 100:	80 83       	st	Z, r24
 102:	e0 91 08 01 	lds	r30, 0x0108
 106:	f0 91 09 01 	lds	r31, 0x0109
 10a:	88 ea       	ldi	r24, 0xA8	; 168
 10c:	80 83       	st	Z, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108
 112:	f0 91 09 01 	lds	r31, 0x0109
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	80 83       	st	Z, r24
 11a:	e0 91 08 01 	lds	r30, 0x0108
 11e:	f0 91 09 01 	lds	r31, 0x0109
 122:	85 ed       	ldi	r24, 0xD5	; 213
 124:	80 83       	st	Z, r24
 126:	e0 91 08 01 	lds	r30, 0x0108
 12a:	f0 91 09 01 	lds	r31, 0x0109
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
 132:	e0 91 08 01 	lds	r30, 0x0108
 136:	f0 91 09 01 	lds	r31, 0x0109
 13a:	81 e8       	ldi	r24, 0x81	; 129
 13c:	80 83       	st	Z, r24
 13e:	e0 91 08 01 	lds	r30, 0x0108
 142:	f0 91 09 01 	lds	r31, 0x0109
 146:	80 e5       	ldi	r24, 0x50	; 80
 148:	80 83       	st	Z, r24
 14a:	e0 91 08 01 	lds	r30, 0x0108
 14e:	f0 91 09 01 	lds	r31, 0x0109
 152:	89 ed       	ldi	r24, 0xD9	; 217
 154:	80 83       	st	Z, r24
 156:	e0 91 08 01 	lds	r30, 0x0108
 15a:	f0 91 09 01 	lds	r31, 0x0109
 15e:	81 e2       	ldi	r24, 0x21	; 33
 160:	80 83       	st	Z, r24
 162:	e0 91 08 01 	lds	r30, 0x0108
 166:	f0 91 09 01 	lds	r31, 0x0109
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	80 83       	st	Z, r24
 16e:	e0 91 08 01 	lds	r30, 0x0108
 172:	f0 91 09 01 	lds	r31, 0x0109
 176:	10 82       	st	Z, r1
 178:	e0 91 08 01 	lds	r30, 0x0108
 17c:	f0 91 09 01 	lds	r31, 0x0109
 180:	8b ed       	ldi	r24, 0xDB	; 219
 182:	80 83       	st	Z, r24
 184:	e0 91 08 01 	lds	r30, 0x0108
 188:	f0 91 09 01 	lds	r31, 0x0109
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	80 83       	st	Z, r24
 190:	e0 91 08 01 	lds	r30, 0x0108
 194:	f0 91 09 01 	lds	r31, 0x0109
 198:	8d ea       	ldi	r24, 0xAD	; 173
 19a:	80 83       	st	Z, r24
 19c:	e0 91 08 01 	lds	r30, 0x0108
 1a0:	f0 91 09 01 	lds	r31, 0x0109
 1a4:	10 82       	st	Z, r1
 1a6:	e0 91 08 01 	lds	r30, 0x0108
 1aa:	f0 91 09 01 	lds	r31, 0x0109
 1ae:	84 ea       	ldi	r24, 0xA4	; 164
 1b0:	80 83       	st	Z, r24
 1b2:	e0 91 08 01 	lds	r30, 0x0108
 1b6:	f0 91 09 01 	lds	r31, 0x0109
 1ba:	86 ea       	ldi	r24, 0xA6	; 166
 1bc:	80 83       	st	Z, r24
 1be:	e0 91 08 01 	lds	r30, 0x0108
 1c2:	f0 91 09 01 	lds	r31, 0x0109
 1c6:	8f ea       	ldi	r24, 0xAF	; 175
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <OLED_write_data>:
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
 1cc:	e0 91 06 01 	lds	r30, 0x0106
 1d0:	f0 91 07 01 	lds	r31, 0x0107
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <OLED_goto_column>:
	OLED_write_command(DISPLAY_ON);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
 1d8:	e0 91 08 01 	lds	r30, 0x0108
 1dc:	f0 91 09 01 	lds	r31, 0x0109
 1e0:	91 e2       	ldi	r25, 0x21	; 33
 1e2:	90 83       	st	Z, r25
 1e4:	e0 91 08 01 	lds	r30, 0x0108
 1e8:	f0 91 09 01 	lds	r31, 0x0109
 1ec:	80 83       	st	Z, r24
 1ee:	e0 91 08 01 	lds	r30, 0x0108
 1f2:	f0 91 09 01 	lds	r31, 0x0109
 1f6:	8f e7       	ldi	r24, 0x7F	; 127
 1f8:	80 83       	st	Z, r24
 1fa:	08 95       	ret

000001fc <OLED_goto_line>:
 1fc:	e0 91 08 01 	lds	r30, 0x0108
 200:	f0 91 09 01 	lds	r31, 0x0109
 204:	92 e2       	ldi	r25, 0x22	; 34
 206:	90 83       	st	Z, r25
 208:	e0 91 08 01 	lds	r30, 0x0108
 20c:	f0 91 09 01 	lds	r31, 0x0109
 210:	80 83       	st	Z, r24
 212:	e0 91 08 01 	lds	r30, 0x0108
 216:	f0 91 09 01 	lds	r31, 0x0109
 21a:	87 e0       	ldi	r24, 0x07	; 7
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <OLED_pos>:
	OLED_write_command(line);
	OLED_write_command(0x7);
}

void OLED_pos(uint8_t row, uint8_t column)
{
 220:	cf 93       	push	r28
 222:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
 224:	0e 94 fe 00 	call	0x1fc	; 0x1fc <OLED_goto_line>
	OLED_goto_column(column);
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <OLED_goto_column>
}
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <OLED_home>:

void OLED_home( void )
{
	// go "home", upper left corner
	OLED_pos(0, 0);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 10 01 	call	0x220	; 0x220 <OLED_pos>
 23a:	08 95       	ret

0000023c <OLED_clear_line>:


void OLED_clear_line( uint8_t line )
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	0e 94 10 01 	call	0x220	; 0x220 <OLED_pos>
 242:	80 e8       	ldi	r24, 0x80	; 128
 244:	90 e0       	ldi	r25, 0x00	; 0
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
 246:	e0 91 06 01 	lds	r30, 0x0106
 24a:	f0 91 07 01 	lds	r31, 0x0107
 24e:	10 82       	st	Z, r1
 250:	01 97       	sbiw	r24, 0x01	; 1
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
	
	// go through all columns
	for (int col = 0; col < NUM_COLUMNS; col++){
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	c1 f7       	brne	.-16     	; 0x246 <OLED_clear_line+0xa>
		// write 8 bits to each column
		OLED_write_data(0x00);
	}
}
 256:	08 95       	ret

00000258 <OLED_reset>:

void OLED_reset( void )
{
 258:	cf 93       	push	r28
 25a:	c0 e0       	ldi	r28, 0x00	; 0
	// clear all lines
	for (int line = 0; line < NUM_LINES; line++){
		OLED_clear_line(line);
 25c:	8c 2f       	mov	r24, r28
 25e:	0e 94 1e 01 	call	0x23c	; 0x23c <OLED_clear_line>
 262:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_reset( void )
{
	// clear all lines
	for (int line = 0; line < NUM_LINES; line++){
 264:	c8 30       	cpi	r28, 0x08	; 8
 266:	d1 f7       	brne	.-12     	; 0x25c <OLED_reset+0x4>
		OLED_clear_line(line);
	}
	
	// go home
	OLED_home();
 268:	0e 94 19 01 	call	0x232	; 0x232 <OLED_home>
}
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 270:	5d 9b       	sbis	0x0b, 5	; 11
 272:	fe cf       	rjmp	.-4      	; 0x270 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 274:	8c b9       	out	0x0c, r24	; 12
 276:	08 95       	ret

00000278 <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A) & (1<<RXC0));  
 278:	8b b1       	in	r24, 0x0b	; 11
	
	//Get and return received data from buffer
	return UDR0;  
 27a:	8c b1       	in	r24, 0x0c	; 12
 27c:	08 95       	ret

0000027e <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 27e:	20 b5       	in	r18, 0x20	; 32
 280:	92 2b       	or	r25, r18
 282:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
 284:	99 b1       	in	r25, 0x09	; 9
 286:	89 2b       	or	r24, r25
 288:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 28a:	8a b1       	in	r24, 0x0a	; 10
 28c:	88 61       	ori	r24, 0x18	; 24
 28e:	8a b9       	out	0x0a, r24	; 10
	/* 
	Set frame format: 8data, 2stop bit
	 */
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 290:	80 b5       	in	r24, 0x20	; 32
 292:	8e 68       	ori	r24, 0x8E	; 142
 294:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 296:	6c e3       	ldi	r22, 0x3C	; 60
 298:	71 e0       	ldi	r23, 0x01	; 1
 29a:	88 e3       	ldi	r24, 0x38	; 56
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 81 01 	call	0x302	; 0x302 <fdevopen>
 2a2:	08 95       	ret

000002a4 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

int main( void ){
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	
	UART_Init( MYUBRR );
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 3f 01 	call	0x27e	; 0x27e <UART_Init>
	OLED_init();
 2b8:	0e 94 61 00 	call	0xc2	; 0xc2 <OLED_init>
	OLED_reset();
 2bc:	0e 94 2c 01 	call	0x258	; 0x258 <OLED_reset>
 2c0:	08 e0       	ldi	r16, 0x08	; 8
 2c2:	10 e0       	ldi	r17, 0x00	; 0

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

int main( void ){
 2c4:	68 94       	set
 2c6:	ee 24       	eor	r14, r14
 2c8:	e7 f8       	bld	r14, 7
 2ca:	f1 2c       	mov	r15, r1
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <main+0x40>
	OLED_init();
	OLED_reset();
	
	for(int line = 0; line < NUM_LINES; line++){
		for (int col = 0; col < NUM_COLUMNS; col++){
			OLED_write_data(0xFF);
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <OLED_write_data>
 2d4:	21 97       	sbiw	r28, 0x01	; 1
	UART_Init( MYUBRR );
	OLED_init();
	OLED_reset();
	
	for(int line = 0; line < NUM_LINES; line++){
		for (int col = 0; col < NUM_COLUMNS; col++){
 2d6:	20 97       	sbiw	r28, 0x00	; 0
 2d8:	d1 f7       	brne	.-12     	; 0x2ce <main+0x2a>
 2da:	01 50       	subi	r16, 0x01	; 1
 2dc:	11 09       	sbc	r17, r1
	
	UART_Init( MYUBRR );
	OLED_init();
	OLED_reset();
	
	for(int line = 0; line < NUM_LINES; line++){
 2de:	01 15       	cp	r16, r1
 2e0:	11 05       	cpc	r17, r1
 2e2:	19 f0       	breq	.+6      	; 0x2ea <main+0x46>

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

int main( void ){
 2e4:	ce 2d       	mov	r28, r14
 2e6:	df 2d       	mov	r29, r15
 2e8:	f2 cf       	rjmp	.-28     	; 0x2ce <main+0x2a>
	for(int line = 0; line < NUM_LINES; line++){
		for (int col = 0; col < NUM_COLUMNS; col++){
			OLED_write_data(0xFF);
		}
	}
	OLED_clear_line( 4 );
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	0e 94 1e 01 	call	0x23c	; 0x23c <OLED_clear_line>
	
	
	
	return 0;
}
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	08 95       	ret

00000302 <fdevopen>:
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	ec 01       	movw	r28, r24
 30c:	8b 01       	movw	r16, r22
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	31 f4       	brne	.+12     	; 0x31e <fdevopen+0x1c>
 312:	61 15       	cp	r22, r1
 314:	71 05       	cpc	r23, r1
 316:	19 f4       	brne	.+6      	; 0x31e <fdevopen+0x1c>
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	38 c0       	rjmp	.+112    	; 0x38e <fdevopen+0x8c>
 31e:	6e e0       	ldi	r22, 0x0E	; 14
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 cc 01 	call	0x398	; 0x398 <calloc>
 32a:	fc 01       	movw	r30, r24
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	a1 f3       	breq	.-24     	; 0x318 <fdevopen+0x16>
 330:	80 e8       	ldi	r24, 0x80	; 128
 332:	83 83       	std	Z+3, r24	; 0x03
 334:	01 15       	cp	r16, r1
 336:	11 05       	cpc	r17, r1
 338:	71 f0       	breq	.+28     	; 0x356 <fdevopen+0x54>
 33a:	13 87       	std	Z+11, r17	; 0x0b
 33c:	02 87       	std	Z+10, r16	; 0x0a
 33e:	81 e8       	ldi	r24, 0x81	; 129
 340:	83 83       	std	Z+3, r24	; 0x03
 342:	80 91 0a 01 	lds	r24, 0x010A
 346:	90 91 0b 01 	lds	r25, 0x010B
 34a:	89 2b       	or	r24, r25
 34c:	21 f4       	brne	.+8      	; 0x356 <fdevopen+0x54>
 34e:	f0 93 0b 01 	sts	0x010B, r31
 352:	e0 93 0a 01 	sts	0x010A, r30
 356:	20 97       	sbiw	r28, 0x00	; 0
 358:	c9 f0       	breq	.+50     	; 0x38c <fdevopen+0x8a>
 35a:	d1 87       	std	Z+9, r29	; 0x09
 35c:	c0 87       	std	Z+8, r28	; 0x08
 35e:	83 81       	ldd	r24, Z+3	; 0x03
 360:	82 60       	ori	r24, 0x02	; 2
 362:	83 83       	std	Z+3, r24	; 0x03
 364:	80 91 0c 01 	lds	r24, 0x010C
 368:	90 91 0d 01 	lds	r25, 0x010D
 36c:	89 2b       	or	r24, r25
 36e:	71 f4       	brne	.+28     	; 0x38c <fdevopen+0x8a>
 370:	f0 93 0d 01 	sts	0x010D, r31
 374:	e0 93 0c 01 	sts	0x010C, r30
 378:	80 91 0e 01 	lds	r24, 0x010E
 37c:	90 91 0f 01 	lds	r25, 0x010F
 380:	89 2b       	or	r24, r25
 382:	21 f4       	brne	.+8      	; 0x38c <fdevopen+0x8a>
 384:	f0 93 0f 01 	sts	0x010F, r31
 388:	e0 93 0e 01 	sts	0x010E, r30
 38c:	cf 01       	movw	r24, r30
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	08 95       	ret

00000398 <calloc>:
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	86 9f       	mul	r24, r22
 3a2:	80 01       	movw	r16, r0
 3a4:	87 9f       	mul	r24, r23
 3a6:	10 0d       	add	r17, r0
 3a8:	96 9f       	mul	r25, r22
 3aa:	10 0d       	add	r17, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	c8 01       	movw	r24, r16
 3b0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <malloc>
 3b4:	ec 01       	movw	r28, r24
 3b6:	00 97       	sbiw	r24, 0x00	; 0
 3b8:	29 f0       	breq	.+10     	; 0x3c4 <calloc+0x2c>
 3ba:	a8 01       	movw	r20, r16
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	0e 94 0f 03 	call	0x61e	; 0x61e <memset>
 3c4:	ce 01       	movw	r24, r28
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	08 95       	ret

000003d0 <malloc>:
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	91 05       	cpc	r25, r1
 3d8:	10 f4       	brcc	.+4      	; 0x3de <malloc+0xe>
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	e0 91 12 01 	lds	r30, 0x0112
 3e2:	f0 91 13 01 	lds	r31, 0x0113
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	a0 e0       	ldi	r26, 0x00	; 0
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	30 97       	sbiw	r30, 0x00	; 0
 3f0:	39 f1       	breq	.+78     	; 0x440 <malloc+0x70>
 3f2:	40 81       	ld	r20, Z
 3f4:	51 81       	ldd	r21, Z+1	; 0x01
 3f6:	48 17       	cp	r20, r24
 3f8:	59 07       	cpc	r21, r25
 3fa:	b8 f0       	brcs	.+46     	; 0x42a <malloc+0x5a>
 3fc:	48 17       	cp	r20, r24
 3fe:	59 07       	cpc	r21, r25
 400:	71 f4       	brne	.+28     	; 0x41e <malloc+0x4e>
 402:	82 81       	ldd	r24, Z+2	; 0x02
 404:	93 81       	ldd	r25, Z+3	; 0x03
 406:	10 97       	sbiw	r26, 0x00	; 0
 408:	29 f0       	breq	.+10     	; 0x414 <malloc+0x44>
 40a:	13 96       	adiw	r26, 0x03	; 3
 40c:	9c 93       	st	X, r25
 40e:	8e 93       	st	-X, r24
 410:	12 97       	sbiw	r26, 0x02	; 2
 412:	2c c0       	rjmp	.+88     	; 0x46c <malloc+0x9c>
 414:	90 93 13 01 	sts	0x0113, r25
 418:	80 93 12 01 	sts	0x0112, r24
 41c:	27 c0       	rjmp	.+78     	; 0x46c <malloc+0x9c>
 41e:	21 15       	cp	r18, r1
 420:	31 05       	cpc	r19, r1
 422:	31 f0       	breq	.+12     	; 0x430 <malloc+0x60>
 424:	42 17       	cp	r20, r18
 426:	53 07       	cpc	r21, r19
 428:	18 f0       	brcs	.+6      	; 0x430 <malloc+0x60>
 42a:	a9 01       	movw	r20, r18
 42c:	db 01       	movw	r26, r22
 42e:	01 c0       	rjmp	.+2      	; 0x432 <malloc+0x62>
 430:	ef 01       	movw	r28, r30
 432:	9a 01       	movw	r18, r20
 434:	bd 01       	movw	r22, r26
 436:	df 01       	movw	r26, r30
 438:	02 80       	ldd	r0, Z+2	; 0x02
 43a:	f3 81       	ldd	r31, Z+3	; 0x03
 43c:	e0 2d       	mov	r30, r0
 43e:	d7 cf       	rjmp	.-82     	; 0x3ee <malloc+0x1e>
 440:	21 15       	cp	r18, r1
 442:	31 05       	cpc	r19, r1
 444:	f9 f0       	breq	.+62     	; 0x484 <malloc+0xb4>
 446:	28 1b       	sub	r18, r24
 448:	39 0b       	sbc	r19, r25
 44a:	24 30       	cpi	r18, 0x04	; 4
 44c:	31 05       	cpc	r19, r1
 44e:	80 f4       	brcc	.+32     	; 0x470 <malloc+0xa0>
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	61 15       	cp	r22, r1
 456:	71 05       	cpc	r23, r1
 458:	21 f0       	breq	.+8      	; 0x462 <malloc+0x92>
 45a:	fb 01       	movw	r30, r22
 45c:	93 83       	std	Z+3, r25	; 0x03
 45e:	82 83       	std	Z+2, r24	; 0x02
 460:	04 c0       	rjmp	.+8      	; 0x46a <malloc+0x9a>
 462:	90 93 13 01 	sts	0x0113, r25
 466:	80 93 12 01 	sts	0x0112, r24
 46a:	fe 01       	movw	r30, r28
 46c:	32 96       	adiw	r30, 0x02	; 2
 46e:	44 c0       	rjmp	.+136    	; 0x4f8 <malloc+0x128>
 470:	fe 01       	movw	r30, r28
 472:	e2 0f       	add	r30, r18
 474:	f3 1f       	adc	r31, r19
 476:	81 93       	st	Z+, r24
 478:	91 93       	st	Z+, r25
 47a:	22 50       	subi	r18, 0x02	; 2
 47c:	31 09       	sbc	r19, r1
 47e:	39 83       	std	Y+1, r19	; 0x01
 480:	28 83       	st	Y, r18
 482:	3a c0       	rjmp	.+116    	; 0x4f8 <malloc+0x128>
 484:	20 91 10 01 	lds	r18, 0x0110
 488:	30 91 11 01 	lds	r19, 0x0111
 48c:	23 2b       	or	r18, r19
 48e:	41 f4       	brne	.+16     	; 0x4a0 <malloc+0xd0>
 490:	20 91 02 01 	lds	r18, 0x0102
 494:	30 91 03 01 	lds	r19, 0x0103
 498:	30 93 11 01 	sts	0x0111, r19
 49c:	20 93 10 01 	sts	0x0110, r18
 4a0:	20 91 00 01 	lds	r18, 0x0100
 4a4:	30 91 01 01 	lds	r19, 0x0101
 4a8:	21 15       	cp	r18, r1
 4aa:	31 05       	cpc	r19, r1
 4ac:	41 f4       	brne	.+16     	; 0x4be <malloc+0xee>
 4ae:	2d b7       	in	r18, 0x3d	; 61
 4b0:	3e b7       	in	r19, 0x3e	; 62
 4b2:	40 91 04 01 	lds	r20, 0x0104
 4b6:	50 91 05 01 	lds	r21, 0x0105
 4ba:	24 1b       	sub	r18, r20
 4bc:	35 0b       	sbc	r19, r21
 4be:	e0 91 10 01 	lds	r30, 0x0110
 4c2:	f0 91 11 01 	lds	r31, 0x0111
 4c6:	e2 17       	cp	r30, r18
 4c8:	f3 07       	cpc	r31, r19
 4ca:	a0 f4       	brcc	.+40     	; 0x4f4 <malloc+0x124>
 4cc:	2e 1b       	sub	r18, r30
 4ce:	3f 0b       	sbc	r19, r31
 4d0:	28 17       	cp	r18, r24
 4d2:	39 07       	cpc	r19, r25
 4d4:	78 f0       	brcs	.+30     	; 0x4f4 <malloc+0x124>
 4d6:	ac 01       	movw	r20, r24
 4d8:	4e 5f       	subi	r20, 0xFE	; 254
 4da:	5f 4f       	sbci	r21, 0xFF	; 255
 4dc:	24 17       	cp	r18, r20
 4de:	35 07       	cpc	r19, r21
 4e0:	48 f0       	brcs	.+18     	; 0x4f4 <malloc+0x124>
 4e2:	4e 0f       	add	r20, r30
 4e4:	5f 1f       	adc	r21, r31
 4e6:	50 93 11 01 	sts	0x0111, r21
 4ea:	40 93 10 01 	sts	0x0110, r20
 4ee:	81 93       	st	Z+, r24
 4f0:	91 93       	st	Z+, r25
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <malloc+0x128>
 4f4:	e0 e0       	ldi	r30, 0x00	; 0
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	cf 01       	movw	r24, r30
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <free>:
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	00 97       	sbiw	r24, 0x00	; 0
 506:	09 f4       	brne	.+2      	; 0x50a <free+0xa>
 508:	87 c0       	rjmp	.+270    	; 0x618 <free+0x118>
 50a:	fc 01       	movw	r30, r24
 50c:	32 97       	sbiw	r30, 0x02	; 2
 50e:	13 82       	std	Z+3, r1	; 0x03
 510:	12 82       	std	Z+2, r1	; 0x02
 512:	c0 91 12 01 	lds	r28, 0x0112
 516:	d0 91 13 01 	lds	r29, 0x0113
 51a:	20 97       	sbiw	r28, 0x00	; 0
 51c:	81 f4       	brne	.+32     	; 0x53e <free+0x3e>
 51e:	20 81       	ld	r18, Z
 520:	31 81       	ldd	r19, Z+1	; 0x01
 522:	28 0f       	add	r18, r24
 524:	39 1f       	adc	r19, r25
 526:	80 91 10 01 	lds	r24, 0x0110
 52a:	90 91 11 01 	lds	r25, 0x0111
 52e:	82 17       	cp	r24, r18
 530:	93 07       	cpc	r25, r19
 532:	79 f5       	brne	.+94     	; 0x592 <free+0x92>
 534:	f0 93 11 01 	sts	0x0111, r31
 538:	e0 93 10 01 	sts	0x0110, r30
 53c:	6d c0       	rjmp	.+218    	; 0x618 <free+0x118>
 53e:	de 01       	movw	r26, r28
 540:	20 e0       	ldi	r18, 0x00	; 0
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	ae 17       	cp	r26, r30
 546:	bf 07       	cpc	r27, r31
 548:	50 f4       	brcc	.+20     	; 0x55e <free+0x5e>
 54a:	12 96       	adiw	r26, 0x02	; 2
 54c:	4d 91       	ld	r20, X+
 54e:	5c 91       	ld	r21, X
 550:	13 97       	sbiw	r26, 0x03	; 3
 552:	9d 01       	movw	r18, r26
 554:	41 15       	cp	r20, r1
 556:	51 05       	cpc	r21, r1
 558:	09 f1       	breq	.+66     	; 0x59c <free+0x9c>
 55a:	da 01       	movw	r26, r20
 55c:	f3 cf       	rjmp	.-26     	; 0x544 <free+0x44>
 55e:	b3 83       	std	Z+3, r27	; 0x03
 560:	a2 83       	std	Z+2, r26	; 0x02
 562:	40 81       	ld	r20, Z
 564:	51 81       	ldd	r21, Z+1	; 0x01
 566:	84 0f       	add	r24, r20
 568:	95 1f       	adc	r25, r21
 56a:	8a 17       	cp	r24, r26
 56c:	9b 07       	cpc	r25, r27
 56e:	71 f4       	brne	.+28     	; 0x58c <free+0x8c>
 570:	8d 91       	ld	r24, X+
 572:	9c 91       	ld	r25, X
 574:	11 97       	sbiw	r26, 0x01	; 1
 576:	84 0f       	add	r24, r20
 578:	95 1f       	adc	r25, r21
 57a:	02 96       	adiw	r24, 0x02	; 2
 57c:	91 83       	std	Z+1, r25	; 0x01
 57e:	80 83       	st	Z, r24
 580:	12 96       	adiw	r26, 0x02	; 2
 582:	8d 91       	ld	r24, X+
 584:	9c 91       	ld	r25, X
 586:	13 97       	sbiw	r26, 0x03	; 3
 588:	93 83       	std	Z+3, r25	; 0x03
 58a:	82 83       	std	Z+2, r24	; 0x02
 58c:	21 15       	cp	r18, r1
 58e:	31 05       	cpc	r19, r1
 590:	29 f4       	brne	.+10     	; 0x59c <free+0x9c>
 592:	f0 93 13 01 	sts	0x0113, r31
 596:	e0 93 12 01 	sts	0x0112, r30
 59a:	3e c0       	rjmp	.+124    	; 0x618 <free+0x118>
 59c:	d9 01       	movw	r26, r18
 59e:	13 96       	adiw	r26, 0x03	; 3
 5a0:	fc 93       	st	X, r31
 5a2:	ee 93       	st	-X, r30
 5a4:	12 97       	sbiw	r26, 0x02	; 2
 5a6:	4d 91       	ld	r20, X+
 5a8:	5d 91       	ld	r21, X+
 5aa:	a4 0f       	add	r26, r20
 5ac:	b5 1f       	adc	r27, r21
 5ae:	ea 17       	cp	r30, r26
 5b0:	fb 07       	cpc	r31, r27
 5b2:	79 f4       	brne	.+30     	; 0x5d2 <free+0xd2>
 5b4:	80 81       	ld	r24, Z
 5b6:	91 81       	ldd	r25, Z+1	; 0x01
 5b8:	84 0f       	add	r24, r20
 5ba:	95 1f       	adc	r25, r21
 5bc:	02 96       	adiw	r24, 0x02	; 2
 5be:	d9 01       	movw	r26, r18
 5c0:	11 96       	adiw	r26, 0x01	; 1
 5c2:	9c 93       	st	X, r25
 5c4:	8e 93       	st	-X, r24
 5c6:	82 81       	ldd	r24, Z+2	; 0x02
 5c8:	93 81       	ldd	r25, Z+3	; 0x03
 5ca:	13 96       	adiw	r26, 0x03	; 3
 5cc:	9c 93       	st	X, r25
 5ce:	8e 93       	st	-X, r24
 5d0:	12 97       	sbiw	r26, 0x02	; 2
 5d2:	e0 e0       	ldi	r30, 0x00	; 0
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	9b 81       	ldd	r25, Y+3	; 0x03
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	19 f0       	breq	.+6      	; 0x5e4 <free+0xe4>
 5de:	fe 01       	movw	r30, r28
 5e0:	ec 01       	movw	r28, r24
 5e2:	f9 cf       	rjmp	.-14     	; 0x5d6 <free+0xd6>
 5e4:	ce 01       	movw	r24, r28
 5e6:	02 96       	adiw	r24, 0x02	; 2
 5e8:	28 81       	ld	r18, Y
 5ea:	39 81       	ldd	r19, Y+1	; 0x01
 5ec:	82 0f       	add	r24, r18
 5ee:	93 1f       	adc	r25, r19
 5f0:	20 91 10 01 	lds	r18, 0x0110
 5f4:	30 91 11 01 	lds	r19, 0x0111
 5f8:	28 17       	cp	r18, r24
 5fa:	39 07       	cpc	r19, r25
 5fc:	69 f4       	brne	.+26     	; 0x618 <free+0x118>
 5fe:	30 97       	sbiw	r30, 0x00	; 0
 600:	29 f4       	brne	.+10     	; 0x60c <free+0x10c>
 602:	10 92 13 01 	sts	0x0113, r1
 606:	10 92 12 01 	sts	0x0112, r1
 60a:	02 c0       	rjmp	.+4      	; 0x610 <free+0x110>
 60c:	13 82       	std	Z+3, r1	; 0x03
 60e:	12 82       	std	Z+2, r1	; 0x02
 610:	d0 93 11 01 	sts	0x0111, r29
 614:	c0 93 10 01 	sts	0x0110, r28
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <memset>:
 61e:	dc 01       	movw	r26, r24
 620:	01 c0       	rjmp	.+2      	; 0x624 <memset+0x6>
 622:	6d 93       	st	X+, r22
 624:	41 50       	subi	r20, 0x01	; 1
 626:	50 40       	sbci	r21, 0x00	; 0
 628:	e0 f7       	brcc	.-8      	; 0x622 <memset+0x4>
 62a:	08 95       	ret

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
