
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00000e66  00000efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080021c  0080021c  00001016  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a6c  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e5e  00000000  00000000  00002cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e0e  00000000  00000000  00003b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e8  00000000  00000000  00004934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058d  00000000  00000000  00004d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a8a  00000000  00000000  000052a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00005d33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e6       	ldi	r30, 0x66	; 102
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 31       	cpi	r26, 0x1C	; 28
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ac e1       	ldi	r26, 0x1C	; 28
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ab 32       	cpi	r26, 0x2B	; 43
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 89 02 	call	0x512	; 0x512 <main>
  a6:	0c 94 31 07 	jmp	0xe62	; 0xe62 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:


int CAN_init()
{
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  ae:	40 e6       	ldi	r20, 0x60	; 96
  b0:	60 e6       	ldi	r22, 0x60	; 96
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  b8:	40 e6       	ldi	r20, 0x60	; 96
  ba:	60 e6       	ldi	r22, 0x60	; 96
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	64 e0       	ldi	r22, 0x04	; 4
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  cc:	44 e0       	ldi	r20, 0x04	; 4
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	60 ee       	ldi	r22, 0xE0	; 224
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
  e6:	80 7e       	andi	r24, 0xE0	; 224
  e8:	39 f0       	breq	.+14     	; 0xf8 <CAN_init+0x4a>
		printf("MCP2515 is NOT in normal mode after CAN init\n");
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 0b 03 	call	0x616	; 0x616 <puts>
		return 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret
	}
	
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	8b e2       	ldi	r24, 0x2B	; 43
  fc:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (1 << ISC01) | (0 << ISC00);
 100:	85 b7       	in	r24, 0x35	; 53
 102:	82 60       	ori	r24, 0x02	; 2
 104:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
 106:	8b b7       	in	r24, 0x3b	; 59
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	8b bf       	out	0x3b, r24	; 59
	// Falling edge of INT2 generates interrupt request
	EICRA |= (1 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
}
 110:	08 95       	ret

00000112 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
 120:	fc 01       	movw	r30, r24
 122:	60 81       	ld	r22, Z
 124:	71 81       	ldd	r23, Z+1	; 0x01
 126:	76 95       	lsr	r23
 128:	67 95       	ror	r22
 12a:	76 95       	lsr	r23
 12c:	67 95       	ror	r22
 12e:	76 95       	lsr	r23
 130:	67 95       	ror	r22
 132:	81 e3       	ldi	r24, 0x31	; 49
 134:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
 138:	f7 01       	movw	r30, r14
 13a:	60 81       	ld	r22, Z
 13c:	62 95       	swap	r22
 13e:	66 0f       	add	r22, r22
 140:	60 7e       	andi	r22, 0xE0	; 224
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	84 e3       	ldi	r24, 0x34	; 52
 154:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
 158:	f7 01       	movw	r30, r14
 15a:	62 81       	ldd	r22, Z+2	; 0x02
 15c:	85 e3       	ldi	r24, 0x35	; 53
 15e:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
 162:	f7 01       	movw	r30, r14
 164:	82 81       	ldd	r24, Z+2	; 0x02
 166:	88 23       	and	r24, r24
 168:	99 f0       	breq	.+38     	; 0x190 <CAN_msg_send+0x7e>
 16a:	87 01       	movw	r16, r14
 16c:	0d 5f       	subi	r16, 0xFD	; 253
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
 174:	f8 01       	movw	r30, r16
 176:	61 91       	ld	r22, Z+
 178:	8f 01       	movw	r16, r30
 17a:	8c 2f       	mov	r24, r28
 17c:	8a 5c       	subi	r24, 0xCA	; 202
 17e:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	f7 01       	movw	r30, r14
 186:	22 81       	ldd	r18, Z+2	; 0x02
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	c2 17       	cp	r28, r18
 18c:	d3 07       	cpc	r29, r19
 18e:	94 f3       	brlt	.-28     	; 0x174 <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
 190:	81 e8       	ldi	r24, 0x81	; 129
 192:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP_request_to_send>
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>

	if (interrupt & MCP_RX0IF){
 1cc:	80 ff       	sbrs	r24, 0
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__vector_1+0x3e>
		interrupt_flag = RX0;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 1c 02 	sts	0x021C, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	8c e2       	ldi	r24, 0x2C	; 44
 1dc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
 1e2:	81 ff       	sbrs	r24, 1
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <__vector_1+0x52>
		interrupt_flag = RX1;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 1c 02 	sts	0x021C, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	}
	
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
 220:	80 ec       	ldi	r24, 0xC0	; 192
 222:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	82 e4       	ldi	r24, 0x42	; 66
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <MCP_reset+0x10>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <MCP_reset+0x16>
	_delay_us(200);
	SPI_set_ss(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
 236:	08 95       	ret

00000238 <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	//printf("hello from MCP read 1\n");
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	//printf("hello from MCP read 2\n");
	// Send 8-bit address
	SPI_transmit_receive(address);
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	//printf("hello from MCP read 3\n");
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
 256:	c8 2f       	mov	r28, r24
	//printf("hello from MCP read 4\n");
	SPI_set_ss(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	return received;
}
 260:	8c 2f       	mov	r24, r28
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <MCP_init>:

uint8_t MCP_init( void )
{
	//SPI_init();
	//printf("hello from MCP init 1\n");
	MCP_reset();
 266:	0e 94 0c 01 	call	0x218	; 0x218 <MCP_reset>
	//printf("hello from MCP init 2\n");
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 26a:	8e e0       	ldi	r24, 0x0E	; 14
 26c:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>
	//printf("hello from MCP init 3\n");
	
	if ((value & MODE_MASK) != MODE_CONFIG){
 270:	80 7e       	andi	r24, 0xE0	; 224
 272:	80 38       	cpi	r24, 0x80	; 128
 274:	31 f0       	breq	.+12     	; 0x282 <MCP_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset\n");
 276:	89 e7       	ldi	r24, 0x79	; 121
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 0b 03 	call	0x616	; 0x616 <puts>
		return 1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
	}
	//printf("hello from MCP init 4\n");
	return 0;
 282:	80 e0       	ldi	r24, 0x00	; 0
}
 284:	08 95       	ret

00000286 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	d8 2f       	mov	r29, r24
 28c:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(address);
 29c:	8d 2f       	mov	r24, r29
 29e:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(data);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
 2b6:	cf 93       	push	r28
 2b8:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_set_ss(1); //(?)
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
}
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	18 2f       	mov	r17, r24
 2dc:	d6 2f       	mov	r29, r22
 2de:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 2f4:	8d 2f       	mov	r24, r29
 2f6:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(data);
 2fa:	8c 2f       	mov	r24, r28
 2fc:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	
	SPI_set_ss(1);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
 310:	87 b3       	in	r24, 0x17	; 23
 312:	80 6b       	ori	r24, 0xB0	; 176
 314:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
 316:	81 e1       	ldi	r24, 0x11	; 17
 318:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
 31a:	6e 9a       	sbi	0x0d, 6	; 13
 31c:	08 95       	ret

0000031e <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 31e:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
 320:	77 9b       	sbis	0x0e, 7	; 14
 322:	fe cf       	rjmp	.-4      	; 0x320 <SPI_transmit_receive+0x2>
 324:	82 e4       	ldi	r24, 0x42	; 66
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <SPI_transmit_receive+0x8>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <SPI_transmit_receive+0xe>
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
 32c:	8f b1       	in	r24, 0x0f	; 15
	
}
 32e:	08 95       	ret

00000330 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	91 05       	cpc	r25, r1
 334:	11 f4       	brne	.+4      	; 0x33a <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
 336:	c4 9a       	sbi	0x18, 4	; 24
 338:	08 95       	ret
	}
	else if (val == 0){
 33a:	89 2b       	or	r24, r25
 33c:	09 f4       	brne	.+2      	; 0x340 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
 33e:	c4 98       	cbi	0x18, 4	; 24
 340:	08 95       	ret

00000342 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 342:	5d 9b       	sbis	0x0b, 5	; 11
 344:	fe cf       	rjmp	.-4      	; 0x342 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 346:	8c b9       	out	0x0c, r24	; 12
 348:	08 95       	ret

0000034a <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
 34a:	5f 9b       	sbis	0x0b, 7	; 11
 34c:	fe cf       	rjmp	.-4      	; 0x34a <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
 34e:	8c b1       	in	r24, 0x0c	; 12
 350:	08 95       	ret

00000352 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 352:	20 b5       	in	r18, 0x20	; 32
 354:	92 2b       	or	r25, r18
 356:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
 358:	99 b1       	in	r25, 0x09	; 9
 35a:	89 2b       	or	r24, r25
 35c:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 35e:	8a b1       	in	r24, 0x0a	; 10
 360:	88 61       	ori	r24, 0x18	; 24
 362:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 364:	80 b5       	in	r24, 0x20	; 32
 366:	8e 68       	ori	r24, 0x8E	; 142
 368:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 36a:	65 ea       	ldi	r22, 0xA5	; 165
 36c:	71 e0       	ldi	r23, 0x01	; 1
 36e:	81 ea       	ldi	r24, 0xA1	; 161
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 ac 02 	call	0x558	; 0x558 <fdevopen>
 376:	08 95       	ret

00000378 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	set_bit(MCUCR, SRE);
 378:	85 b7       	in	r24, 0x35	; 53
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 37e:	80 b7       	in	r24, 0x30	; 48
 380:	80 62       	ori	r24, 0x20	; 32
 382:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	clear_bit(DDRD, PD3);
 384:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	08 95       	ret

0000038c <ADC_read>:

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
 38c:	84 30       	cpi	r24, 0x04	; 4
 38e:	70 f4       	brcc	.+28     	; 0x3ac <ADC_read+0x20>
	*ext_adc = 0x04 | channel; // bitwise OR
 390:	84 60       	ori	r24, 0x04	; 4
 392:	80 93 00 14 	sts	0x1400, r24
	
	// wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
 396:	83 99       	sbic	0x10, 3	; 16
 398:	fe cf       	rjmp	.-4      	; 0x396 <ADC_read+0xa>
 39a:	85 ef       	ldi	r24, 0xF5	; 245
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <ADC_read+0x12>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <ADC_read+0x18>
 3a4:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
 3a6:	80 91 00 14 	lds	r24, 0x1400
 3aa:	08 95       	ret

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
 3ac:	80 e0       	ldi	r24, 0x00	; 0
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
	
}
 3ae:	08 95       	ret

000003b0 <SEND2CAN_send_joy_pos_x>:
#include "touch_panel.h"
#include "../../../communication_drivers/can.h"
#include <stdlib.h>

void SEND2CAN_send_joy_pos_x()
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	2b 97       	sbiw	r28, 0x0b	; 11
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
	JOY_position_t pos = JOY_read_adc();
 3c4:	0e 94 49 02 	call	0x492	; 0x492 <JOY_read_adc>
	can_msg msg;
	msg.id = ATmega162_ID;
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	3a 83       	std	Y+2, r19	; 0x02
 3ce:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_JOY_POS_X;
 3d0:	1c 82       	std	Y+4, r1	; 0x04
	msg.data[1] = pos.x;
 3d2:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	0e 94 89 00 	call	0x112	; 0x112 <CAN_msg_send>
	printf("\n\nSent joystick position (x): (%d) \n",msg.data[1]);
 3e0:	8d 81       	ldd	r24, Y+5	; 0x05
 3e2:	1f 92       	push	r1
 3e4:	8f 93       	push	r24
 3e6:	8a ea       	ldi	r24, 0xAA	; 170
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	9f 93       	push	r25
 3ec:	8f 93       	push	r24
 3ee:	0e 94 f7 02 	call	0x5ee	; 0x5ee <printf>
	printf("Sent id: %d \n", msg.id);
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	8f 93       	push	r24
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	8f 93       	push	r24
 3fa:	8f ec       	ldi	r24, 0xCF	; 207
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	9f 93       	push	r25
 400:	8f 93       	push	r24
 402:	0e 94 f7 02 	call	0x5ee	; 0x5ee <printf>
	printf("Sent length: %d  \n", msg.length);
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	1f 92       	push	r1
 40a:	8f 93       	push	r24
 40c:	8d ed       	ldi	r24, 0xDD	; 221
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	9f 93       	push	r25
 412:	8f 93       	push	r24
 414:	0e 94 f7 02 	call	0x5ee	; 0x5ee <printf>
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
}
 422:	2b 96       	adiw	r28, 0x0b	; 11
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <SEND2CAN_send_slider_pos>:

void SEND2CAN_send_slider_pos()
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	2b 97       	sbiw	r28, 0x0b	; 11
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
	TOUCH_slider_pos_t pos = TOUCH_get_slider_position();
 448:	0e 94 86 02 	call	0x50c	; 0x50c <TOUCH_get_slider_position>
	
	can_msg msg;
	msg.id = ATmega162_ID;
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	3a 83       	std	Y+2, r19	; 0x02
 452:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_SLIDER_POS_R;
 454:	93 e0       	ldi	r25, 0x03	; 3
 456:	9c 83       	std	Y+4, r25	; 0x04
	msg.data[1] = pos.right_slider;
 458:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	0e 94 89 00 	call	0x112	; 0x112 <CAN_msg_send>
	printf("\n\nSent slider position: (%d) \n",msg.data[1]);
 466:	8d 81       	ldd	r24, Y+5	; 0x05
 468:	1f 92       	push	r1
 46a:	8f 93       	push	r24
 46c:	80 ef       	ldi	r24, 0xF0	; 240
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	9f 93       	push	r25
 472:	8f 93       	push	r24
 474:	0e 94 f7 02 	call	0x5ee	; 0x5ee <printf>
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	2b 96       	adiw	r28, 0x0b	; 11
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <JOY_read_adc>:

int JOY_button(){
	return !(test_bit(PINB, PINB0));
}

JOY_position_t JOY_read_adc( void ){
 492:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 49a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	8c ec       	ldi	r24, 0xCC	; 204
 49e:	94 e0       	ldi	r25, 0x04	; 4
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <JOY_read_adc+0xe>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <JOY_read_adc+0x14>
 4a6:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 4ae:	28 2f       	mov	r18, r24
	
	return pos;
 4b0:	6c 2f       	mov	r22, r28
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	82 2f       	mov	r24, r18
 4b6:	90 e0       	ldi	r25, 0x00	; 0
}
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <JOY_calibrate>:
	set_bit(PORTB, PB0);
	
}

void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
 4bc:	0e 94 49 02 	call	0x492	; 0x492 <JOY_read_adc>
 4c0:	60 93 1d 02 	sts	0x021D, r22
 4c4:	70 93 1e 02 	sts	0x021E, r23
 4c8:	80 93 1f 02 	sts	0x021F, r24
 4cc:	90 93 20 02 	sts	0x0220, r25
 4d0:	08 95       	ret

000004d2 <JOY_init>:

JOY_position_t neutral_pos; 


void JOY_init( void ){
	JOY_calibrate();
 4d2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <JOY_calibrate>
	
	// Initialize PORT B, pin 0 (joystick button) as input
	clear_bit(DDRB, PINB0);
 4d6:	b8 98       	cbi	0x17, 0	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB0);
 4d8:	c0 9a       	sbi	0x18, 0	; 24
 4da:	08 95       	ret

000004dc <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 0, 1 and 2 as input
	clear_bit(DDRB, PINB1);
 4dc:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
 4de:	ba 98       	cbi	0x17, 2	; 23
 4e0:	08 95       	ret

000004e2 <TOUCH_read_adc>:
		return 0;
	}
	return 0;
}

TOUCH_slider_pos_t TOUCH_read_adc( void ){
 4e2:	cf 93       	push	r28
	TOUCH_slider_pos_t pos;
	pos.left_slider = ADC_read(LEFT_SLIDER_CHANNEL);
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 4ea:	c8 2f       	mov	r28, r24
 4ec:	8c ec       	ldi	r24, 0xCC	; 204
 4ee:	94 e0       	ldi	r25, 0x04	; 4
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <TOUCH_read_adc+0xe>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <TOUCH_read_adc+0x14>
 4f6:	00 00       	nop
	_delay_ms(1);
	pos.right_slider = ADC_read(RIGHT_SLIDER_CHANNEL);
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 4fe:	28 2f       	mov	r18, r24
	
	return pos;
 500:	6c 2f       	mov	r22, r28
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	82 2f       	mov	r24, r18
 506:	90 e0       	ldi	r25, 0x00	; 0
}
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <TOUCH_get_slider_position>:

TOUCH_slider_pos_t TOUCH_get_slider_position(){
	TOUCH_slider_pos_t current_pos = TOUCH_read_adc();
 50c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TOUCH_read_adc>
	return current_pos;
 510:	08 95       	ret

00000512 <main>:
#include <util/delay.h>
//#include <stdio.h>
#include <avr/interrupt.h>

int main( void ){
	cli();
 512:	f8 94       	cli
	// Initializations 
	UART_Init( MYUBRR );
 514:	8f e1       	ldi	r24, 0x1F	; 31
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 a9 01 	call	0x352	; 0x352 <UART_Init>
	ADC_init();
 51c:	0e 94 bc 01 	call	0x378	; 0x378 <ADC_init>
	
	JOY_init();
 520:	0e 94 69 02 	call	0x4d2	; 0x4d2 <JOY_init>
	TOUCH_init();
 524:	0e 94 6e 02 	call	0x4dc	; 0x4dc <TOUCH_init>
	//OLED_init();
	//MENU_init();
	
	SPI_init();
 528:	0e 94 88 01 	call	0x310	; 0x310 <SPI_init>
	MCP_init();
 52c:	0e 94 33 01 	call	0x266	; 0x266 <MCP_init>
	CAN_init();
 530:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	printf("\n\n\nInit done\n");
 534:	8f e0       	ldi	r24, 0x0F	; 15
 536:	92 e0       	ldi	r25, 0x02	; 2
 538:	0e 94 0b 03 	call	0x616	; 0x616 <puts>
	sei();
 53c:	78 94       	sei
		//printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
		//printf("\n\nSent message: %s \n", send.data);
		//printf("Sent id: %d \n", send.id);
		//printf("Sent length: %d \n", send.length);
		
		SEND2CAN_send_joy_pos_x();
 53e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <SEND2CAN_send_joy_pos_x>
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 ef       	ldi	r25, 0xF0	; 240
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <main+0x34>
		_delay_ms(50);
		SEND2CAN_send_slider_pos();
 54a:	0e 94 1a 02 	call	0x434	; 0x434 <SEND2CAN_send_slider_pos>
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	90 ef       	ldi	r25, 0xF0	; 240
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <main+0x40>
 556:	f3 cf       	rjmp	.-26     	; 0x53e <main+0x2c>

00000558 <fdevopen>:
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	ec 01       	movw	r28, r24
 562:	8b 01       	movw	r16, r22
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	31 f4       	brne	.+12     	; 0x574 <fdevopen+0x1c>
 568:	61 15       	cp	r22, r1
 56a:	71 05       	cpc	r23, r1
 56c:	19 f4       	brne	.+6      	; 0x574 <fdevopen+0x1c>
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	38 c0       	rjmp	.+112    	; 0x5e4 <fdevopen+0x8c>
 574:	6e e0       	ldi	r22, 0x0E	; 14
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 0a 05 	call	0xa14	; 0xa14 <calloc>
 580:	fc 01       	movw	r30, r24
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	a1 f3       	breq	.-24     	; 0x56e <fdevopen+0x16>
 586:	80 e8       	ldi	r24, 0x80	; 128
 588:	83 83       	std	Z+3, r24	; 0x03
 58a:	01 15       	cp	r16, r1
 58c:	11 05       	cpc	r17, r1
 58e:	71 f0       	breq	.+28     	; 0x5ac <fdevopen+0x54>
 590:	13 87       	std	Z+11, r17	; 0x0b
 592:	02 87       	std	Z+10, r16	; 0x0a
 594:	81 e8       	ldi	r24, 0x81	; 129
 596:	83 83       	std	Z+3, r24	; 0x03
 598:	80 91 21 02 	lds	r24, 0x0221
 59c:	90 91 22 02 	lds	r25, 0x0222
 5a0:	89 2b       	or	r24, r25
 5a2:	21 f4       	brne	.+8      	; 0x5ac <fdevopen+0x54>
 5a4:	f0 93 22 02 	sts	0x0222, r31
 5a8:	e0 93 21 02 	sts	0x0221, r30
 5ac:	20 97       	sbiw	r28, 0x00	; 0
 5ae:	c9 f0       	breq	.+50     	; 0x5e2 <fdevopen+0x8a>
 5b0:	d1 87       	std	Z+9, r29	; 0x09
 5b2:	c0 87       	std	Z+8, r28	; 0x08
 5b4:	83 81       	ldd	r24, Z+3	; 0x03
 5b6:	82 60       	ori	r24, 0x02	; 2
 5b8:	83 83       	std	Z+3, r24	; 0x03
 5ba:	80 91 23 02 	lds	r24, 0x0223
 5be:	90 91 24 02 	lds	r25, 0x0224
 5c2:	89 2b       	or	r24, r25
 5c4:	71 f4       	brne	.+28     	; 0x5e2 <fdevopen+0x8a>
 5c6:	f0 93 24 02 	sts	0x0224, r31
 5ca:	e0 93 23 02 	sts	0x0223, r30
 5ce:	80 91 25 02 	lds	r24, 0x0225
 5d2:	90 91 26 02 	lds	r25, 0x0226
 5d6:	89 2b       	or	r24, r25
 5d8:	21 f4       	brne	.+8      	; 0x5e2 <fdevopen+0x8a>
 5da:	f0 93 26 02 	sts	0x0226, r31
 5de:	e0 93 25 02 	sts	0x0225, r30
 5e2:	cf 01       	movw	r24, r30
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <printf>:
 5ee:	a0 e0       	ldi	r26, 0x00	; 0
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	ed ef       	ldi	r30, 0xFD	; 253
 5f4:	f2 e0       	ldi	r31, 0x02	; 2
 5f6:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__prologue_saves__+0x20>
 5fa:	fe 01       	movw	r30, r28
 5fc:	35 96       	adiw	r30, 0x05	; 5
 5fe:	61 91       	ld	r22, Z+
 600:	71 91       	ld	r23, Z+
 602:	af 01       	movw	r20, r30
 604:	80 91 23 02 	lds	r24, 0x0223
 608:	90 91 24 02 	lds	r25, 0x0224
 60c:	0e 94 38 03 	call	0x670	; 0x670 <vfprintf>
 610:	e2 e0       	ldi	r30, 0x02	; 2
 612:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__epilogue_restores__+0x20>

00000616 <puts>:
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	e0 91 23 02 	lds	r30, 0x0223
 622:	f0 91 24 02 	lds	r31, 0x0224
 626:	23 81       	ldd	r18, Z+3	; 0x03
 628:	21 ff       	sbrs	r18, 1
 62a:	1b c0       	rjmp	.+54     	; 0x662 <puts+0x4c>
 62c:	ec 01       	movw	r28, r24
 62e:	00 e0       	ldi	r16, 0x00	; 0
 630:	10 e0       	ldi	r17, 0x00	; 0
 632:	89 91       	ld	r24, Y+
 634:	60 91 23 02 	lds	r22, 0x0223
 638:	70 91 24 02 	lds	r23, 0x0224
 63c:	db 01       	movw	r26, r22
 63e:	18 96       	adiw	r26, 0x08	; 8
 640:	ed 91       	ld	r30, X+
 642:	fc 91       	ld	r31, X
 644:	19 97       	sbiw	r26, 0x09	; 9
 646:	88 23       	and	r24, r24
 648:	31 f0       	breq	.+12     	; 0x656 <puts+0x40>
 64a:	09 95       	icall
 64c:	89 2b       	or	r24, r25
 64e:	89 f3       	breq	.-30     	; 0x632 <puts+0x1c>
 650:	0f ef       	ldi	r16, 0xFF	; 255
 652:	1f ef       	ldi	r17, 0xFF	; 255
 654:	ee cf       	rjmp	.-36     	; 0x632 <puts+0x1c>
 656:	8a e0       	ldi	r24, 0x0A	; 10
 658:	09 95       	icall
 65a:	89 2b       	or	r24, r25
 65c:	11 f4       	brne	.+4      	; 0x662 <puts+0x4c>
 65e:	c8 01       	movw	r24, r16
 660:	02 c0       	rjmp	.+4      	; 0x666 <puts+0x50>
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	9f ef       	ldi	r25, 0xFF	; 255
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	08 95       	ret

00000670 <vfprintf>:
 670:	ac e0       	ldi	r26, 0x0C	; 12
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	ee e3       	ldi	r30, 0x3E	; 62
 676:	f3 e0       	ldi	r31, 0x03	; 3
 678:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__prologue_saves__>
 67c:	7c 01       	movw	r14, r24
 67e:	6b 01       	movw	r12, r22
 680:	8a 01       	movw	r16, r20
 682:	fc 01       	movw	r30, r24
 684:	17 82       	std	Z+7, r1	; 0x07
 686:	16 82       	std	Z+6, r1	; 0x06
 688:	83 81       	ldd	r24, Z+3	; 0x03
 68a:	81 ff       	sbrs	r24, 1
 68c:	bd c1       	rjmp	.+890    	; 0xa08 <vfprintf+0x398>
 68e:	ce 01       	movw	r24, r28
 690:	01 96       	adiw	r24, 0x01	; 1
 692:	4c 01       	movw	r8, r24
 694:	f7 01       	movw	r30, r14
 696:	93 81       	ldd	r25, Z+3	; 0x03
 698:	f6 01       	movw	r30, r12
 69a:	93 fd       	sbrc	r25, 3
 69c:	85 91       	lpm	r24, Z+
 69e:	93 ff       	sbrs	r25, 3
 6a0:	81 91       	ld	r24, Z+
 6a2:	6f 01       	movw	r12, r30
 6a4:	88 23       	and	r24, r24
 6a6:	09 f4       	brne	.+2      	; 0x6aa <vfprintf+0x3a>
 6a8:	ab c1       	rjmp	.+854    	; 0xa00 <vfprintf+0x390>
 6aa:	85 32       	cpi	r24, 0x25	; 37
 6ac:	39 f4       	brne	.+14     	; 0x6bc <vfprintf+0x4c>
 6ae:	93 fd       	sbrc	r25, 3
 6b0:	85 91       	lpm	r24, Z+
 6b2:	93 ff       	sbrs	r25, 3
 6b4:	81 91       	ld	r24, Z+
 6b6:	6f 01       	movw	r12, r30
 6b8:	85 32       	cpi	r24, 0x25	; 37
 6ba:	29 f4       	brne	.+10     	; 0x6c6 <vfprintf+0x56>
 6bc:	b7 01       	movw	r22, r14
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 6c4:	e7 cf       	rjmp	.-50     	; 0x694 <vfprintf+0x24>
 6c6:	51 2c       	mov	r5, r1
 6c8:	31 2c       	mov	r3, r1
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	20 32       	cpi	r18, 0x20	; 32
 6ce:	a0 f4       	brcc	.+40     	; 0x6f8 <vfprintf+0x88>
 6d0:	8b 32       	cpi	r24, 0x2B	; 43
 6d2:	69 f0       	breq	.+26     	; 0x6ee <vfprintf+0x7e>
 6d4:	30 f4       	brcc	.+12     	; 0x6e2 <vfprintf+0x72>
 6d6:	80 32       	cpi	r24, 0x20	; 32
 6d8:	59 f0       	breq	.+22     	; 0x6f0 <vfprintf+0x80>
 6da:	83 32       	cpi	r24, 0x23	; 35
 6dc:	69 f4       	brne	.+26     	; 0x6f8 <vfprintf+0x88>
 6de:	20 61       	ori	r18, 0x10	; 16
 6e0:	2c c0       	rjmp	.+88     	; 0x73a <vfprintf+0xca>
 6e2:	8d 32       	cpi	r24, 0x2D	; 45
 6e4:	39 f0       	breq	.+14     	; 0x6f4 <vfprintf+0x84>
 6e6:	80 33       	cpi	r24, 0x30	; 48
 6e8:	39 f4       	brne	.+14     	; 0x6f8 <vfprintf+0x88>
 6ea:	21 60       	ori	r18, 0x01	; 1
 6ec:	26 c0       	rjmp	.+76     	; 0x73a <vfprintf+0xca>
 6ee:	22 60       	ori	r18, 0x02	; 2
 6f0:	24 60       	ori	r18, 0x04	; 4
 6f2:	23 c0       	rjmp	.+70     	; 0x73a <vfprintf+0xca>
 6f4:	28 60       	ori	r18, 0x08	; 8
 6f6:	21 c0       	rjmp	.+66     	; 0x73a <vfprintf+0xca>
 6f8:	27 fd       	sbrc	r18, 7
 6fa:	27 c0       	rjmp	.+78     	; 0x74a <vfprintf+0xda>
 6fc:	30 ed       	ldi	r19, 0xD0	; 208
 6fe:	38 0f       	add	r19, r24
 700:	3a 30       	cpi	r19, 0x0A	; 10
 702:	78 f4       	brcc	.+30     	; 0x722 <vfprintf+0xb2>
 704:	26 ff       	sbrs	r18, 6
 706:	06 c0       	rjmp	.+12     	; 0x714 <vfprintf+0xa4>
 708:	fa e0       	ldi	r31, 0x0A	; 10
 70a:	5f 9e       	mul	r5, r31
 70c:	30 0d       	add	r19, r0
 70e:	11 24       	eor	r1, r1
 710:	53 2e       	mov	r5, r19
 712:	13 c0       	rjmp	.+38     	; 0x73a <vfprintf+0xca>
 714:	8a e0       	ldi	r24, 0x0A	; 10
 716:	38 9e       	mul	r3, r24
 718:	30 0d       	add	r19, r0
 71a:	11 24       	eor	r1, r1
 71c:	33 2e       	mov	r3, r19
 71e:	20 62       	ori	r18, 0x20	; 32
 720:	0c c0       	rjmp	.+24     	; 0x73a <vfprintf+0xca>
 722:	8e 32       	cpi	r24, 0x2E	; 46
 724:	21 f4       	brne	.+8      	; 0x72e <vfprintf+0xbe>
 726:	26 fd       	sbrc	r18, 6
 728:	6b c1       	rjmp	.+726    	; 0xa00 <vfprintf+0x390>
 72a:	20 64       	ori	r18, 0x40	; 64
 72c:	06 c0       	rjmp	.+12     	; 0x73a <vfprintf+0xca>
 72e:	8c 36       	cpi	r24, 0x6C	; 108
 730:	11 f4       	brne	.+4      	; 0x736 <vfprintf+0xc6>
 732:	20 68       	ori	r18, 0x80	; 128
 734:	02 c0       	rjmp	.+4      	; 0x73a <vfprintf+0xca>
 736:	88 36       	cpi	r24, 0x68	; 104
 738:	41 f4       	brne	.+16     	; 0x74a <vfprintf+0xda>
 73a:	f6 01       	movw	r30, r12
 73c:	93 fd       	sbrc	r25, 3
 73e:	85 91       	lpm	r24, Z+
 740:	93 ff       	sbrs	r25, 3
 742:	81 91       	ld	r24, Z+
 744:	6f 01       	movw	r12, r30
 746:	81 11       	cpse	r24, r1
 748:	c1 cf       	rjmp	.-126    	; 0x6cc <vfprintf+0x5c>
 74a:	98 2f       	mov	r25, r24
 74c:	9f 7d       	andi	r25, 0xDF	; 223
 74e:	95 54       	subi	r25, 0x45	; 69
 750:	93 30       	cpi	r25, 0x03	; 3
 752:	28 f4       	brcc	.+10     	; 0x75e <vfprintf+0xee>
 754:	0c 5f       	subi	r16, 0xFC	; 252
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	ff e3       	ldi	r31, 0x3F	; 63
 75a:	f9 83       	std	Y+1, r31	; 0x01
 75c:	0d c0       	rjmp	.+26     	; 0x778 <vfprintf+0x108>
 75e:	83 36       	cpi	r24, 0x63	; 99
 760:	31 f0       	breq	.+12     	; 0x76e <vfprintf+0xfe>
 762:	83 37       	cpi	r24, 0x73	; 115
 764:	71 f0       	breq	.+28     	; 0x782 <vfprintf+0x112>
 766:	83 35       	cpi	r24, 0x53	; 83
 768:	09 f0       	breq	.+2      	; 0x76c <vfprintf+0xfc>
 76a:	5b c0       	rjmp	.+182    	; 0x822 <vfprintf+0x1b2>
 76c:	22 c0       	rjmp	.+68     	; 0x7b2 <vfprintf+0x142>
 76e:	f8 01       	movw	r30, r16
 770:	80 81       	ld	r24, Z
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	0e 5f       	subi	r16, 0xFE	; 254
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	44 24       	eor	r4, r4
 77a:	43 94       	inc	r4
 77c:	51 2c       	mov	r5, r1
 77e:	54 01       	movw	r10, r8
 780:	15 c0       	rjmp	.+42     	; 0x7ac <vfprintf+0x13c>
 782:	38 01       	movw	r6, r16
 784:	f2 e0       	ldi	r31, 0x02	; 2
 786:	6f 0e       	add	r6, r31
 788:	71 1c       	adc	r7, r1
 78a:	f8 01       	movw	r30, r16
 78c:	a0 80       	ld	r10, Z
 78e:	b1 80       	ldd	r11, Z+1	; 0x01
 790:	26 ff       	sbrs	r18, 6
 792:	03 c0       	rjmp	.+6      	; 0x79a <vfprintf+0x12a>
 794:	65 2d       	mov	r22, r5
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <vfprintf+0x12e>
 79a:	6f ef       	ldi	r22, 0xFF	; 255
 79c:	7f ef       	ldi	r23, 0xFF	; 255
 79e:	c5 01       	movw	r24, r10
 7a0:	2c 87       	std	Y+12, r18	; 0x0c
 7a2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <strnlen>
 7a6:	2c 01       	movw	r4, r24
 7a8:	83 01       	movw	r16, r6
 7aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ac:	2f 77       	andi	r18, 0x7F	; 127
 7ae:	22 2e       	mov	r2, r18
 7b0:	17 c0       	rjmp	.+46     	; 0x7e0 <vfprintf+0x170>
 7b2:	38 01       	movw	r6, r16
 7b4:	f2 e0       	ldi	r31, 0x02	; 2
 7b6:	6f 0e       	add	r6, r31
 7b8:	71 1c       	adc	r7, r1
 7ba:	f8 01       	movw	r30, r16
 7bc:	a0 80       	ld	r10, Z
 7be:	b1 80       	ldd	r11, Z+1	; 0x01
 7c0:	26 ff       	sbrs	r18, 6
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <vfprintf+0x15a>
 7c4:	65 2d       	mov	r22, r5
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x15e>
 7ca:	6f ef       	ldi	r22, 0xFF	; 255
 7cc:	7f ef       	ldi	r23, 0xFF	; 255
 7ce:	c5 01       	movw	r24, r10
 7d0:	2c 87       	std	Y+12, r18	; 0x0c
 7d2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <strnlen_P>
 7d6:	2c 01       	movw	r4, r24
 7d8:	2c 85       	ldd	r18, Y+12	; 0x0c
 7da:	20 68       	ori	r18, 0x80	; 128
 7dc:	22 2e       	mov	r2, r18
 7de:	83 01       	movw	r16, r6
 7e0:	23 fc       	sbrc	r2, 3
 7e2:	1b c0       	rjmp	.+54     	; 0x81a <vfprintf+0x1aa>
 7e4:	83 2d       	mov	r24, r3
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	48 16       	cp	r4, r24
 7ea:	59 06       	cpc	r5, r25
 7ec:	b0 f4       	brcc	.+44     	; 0x81a <vfprintf+0x1aa>
 7ee:	b7 01       	movw	r22, r14
 7f0:	80 e2       	ldi	r24, 0x20	; 32
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 7f8:	3a 94       	dec	r3
 7fa:	f4 cf       	rjmp	.-24     	; 0x7e4 <vfprintf+0x174>
 7fc:	f5 01       	movw	r30, r10
 7fe:	27 fc       	sbrc	r2, 7
 800:	85 91       	lpm	r24, Z+
 802:	27 fe       	sbrs	r2, 7
 804:	81 91       	ld	r24, Z+
 806:	5f 01       	movw	r10, r30
 808:	b7 01       	movw	r22, r14
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 810:	31 10       	cpse	r3, r1
 812:	3a 94       	dec	r3
 814:	f1 e0       	ldi	r31, 0x01	; 1
 816:	4f 1a       	sub	r4, r31
 818:	51 08       	sbc	r5, r1
 81a:	41 14       	cp	r4, r1
 81c:	51 04       	cpc	r5, r1
 81e:	71 f7       	brne	.-36     	; 0x7fc <vfprintf+0x18c>
 820:	e5 c0       	rjmp	.+458    	; 0x9ec <vfprintf+0x37c>
 822:	84 36       	cpi	r24, 0x64	; 100
 824:	11 f0       	breq	.+4      	; 0x82a <vfprintf+0x1ba>
 826:	89 36       	cpi	r24, 0x69	; 105
 828:	39 f5       	brne	.+78     	; 0x878 <vfprintf+0x208>
 82a:	f8 01       	movw	r30, r16
 82c:	27 ff       	sbrs	r18, 7
 82e:	07 c0       	rjmp	.+14     	; 0x83e <vfprintf+0x1ce>
 830:	60 81       	ld	r22, Z
 832:	71 81       	ldd	r23, Z+1	; 0x01
 834:	82 81       	ldd	r24, Z+2	; 0x02
 836:	93 81       	ldd	r25, Z+3	; 0x03
 838:	0c 5f       	subi	r16, 0xFC	; 252
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	08 c0       	rjmp	.+16     	; 0x84e <vfprintf+0x1de>
 83e:	60 81       	ld	r22, Z
 840:	71 81       	ldd	r23, Z+1	; 0x01
 842:	88 27       	eor	r24, r24
 844:	77 fd       	sbrc	r23, 7
 846:	80 95       	com	r24
 848:	98 2f       	mov	r25, r24
 84a:	0e 5f       	subi	r16, 0xFE	; 254
 84c:	1f 4f       	sbci	r17, 0xFF	; 255
 84e:	2f 76       	andi	r18, 0x6F	; 111
 850:	b2 2e       	mov	r11, r18
 852:	97 ff       	sbrs	r25, 7
 854:	09 c0       	rjmp	.+18     	; 0x868 <vfprintf+0x1f8>
 856:	90 95       	com	r25
 858:	80 95       	com	r24
 85a:	70 95       	com	r23
 85c:	61 95       	neg	r22
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	20 68       	ori	r18, 0x80	; 128
 866:	b2 2e       	mov	r11, r18
 868:	2a e0       	ldi	r18, 0x0A	; 10
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	a4 01       	movw	r20, r8
 86e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ultoa_invert>
 872:	a8 2e       	mov	r10, r24
 874:	a8 18       	sub	r10, r8
 876:	44 c0       	rjmp	.+136    	; 0x900 <vfprintf+0x290>
 878:	85 37       	cpi	r24, 0x75	; 117
 87a:	29 f4       	brne	.+10     	; 0x886 <vfprintf+0x216>
 87c:	2f 7e       	andi	r18, 0xEF	; 239
 87e:	b2 2e       	mov	r11, r18
 880:	2a e0       	ldi	r18, 0x0A	; 10
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	25 c0       	rjmp	.+74     	; 0x8d0 <vfprintf+0x260>
 886:	f2 2f       	mov	r31, r18
 888:	f9 7f       	andi	r31, 0xF9	; 249
 88a:	bf 2e       	mov	r11, r31
 88c:	8f 36       	cpi	r24, 0x6F	; 111
 88e:	c1 f0       	breq	.+48     	; 0x8c0 <vfprintf+0x250>
 890:	18 f4       	brcc	.+6      	; 0x898 <vfprintf+0x228>
 892:	88 35       	cpi	r24, 0x58	; 88
 894:	79 f0       	breq	.+30     	; 0x8b4 <vfprintf+0x244>
 896:	b4 c0       	rjmp	.+360    	; 0xa00 <vfprintf+0x390>
 898:	80 37       	cpi	r24, 0x70	; 112
 89a:	19 f0       	breq	.+6      	; 0x8a2 <vfprintf+0x232>
 89c:	88 37       	cpi	r24, 0x78	; 120
 89e:	21 f0       	breq	.+8      	; 0x8a8 <vfprintf+0x238>
 8a0:	af c0       	rjmp	.+350    	; 0xa00 <vfprintf+0x390>
 8a2:	2f 2f       	mov	r18, r31
 8a4:	20 61       	ori	r18, 0x10	; 16
 8a6:	b2 2e       	mov	r11, r18
 8a8:	b4 fe       	sbrs	r11, 4
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <vfprintf+0x256>
 8ac:	8b 2d       	mov	r24, r11
 8ae:	84 60       	ori	r24, 0x04	; 4
 8b0:	b8 2e       	mov	r11, r24
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <vfprintf+0x256>
 8b4:	24 ff       	sbrs	r18, 4
 8b6:	0a c0       	rjmp	.+20     	; 0x8cc <vfprintf+0x25c>
 8b8:	9f 2f       	mov	r25, r31
 8ba:	96 60       	ori	r25, 0x06	; 6
 8bc:	b9 2e       	mov	r11, r25
 8be:	06 c0       	rjmp	.+12     	; 0x8cc <vfprintf+0x25c>
 8c0:	28 e0       	ldi	r18, 0x08	; 8
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <vfprintf+0x260>
 8c6:	20 e1       	ldi	r18, 0x10	; 16
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <vfprintf+0x260>
 8cc:	20 e1       	ldi	r18, 0x10	; 16
 8ce:	32 e0       	ldi	r19, 0x02	; 2
 8d0:	f8 01       	movw	r30, r16
 8d2:	b7 fe       	sbrs	r11, 7
 8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <vfprintf+0x274>
 8d6:	60 81       	ld	r22, Z
 8d8:	71 81       	ldd	r23, Z+1	; 0x01
 8da:	82 81       	ldd	r24, Z+2	; 0x02
 8dc:	93 81       	ldd	r25, Z+3	; 0x03
 8de:	0c 5f       	subi	r16, 0xFC	; 252
 8e0:	1f 4f       	sbci	r17, 0xFF	; 255
 8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <vfprintf+0x280>
 8e4:	60 81       	ld	r22, Z
 8e6:	71 81       	ldd	r23, Z+1	; 0x01
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 5f       	subi	r16, 0xFE	; 254
 8ee:	1f 4f       	sbci	r17, 0xFF	; 255
 8f0:	a4 01       	movw	r20, r8
 8f2:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ultoa_invert>
 8f6:	a8 2e       	mov	r10, r24
 8f8:	a8 18       	sub	r10, r8
 8fa:	fb 2d       	mov	r31, r11
 8fc:	ff 77       	andi	r31, 0x7F	; 127
 8fe:	bf 2e       	mov	r11, r31
 900:	b6 fe       	sbrs	r11, 6
 902:	0b c0       	rjmp	.+22     	; 0x91a <vfprintf+0x2aa>
 904:	2b 2d       	mov	r18, r11
 906:	2e 7f       	andi	r18, 0xFE	; 254
 908:	a5 14       	cp	r10, r5
 90a:	50 f4       	brcc	.+20     	; 0x920 <vfprintf+0x2b0>
 90c:	b4 fe       	sbrs	r11, 4
 90e:	0a c0       	rjmp	.+20     	; 0x924 <vfprintf+0x2b4>
 910:	b2 fc       	sbrc	r11, 2
 912:	08 c0       	rjmp	.+16     	; 0x924 <vfprintf+0x2b4>
 914:	2b 2d       	mov	r18, r11
 916:	2e 7e       	andi	r18, 0xEE	; 238
 918:	05 c0       	rjmp	.+10     	; 0x924 <vfprintf+0x2b4>
 91a:	7a 2c       	mov	r7, r10
 91c:	2b 2d       	mov	r18, r11
 91e:	03 c0       	rjmp	.+6      	; 0x926 <vfprintf+0x2b6>
 920:	7a 2c       	mov	r7, r10
 922:	01 c0       	rjmp	.+2      	; 0x926 <vfprintf+0x2b6>
 924:	75 2c       	mov	r7, r5
 926:	24 ff       	sbrs	r18, 4
 928:	0d c0       	rjmp	.+26     	; 0x944 <vfprintf+0x2d4>
 92a:	fe 01       	movw	r30, r28
 92c:	ea 0d       	add	r30, r10
 92e:	f1 1d       	adc	r31, r1
 930:	80 81       	ld	r24, Z
 932:	80 33       	cpi	r24, 0x30	; 48
 934:	11 f4       	brne	.+4      	; 0x93a <vfprintf+0x2ca>
 936:	29 7e       	andi	r18, 0xE9	; 233
 938:	09 c0       	rjmp	.+18     	; 0x94c <vfprintf+0x2dc>
 93a:	22 ff       	sbrs	r18, 2
 93c:	06 c0       	rjmp	.+12     	; 0x94a <vfprintf+0x2da>
 93e:	73 94       	inc	r7
 940:	73 94       	inc	r7
 942:	04 c0       	rjmp	.+8      	; 0x94c <vfprintf+0x2dc>
 944:	82 2f       	mov	r24, r18
 946:	86 78       	andi	r24, 0x86	; 134
 948:	09 f0       	breq	.+2      	; 0x94c <vfprintf+0x2dc>
 94a:	73 94       	inc	r7
 94c:	23 fd       	sbrc	r18, 3
 94e:	13 c0       	rjmp	.+38     	; 0x976 <vfprintf+0x306>
 950:	20 ff       	sbrs	r18, 0
 952:	06 c0       	rjmp	.+12     	; 0x960 <vfprintf+0x2f0>
 954:	5a 2c       	mov	r5, r10
 956:	73 14       	cp	r7, r3
 958:	18 f4       	brcc	.+6      	; 0x960 <vfprintf+0x2f0>
 95a:	53 0c       	add	r5, r3
 95c:	57 18       	sub	r5, r7
 95e:	73 2c       	mov	r7, r3
 960:	73 14       	cp	r7, r3
 962:	68 f4       	brcc	.+26     	; 0x97e <vfprintf+0x30e>
 964:	b7 01       	movw	r22, r14
 966:	80 e2       	ldi	r24, 0x20	; 32
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	2c 87       	std	Y+12, r18	; 0x0c
 96c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 970:	73 94       	inc	r7
 972:	2c 85       	ldd	r18, Y+12	; 0x0c
 974:	f5 cf       	rjmp	.-22     	; 0x960 <vfprintf+0x2f0>
 976:	73 14       	cp	r7, r3
 978:	10 f4       	brcc	.+4      	; 0x97e <vfprintf+0x30e>
 97a:	37 18       	sub	r3, r7
 97c:	01 c0       	rjmp	.+2      	; 0x980 <vfprintf+0x310>
 97e:	31 2c       	mov	r3, r1
 980:	24 ff       	sbrs	r18, 4
 982:	12 c0       	rjmp	.+36     	; 0x9a8 <vfprintf+0x338>
 984:	b7 01       	movw	r22, r14
 986:	80 e3       	ldi	r24, 0x30	; 48
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	2c 87       	std	Y+12, r18	; 0x0c
 98c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 990:	2c 85       	ldd	r18, Y+12	; 0x0c
 992:	22 ff       	sbrs	r18, 2
 994:	17 c0       	rjmp	.+46     	; 0x9c4 <vfprintf+0x354>
 996:	21 ff       	sbrs	r18, 1
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <vfprintf+0x330>
 99a:	88 e5       	ldi	r24, 0x58	; 88
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <vfprintf+0x334>
 9a0:	88 e7       	ldi	r24, 0x78	; 120
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	b7 01       	movw	r22, r14
 9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <vfprintf+0x350>
 9a8:	82 2f       	mov	r24, r18
 9aa:	86 78       	andi	r24, 0x86	; 134
 9ac:	59 f0       	breq	.+22     	; 0x9c4 <vfprintf+0x354>
 9ae:	21 fd       	sbrc	r18, 1
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <vfprintf+0x346>
 9b2:	80 e2       	ldi	r24, 0x20	; 32
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <vfprintf+0x348>
 9b6:	8b e2       	ldi	r24, 0x2B	; 43
 9b8:	27 fd       	sbrc	r18, 7
 9ba:	8d e2       	ldi	r24, 0x2D	; 45
 9bc:	b7 01       	movw	r22, r14
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 9c4:	a5 14       	cp	r10, r5
 9c6:	38 f4       	brcc	.+14     	; 0x9d6 <vfprintf+0x366>
 9c8:	b7 01       	movw	r22, r14
 9ca:	80 e3       	ldi	r24, 0x30	; 48
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 9d2:	5a 94       	dec	r5
 9d4:	f7 cf       	rjmp	.-18     	; 0x9c4 <vfprintf+0x354>
 9d6:	aa 94       	dec	r10
 9d8:	f4 01       	movw	r30, r8
 9da:	ea 0d       	add	r30, r10
 9dc:	f1 1d       	adc	r31, r1
 9de:	80 81       	ld	r24, Z
 9e0:	b7 01       	movw	r22, r14
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 9e8:	a1 10       	cpse	r10, r1
 9ea:	f5 cf       	rjmp	.-22     	; 0x9d6 <vfprintf+0x366>
 9ec:	33 20       	and	r3, r3
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <vfprintf+0x382>
 9f0:	51 ce       	rjmp	.-862    	; 0x694 <vfprintf+0x24>
 9f2:	b7 01       	movw	r22, r14
 9f4:	80 e2       	ldi	r24, 0x20	; 32
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 9fc:	3a 94       	dec	r3
 9fe:	f6 cf       	rjmp	.-20     	; 0x9ec <vfprintf+0x37c>
 a00:	f7 01       	movw	r30, r14
 a02:	86 81       	ldd	r24, Z+6	; 0x06
 a04:	97 81       	ldd	r25, Z+7	; 0x07
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <vfprintf+0x39c>
 a08:	8f ef       	ldi	r24, 0xFF	; 255
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	2c 96       	adiw	r28, 0x0c	; 12
 a0e:	e2 e1       	ldi	r30, 0x12	; 18
 a10:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__epilogue_restores__>

00000a14 <calloc>:
 a14:	0f 93       	push	r16
 a16:	1f 93       	push	r17
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	86 9f       	mul	r24, r22
 a1e:	80 01       	movw	r16, r0
 a20:	87 9f       	mul	r24, r23
 a22:	10 0d       	add	r17, r0
 a24:	96 9f       	mul	r25, r22
 a26:	10 0d       	add	r17, r0
 a28:	11 24       	eor	r1, r1
 a2a:	c8 01       	movw	r24, r16
 a2c:	0e 94 26 05 	call	0xa4c	; 0xa4c <malloc>
 a30:	ec 01       	movw	r28, r24
 a32:	00 97       	sbiw	r24, 0x00	; 0
 a34:	29 f0       	breq	.+10     	; 0xa40 <calloc+0x2c>
 a36:	a8 01       	movw	r20, r16
 a38:	60 e0       	ldi	r22, 0x00	; 0
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <memset>
 a40:	ce 01       	movw	r24, r28
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	1f 91       	pop	r17
 a48:	0f 91       	pop	r16
 a4a:	08 95       	ret

00000a4c <malloc>:
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	82 30       	cpi	r24, 0x02	; 2
 a52:	91 05       	cpc	r25, r1
 a54:	10 f4       	brcc	.+4      	; 0xa5a <malloc+0xe>
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	e0 91 29 02 	lds	r30, 0x0229
 a5e:	f0 91 2a 02 	lds	r31, 0x022A
 a62:	20 e0       	ldi	r18, 0x00	; 0
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	a0 e0       	ldi	r26, 0x00	; 0
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	30 97       	sbiw	r30, 0x00	; 0
 a6c:	39 f1       	breq	.+78     	; 0xabc <malloc+0x70>
 a6e:	40 81       	ld	r20, Z
 a70:	51 81       	ldd	r21, Z+1	; 0x01
 a72:	48 17       	cp	r20, r24
 a74:	59 07       	cpc	r21, r25
 a76:	b8 f0       	brcs	.+46     	; 0xaa6 <malloc+0x5a>
 a78:	48 17       	cp	r20, r24
 a7a:	59 07       	cpc	r21, r25
 a7c:	71 f4       	brne	.+28     	; 0xa9a <malloc+0x4e>
 a7e:	82 81       	ldd	r24, Z+2	; 0x02
 a80:	93 81       	ldd	r25, Z+3	; 0x03
 a82:	10 97       	sbiw	r26, 0x00	; 0
 a84:	29 f0       	breq	.+10     	; 0xa90 <malloc+0x44>
 a86:	13 96       	adiw	r26, 0x03	; 3
 a88:	9c 93       	st	X, r25
 a8a:	8e 93       	st	-X, r24
 a8c:	12 97       	sbiw	r26, 0x02	; 2
 a8e:	2c c0       	rjmp	.+88     	; 0xae8 <malloc+0x9c>
 a90:	90 93 2a 02 	sts	0x022A, r25
 a94:	80 93 29 02 	sts	0x0229, r24
 a98:	27 c0       	rjmp	.+78     	; 0xae8 <malloc+0x9c>
 a9a:	21 15       	cp	r18, r1
 a9c:	31 05       	cpc	r19, r1
 a9e:	31 f0       	breq	.+12     	; 0xaac <malloc+0x60>
 aa0:	42 17       	cp	r20, r18
 aa2:	53 07       	cpc	r21, r19
 aa4:	18 f0       	brcs	.+6      	; 0xaac <malloc+0x60>
 aa6:	a9 01       	movw	r20, r18
 aa8:	db 01       	movw	r26, r22
 aaa:	01 c0       	rjmp	.+2      	; 0xaae <malloc+0x62>
 aac:	ef 01       	movw	r28, r30
 aae:	9a 01       	movw	r18, r20
 ab0:	bd 01       	movw	r22, r26
 ab2:	df 01       	movw	r26, r30
 ab4:	02 80       	ldd	r0, Z+2	; 0x02
 ab6:	f3 81       	ldd	r31, Z+3	; 0x03
 ab8:	e0 2d       	mov	r30, r0
 aba:	d7 cf       	rjmp	.-82     	; 0xa6a <malloc+0x1e>
 abc:	21 15       	cp	r18, r1
 abe:	31 05       	cpc	r19, r1
 ac0:	f9 f0       	breq	.+62     	; 0xb00 <malloc+0xb4>
 ac2:	28 1b       	sub	r18, r24
 ac4:	39 0b       	sbc	r19, r25
 ac6:	24 30       	cpi	r18, 0x04	; 4
 ac8:	31 05       	cpc	r19, r1
 aca:	80 f4       	brcc	.+32     	; 0xaec <malloc+0xa0>
 acc:	8a 81       	ldd	r24, Y+2	; 0x02
 ace:	9b 81       	ldd	r25, Y+3	; 0x03
 ad0:	61 15       	cp	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	21 f0       	breq	.+8      	; 0xade <malloc+0x92>
 ad6:	fb 01       	movw	r30, r22
 ad8:	93 83       	std	Z+3, r25	; 0x03
 ada:	82 83       	std	Z+2, r24	; 0x02
 adc:	04 c0       	rjmp	.+8      	; 0xae6 <malloc+0x9a>
 ade:	90 93 2a 02 	sts	0x022A, r25
 ae2:	80 93 29 02 	sts	0x0229, r24
 ae6:	fe 01       	movw	r30, r28
 ae8:	32 96       	adiw	r30, 0x02	; 2
 aea:	44 c0       	rjmp	.+136    	; 0xb74 <malloc+0x128>
 aec:	fe 01       	movw	r30, r28
 aee:	e2 0f       	add	r30, r18
 af0:	f3 1f       	adc	r31, r19
 af2:	81 93       	st	Z+, r24
 af4:	91 93       	st	Z+, r25
 af6:	22 50       	subi	r18, 0x02	; 2
 af8:	31 09       	sbc	r19, r1
 afa:	39 83       	std	Y+1, r19	; 0x01
 afc:	28 83       	st	Y, r18
 afe:	3a c0       	rjmp	.+116    	; 0xb74 <malloc+0x128>
 b00:	20 91 27 02 	lds	r18, 0x0227
 b04:	30 91 28 02 	lds	r19, 0x0228
 b08:	23 2b       	or	r18, r19
 b0a:	41 f4       	brne	.+16     	; 0xb1c <malloc+0xd0>
 b0c:	20 91 02 01 	lds	r18, 0x0102
 b10:	30 91 03 01 	lds	r19, 0x0103
 b14:	30 93 28 02 	sts	0x0228, r19
 b18:	20 93 27 02 	sts	0x0227, r18
 b1c:	20 91 00 01 	lds	r18, 0x0100
 b20:	30 91 01 01 	lds	r19, 0x0101
 b24:	21 15       	cp	r18, r1
 b26:	31 05       	cpc	r19, r1
 b28:	41 f4       	brne	.+16     	; 0xb3a <malloc+0xee>
 b2a:	2d b7       	in	r18, 0x3d	; 61
 b2c:	3e b7       	in	r19, 0x3e	; 62
 b2e:	40 91 04 01 	lds	r20, 0x0104
 b32:	50 91 05 01 	lds	r21, 0x0105
 b36:	24 1b       	sub	r18, r20
 b38:	35 0b       	sbc	r19, r21
 b3a:	e0 91 27 02 	lds	r30, 0x0227
 b3e:	f0 91 28 02 	lds	r31, 0x0228
 b42:	e2 17       	cp	r30, r18
 b44:	f3 07       	cpc	r31, r19
 b46:	a0 f4       	brcc	.+40     	; 0xb70 <malloc+0x124>
 b48:	2e 1b       	sub	r18, r30
 b4a:	3f 0b       	sbc	r19, r31
 b4c:	28 17       	cp	r18, r24
 b4e:	39 07       	cpc	r19, r25
 b50:	78 f0       	brcs	.+30     	; 0xb70 <malloc+0x124>
 b52:	ac 01       	movw	r20, r24
 b54:	4e 5f       	subi	r20, 0xFE	; 254
 b56:	5f 4f       	sbci	r21, 0xFF	; 255
 b58:	24 17       	cp	r18, r20
 b5a:	35 07       	cpc	r19, r21
 b5c:	48 f0       	brcs	.+18     	; 0xb70 <malloc+0x124>
 b5e:	4e 0f       	add	r20, r30
 b60:	5f 1f       	adc	r21, r31
 b62:	50 93 28 02 	sts	0x0228, r21
 b66:	40 93 27 02 	sts	0x0227, r20
 b6a:	81 93       	st	Z+, r24
 b6c:	91 93       	st	Z+, r25
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <malloc+0x128>
 b70:	e0 e0       	ldi	r30, 0x00	; 0
 b72:	f0 e0       	ldi	r31, 0x00	; 0
 b74:	cf 01       	movw	r24, r30
 b76:	df 91       	pop	r29
 b78:	cf 91       	pop	r28
 b7a:	08 95       	ret

00000b7c <free>:
 b7c:	cf 93       	push	r28
 b7e:	df 93       	push	r29
 b80:	00 97       	sbiw	r24, 0x00	; 0
 b82:	09 f4       	brne	.+2      	; 0xb86 <free+0xa>
 b84:	87 c0       	rjmp	.+270    	; 0xc94 <free+0x118>
 b86:	fc 01       	movw	r30, r24
 b88:	32 97       	sbiw	r30, 0x02	; 2
 b8a:	13 82       	std	Z+3, r1	; 0x03
 b8c:	12 82       	std	Z+2, r1	; 0x02
 b8e:	c0 91 29 02 	lds	r28, 0x0229
 b92:	d0 91 2a 02 	lds	r29, 0x022A
 b96:	20 97       	sbiw	r28, 0x00	; 0
 b98:	81 f4       	brne	.+32     	; 0xbba <free+0x3e>
 b9a:	20 81       	ld	r18, Z
 b9c:	31 81       	ldd	r19, Z+1	; 0x01
 b9e:	28 0f       	add	r18, r24
 ba0:	39 1f       	adc	r19, r25
 ba2:	80 91 27 02 	lds	r24, 0x0227
 ba6:	90 91 28 02 	lds	r25, 0x0228
 baa:	82 17       	cp	r24, r18
 bac:	93 07       	cpc	r25, r19
 bae:	79 f5       	brne	.+94     	; 0xc0e <free+0x92>
 bb0:	f0 93 28 02 	sts	0x0228, r31
 bb4:	e0 93 27 02 	sts	0x0227, r30
 bb8:	6d c0       	rjmp	.+218    	; 0xc94 <free+0x118>
 bba:	de 01       	movw	r26, r28
 bbc:	20 e0       	ldi	r18, 0x00	; 0
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	ae 17       	cp	r26, r30
 bc2:	bf 07       	cpc	r27, r31
 bc4:	50 f4       	brcc	.+20     	; 0xbda <free+0x5e>
 bc6:	12 96       	adiw	r26, 0x02	; 2
 bc8:	4d 91       	ld	r20, X+
 bca:	5c 91       	ld	r21, X
 bcc:	13 97       	sbiw	r26, 0x03	; 3
 bce:	9d 01       	movw	r18, r26
 bd0:	41 15       	cp	r20, r1
 bd2:	51 05       	cpc	r21, r1
 bd4:	09 f1       	breq	.+66     	; 0xc18 <free+0x9c>
 bd6:	da 01       	movw	r26, r20
 bd8:	f3 cf       	rjmp	.-26     	; 0xbc0 <free+0x44>
 bda:	b3 83       	std	Z+3, r27	; 0x03
 bdc:	a2 83       	std	Z+2, r26	; 0x02
 bde:	40 81       	ld	r20, Z
 be0:	51 81       	ldd	r21, Z+1	; 0x01
 be2:	84 0f       	add	r24, r20
 be4:	95 1f       	adc	r25, r21
 be6:	8a 17       	cp	r24, r26
 be8:	9b 07       	cpc	r25, r27
 bea:	71 f4       	brne	.+28     	; 0xc08 <free+0x8c>
 bec:	8d 91       	ld	r24, X+
 bee:	9c 91       	ld	r25, X
 bf0:	11 97       	sbiw	r26, 0x01	; 1
 bf2:	84 0f       	add	r24, r20
 bf4:	95 1f       	adc	r25, r21
 bf6:	02 96       	adiw	r24, 0x02	; 2
 bf8:	91 83       	std	Z+1, r25	; 0x01
 bfa:	80 83       	st	Z, r24
 bfc:	12 96       	adiw	r26, 0x02	; 2
 bfe:	8d 91       	ld	r24, X+
 c00:	9c 91       	ld	r25, X
 c02:	13 97       	sbiw	r26, 0x03	; 3
 c04:	93 83       	std	Z+3, r25	; 0x03
 c06:	82 83       	std	Z+2, r24	; 0x02
 c08:	21 15       	cp	r18, r1
 c0a:	31 05       	cpc	r19, r1
 c0c:	29 f4       	brne	.+10     	; 0xc18 <free+0x9c>
 c0e:	f0 93 2a 02 	sts	0x022A, r31
 c12:	e0 93 29 02 	sts	0x0229, r30
 c16:	3e c0       	rjmp	.+124    	; 0xc94 <free+0x118>
 c18:	d9 01       	movw	r26, r18
 c1a:	13 96       	adiw	r26, 0x03	; 3
 c1c:	fc 93       	st	X, r31
 c1e:	ee 93       	st	-X, r30
 c20:	12 97       	sbiw	r26, 0x02	; 2
 c22:	4d 91       	ld	r20, X+
 c24:	5d 91       	ld	r21, X+
 c26:	a4 0f       	add	r26, r20
 c28:	b5 1f       	adc	r27, r21
 c2a:	ea 17       	cp	r30, r26
 c2c:	fb 07       	cpc	r31, r27
 c2e:	79 f4       	brne	.+30     	; 0xc4e <free+0xd2>
 c30:	80 81       	ld	r24, Z
 c32:	91 81       	ldd	r25, Z+1	; 0x01
 c34:	84 0f       	add	r24, r20
 c36:	95 1f       	adc	r25, r21
 c38:	02 96       	adiw	r24, 0x02	; 2
 c3a:	d9 01       	movw	r26, r18
 c3c:	11 96       	adiw	r26, 0x01	; 1
 c3e:	9c 93       	st	X, r25
 c40:	8e 93       	st	-X, r24
 c42:	82 81       	ldd	r24, Z+2	; 0x02
 c44:	93 81       	ldd	r25, Z+3	; 0x03
 c46:	13 96       	adiw	r26, 0x03	; 3
 c48:	9c 93       	st	X, r25
 c4a:	8e 93       	st	-X, r24
 c4c:	12 97       	sbiw	r26, 0x02	; 2
 c4e:	e0 e0       	ldi	r30, 0x00	; 0
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	8a 81       	ldd	r24, Y+2	; 0x02
 c54:	9b 81       	ldd	r25, Y+3	; 0x03
 c56:	00 97       	sbiw	r24, 0x00	; 0
 c58:	19 f0       	breq	.+6      	; 0xc60 <free+0xe4>
 c5a:	fe 01       	movw	r30, r28
 c5c:	ec 01       	movw	r28, r24
 c5e:	f9 cf       	rjmp	.-14     	; 0xc52 <free+0xd6>
 c60:	ce 01       	movw	r24, r28
 c62:	02 96       	adiw	r24, 0x02	; 2
 c64:	28 81       	ld	r18, Y
 c66:	39 81       	ldd	r19, Y+1	; 0x01
 c68:	82 0f       	add	r24, r18
 c6a:	93 1f       	adc	r25, r19
 c6c:	20 91 27 02 	lds	r18, 0x0227
 c70:	30 91 28 02 	lds	r19, 0x0228
 c74:	28 17       	cp	r18, r24
 c76:	39 07       	cpc	r19, r25
 c78:	69 f4       	brne	.+26     	; 0xc94 <free+0x118>
 c7a:	30 97       	sbiw	r30, 0x00	; 0
 c7c:	29 f4       	brne	.+10     	; 0xc88 <free+0x10c>
 c7e:	10 92 2a 02 	sts	0x022A, r1
 c82:	10 92 29 02 	sts	0x0229, r1
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <free+0x110>
 c88:	13 82       	std	Z+3, r1	; 0x03
 c8a:	12 82       	std	Z+2, r1	; 0x02
 c8c:	d0 93 28 02 	sts	0x0228, r29
 c90:	c0 93 27 02 	sts	0x0227, r28
 c94:	df 91       	pop	r29
 c96:	cf 91       	pop	r28
 c98:	08 95       	ret

00000c9a <strnlen_P>:
 c9a:	fc 01       	movw	r30, r24
 c9c:	05 90       	lpm	r0, Z+
 c9e:	61 50       	subi	r22, 0x01	; 1
 ca0:	70 40       	sbci	r23, 0x00	; 0
 ca2:	01 10       	cpse	r0, r1
 ca4:	d8 f7       	brcc	.-10     	; 0xc9c <strnlen_P+0x2>
 ca6:	80 95       	com	r24
 ca8:	90 95       	com	r25
 caa:	8e 0f       	add	r24, r30
 cac:	9f 1f       	adc	r25, r31
 cae:	08 95       	ret

00000cb0 <memset>:
 cb0:	dc 01       	movw	r26, r24
 cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <memset+0x6>
 cb4:	6d 93       	st	X+, r22
 cb6:	41 50       	subi	r20, 0x01	; 1
 cb8:	50 40       	sbci	r21, 0x00	; 0
 cba:	e0 f7       	brcc	.-8      	; 0xcb4 <memset+0x4>
 cbc:	08 95       	ret

00000cbe <strnlen>:
 cbe:	fc 01       	movw	r30, r24
 cc0:	61 50       	subi	r22, 0x01	; 1
 cc2:	70 40       	sbci	r23, 0x00	; 0
 cc4:	01 90       	ld	r0, Z+
 cc6:	01 10       	cpse	r0, r1
 cc8:	d8 f7       	brcc	.-10     	; 0xcc0 <strnlen+0x2>
 cca:	80 95       	com	r24
 ccc:	90 95       	com	r25
 cce:	8e 0f       	add	r24, r30
 cd0:	9f 1f       	adc	r25, r31
 cd2:	08 95       	ret

00000cd4 <fputc>:
 cd4:	0f 93       	push	r16
 cd6:	1f 93       	push	r17
 cd8:	cf 93       	push	r28
 cda:	df 93       	push	r29
 cdc:	18 2f       	mov	r17, r24
 cde:	09 2f       	mov	r16, r25
 ce0:	eb 01       	movw	r28, r22
 ce2:	8b 81       	ldd	r24, Y+3	; 0x03
 ce4:	81 fd       	sbrc	r24, 1
 ce6:	03 c0       	rjmp	.+6      	; 0xcee <fputc+0x1a>
 ce8:	8f ef       	ldi	r24, 0xFF	; 255
 cea:	9f ef       	ldi	r25, 0xFF	; 255
 cec:	20 c0       	rjmp	.+64     	; 0xd2e <fputc+0x5a>
 cee:	82 ff       	sbrs	r24, 2
 cf0:	10 c0       	rjmp	.+32     	; 0xd12 <fputc+0x3e>
 cf2:	4e 81       	ldd	r20, Y+6	; 0x06
 cf4:	5f 81       	ldd	r21, Y+7	; 0x07
 cf6:	2c 81       	ldd	r18, Y+4	; 0x04
 cf8:	3d 81       	ldd	r19, Y+5	; 0x05
 cfa:	42 17       	cp	r20, r18
 cfc:	53 07       	cpc	r21, r19
 cfe:	7c f4       	brge	.+30     	; 0xd1e <fputc+0x4a>
 d00:	e8 81       	ld	r30, Y
 d02:	f9 81       	ldd	r31, Y+1	; 0x01
 d04:	9f 01       	movw	r18, r30
 d06:	2f 5f       	subi	r18, 0xFF	; 255
 d08:	3f 4f       	sbci	r19, 0xFF	; 255
 d0a:	39 83       	std	Y+1, r19	; 0x01
 d0c:	28 83       	st	Y, r18
 d0e:	10 83       	st	Z, r17
 d10:	06 c0       	rjmp	.+12     	; 0xd1e <fputc+0x4a>
 d12:	e8 85       	ldd	r30, Y+8	; 0x08
 d14:	f9 85       	ldd	r31, Y+9	; 0x09
 d16:	81 2f       	mov	r24, r17
 d18:	09 95       	icall
 d1a:	89 2b       	or	r24, r25
 d1c:	29 f7       	brne	.-54     	; 0xce8 <fputc+0x14>
 d1e:	2e 81       	ldd	r18, Y+6	; 0x06
 d20:	3f 81       	ldd	r19, Y+7	; 0x07
 d22:	2f 5f       	subi	r18, 0xFF	; 255
 d24:	3f 4f       	sbci	r19, 0xFF	; 255
 d26:	3f 83       	std	Y+7, r19	; 0x07
 d28:	2e 83       	std	Y+6, r18	; 0x06
 d2a:	81 2f       	mov	r24, r17
 d2c:	90 2f       	mov	r25, r16
 d2e:	df 91       	pop	r29
 d30:	cf 91       	pop	r28
 d32:	1f 91       	pop	r17
 d34:	0f 91       	pop	r16
 d36:	08 95       	ret

00000d38 <__ultoa_invert>:
 d38:	fa 01       	movw	r30, r20
 d3a:	aa 27       	eor	r26, r26
 d3c:	28 30       	cpi	r18, 0x08	; 8
 d3e:	51 f1       	breq	.+84     	; 0xd94 <__ultoa_invert+0x5c>
 d40:	20 31       	cpi	r18, 0x10	; 16
 d42:	81 f1       	breq	.+96     	; 0xda4 <__ultoa_invert+0x6c>
 d44:	e8 94       	clt
 d46:	6f 93       	push	r22
 d48:	6e 7f       	andi	r22, 0xFE	; 254
 d4a:	6e 5f       	subi	r22, 0xFE	; 254
 d4c:	7f 4f       	sbci	r23, 0xFF	; 255
 d4e:	8f 4f       	sbci	r24, 0xFF	; 255
 d50:	9f 4f       	sbci	r25, 0xFF	; 255
 d52:	af 4f       	sbci	r26, 0xFF	; 255
 d54:	b1 e0       	ldi	r27, 0x01	; 1
 d56:	3e d0       	rcall	.+124    	; 0xdd4 <__ultoa_invert+0x9c>
 d58:	b4 e0       	ldi	r27, 0x04	; 4
 d5a:	3c d0       	rcall	.+120    	; 0xdd4 <__ultoa_invert+0x9c>
 d5c:	67 0f       	add	r22, r23
 d5e:	78 1f       	adc	r23, r24
 d60:	89 1f       	adc	r24, r25
 d62:	9a 1f       	adc	r25, r26
 d64:	a1 1d       	adc	r26, r1
 d66:	68 0f       	add	r22, r24
 d68:	79 1f       	adc	r23, r25
 d6a:	8a 1f       	adc	r24, r26
 d6c:	91 1d       	adc	r25, r1
 d6e:	a1 1d       	adc	r26, r1
 d70:	6a 0f       	add	r22, r26
 d72:	71 1d       	adc	r23, r1
 d74:	81 1d       	adc	r24, r1
 d76:	91 1d       	adc	r25, r1
 d78:	a1 1d       	adc	r26, r1
 d7a:	20 d0       	rcall	.+64     	; 0xdbc <__ultoa_invert+0x84>
 d7c:	09 f4       	brne	.+2      	; 0xd80 <__ultoa_invert+0x48>
 d7e:	68 94       	set
 d80:	3f 91       	pop	r19
 d82:	2a e0       	ldi	r18, 0x0A	; 10
 d84:	26 9f       	mul	r18, r22
 d86:	11 24       	eor	r1, r1
 d88:	30 19       	sub	r19, r0
 d8a:	30 5d       	subi	r19, 0xD0	; 208
 d8c:	31 93       	st	Z+, r19
 d8e:	de f6       	brtc	.-74     	; 0xd46 <__ultoa_invert+0xe>
 d90:	cf 01       	movw	r24, r30
 d92:	08 95       	ret
 d94:	46 2f       	mov	r20, r22
 d96:	47 70       	andi	r20, 0x07	; 7
 d98:	40 5d       	subi	r20, 0xD0	; 208
 d9a:	41 93       	st	Z+, r20
 d9c:	b3 e0       	ldi	r27, 0x03	; 3
 d9e:	0f d0       	rcall	.+30     	; 0xdbe <__ultoa_invert+0x86>
 da0:	c9 f7       	brne	.-14     	; 0xd94 <__ultoa_invert+0x5c>
 da2:	f6 cf       	rjmp	.-20     	; 0xd90 <__ultoa_invert+0x58>
 da4:	46 2f       	mov	r20, r22
 da6:	4f 70       	andi	r20, 0x0F	; 15
 da8:	40 5d       	subi	r20, 0xD0	; 208
 daa:	4a 33       	cpi	r20, 0x3A	; 58
 dac:	18 f0       	brcs	.+6      	; 0xdb4 <__ultoa_invert+0x7c>
 dae:	49 5d       	subi	r20, 0xD9	; 217
 db0:	31 fd       	sbrc	r19, 1
 db2:	40 52       	subi	r20, 0x20	; 32
 db4:	41 93       	st	Z+, r20
 db6:	02 d0       	rcall	.+4      	; 0xdbc <__ultoa_invert+0x84>
 db8:	a9 f7       	brne	.-22     	; 0xda4 <__ultoa_invert+0x6c>
 dba:	ea cf       	rjmp	.-44     	; 0xd90 <__ultoa_invert+0x58>
 dbc:	b4 e0       	ldi	r27, 0x04	; 4
 dbe:	a6 95       	lsr	r26
 dc0:	97 95       	ror	r25
 dc2:	87 95       	ror	r24
 dc4:	77 95       	ror	r23
 dc6:	67 95       	ror	r22
 dc8:	ba 95       	dec	r27
 dca:	c9 f7       	brne	.-14     	; 0xdbe <__ultoa_invert+0x86>
 dcc:	00 97       	sbiw	r24, 0x00	; 0
 dce:	61 05       	cpc	r22, r1
 dd0:	71 05       	cpc	r23, r1
 dd2:	08 95       	ret
 dd4:	9b 01       	movw	r18, r22
 dd6:	ac 01       	movw	r20, r24
 dd8:	0a 2e       	mov	r0, r26
 dda:	06 94       	lsr	r0
 ddc:	57 95       	ror	r21
 dde:	47 95       	ror	r20
 de0:	37 95       	ror	r19
 de2:	27 95       	ror	r18
 de4:	ba 95       	dec	r27
 de6:	c9 f7       	brne	.-14     	; 0xdda <__ultoa_invert+0xa2>
 de8:	62 0f       	add	r22, r18
 dea:	73 1f       	adc	r23, r19
 dec:	84 1f       	adc	r24, r20
 dee:	95 1f       	adc	r25, r21
 df0:	a0 1d       	adc	r26, r0
 df2:	08 95       	ret

00000df4 <__prologue_saves__>:
 df4:	2f 92       	push	r2
 df6:	3f 92       	push	r3
 df8:	4f 92       	push	r4
 dfa:	5f 92       	push	r5
 dfc:	6f 92       	push	r6
 dfe:	7f 92       	push	r7
 e00:	8f 92       	push	r8
 e02:	9f 92       	push	r9
 e04:	af 92       	push	r10
 e06:	bf 92       	push	r11
 e08:	cf 92       	push	r12
 e0a:	df 92       	push	r13
 e0c:	ef 92       	push	r14
 e0e:	ff 92       	push	r15
 e10:	0f 93       	push	r16
 e12:	1f 93       	push	r17
 e14:	cf 93       	push	r28
 e16:	df 93       	push	r29
 e18:	cd b7       	in	r28, 0x3d	; 61
 e1a:	de b7       	in	r29, 0x3e	; 62
 e1c:	ca 1b       	sub	r28, r26
 e1e:	db 0b       	sbc	r29, r27
 e20:	0f b6       	in	r0, 0x3f	; 63
 e22:	f8 94       	cli
 e24:	de bf       	out	0x3e, r29	; 62
 e26:	0f be       	out	0x3f, r0	; 63
 e28:	cd bf       	out	0x3d, r28	; 61
 e2a:	09 94       	ijmp

00000e2c <__epilogue_restores__>:
 e2c:	2a 88       	ldd	r2, Y+18	; 0x12
 e2e:	39 88       	ldd	r3, Y+17	; 0x11
 e30:	48 88       	ldd	r4, Y+16	; 0x10
 e32:	5f 84       	ldd	r5, Y+15	; 0x0f
 e34:	6e 84       	ldd	r6, Y+14	; 0x0e
 e36:	7d 84       	ldd	r7, Y+13	; 0x0d
 e38:	8c 84       	ldd	r8, Y+12	; 0x0c
 e3a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e3c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e3e:	b9 84       	ldd	r11, Y+9	; 0x09
 e40:	c8 84       	ldd	r12, Y+8	; 0x08
 e42:	df 80       	ldd	r13, Y+7	; 0x07
 e44:	ee 80       	ldd	r14, Y+6	; 0x06
 e46:	fd 80       	ldd	r15, Y+5	; 0x05
 e48:	0c 81       	ldd	r16, Y+4	; 0x04
 e4a:	1b 81       	ldd	r17, Y+3	; 0x03
 e4c:	aa 81       	ldd	r26, Y+2	; 0x02
 e4e:	b9 81       	ldd	r27, Y+1	; 0x01
 e50:	ce 0f       	add	r28, r30
 e52:	d1 1d       	adc	r29, r1
 e54:	0f b6       	in	r0, 0x3f	; 63
 e56:	f8 94       	cli
 e58:	de bf       	out	0x3e, r29	; 62
 e5a:	0f be       	out	0x3f, r0	; 63
 e5c:	cd bf       	out	0x3d, r28	; 61
 e5e:	ed 01       	movw	r28, r26
 e60:	08 95       	ret

00000e62 <_exit>:
 e62:	f8 94       	cli

00000e64 <__stop_program>:
 e64:	ff cf       	rjmp	.-2      	; 0xe64 <__stop_program>
