
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008001fc  008001fc  00000fce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a5a  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e5e  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e0c  00000000  00000000  00003aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e8  00000000  00000000  000048d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000595  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a8a  00000000  00000000  00005255  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00005cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e3       	ldi	r30, 0x3E	; 62
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 3f       	cpi	r26, 0xFC	; 252
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ac ef       	ldi	r26, 0xFC	; 252
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ab 30       	cpi	r26, 0x0B	; 11
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 75 02 	call	0x4ea	; 0x4ea <main>
  a6:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:


int CAN_init()
{
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  ae:	40 e6       	ldi	r20, 0x60	; 96
  b0:	60 e6       	ldi	r22, 0x60	; 96
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  b8:	40 e6       	ldi	r20, 0x60	; 96
  ba:	60 e6       	ldi	r22, 0x60	; 96
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	64 e0       	ldi	r22, 0x04	; 4
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  cc:	44 e0       	ldi	r20, 0x04	; 4
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	60 ee       	ldi	r22, 0xE0	; 224
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
  e6:	80 7e       	andi	r24, 0xE0	; 224
  e8:	39 f0       	breq	.+14     	; 0xf8 <CAN_init+0x4a>
		printf("MCP2515 is NOT in normal mode after CAN init\n");
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 f7 02 	call	0x5ee	; 0x5ee <puts>
		return 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret
	}
	
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	8b e2       	ldi	r24, 0x2B	; 43
  fc:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (1 << ISC01) | (0 << ISC00);
 100:	85 b7       	in	r24, 0x35	; 53
 102:	82 60       	ori	r24, 0x02	; 2
 104:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
 106:	8b b7       	in	r24, 0x3b	; 59
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	8b bf       	out	0x3b, r24	; 59
	// Falling edge of INT2 generates interrupt request
	EICRA |= (1 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
}
 110:	08 95       	ret

00000112 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
 120:	fc 01       	movw	r30, r24
 122:	60 81       	ld	r22, Z
 124:	71 81       	ldd	r23, Z+1	; 0x01
 126:	76 95       	lsr	r23
 128:	67 95       	ror	r22
 12a:	76 95       	lsr	r23
 12c:	67 95       	ror	r22
 12e:	76 95       	lsr	r23
 130:	67 95       	ror	r22
 132:	81 e3       	ldi	r24, 0x31	; 49
 134:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
 138:	f7 01       	movw	r30, r14
 13a:	60 81       	ld	r22, Z
 13c:	62 95       	swap	r22
 13e:	66 0f       	add	r22, r22
 140:	60 7e       	andi	r22, 0xE0	; 224
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	84 e3       	ldi	r24, 0x34	; 52
 154:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
 158:	f7 01       	movw	r30, r14
 15a:	62 81       	ldd	r22, Z+2	; 0x02
 15c:	85 e3       	ldi	r24, 0x35	; 53
 15e:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
 162:	f7 01       	movw	r30, r14
 164:	82 81       	ldd	r24, Z+2	; 0x02
 166:	88 23       	and	r24, r24
 168:	99 f0       	breq	.+38     	; 0x190 <CAN_msg_send+0x7e>
 16a:	87 01       	movw	r16, r14
 16c:	0d 5f       	subi	r16, 0xFD	; 253
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
 174:	f8 01       	movw	r30, r16
 176:	61 91       	ld	r22, Z+
 178:	8f 01       	movw	r16, r30
 17a:	8c 2f       	mov	r24, r28
 17c:	8a 5c       	subi	r24, 0xCA	; 202
 17e:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	f7 01       	movw	r30, r14
 186:	22 81       	ldd	r18, Z+2	; 0x02
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	c2 17       	cp	r28, r18
 18c:	d3 07       	cpc	r29, r19
 18e:	94 f3       	brlt	.-28     	; 0x174 <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
 190:	81 e8       	ldi	r24, 0x81	; 129
 192:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP_request_to_send>
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>

	if (interrupt & MCP_RX0IF){
 1cc:	80 ff       	sbrs	r24, 0
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__vector_1+0x3e>
		interrupt_flag = RX0;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 fc 01 	sts	0x01FC, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	8c e2       	ldi	r24, 0x2C	; 44
 1dc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
 1e2:	81 ff       	sbrs	r24, 1
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <__vector_1+0x52>
		interrupt_flag = RX1;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 fc 01 	sts	0x01FC, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	}
	
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
 220:	80 ec       	ldi	r24, 0xC0	; 192
 222:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	82 e4       	ldi	r24, 0x42	; 66
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <MCP_reset+0x10>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <MCP_reset+0x16>
	_delay_us(200);
	SPI_set_ss(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
 236:	08 95       	ret

00000238 <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	//printf("hello from MCP read 1\n");
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	//printf("hello from MCP read 2\n");
	// Send 8-bit address
	SPI_transmit_receive(address);
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	//printf("hello from MCP read 3\n");
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
 256:	c8 2f       	mov	r28, r24
	//printf("hello from MCP read 4\n");
	SPI_set_ss(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	return received;
}
 260:	8c 2f       	mov	r24, r28
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <MCP_init>:

uint8_t MCP_init( void )
{
	//SPI_init();
	//printf("hello from MCP init 1\n");
	MCP_reset();
 266:	0e 94 0c 01 	call	0x218	; 0x218 <MCP_reset>
	//printf("hello from MCP init 2\n");
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 26a:	8e e0       	ldi	r24, 0x0E	; 14
 26c:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>
	//printf("hello from MCP init 3\n");
	
	if ((value & MODE_MASK) != MODE_CONFIG){
 270:	80 7e       	andi	r24, 0xE0	; 224
 272:	80 38       	cpi	r24, 0x80	; 128
 274:	31 f0       	breq	.+12     	; 0x282 <MCP_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset\n");
 276:	89 e7       	ldi	r24, 0x79	; 121
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <puts>
		return 1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
	}
	//printf("hello from MCP init 4\n");
	return 0;
 282:	80 e0       	ldi	r24, 0x00	; 0
}
 284:	08 95       	ret

00000286 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	d8 2f       	mov	r29, r24
 28c:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(address);
 29c:	8d 2f       	mov	r24, r29
 29e:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(data);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
 2b6:	cf 93       	push	r28
 2b8:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_set_ss(1); //(?)
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
}
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	18 2f       	mov	r17, r24
 2dc:	d6 2f       	mov	r29, r22
 2de:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 2f4:	8d 2f       	mov	r24, r29
 2f6:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(data);
 2fa:	8c 2f       	mov	r24, r28
 2fc:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	
	SPI_set_ss(1);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
 310:	87 b3       	in	r24, 0x17	; 23
 312:	80 6b       	ori	r24, 0xB0	; 176
 314:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
 316:	81 e1       	ldi	r24, 0x11	; 17
 318:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
 31a:	6e 9a       	sbi	0x0d, 6	; 13
 31c:	08 95       	ret

0000031e <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 31e:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
 320:	77 9b       	sbis	0x0e, 7	; 14
 322:	fe cf       	rjmp	.-4      	; 0x320 <SPI_transmit_receive+0x2>
 324:	82 e4       	ldi	r24, 0x42	; 66
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <SPI_transmit_receive+0x8>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <SPI_transmit_receive+0xe>
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
 32c:	8f b1       	in	r24, 0x0f	; 15
	
}
 32e:	08 95       	ret

00000330 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	91 05       	cpc	r25, r1
 334:	11 f4       	brne	.+4      	; 0x33a <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
 336:	c4 9a       	sbi	0x18, 4	; 24
 338:	08 95       	ret
	}
	else if (val == 0){
 33a:	89 2b       	or	r24, r25
 33c:	09 f4       	brne	.+2      	; 0x340 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
 33e:	c4 98       	cbi	0x18, 4	; 24
 340:	08 95       	ret

00000342 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 342:	5d 9b       	sbis	0x0b, 5	; 11
 344:	fe cf       	rjmp	.-4      	; 0x342 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 346:	8c b9       	out	0x0c, r24	; 12
 348:	08 95       	ret

0000034a <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
 34a:	5f 9b       	sbis	0x0b, 7	; 11
 34c:	fe cf       	rjmp	.-4      	; 0x34a <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
 34e:	8c b1       	in	r24, 0x0c	; 12
 350:	08 95       	ret

00000352 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 352:	20 b5       	in	r18, 0x20	; 32
 354:	92 2b       	or	r25, r18
 356:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
 358:	99 b1       	in	r25, 0x09	; 9
 35a:	89 2b       	or	r24, r25
 35c:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 35e:	8a b1       	in	r24, 0x0a	; 10
 360:	88 61       	ori	r24, 0x18	; 24
 362:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 364:	80 b5       	in	r24, 0x20	; 32
 366:	8e 68       	ori	r24, 0x8E	; 142
 368:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 36a:	65 ea       	ldi	r22, 0xA5	; 165
 36c:	71 e0       	ldi	r23, 0x01	; 1
 36e:	81 ea       	ldi	r24, 0xA1	; 161
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 98 02 	call	0x530	; 0x530 <fdevopen>
 376:	08 95       	ret

00000378 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	set_bit(MCUCR, SRE);
 378:	85 b7       	in	r24, 0x35	; 53
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 37e:	80 b7       	in	r24, 0x30	; 48
 380:	80 62       	ori	r24, 0x20	; 32
 382:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	clear_bit(DDRD, PD3);
 384:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	08 95       	ret

0000038c <ADC_read>:

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
 38c:	84 30       	cpi	r24, 0x04	; 4
 38e:	70 f4       	brcc	.+28     	; 0x3ac <ADC_read+0x20>
	*ext_adc = 0x04 | channel; // bitwise OR
 390:	84 60       	ori	r24, 0x04	; 4
 392:	80 93 00 14 	sts	0x1400, r24
	
	// wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
 396:	83 99       	sbic	0x10, 3	; 16
 398:	fe cf       	rjmp	.-4      	; 0x396 <ADC_read+0xa>
 39a:	85 ef       	ldi	r24, 0xF5	; 245
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <ADC_read+0x12>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <ADC_read+0x18>
 3a4:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
 3a6:	80 91 00 14 	lds	r24, 0x1400
 3aa:	08 95       	ret

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
 3ac:	80 e0       	ldi	r24, 0x00	; 0
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
	
}
 3ae:	08 95       	ret

000003b0 <SEND2CAN_send_joy_pos_x>:
#include "touch_panel.h"
#include "../../../communication_drivers/can.h"
#include <stdlib.h>

void SEND2CAN_send_joy_pos_x()
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	2b 97       	sbiw	r28, 0x0b	; 11
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
	JOY_position_t pos = JOY_read_adc();
 3c4:	0e 94 35 02 	call	0x46a	; 0x46a <JOY_read_adc>
	can_msg msg;
	msg.id = ATmega162_ID;
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	3a 83       	std	Y+2, r19	; 0x02
 3ce:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_JOY_POS_X;
 3d0:	1c 82       	std	Y+4, r1	; 0x04
	msg.data[1] = pos.x;
 3d2:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	0e 94 89 00 	call	0x112	; 0x112 <CAN_msg_send>
	printf("\n\nSent joystick position (x): (%d) \n",msg.data[1]);
 3e0:	8d 81       	ldd	r24, Y+5	; 0x05
 3e2:	1f 92       	push	r1
 3e4:	8f 93       	push	r24
 3e6:	8a ea       	ldi	r24, 0xAA	; 170
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	9f 93       	push	r25
 3ec:	8f 93       	push	r24
 3ee:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <printf>
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
}
 3fa:	2b 96       	adiw	r28, 0x0b	; 11
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <SEND2CAN_send_slider_pos>:

void SEND2CAN_send_slider_pos()
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	2b 97       	sbiw	r28, 0x0b	; 11
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
	TOUCH_slider_pos_t pos = TOUCH_get_slider_position();
 420:	0e 94 72 02 	call	0x4e4	; 0x4e4 <TOUCH_get_slider_position>
	
	can_msg msg;
	msg.id = ATmega162_ID;
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	3a 83       	std	Y+2, r19	; 0x02
 42a:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_SLIDER_POS_R;
 42c:	93 e0       	ldi	r25, 0x03	; 3
 42e:	9c 83       	std	Y+4, r25	; 0x04
	msg.data[1] = pos.right_slider;
 430:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	0e 94 89 00 	call	0x112	; 0x112 <CAN_msg_send>
	printf("\n\nSent slider position: (%d) \n",msg.data[1]);
 43e:	8d 81       	ldd	r24, Y+5	; 0x05
 440:	1f 92       	push	r1
 442:	8f 93       	push	r24
 444:	8f ec       	ldi	r24, 0xCF	; 207
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	9f 93       	push	r25
 44a:	8f 93       	push	r24
 44c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <printf>
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	2b 96       	adiw	r28, 0x0b	; 11
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <JOY_read_adc>:

int JOY_button(){
	return !(test_bit(PINB, PINB0));
}

JOY_position_t JOY_read_adc( void ){
 46a:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 472:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 474:	8c ec       	ldi	r24, 0xCC	; 204
 476:	94 e0       	ldi	r25, 0x04	; 4
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <JOY_read_adc+0xe>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <JOY_read_adc+0x14>
 47e:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 486:	28 2f       	mov	r18, r24
	
	return pos;
 488:	6c 2f       	mov	r22, r28
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	82 2f       	mov	r24, r18
 48e:	90 e0       	ldi	r25, 0x00	; 0
}
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <JOY_calibrate>:
	set_bit(PORTB, PB0);
	
}

void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
 494:	0e 94 35 02 	call	0x46a	; 0x46a <JOY_read_adc>
 498:	60 93 fd 01 	sts	0x01FD, r22
 49c:	70 93 fe 01 	sts	0x01FE, r23
 4a0:	80 93 ff 01 	sts	0x01FF, r24
 4a4:	90 93 00 02 	sts	0x0200, r25
 4a8:	08 95       	ret

000004aa <JOY_init>:

JOY_position_t neutral_pos; 


void JOY_init( void ){
	JOY_calibrate();
 4aa:	0e 94 4a 02 	call	0x494	; 0x494 <JOY_calibrate>
	
	// Initialize PORT B, pin 0 (joystick button) as input
	clear_bit(DDRB, PINB0);
 4ae:	b8 98       	cbi	0x17, 0	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB0);
 4b0:	c0 9a       	sbi	0x18, 0	; 24
 4b2:	08 95       	ret

000004b4 <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 0, 1 and 2 as input
	clear_bit(DDRB, PINB1);
 4b4:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
 4b6:	ba 98       	cbi	0x17, 2	; 23
 4b8:	08 95       	ret

000004ba <TOUCH_read_adc>:
		return 0;
	}
	return 0;
}

TOUCH_slider_pos_t TOUCH_read_adc( void ){
 4ba:	cf 93       	push	r28
	TOUCH_slider_pos_t pos;
	pos.left_slider = ADC_read(LEFT_SLIDER_CHANNEL);
 4bc:	83 e0       	ldi	r24, 0x03	; 3
 4be:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 4c2:	c8 2f       	mov	r28, r24
 4c4:	8c ec       	ldi	r24, 0xCC	; 204
 4c6:	94 e0       	ldi	r25, 0x04	; 4
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <TOUCH_read_adc+0xe>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <TOUCH_read_adc+0x14>
 4ce:	00 00       	nop
	_delay_ms(1);
	pos.right_slider = ADC_read(RIGHT_SLIDER_CHANNEL);
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 4d6:	28 2f       	mov	r18, r24
	
	return pos;
 4d8:	6c 2f       	mov	r22, r28
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	82 2f       	mov	r24, r18
 4de:	90 e0       	ldi	r25, 0x00	; 0
}
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <TOUCH_get_slider_position>:

TOUCH_slider_pos_t TOUCH_get_slider_position(){
	TOUCH_slider_pos_t current_pos = TOUCH_read_adc();
 4e4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <TOUCH_read_adc>
	return current_pos;
 4e8:	08 95       	ret

000004ea <main>:
#include <util/delay.h>
//#include <stdio.h>
#include <avr/interrupt.h>

int main( void ){
	cli();
 4ea:	f8 94       	cli
	// Initializations 
	UART_Init( MYUBRR );
 4ec:	8f e1       	ldi	r24, 0x1F	; 31
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 a9 01 	call	0x352	; 0x352 <UART_Init>
	ADC_init();
 4f4:	0e 94 bc 01 	call	0x378	; 0x378 <ADC_init>
	
	JOY_init();
 4f8:	0e 94 55 02 	call	0x4aa	; 0x4aa <JOY_init>
	TOUCH_init();
 4fc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TOUCH_init>
	//OLED_init();
	//MENU_init();
	
	SPI_init();
 500:	0e 94 88 01 	call	0x310	; 0x310 <SPI_init>
	MCP_init();
 504:	0e 94 33 01 	call	0x266	; 0x266 <MCP_init>
	CAN_init();
 508:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	printf("\n\n\nInit done\n");
 50c:	8e ee       	ldi	r24, 0xEE	; 238
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 f7 02 	call	0x5ee	; 0x5ee <puts>
	sei();
 514:	78 94       	sei
		//printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
		//printf("\n\nSent message: %s \n", send.data);
		//printf("Sent id: %d \n", send.id);
		//printf("Sent length: %d \n", send.length);
		
		SEND2CAN_send_joy_pos_x();
 516:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <SEND2CAN_send_joy_pos_x>
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 ef       	ldi	r25, 0xF0	; 240
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <__stack+0x1f>
		_delay_ms(50);
		SEND2CAN_send_slider_pos();
 522:	0e 94 06 02 	call	0x40c	; 0x40c <SEND2CAN_send_slider_pos>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 ef       	ldi	r25, 0xF0	; 240
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <__stack+0x2b>
 52e:	f3 cf       	rjmp	.-26     	; 0x516 <__stack+0x17>

00000530 <fdevopen>:
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
 53a:	8b 01       	movw	r16, r22
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	31 f4       	brne	.+12     	; 0x54c <fdevopen+0x1c>
 540:	61 15       	cp	r22, r1
 542:	71 05       	cpc	r23, r1
 544:	19 f4       	brne	.+6      	; 0x54c <fdevopen+0x1c>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	38 c0       	rjmp	.+112    	; 0x5bc <fdevopen+0x8c>
 54c:	6e e0       	ldi	r22, 0x0E	; 14
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 f6 04 	call	0x9ec	; 0x9ec <calloc>
 558:	fc 01       	movw	r30, r24
 55a:	00 97       	sbiw	r24, 0x00	; 0
 55c:	a1 f3       	breq	.-24     	; 0x546 <fdevopen+0x16>
 55e:	80 e8       	ldi	r24, 0x80	; 128
 560:	83 83       	std	Z+3, r24	; 0x03
 562:	01 15       	cp	r16, r1
 564:	11 05       	cpc	r17, r1
 566:	71 f0       	breq	.+28     	; 0x584 <fdevopen+0x54>
 568:	13 87       	std	Z+11, r17	; 0x0b
 56a:	02 87       	std	Z+10, r16	; 0x0a
 56c:	81 e8       	ldi	r24, 0x81	; 129
 56e:	83 83       	std	Z+3, r24	; 0x03
 570:	80 91 01 02 	lds	r24, 0x0201
 574:	90 91 02 02 	lds	r25, 0x0202
 578:	89 2b       	or	r24, r25
 57a:	21 f4       	brne	.+8      	; 0x584 <fdevopen+0x54>
 57c:	f0 93 02 02 	sts	0x0202, r31
 580:	e0 93 01 02 	sts	0x0201, r30
 584:	20 97       	sbiw	r28, 0x00	; 0
 586:	c9 f0       	breq	.+50     	; 0x5ba <fdevopen+0x8a>
 588:	d1 87       	std	Z+9, r29	; 0x09
 58a:	c0 87       	std	Z+8, r28	; 0x08
 58c:	83 81       	ldd	r24, Z+3	; 0x03
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	83 83       	std	Z+3, r24	; 0x03
 592:	80 91 03 02 	lds	r24, 0x0203
 596:	90 91 04 02 	lds	r25, 0x0204
 59a:	89 2b       	or	r24, r25
 59c:	71 f4       	brne	.+28     	; 0x5ba <fdevopen+0x8a>
 59e:	f0 93 04 02 	sts	0x0204, r31
 5a2:	e0 93 03 02 	sts	0x0203, r30
 5a6:	80 91 05 02 	lds	r24, 0x0205
 5aa:	90 91 06 02 	lds	r25, 0x0206
 5ae:	89 2b       	or	r24, r25
 5b0:	21 f4       	brne	.+8      	; 0x5ba <fdevopen+0x8a>
 5b2:	f0 93 06 02 	sts	0x0206, r31
 5b6:	e0 93 05 02 	sts	0x0205, r30
 5ba:	cf 01       	movw	r24, r30
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <printf>:
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	e9 ee       	ldi	r30, 0xE9	; 233
 5cc:	f2 e0       	ldi	r31, 0x02	; 2
 5ce:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__prologue_saves__+0x20>
 5d2:	fe 01       	movw	r30, r28
 5d4:	35 96       	adiw	r30, 0x05	; 5
 5d6:	61 91       	ld	r22, Z+
 5d8:	71 91       	ld	r23, Z+
 5da:	af 01       	movw	r20, r30
 5dc:	80 91 03 02 	lds	r24, 0x0203
 5e0:	90 91 04 02 	lds	r25, 0x0204
 5e4:	0e 94 24 03 	call	0x648	; 0x648 <vfprintf>
 5e8:	e2 e0       	ldi	r30, 0x02	; 2
 5ea:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__epilogue_restores__+0x20>

000005ee <puts>:
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	e0 91 03 02 	lds	r30, 0x0203
 5fa:	f0 91 04 02 	lds	r31, 0x0204
 5fe:	23 81       	ldd	r18, Z+3	; 0x03
 600:	21 ff       	sbrs	r18, 1
 602:	1b c0       	rjmp	.+54     	; 0x63a <puts+0x4c>
 604:	ec 01       	movw	r28, r24
 606:	00 e0       	ldi	r16, 0x00	; 0
 608:	10 e0       	ldi	r17, 0x00	; 0
 60a:	89 91       	ld	r24, Y+
 60c:	60 91 03 02 	lds	r22, 0x0203
 610:	70 91 04 02 	lds	r23, 0x0204
 614:	db 01       	movw	r26, r22
 616:	18 96       	adiw	r26, 0x08	; 8
 618:	ed 91       	ld	r30, X+
 61a:	fc 91       	ld	r31, X
 61c:	19 97       	sbiw	r26, 0x09	; 9
 61e:	88 23       	and	r24, r24
 620:	31 f0       	breq	.+12     	; 0x62e <puts+0x40>
 622:	09 95       	icall
 624:	89 2b       	or	r24, r25
 626:	89 f3       	breq	.-30     	; 0x60a <puts+0x1c>
 628:	0f ef       	ldi	r16, 0xFF	; 255
 62a:	1f ef       	ldi	r17, 0xFF	; 255
 62c:	ee cf       	rjmp	.-36     	; 0x60a <puts+0x1c>
 62e:	8a e0       	ldi	r24, 0x0A	; 10
 630:	09 95       	icall
 632:	89 2b       	or	r24, r25
 634:	11 f4       	brne	.+4      	; 0x63a <puts+0x4c>
 636:	c8 01       	movw	r24, r16
 638:	02 c0       	rjmp	.+4      	; 0x63e <puts+0x50>
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	9f ef       	ldi	r25, 0xFF	; 255
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	08 95       	ret

00000648 <vfprintf>:
 648:	ac e0       	ldi	r26, 0x0C	; 12
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	ea e2       	ldi	r30, 0x2A	; 42
 64e:	f3 e0       	ldi	r31, 0x03	; 3
 650:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__prologue_saves__>
 654:	7c 01       	movw	r14, r24
 656:	6b 01       	movw	r12, r22
 658:	8a 01       	movw	r16, r20
 65a:	fc 01       	movw	r30, r24
 65c:	17 82       	std	Z+7, r1	; 0x07
 65e:	16 82       	std	Z+6, r1	; 0x06
 660:	83 81       	ldd	r24, Z+3	; 0x03
 662:	81 ff       	sbrs	r24, 1
 664:	bd c1       	rjmp	.+890    	; 0x9e0 <vfprintf+0x398>
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	4c 01       	movw	r8, r24
 66c:	f7 01       	movw	r30, r14
 66e:	93 81       	ldd	r25, Z+3	; 0x03
 670:	f6 01       	movw	r30, r12
 672:	93 fd       	sbrc	r25, 3
 674:	85 91       	lpm	r24, Z+
 676:	93 ff       	sbrs	r25, 3
 678:	81 91       	ld	r24, Z+
 67a:	6f 01       	movw	r12, r30
 67c:	88 23       	and	r24, r24
 67e:	09 f4       	brne	.+2      	; 0x682 <vfprintf+0x3a>
 680:	ab c1       	rjmp	.+854    	; 0x9d8 <vfprintf+0x390>
 682:	85 32       	cpi	r24, 0x25	; 37
 684:	39 f4       	brne	.+14     	; 0x694 <vfprintf+0x4c>
 686:	93 fd       	sbrc	r25, 3
 688:	85 91       	lpm	r24, Z+
 68a:	93 ff       	sbrs	r25, 3
 68c:	81 91       	ld	r24, Z+
 68e:	6f 01       	movw	r12, r30
 690:	85 32       	cpi	r24, 0x25	; 37
 692:	29 f4       	brne	.+10     	; 0x69e <vfprintf+0x56>
 694:	b7 01       	movw	r22, r14
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 69c:	e7 cf       	rjmp	.-50     	; 0x66c <vfprintf+0x24>
 69e:	51 2c       	mov	r5, r1
 6a0:	31 2c       	mov	r3, r1
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	20 32       	cpi	r18, 0x20	; 32
 6a6:	a0 f4       	brcc	.+40     	; 0x6d0 <vfprintf+0x88>
 6a8:	8b 32       	cpi	r24, 0x2B	; 43
 6aa:	69 f0       	breq	.+26     	; 0x6c6 <vfprintf+0x7e>
 6ac:	30 f4       	brcc	.+12     	; 0x6ba <vfprintf+0x72>
 6ae:	80 32       	cpi	r24, 0x20	; 32
 6b0:	59 f0       	breq	.+22     	; 0x6c8 <vfprintf+0x80>
 6b2:	83 32       	cpi	r24, 0x23	; 35
 6b4:	69 f4       	brne	.+26     	; 0x6d0 <vfprintf+0x88>
 6b6:	20 61       	ori	r18, 0x10	; 16
 6b8:	2c c0       	rjmp	.+88     	; 0x712 <vfprintf+0xca>
 6ba:	8d 32       	cpi	r24, 0x2D	; 45
 6bc:	39 f0       	breq	.+14     	; 0x6cc <vfprintf+0x84>
 6be:	80 33       	cpi	r24, 0x30	; 48
 6c0:	39 f4       	brne	.+14     	; 0x6d0 <vfprintf+0x88>
 6c2:	21 60       	ori	r18, 0x01	; 1
 6c4:	26 c0       	rjmp	.+76     	; 0x712 <vfprintf+0xca>
 6c6:	22 60       	ori	r18, 0x02	; 2
 6c8:	24 60       	ori	r18, 0x04	; 4
 6ca:	23 c0       	rjmp	.+70     	; 0x712 <vfprintf+0xca>
 6cc:	28 60       	ori	r18, 0x08	; 8
 6ce:	21 c0       	rjmp	.+66     	; 0x712 <vfprintf+0xca>
 6d0:	27 fd       	sbrc	r18, 7
 6d2:	27 c0       	rjmp	.+78     	; 0x722 <vfprintf+0xda>
 6d4:	30 ed       	ldi	r19, 0xD0	; 208
 6d6:	38 0f       	add	r19, r24
 6d8:	3a 30       	cpi	r19, 0x0A	; 10
 6da:	78 f4       	brcc	.+30     	; 0x6fa <vfprintf+0xb2>
 6dc:	26 ff       	sbrs	r18, 6
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <vfprintf+0xa4>
 6e0:	fa e0       	ldi	r31, 0x0A	; 10
 6e2:	5f 9e       	mul	r5, r31
 6e4:	30 0d       	add	r19, r0
 6e6:	11 24       	eor	r1, r1
 6e8:	53 2e       	mov	r5, r19
 6ea:	13 c0       	rjmp	.+38     	; 0x712 <vfprintf+0xca>
 6ec:	8a e0       	ldi	r24, 0x0A	; 10
 6ee:	38 9e       	mul	r3, r24
 6f0:	30 0d       	add	r19, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	33 2e       	mov	r3, r19
 6f6:	20 62       	ori	r18, 0x20	; 32
 6f8:	0c c0       	rjmp	.+24     	; 0x712 <vfprintf+0xca>
 6fa:	8e 32       	cpi	r24, 0x2E	; 46
 6fc:	21 f4       	brne	.+8      	; 0x706 <vfprintf+0xbe>
 6fe:	26 fd       	sbrc	r18, 6
 700:	6b c1       	rjmp	.+726    	; 0x9d8 <vfprintf+0x390>
 702:	20 64       	ori	r18, 0x40	; 64
 704:	06 c0       	rjmp	.+12     	; 0x712 <vfprintf+0xca>
 706:	8c 36       	cpi	r24, 0x6C	; 108
 708:	11 f4       	brne	.+4      	; 0x70e <vfprintf+0xc6>
 70a:	20 68       	ori	r18, 0x80	; 128
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0xca>
 70e:	88 36       	cpi	r24, 0x68	; 104
 710:	41 f4       	brne	.+16     	; 0x722 <vfprintf+0xda>
 712:	f6 01       	movw	r30, r12
 714:	93 fd       	sbrc	r25, 3
 716:	85 91       	lpm	r24, Z+
 718:	93 ff       	sbrs	r25, 3
 71a:	81 91       	ld	r24, Z+
 71c:	6f 01       	movw	r12, r30
 71e:	81 11       	cpse	r24, r1
 720:	c1 cf       	rjmp	.-126    	; 0x6a4 <vfprintf+0x5c>
 722:	98 2f       	mov	r25, r24
 724:	9f 7d       	andi	r25, 0xDF	; 223
 726:	95 54       	subi	r25, 0x45	; 69
 728:	93 30       	cpi	r25, 0x03	; 3
 72a:	28 f4       	brcc	.+10     	; 0x736 <vfprintf+0xee>
 72c:	0c 5f       	subi	r16, 0xFC	; 252
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	ff e3       	ldi	r31, 0x3F	; 63
 732:	f9 83       	std	Y+1, r31	; 0x01
 734:	0d c0       	rjmp	.+26     	; 0x750 <vfprintf+0x108>
 736:	83 36       	cpi	r24, 0x63	; 99
 738:	31 f0       	breq	.+12     	; 0x746 <vfprintf+0xfe>
 73a:	83 37       	cpi	r24, 0x73	; 115
 73c:	71 f0       	breq	.+28     	; 0x75a <vfprintf+0x112>
 73e:	83 35       	cpi	r24, 0x53	; 83
 740:	09 f0       	breq	.+2      	; 0x744 <vfprintf+0xfc>
 742:	5b c0       	rjmp	.+182    	; 0x7fa <vfprintf+0x1b2>
 744:	22 c0       	rjmp	.+68     	; 0x78a <vfprintf+0x142>
 746:	f8 01       	movw	r30, r16
 748:	80 81       	ld	r24, Z
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	0e 5f       	subi	r16, 0xFE	; 254
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	44 24       	eor	r4, r4
 752:	43 94       	inc	r4
 754:	51 2c       	mov	r5, r1
 756:	54 01       	movw	r10, r8
 758:	15 c0       	rjmp	.+42     	; 0x784 <vfprintf+0x13c>
 75a:	38 01       	movw	r6, r16
 75c:	f2 e0       	ldi	r31, 0x02	; 2
 75e:	6f 0e       	add	r6, r31
 760:	71 1c       	adc	r7, r1
 762:	f8 01       	movw	r30, r16
 764:	a0 80       	ld	r10, Z
 766:	b1 80       	ldd	r11, Z+1	; 0x01
 768:	26 ff       	sbrs	r18, 6
 76a:	03 c0       	rjmp	.+6      	; 0x772 <vfprintf+0x12a>
 76c:	65 2d       	mov	r22, r5
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x12e>
 772:	6f ef       	ldi	r22, 0xFF	; 255
 774:	7f ef       	ldi	r23, 0xFF	; 255
 776:	c5 01       	movw	r24, r10
 778:	2c 87       	std	Y+12, r18	; 0x0c
 77a:	0e 94 4b 06 	call	0xc96	; 0xc96 <strnlen>
 77e:	2c 01       	movw	r4, r24
 780:	83 01       	movw	r16, r6
 782:	2c 85       	ldd	r18, Y+12	; 0x0c
 784:	2f 77       	andi	r18, 0x7F	; 127
 786:	22 2e       	mov	r2, r18
 788:	17 c0       	rjmp	.+46     	; 0x7b8 <vfprintf+0x170>
 78a:	38 01       	movw	r6, r16
 78c:	f2 e0       	ldi	r31, 0x02	; 2
 78e:	6f 0e       	add	r6, r31
 790:	71 1c       	adc	r7, r1
 792:	f8 01       	movw	r30, r16
 794:	a0 80       	ld	r10, Z
 796:	b1 80       	ldd	r11, Z+1	; 0x01
 798:	26 ff       	sbrs	r18, 6
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x15a>
 79c:	65 2d       	mov	r22, r5
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0x15e>
 7a2:	6f ef       	ldi	r22, 0xFF	; 255
 7a4:	7f ef       	ldi	r23, 0xFF	; 255
 7a6:	c5 01       	movw	r24, r10
 7a8:	2c 87       	std	Y+12, r18	; 0x0c
 7aa:	0e 94 39 06 	call	0xc72	; 0xc72 <strnlen_P>
 7ae:	2c 01       	movw	r4, r24
 7b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7b2:	20 68       	ori	r18, 0x80	; 128
 7b4:	22 2e       	mov	r2, r18
 7b6:	83 01       	movw	r16, r6
 7b8:	23 fc       	sbrc	r2, 3
 7ba:	1b c0       	rjmp	.+54     	; 0x7f2 <vfprintf+0x1aa>
 7bc:	83 2d       	mov	r24, r3
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	48 16       	cp	r4, r24
 7c2:	59 06       	cpc	r5, r25
 7c4:	b0 f4       	brcc	.+44     	; 0x7f2 <vfprintf+0x1aa>
 7c6:	b7 01       	movw	r22, r14
 7c8:	80 e2       	ldi	r24, 0x20	; 32
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 7d0:	3a 94       	dec	r3
 7d2:	f4 cf       	rjmp	.-24     	; 0x7bc <vfprintf+0x174>
 7d4:	f5 01       	movw	r30, r10
 7d6:	27 fc       	sbrc	r2, 7
 7d8:	85 91       	lpm	r24, Z+
 7da:	27 fe       	sbrs	r2, 7
 7dc:	81 91       	ld	r24, Z+
 7de:	5f 01       	movw	r10, r30
 7e0:	b7 01       	movw	r22, r14
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 7e8:	31 10       	cpse	r3, r1
 7ea:	3a 94       	dec	r3
 7ec:	f1 e0       	ldi	r31, 0x01	; 1
 7ee:	4f 1a       	sub	r4, r31
 7f0:	51 08       	sbc	r5, r1
 7f2:	41 14       	cp	r4, r1
 7f4:	51 04       	cpc	r5, r1
 7f6:	71 f7       	brne	.-36     	; 0x7d4 <vfprintf+0x18c>
 7f8:	e5 c0       	rjmp	.+458    	; 0x9c4 <vfprintf+0x37c>
 7fa:	84 36       	cpi	r24, 0x64	; 100
 7fc:	11 f0       	breq	.+4      	; 0x802 <vfprintf+0x1ba>
 7fe:	89 36       	cpi	r24, 0x69	; 105
 800:	39 f5       	brne	.+78     	; 0x850 <vfprintf+0x208>
 802:	f8 01       	movw	r30, r16
 804:	27 ff       	sbrs	r18, 7
 806:	07 c0       	rjmp	.+14     	; 0x816 <vfprintf+0x1ce>
 808:	60 81       	ld	r22, Z
 80a:	71 81       	ldd	r23, Z+1	; 0x01
 80c:	82 81       	ldd	r24, Z+2	; 0x02
 80e:	93 81       	ldd	r25, Z+3	; 0x03
 810:	0c 5f       	subi	r16, 0xFC	; 252
 812:	1f 4f       	sbci	r17, 0xFF	; 255
 814:	08 c0       	rjmp	.+16     	; 0x826 <vfprintf+0x1de>
 816:	60 81       	ld	r22, Z
 818:	71 81       	ldd	r23, Z+1	; 0x01
 81a:	88 27       	eor	r24, r24
 81c:	77 fd       	sbrc	r23, 7
 81e:	80 95       	com	r24
 820:	98 2f       	mov	r25, r24
 822:	0e 5f       	subi	r16, 0xFE	; 254
 824:	1f 4f       	sbci	r17, 0xFF	; 255
 826:	2f 76       	andi	r18, 0x6F	; 111
 828:	b2 2e       	mov	r11, r18
 82a:	97 ff       	sbrs	r25, 7
 82c:	09 c0       	rjmp	.+18     	; 0x840 <vfprintf+0x1f8>
 82e:	90 95       	com	r25
 830:	80 95       	com	r24
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	20 68       	ori	r18, 0x80	; 128
 83e:	b2 2e       	mov	r11, r18
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	a4 01       	movw	r20, r8
 846:	0e 94 88 06 	call	0xd10	; 0xd10 <__ultoa_invert>
 84a:	a8 2e       	mov	r10, r24
 84c:	a8 18       	sub	r10, r8
 84e:	44 c0       	rjmp	.+136    	; 0x8d8 <vfprintf+0x290>
 850:	85 37       	cpi	r24, 0x75	; 117
 852:	29 f4       	brne	.+10     	; 0x85e <vfprintf+0x216>
 854:	2f 7e       	andi	r18, 0xEF	; 239
 856:	b2 2e       	mov	r11, r18
 858:	2a e0       	ldi	r18, 0x0A	; 10
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	25 c0       	rjmp	.+74     	; 0x8a8 <vfprintf+0x260>
 85e:	f2 2f       	mov	r31, r18
 860:	f9 7f       	andi	r31, 0xF9	; 249
 862:	bf 2e       	mov	r11, r31
 864:	8f 36       	cpi	r24, 0x6F	; 111
 866:	c1 f0       	breq	.+48     	; 0x898 <vfprintf+0x250>
 868:	18 f4       	brcc	.+6      	; 0x870 <vfprintf+0x228>
 86a:	88 35       	cpi	r24, 0x58	; 88
 86c:	79 f0       	breq	.+30     	; 0x88c <vfprintf+0x244>
 86e:	b4 c0       	rjmp	.+360    	; 0x9d8 <vfprintf+0x390>
 870:	80 37       	cpi	r24, 0x70	; 112
 872:	19 f0       	breq	.+6      	; 0x87a <vfprintf+0x232>
 874:	88 37       	cpi	r24, 0x78	; 120
 876:	21 f0       	breq	.+8      	; 0x880 <vfprintf+0x238>
 878:	af c0       	rjmp	.+350    	; 0x9d8 <vfprintf+0x390>
 87a:	2f 2f       	mov	r18, r31
 87c:	20 61       	ori	r18, 0x10	; 16
 87e:	b2 2e       	mov	r11, r18
 880:	b4 fe       	sbrs	r11, 4
 882:	0d c0       	rjmp	.+26     	; 0x89e <vfprintf+0x256>
 884:	8b 2d       	mov	r24, r11
 886:	84 60       	ori	r24, 0x04	; 4
 888:	b8 2e       	mov	r11, r24
 88a:	09 c0       	rjmp	.+18     	; 0x89e <vfprintf+0x256>
 88c:	24 ff       	sbrs	r18, 4
 88e:	0a c0       	rjmp	.+20     	; 0x8a4 <vfprintf+0x25c>
 890:	9f 2f       	mov	r25, r31
 892:	96 60       	ori	r25, 0x06	; 6
 894:	b9 2e       	mov	r11, r25
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <vfprintf+0x25c>
 898:	28 e0       	ldi	r18, 0x08	; 8
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <vfprintf+0x260>
 89e:	20 e1       	ldi	r18, 0x10	; 16
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x260>
 8a4:	20 e1       	ldi	r18, 0x10	; 16
 8a6:	32 e0       	ldi	r19, 0x02	; 2
 8a8:	f8 01       	movw	r30, r16
 8aa:	b7 fe       	sbrs	r11, 7
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <vfprintf+0x274>
 8ae:	60 81       	ld	r22, Z
 8b0:	71 81       	ldd	r23, Z+1	; 0x01
 8b2:	82 81       	ldd	r24, Z+2	; 0x02
 8b4:	93 81       	ldd	r25, Z+3	; 0x03
 8b6:	0c 5f       	subi	r16, 0xFC	; 252
 8b8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x280>
 8bc:	60 81       	ld	r22, Z
 8be:	71 81       	ldd	r23, Z+1	; 0x01
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 5f       	subi	r16, 0xFE	; 254
 8c6:	1f 4f       	sbci	r17, 0xFF	; 255
 8c8:	a4 01       	movw	r20, r8
 8ca:	0e 94 88 06 	call	0xd10	; 0xd10 <__ultoa_invert>
 8ce:	a8 2e       	mov	r10, r24
 8d0:	a8 18       	sub	r10, r8
 8d2:	fb 2d       	mov	r31, r11
 8d4:	ff 77       	andi	r31, 0x7F	; 127
 8d6:	bf 2e       	mov	r11, r31
 8d8:	b6 fe       	sbrs	r11, 6
 8da:	0b c0       	rjmp	.+22     	; 0x8f2 <vfprintf+0x2aa>
 8dc:	2b 2d       	mov	r18, r11
 8de:	2e 7f       	andi	r18, 0xFE	; 254
 8e0:	a5 14       	cp	r10, r5
 8e2:	50 f4       	brcc	.+20     	; 0x8f8 <vfprintf+0x2b0>
 8e4:	b4 fe       	sbrs	r11, 4
 8e6:	0a c0       	rjmp	.+20     	; 0x8fc <vfprintf+0x2b4>
 8e8:	b2 fc       	sbrc	r11, 2
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <vfprintf+0x2b4>
 8ec:	2b 2d       	mov	r18, r11
 8ee:	2e 7e       	andi	r18, 0xEE	; 238
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <vfprintf+0x2b4>
 8f2:	7a 2c       	mov	r7, r10
 8f4:	2b 2d       	mov	r18, r11
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x2b6>
 8f8:	7a 2c       	mov	r7, r10
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <vfprintf+0x2b6>
 8fc:	75 2c       	mov	r7, r5
 8fe:	24 ff       	sbrs	r18, 4
 900:	0d c0       	rjmp	.+26     	; 0x91c <vfprintf+0x2d4>
 902:	fe 01       	movw	r30, r28
 904:	ea 0d       	add	r30, r10
 906:	f1 1d       	adc	r31, r1
 908:	80 81       	ld	r24, Z
 90a:	80 33       	cpi	r24, 0x30	; 48
 90c:	11 f4       	brne	.+4      	; 0x912 <vfprintf+0x2ca>
 90e:	29 7e       	andi	r18, 0xE9	; 233
 910:	09 c0       	rjmp	.+18     	; 0x924 <vfprintf+0x2dc>
 912:	22 ff       	sbrs	r18, 2
 914:	06 c0       	rjmp	.+12     	; 0x922 <vfprintf+0x2da>
 916:	73 94       	inc	r7
 918:	73 94       	inc	r7
 91a:	04 c0       	rjmp	.+8      	; 0x924 <vfprintf+0x2dc>
 91c:	82 2f       	mov	r24, r18
 91e:	86 78       	andi	r24, 0x86	; 134
 920:	09 f0       	breq	.+2      	; 0x924 <vfprintf+0x2dc>
 922:	73 94       	inc	r7
 924:	23 fd       	sbrc	r18, 3
 926:	13 c0       	rjmp	.+38     	; 0x94e <vfprintf+0x306>
 928:	20 ff       	sbrs	r18, 0
 92a:	06 c0       	rjmp	.+12     	; 0x938 <vfprintf+0x2f0>
 92c:	5a 2c       	mov	r5, r10
 92e:	73 14       	cp	r7, r3
 930:	18 f4       	brcc	.+6      	; 0x938 <vfprintf+0x2f0>
 932:	53 0c       	add	r5, r3
 934:	57 18       	sub	r5, r7
 936:	73 2c       	mov	r7, r3
 938:	73 14       	cp	r7, r3
 93a:	68 f4       	brcc	.+26     	; 0x956 <vfprintf+0x30e>
 93c:	b7 01       	movw	r22, r14
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	2c 87       	std	Y+12, r18	; 0x0c
 944:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 948:	73 94       	inc	r7
 94a:	2c 85       	ldd	r18, Y+12	; 0x0c
 94c:	f5 cf       	rjmp	.-22     	; 0x938 <vfprintf+0x2f0>
 94e:	73 14       	cp	r7, r3
 950:	10 f4       	brcc	.+4      	; 0x956 <vfprintf+0x30e>
 952:	37 18       	sub	r3, r7
 954:	01 c0       	rjmp	.+2      	; 0x958 <vfprintf+0x310>
 956:	31 2c       	mov	r3, r1
 958:	24 ff       	sbrs	r18, 4
 95a:	12 c0       	rjmp	.+36     	; 0x980 <vfprintf+0x338>
 95c:	b7 01       	movw	r22, r14
 95e:	80 e3       	ldi	r24, 0x30	; 48
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	2c 87       	std	Y+12, r18	; 0x0c
 964:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 968:	2c 85       	ldd	r18, Y+12	; 0x0c
 96a:	22 ff       	sbrs	r18, 2
 96c:	17 c0       	rjmp	.+46     	; 0x99c <vfprintf+0x354>
 96e:	21 ff       	sbrs	r18, 1
 970:	03 c0       	rjmp	.+6      	; 0x978 <vfprintf+0x330>
 972:	88 e5       	ldi	r24, 0x58	; 88
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 c0       	rjmp	.+4      	; 0x97c <vfprintf+0x334>
 978:	88 e7       	ldi	r24, 0x78	; 120
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	b7 01       	movw	r22, r14
 97e:	0c c0       	rjmp	.+24     	; 0x998 <vfprintf+0x350>
 980:	82 2f       	mov	r24, r18
 982:	86 78       	andi	r24, 0x86	; 134
 984:	59 f0       	breq	.+22     	; 0x99c <vfprintf+0x354>
 986:	21 fd       	sbrc	r18, 1
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0x346>
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	01 c0       	rjmp	.+2      	; 0x990 <vfprintf+0x348>
 98e:	8b e2       	ldi	r24, 0x2B	; 43
 990:	27 fd       	sbrc	r18, 7
 992:	8d e2       	ldi	r24, 0x2D	; 45
 994:	b7 01       	movw	r22, r14
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 99c:	a5 14       	cp	r10, r5
 99e:	38 f4       	brcc	.+14     	; 0x9ae <vfprintf+0x366>
 9a0:	b7 01       	movw	r22, r14
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 9aa:	5a 94       	dec	r5
 9ac:	f7 cf       	rjmp	.-18     	; 0x99c <vfprintf+0x354>
 9ae:	aa 94       	dec	r10
 9b0:	f4 01       	movw	r30, r8
 9b2:	ea 0d       	add	r30, r10
 9b4:	f1 1d       	adc	r31, r1
 9b6:	80 81       	ld	r24, Z
 9b8:	b7 01       	movw	r22, r14
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 9c0:	a1 10       	cpse	r10, r1
 9c2:	f5 cf       	rjmp	.-22     	; 0x9ae <vfprintf+0x366>
 9c4:	33 20       	and	r3, r3
 9c6:	09 f4       	brne	.+2      	; 0x9ca <vfprintf+0x382>
 9c8:	51 ce       	rjmp	.-862    	; 0x66c <vfprintf+0x24>
 9ca:	b7 01       	movw	r22, r14
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 9d4:	3a 94       	dec	r3
 9d6:	f6 cf       	rjmp	.-20     	; 0x9c4 <vfprintf+0x37c>
 9d8:	f7 01       	movw	r30, r14
 9da:	86 81       	ldd	r24, Z+6	; 0x06
 9dc:	97 81       	ldd	r25, Z+7	; 0x07
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <vfprintf+0x39c>
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	9f ef       	ldi	r25, 0xFF	; 255
 9e4:	2c 96       	adiw	r28, 0x0c	; 12
 9e6:	e2 e1       	ldi	r30, 0x12	; 18
 9e8:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__epilogue_restores__>

000009ec <calloc>:
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	86 9f       	mul	r24, r22
 9f6:	80 01       	movw	r16, r0
 9f8:	87 9f       	mul	r24, r23
 9fa:	10 0d       	add	r17, r0
 9fc:	96 9f       	mul	r25, r22
 9fe:	10 0d       	add	r17, r0
 a00:	11 24       	eor	r1, r1
 a02:	c8 01       	movw	r24, r16
 a04:	0e 94 12 05 	call	0xa24	; 0xa24 <malloc>
 a08:	ec 01       	movw	r28, r24
 a0a:	00 97       	sbiw	r24, 0x00	; 0
 a0c:	29 f0       	breq	.+10     	; 0xa18 <calloc+0x2c>
 a0e:	a8 01       	movw	r20, r16
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	70 e0       	ldi	r23, 0x00	; 0
 a14:	0e 94 44 06 	call	0xc88	; 0xc88 <memset>
 a18:	ce 01       	movw	r24, r28
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	0f 91       	pop	r16
 a22:	08 95       	ret

00000a24 <malloc>:
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	82 30       	cpi	r24, 0x02	; 2
 a2a:	91 05       	cpc	r25, r1
 a2c:	10 f4       	brcc	.+4      	; 0xa32 <malloc+0xe>
 a2e:	82 e0       	ldi	r24, 0x02	; 2
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	e0 91 09 02 	lds	r30, 0x0209
 a36:	f0 91 0a 02 	lds	r31, 0x020A
 a3a:	20 e0       	ldi	r18, 0x00	; 0
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	a0 e0       	ldi	r26, 0x00	; 0
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	30 97       	sbiw	r30, 0x00	; 0
 a44:	39 f1       	breq	.+78     	; 0xa94 <malloc+0x70>
 a46:	40 81       	ld	r20, Z
 a48:	51 81       	ldd	r21, Z+1	; 0x01
 a4a:	48 17       	cp	r20, r24
 a4c:	59 07       	cpc	r21, r25
 a4e:	b8 f0       	brcs	.+46     	; 0xa7e <malloc+0x5a>
 a50:	48 17       	cp	r20, r24
 a52:	59 07       	cpc	r21, r25
 a54:	71 f4       	brne	.+28     	; 0xa72 <malloc+0x4e>
 a56:	82 81       	ldd	r24, Z+2	; 0x02
 a58:	93 81       	ldd	r25, Z+3	; 0x03
 a5a:	10 97       	sbiw	r26, 0x00	; 0
 a5c:	29 f0       	breq	.+10     	; 0xa68 <malloc+0x44>
 a5e:	13 96       	adiw	r26, 0x03	; 3
 a60:	9c 93       	st	X, r25
 a62:	8e 93       	st	-X, r24
 a64:	12 97       	sbiw	r26, 0x02	; 2
 a66:	2c c0       	rjmp	.+88     	; 0xac0 <malloc+0x9c>
 a68:	90 93 0a 02 	sts	0x020A, r25
 a6c:	80 93 09 02 	sts	0x0209, r24
 a70:	27 c0       	rjmp	.+78     	; 0xac0 <malloc+0x9c>
 a72:	21 15       	cp	r18, r1
 a74:	31 05       	cpc	r19, r1
 a76:	31 f0       	breq	.+12     	; 0xa84 <malloc+0x60>
 a78:	42 17       	cp	r20, r18
 a7a:	53 07       	cpc	r21, r19
 a7c:	18 f0       	brcs	.+6      	; 0xa84 <malloc+0x60>
 a7e:	a9 01       	movw	r20, r18
 a80:	db 01       	movw	r26, r22
 a82:	01 c0       	rjmp	.+2      	; 0xa86 <malloc+0x62>
 a84:	ef 01       	movw	r28, r30
 a86:	9a 01       	movw	r18, r20
 a88:	bd 01       	movw	r22, r26
 a8a:	df 01       	movw	r26, r30
 a8c:	02 80       	ldd	r0, Z+2	; 0x02
 a8e:	f3 81       	ldd	r31, Z+3	; 0x03
 a90:	e0 2d       	mov	r30, r0
 a92:	d7 cf       	rjmp	.-82     	; 0xa42 <malloc+0x1e>
 a94:	21 15       	cp	r18, r1
 a96:	31 05       	cpc	r19, r1
 a98:	f9 f0       	breq	.+62     	; 0xad8 <malloc+0xb4>
 a9a:	28 1b       	sub	r18, r24
 a9c:	39 0b       	sbc	r19, r25
 a9e:	24 30       	cpi	r18, 0x04	; 4
 aa0:	31 05       	cpc	r19, r1
 aa2:	80 f4       	brcc	.+32     	; 0xac4 <malloc+0xa0>
 aa4:	8a 81       	ldd	r24, Y+2	; 0x02
 aa6:	9b 81       	ldd	r25, Y+3	; 0x03
 aa8:	61 15       	cp	r22, r1
 aaa:	71 05       	cpc	r23, r1
 aac:	21 f0       	breq	.+8      	; 0xab6 <malloc+0x92>
 aae:	fb 01       	movw	r30, r22
 ab0:	93 83       	std	Z+3, r25	; 0x03
 ab2:	82 83       	std	Z+2, r24	; 0x02
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <malloc+0x9a>
 ab6:	90 93 0a 02 	sts	0x020A, r25
 aba:	80 93 09 02 	sts	0x0209, r24
 abe:	fe 01       	movw	r30, r28
 ac0:	32 96       	adiw	r30, 0x02	; 2
 ac2:	44 c0       	rjmp	.+136    	; 0xb4c <malloc+0x128>
 ac4:	fe 01       	movw	r30, r28
 ac6:	e2 0f       	add	r30, r18
 ac8:	f3 1f       	adc	r31, r19
 aca:	81 93       	st	Z+, r24
 acc:	91 93       	st	Z+, r25
 ace:	22 50       	subi	r18, 0x02	; 2
 ad0:	31 09       	sbc	r19, r1
 ad2:	39 83       	std	Y+1, r19	; 0x01
 ad4:	28 83       	st	Y, r18
 ad6:	3a c0       	rjmp	.+116    	; 0xb4c <malloc+0x128>
 ad8:	20 91 07 02 	lds	r18, 0x0207
 adc:	30 91 08 02 	lds	r19, 0x0208
 ae0:	23 2b       	or	r18, r19
 ae2:	41 f4       	brne	.+16     	; 0xaf4 <malloc+0xd0>
 ae4:	20 91 02 01 	lds	r18, 0x0102
 ae8:	30 91 03 01 	lds	r19, 0x0103
 aec:	30 93 08 02 	sts	0x0208, r19
 af0:	20 93 07 02 	sts	0x0207, r18
 af4:	20 91 00 01 	lds	r18, 0x0100
 af8:	30 91 01 01 	lds	r19, 0x0101
 afc:	21 15       	cp	r18, r1
 afe:	31 05       	cpc	r19, r1
 b00:	41 f4       	brne	.+16     	; 0xb12 <malloc+0xee>
 b02:	2d b7       	in	r18, 0x3d	; 61
 b04:	3e b7       	in	r19, 0x3e	; 62
 b06:	40 91 04 01 	lds	r20, 0x0104
 b0a:	50 91 05 01 	lds	r21, 0x0105
 b0e:	24 1b       	sub	r18, r20
 b10:	35 0b       	sbc	r19, r21
 b12:	e0 91 07 02 	lds	r30, 0x0207
 b16:	f0 91 08 02 	lds	r31, 0x0208
 b1a:	e2 17       	cp	r30, r18
 b1c:	f3 07       	cpc	r31, r19
 b1e:	a0 f4       	brcc	.+40     	; 0xb48 <malloc+0x124>
 b20:	2e 1b       	sub	r18, r30
 b22:	3f 0b       	sbc	r19, r31
 b24:	28 17       	cp	r18, r24
 b26:	39 07       	cpc	r19, r25
 b28:	78 f0       	brcs	.+30     	; 0xb48 <malloc+0x124>
 b2a:	ac 01       	movw	r20, r24
 b2c:	4e 5f       	subi	r20, 0xFE	; 254
 b2e:	5f 4f       	sbci	r21, 0xFF	; 255
 b30:	24 17       	cp	r18, r20
 b32:	35 07       	cpc	r19, r21
 b34:	48 f0       	brcs	.+18     	; 0xb48 <malloc+0x124>
 b36:	4e 0f       	add	r20, r30
 b38:	5f 1f       	adc	r21, r31
 b3a:	50 93 08 02 	sts	0x0208, r21
 b3e:	40 93 07 02 	sts	0x0207, r20
 b42:	81 93       	st	Z+, r24
 b44:	91 93       	st	Z+, r25
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <malloc+0x128>
 b48:	e0 e0       	ldi	r30, 0x00	; 0
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	cf 01       	movw	r24, r30
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	08 95       	ret

00000b54 <free>:
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	09 f4       	brne	.+2      	; 0xb5e <free+0xa>
 b5c:	87 c0       	rjmp	.+270    	; 0xc6c <free+0x118>
 b5e:	fc 01       	movw	r30, r24
 b60:	32 97       	sbiw	r30, 0x02	; 2
 b62:	13 82       	std	Z+3, r1	; 0x03
 b64:	12 82       	std	Z+2, r1	; 0x02
 b66:	c0 91 09 02 	lds	r28, 0x0209
 b6a:	d0 91 0a 02 	lds	r29, 0x020A
 b6e:	20 97       	sbiw	r28, 0x00	; 0
 b70:	81 f4       	brne	.+32     	; 0xb92 <free+0x3e>
 b72:	20 81       	ld	r18, Z
 b74:	31 81       	ldd	r19, Z+1	; 0x01
 b76:	28 0f       	add	r18, r24
 b78:	39 1f       	adc	r19, r25
 b7a:	80 91 07 02 	lds	r24, 0x0207
 b7e:	90 91 08 02 	lds	r25, 0x0208
 b82:	82 17       	cp	r24, r18
 b84:	93 07       	cpc	r25, r19
 b86:	79 f5       	brne	.+94     	; 0xbe6 <free+0x92>
 b88:	f0 93 08 02 	sts	0x0208, r31
 b8c:	e0 93 07 02 	sts	0x0207, r30
 b90:	6d c0       	rjmp	.+218    	; 0xc6c <free+0x118>
 b92:	de 01       	movw	r26, r28
 b94:	20 e0       	ldi	r18, 0x00	; 0
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	ae 17       	cp	r26, r30
 b9a:	bf 07       	cpc	r27, r31
 b9c:	50 f4       	brcc	.+20     	; 0xbb2 <free+0x5e>
 b9e:	12 96       	adiw	r26, 0x02	; 2
 ba0:	4d 91       	ld	r20, X+
 ba2:	5c 91       	ld	r21, X
 ba4:	13 97       	sbiw	r26, 0x03	; 3
 ba6:	9d 01       	movw	r18, r26
 ba8:	41 15       	cp	r20, r1
 baa:	51 05       	cpc	r21, r1
 bac:	09 f1       	breq	.+66     	; 0xbf0 <free+0x9c>
 bae:	da 01       	movw	r26, r20
 bb0:	f3 cf       	rjmp	.-26     	; 0xb98 <free+0x44>
 bb2:	b3 83       	std	Z+3, r27	; 0x03
 bb4:	a2 83       	std	Z+2, r26	; 0x02
 bb6:	40 81       	ld	r20, Z
 bb8:	51 81       	ldd	r21, Z+1	; 0x01
 bba:	84 0f       	add	r24, r20
 bbc:	95 1f       	adc	r25, r21
 bbe:	8a 17       	cp	r24, r26
 bc0:	9b 07       	cpc	r25, r27
 bc2:	71 f4       	brne	.+28     	; 0xbe0 <free+0x8c>
 bc4:	8d 91       	ld	r24, X+
 bc6:	9c 91       	ld	r25, X
 bc8:	11 97       	sbiw	r26, 0x01	; 1
 bca:	84 0f       	add	r24, r20
 bcc:	95 1f       	adc	r25, r21
 bce:	02 96       	adiw	r24, 0x02	; 2
 bd0:	91 83       	std	Z+1, r25	; 0x01
 bd2:	80 83       	st	Z, r24
 bd4:	12 96       	adiw	r26, 0x02	; 2
 bd6:	8d 91       	ld	r24, X+
 bd8:	9c 91       	ld	r25, X
 bda:	13 97       	sbiw	r26, 0x03	; 3
 bdc:	93 83       	std	Z+3, r25	; 0x03
 bde:	82 83       	std	Z+2, r24	; 0x02
 be0:	21 15       	cp	r18, r1
 be2:	31 05       	cpc	r19, r1
 be4:	29 f4       	brne	.+10     	; 0xbf0 <free+0x9c>
 be6:	f0 93 0a 02 	sts	0x020A, r31
 bea:	e0 93 09 02 	sts	0x0209, r30
 bee:	3e c0       	rjmp	.+124    	; 0xc6c <free+0x118>
 bf0:	d9 01       	movw	r26, r18
 bf2:	13 96       	adiw	r26, 0x03	; 3
 bf4:	fc 93       	st	X, r31
 bf6:	ee 93       	st	-X, r30
 bf8:	12 97       	sbiw	r26, 0x02	; 2
 bfa:	4d 91       	ld	r20, X+
 bfc:	5d 91       	ld	r21, X+
 bfe:	a4 0f       	add	r26, r20
 c00:	b5 1f       	adc	r27, r21
 c02:	ea 17       	cp	r30, r26
 c04:	fb 07       	cpc	r31, r27
 c06:	79 f4       	brne	.+30     	; 0xc26 <free+0xd2>
 c08:	80 81       	ld	r24, Z
 c0a:	91 81       	ldd	r25, Z+1	; 0x01
 c0c:	84 0f       	add	r24, r20
 c0e:	95 1f       	adc	r25, r21
 c10:	02 96       	adiw	r24, 0x02	; 2
 c12:	d9 01       	movw	r26, r18
 c14:	11 96       	adiw	r26, 0x01	; 1
 c16:	9c 93       	st	X, r25
 c18:	8e 93       	st	-X, r24
 c1a:	82 81       	ldd	r24, Z+2	; 0x02
 c1c:	93 81       	ldd	r25, Z+3	; 0x03
 c1e:	13 96       	adiw	r26, 0x03	; 3
 c20:	9c 93       	st	X, r25
 c22:	8e 93       	st	-X, r24
 c24:	12 97       	sbiw	r26, 0x02	; 2
 c26:	e0 e0       	ldi	r30, 0x00	; 0
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	8a 81       	ldd	r24, Y+2	; 0x02
 c2c:	9b 81       	ldd	r25, Y+3	; 0x03
 c2e:	00 97       	sbiw	r24, 0x00	; 0
 c30:	19 f0       	breq	.+6      	; 0xc38 <free+0xe4>
 c32:	fe 01       	movw	r30, r28
 c34:	ec 01       	movw	r28, r24
 c36:	f9 cf       	rjmp	.-14     	; 0xc2a <free+0xd6>
 c38:	ce 01       	movw	r24, r28
 c3a:	02 96       	adiw	r24, 0x02	; 2
 c3c:	28 81       	ld	r18, Y
 c3e:	39 81       	ldd	r19, Y+1	; 0x01
 c40:	82 0f       	add	r24, r18
 c42:	93 1f       	adc	r25, r19
 c44:	20 91 07 02 	lds	r18, 0x0207
 c48:	30 91 08 02 	lds	r19, 0x0208
 c4c:	28 17       	cp	r18, r24
 c4e:	39 07       	cpc	r19, r25
 c50:	69 f4       	brne	.+26     	; 0xc6c <free+0x118>
 c52:	30 97       	sbiw	r30, 0x00	; 0
 c54:	29 f4       	brne	.+10     	; 0xc60 <free+0x10c>
 c56:	10 92 0a 02 	sts	0x020A, r1
 c5a:	10 92 09 02 	sts	0x0209, r1
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <free+0x110>
 c60:	13 82       	std	Z+3, r1	; 0x03
 c62:	12 82       	std	Z+2, r1	; 0x02
 c64:	d0 93 08 02 	sts	0x0208, r29
 c68:	c0 93 07 02 	sts	0x0207, r28
 c6c:	df 91       	pop	r29
 c6e:	cf 91       	pop	r28
 c70:	08 95       	ret

00000c72 <strnlen_P>:
 c72:	fc 01       	movw	r30, r24
 c74:	05 90       	lpm	r0, Z+
 c76:	61 50       	subi	r22, 0x01	; 1
 c78:	70 40       	sbci	r23, 0x00	; 0
 c7a:	01 10       	cpse	r0, r1
 c7c:	d8 f7       	brcc	.-10     	; 0xc74 <strnlen_P+0x2>
 c7e:	80 95       	com	r24
 c80:	90 95       	com	r25
 c82:	8e 0f       	add	r24, r30
 c84:	9f 1f       	adc	r25, r31
 c86:	08 95       	ret

00000c88 <memset>:
 c88:	dc 01       	movw	r26, r24
 c8a:	01 c0       	rjmp	.+2      	; 0xc8e <memset+0x6>
 c8c:	6d 93       	st	X+, r22
 c8e:	41 50       	subi	r20, 0x01	; 1
 c90:	50 40       	sbci	r21, 0x00	; 0
 c92:	e0 f7       	brcc	.-8      	; 0xc8c <memset+0x4>
 c94:	08 95       	ret

00000c96 <strnlen>:
 c96:	fc 01       	movw	r30, r24
 c98:	61 50       	subi	r22, 0x01	; 1
 c9a:	70 40       	sbci	r23, 0x00	; 0
 c9c:	01 90       	ld	r0, Z+
 c9e:	01 10       	cpse	r0, r1
 ca0:	d8 f7       	brcc	.-10     	; 0xc98 <strnlen+0x2>
 ca2:	80 95       	com	r24
 ca4:	90 95       	com	r25
 ca6:	8e 0f       	add	r24, r30
 ca8:	9f 1f       	adc	r25, r31
 caa:	08 95       	ret

00000cac <fputc>:
 cac:	0f 93       	push	r16
 cae:	1f 93       	push	r17
 cb0:	cf 93       	push	r28
 cb2:	df 93       	push	r29
 cb4:	18 2f       	mov	r17, r24
 cb6:	09 2f       	mov	r16, r25
 cb8:	eb 01       	movw	r28, r22
 cba:	8b 81       	ldd	r24, Y+3	; 0x03
 cbc:	81 fd       	sbrc	r24, 1
 cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <fputc+0x1a>
 cc0:	8f ef       	ldi	r24, 0xFF	; 255
 cc2:	9f ef       	ldi	r25, 0xFF	; 255
 cc4:	20 c0       	rjmp	.+64     	; 0xd06 <fputc+0x5a>
 cc6:	82 ff       	sbrs	r24, 2
 cc8:	10 c0       	rjmp	.+32     	; 0xcea <fputc+0x3e>
 cca:	4e 81       	ldd	r20, Y+6	; 0x06
 ccc:	5f 81       	ldd	r21, Y+7	; 0x07
 cce:	2c 81       	ldd	r18, Y+4	; 0x04
 cd0:	3d 81       	ldd	r19, Y+5	; 0x05
 cd2:	42 17       	cp	r20, r18
 cd4:	53 07       	cpc	r21, r19
 cd6:	7c f4       	brge	.+30     	; 0xcf6 <fputc+0x4a>
 cd8:	e8 81       	ld	r30, Y
 cda:	f9 81       	ldd	r31, Y+1	; 0x01
 cdc:	9f 01       	movw	r18, r30
 cde:	2f 5f       	subi	r18, 0xFF	; 255
 ce0:	3f 4f       	sbci	r19, 0xFF	; 255
 ce2:	39 83       	std	Y+1, r19	; 0x01
 ce4:	28 83       	st	Y, r18
 ce6:	10 83       	st	Z, r17
 ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <fputc+0x4a>
 cea:	e8 85       	ldd	r30, Y+8	; 0x08
 cec:	f9 85       	ldd	r31, Y+9	; 0x09
 cee:	81 2f       	mov	r24, r17
 cf0:	09 95       	icall
 cf2:	89 2b       	or	r24, r25
 cf4:	29 f7       	brne	.-54     	; 0xcc0 <fputc+0x14>
 cf6:	2e 81       	ldd	r18, Y+6	; 0x06
 cf8:	3f 81       	ldd	r19, Y+7	; 0x07
 cfa:	2f 5f       	subi	r18, 0xFF	; 255
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	3f 83       	std	Y+7, r19	; 0x07
 d00:	2e 83       	std	Y+6, r18	; 0x06
 d02:	81 2f       	mov	r24, r17
 d04:	90 2f       	mov	r25, r16
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	1f 91       	pop	r17
 d0c:	0f 91       	pop	r16
 d0e:	08 95       	ret

00000d10 <__ultoa_invert>:
 d10:	fa 01       	movw	r30, r20
 d12:	aa 27       	eor	r26, r26
 d14:	28 30       	cpi	r18, 0x08	; 8
 d16:	51 f1       	breq	.+84     	; 0xd6c <__ultoa_invert+0x5c>
 d18:	20 31       	cpi	r18, 0x10	; 16
 d1a:	81 f1       	breq	.+96     	; 0xd7c <__ultoa_invert+0x6c>
 d1c:	e8 94       	clt
 d1e:	6f 93       	push	r22
 d20:	6e 7f       	andi	r22, 0xFE	; 254
 d22:	6e 5f       	subi	r22, 0xFE	; 254
 d24:	7f 4f       	sbci	r23, 0xFF	; 255
 d26:	8f 4f       	sbci	r24, 0xFF	; 255
 d28:	9f 4f       	sbci	r25, 0xFF	; 255
 d2a:	af 4f       	sbci	r26, 0xFF	; 255
 d2c:	b1 e0       	ldi	r27, 0x01	; 1
 d2e:	3e d0       	rcall	.+124    	; 0xdac <__ultoa_invert+0x9c>
 d30:	b4 e0       	ldi	r27, 0x04	; 4
 d32:	3c d0       	rcall	.+120    	; 0xdac <__ultoa_invert+0x9c>
 d34:	67 0f       	add	r22, r23
 d36:	78 1f       	adc	r23, r24
 d38:	89 1f       	adc	r24, r25
 d3a:	9a 1f       	adc	r25, r26
 d3c:	a1 1d       	adc	r26, r1
 d3e:	68 0f       	add	r22, r24
 d40:	79 1f       	adc	r23, r25
 d42:	8a 1f       	adc	r24, r26
 d44:	91 1d       	adc	r25, r1
 d46:	a1 1d       	adc	r26, r1
 d48:	6a 0f       	add	r22, r26
 d4a:	71 1d       	adc	r23, r1
 d4c:	81 1d       	adc	r24, r1
 d4e:	91 1d       	adc	r25, r1
 d50:	a1 1d       	adc	r26, r1
 d52:	20 d0       	rcall	.+64     	; 0xd94 <__ultoa_invert+0x84>
 d54:	09 f4       	brne	.+2      	; 0xd58 <__ultoa_invert+0x48>
 d56:	68 94       	set
 d58:	3f 91       	pop	r19
 d5a:	2a e0       	ldi	r18, 0x0A	; 10
 d5c:	26 9f       	mul	r18, r22
 d5e:	11 24       	eor	r1, r1
 d60:	30 19       	sub	r19, r0
 d62:	30 5d       	subi	r19, 0xD0	; 208
 d64:	31 93       	st	Z+, r19
 d66:	de f6       	brtc	.-74     	; 0xd1e <__ultoa_invert+0xe>
 d68:	cf 01       	movw	r24, r30
 d6a:	08 95       	ret
 d6c:	46 2f       	mov	r20, r22
 d6e:	47 70       	andi	r20, 0x07	; 7
 d70:	40 5d       	subi	r20, 0xD0	; 208
 d72:	41 93       	st	Z+, r20
 d74:	b3 e0       	ldi	r27, 0x03	; 3
 d76:	0f d0       	rcall	.+30     	; 0xd96 <__ultoa_invert+0x86>
 d78:	c9 f7       	brne	.-14     	; 0xd6c <__ultoa_invert+0x5c>
 d7a:	f6 cf       	rjmp	.-20     	; 0xd68 <__ultoa_invert+0x58>
 d7c:	46 2f       	mov	r20, r22
 d7e:	4f 70       	andi	r20, 0x0F	; 15
 d80:	40 5d       	subi	r20, 0xD0	; 208
 d82:	4a 33       	cpi	r20, 0x3A	; 58
 d84:	18 f0       	brcs	.+6      	; 0xd8c <__ultoa_invert+0x7c>
 d86:	49 5d       	subi	r20, 0xD9	; 217
 d88:	31 fd       	sbrc	r19, 1
 d8a:	40 52       	subi	r20, 0x20	; 32
 d8c:	41 93       	st	Z+, r20
 d8e:	02 d0       	rcall	.+4      	; 0xd94 <__ultoa_invert+0x84>
 d90:	a9 f7       	brne	.-22     	; 0xd7c <__ultoa_invert+0x6c>
 d92:	ea cf       	rjmp	.-44     	; 0xd68 <__ultoa_invert+0x58>
 d94:	b4 e0       	ldi	r27, 0x04	; 4
 d96:	a6 95       	lsr	r26
 d98:	97 95       	ror	r25
 d9a:	87 95       	ror	r24
 d9c:	77 95       	ror	r23
 d9e:	67 95       	ror	r22
 da0:	ba 95       	dec	r27
 da2:	c9 f7       	brne	.-14     	; 0xd96 <__ultoa_invert+0x86>
 da4:	00 97       	sbiw	r24, 0x00	; 0
 da6:	61 05       	cpc	r22, r1
 da8:	71 05       	cpc	r23, r1
 daa:	08 95       	ret
 dac:	9b 01       	movw	r18, r22
 dae:	ac 01       	movw	r20, r24
 db0:	0a 2e       	mov	r0, r26
 db2:	06 94       	lsr	r0
 db4:	57 95       	ror	r21
 db6:	47 95       	ror	r20
 db8:	37 95       	ror	r19
 dba:	27 95       	ror	r18
 dbc:	ba 95       	dec	r27
 dbe:	c9 f7       	brne	.-14     	; 0xdb2 <__ultoa_invert+0xa2>
 dc0:	62 0f       	add	r22, r18
 dc2:	73 1f       	adc	r23, r19
 dc4:	84 1f       	adc	r24, r20
 dc6:	95 1f       	adc	r25, r21
 dc8:	a0 1d       	adc	r26, r0
 dca:	08 95       	ret

00000dcc <__prologue_saves__>:
 dcc:	2f 92       	push	r2
 dce:	3f 92       	push	r3
 dd0:	4f 92       	push	r4
 dd2:	5f 92       	push	r5
 dd4:	6f 92       	push	r6
 dd6:	7f 92       	push	r7
 dd8:	8f 92       	push	r8
 dda:	9f 92       	push	r9
 ddc:	af 92       	push	r10
 dde:	bf 92       	push	r11
 de0:	cf 92       	push	r12
 de2:	df 92       	push	r13
 de4:	ef 92       	push	r14
 de6:	ff 92       	push	r15
 de8:	0f 93       	push	r16
 dea:	1f 93       	push	r17
 dec:	cf 93       	push	r28
 dee:	df 93       	push	r29
 df0:	cd b7       	in	r28, 0x3d	; 61
 df2:	de b7       	in	r29, 0x3e	; 62
 df4:	ca 1b       	sub	r28, r26
 df6:	db 0b       	sbc	r29, r27
 df8:	0f b6       	in	r0, 0x3f	; 63
 dfa:	f8 94       	cli
 dfc:	de bf       	out	0x3e, r29	; 62
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	cd bf       	out	0x3d, r28	; 61
 e02:	09 94       	ijmp

00000e04 <__epilogue_restores__>:
 e04:	2a 88       	ldd	r2, Y+18	; 0x12
 e06:	39 88       	ldd	r3, Y+17	; 0x11
 e08:	48 88       	ldd	r4, Y+16	; 0x10
 e0a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e0c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e0e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e10:	8c 84       	ldd	r8, Y+12	; 0x0c
 e12:	9b 84       	ldd	r9, Y+11	; 0x0b
 e14:	aa 84       	ldd	r10, Y+10	; 0x0a
 e16:	b9 84       	ldd	r11, Y+9	; 0x09
 e18:	c8 84       	ldd	r12, Y+8	; 0x08
 e1a:	df 80       	ldd	r13, Y+7	; 0x07
 e1c:	ee 80       	ldd	r14, Y+6	; 0x06
 e1e:	fd 80       	ldd	r15, Y+5	; 0x05
 e20:	0c 81       	ldd	r16, Y+4	; 0x04
 e22:	1b 81       	ldd	r17, Y+3	; 0x03
 e24:	aa 81       	ldd	r26, Y+2	; 0x02
 e26:	b9 81       	ldd	r27, Y+1	; 0x01
 e28:	ce 0f       	add	r28, r30
 e2a:	d1 1d       	adc	r29, r1
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	ed 01       	movw	r28, r26
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
