
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00000f3c  00000fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  008001d6  008001d6  000010a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a80  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e62  00000000  00000000  00002d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e2d  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000043c  00000000  00000000  00004a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dc  00000000  00000000  00004e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b68  00000000  00000000  0000541c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00005f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e3       	ldi	r30, 0x3C	; 60
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 3d       	cpi	r26, 0xD6	; 214
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 ed       	ldi	r26, 0xD6	; 214
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	af 3e       	cpi	r26, 0xEF	; 239
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
  a6:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:


int CAN_init()
{
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  ae:	40 e6       	ldi	r20, 0x60	; 96
  b0:	60 e6       	ldi	r22, 0x60	; 96
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
  b8:	40 e6       	ldi	r20, 0x60	; 96
  ba:	60 e6       	ldi	r22, 0x60	; 96
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	64 e0       	ldi	r22, 0x04	; 4
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
  cc:	44 e0       	ldi	r20, 0x04	; 4
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	60 ee       	ldi	r22, 0xE0	; 224
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
  e6:	80 7e       	andi	r24, 0xE0	; 224
  e8:	39 f0       	breq	.+14     	; 0xf8 <CAN_init+0x4a>
		printf("MCP2515 is NOT in normal mode after CAN init\n");
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 76 03 	call	0x6ec	; 0x6ec <puts>
		return 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret
	}
	
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	8b e2       	ldi	r24, 0x2B	; 43
  fc:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (1 << ISC01) | (0 << ISC00);
 100:	85 b7       	in	r24, 0x35	; 53
 102:	82 60       	ori	r24, 0x02	; 2
 104:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
 106:	8b b7       	in	r24, 0x3b	; 59
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	8b bf       	out	0x3b, r24	; 59
	// Falling edge of INT2 generates interrupt request
	EICRA |= (1 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
}
 110:	08 95       	ret

00000112 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
 120:	fc 01       	movw	r30, r24
 122:	60 81       	ld	r22, Z
 124:	71 81       	ldd	r23, Z+1	; 0x01
 126:	76 95       	lsr	r23
 128:	67 95       	ror	r22
 12a:	76 95       	lsr	r23
 12c:	67 95       	ror	r22
 12e:	76 95       	lsr	r23
 130:	67 95       	ror	r22
 132:	81 e3       	ldi	r24, 0x31	; 49
 134:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
 138:	f7 01       	movw	r30, r14
 13a:	60 81       	ld	r22, Z
 13c:	62 95       	swap	r22
 13e:	66 0f       	add	r22, r22
 140:	60 7e       	andi	r22, 0xE0	; 224
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	84 e3       	ldi	r24, 0x34	; 52
 154:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
 158:	f7 01       	movw	r30, r14
 15a:	62 81       	ldd	r22, Z+2	; 0x02
 15c:	85 e3       	ldi	r24, 0x35	; 53
 15e:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
 162:	f7 01       	movw	r30, r14
 164:	82 81       	ldd	r24, Z+2	; 0x02
 166:	88 23       	and	r24, r24
 168:	99 f0       	breq	.+38     	; 0x190 <CAN_msg_send+0x7e>
 16a:	87 01       	movw	r16, r14
 16c:	0d 5f       	subi	r16, 0xFD	; 253
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
 174:	f8 01       	movw	r30, r16
 176:	61 91       	ld	r22, Z+
 178:	8f 01       	movw	r16, r30
 17a:	8c 2f       	mov	r24, r28
 17c:	8a 5c       	subi	r24, 0xCA	; 202
 17e:	0e 94 43 01 	call	0x286	; 0x286 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	f7 01       	movw	r30, r14
 186:	22 81       	ldd	r18, Z+2	; 0x02
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	c2 17       	cp	r28, r18
 18c:	d3 07       	cpc	r29, r19
 18e:	94 f3       	brlt	.-28     	; 0x174 <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
 190:	81 e8       	ldi	r24, 0x81	; 129
 192:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP_request_to_send>
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>

	if (interrupt & MCP_RX0IF){
 1cc:	80 ff       	sbrs	r24, 0
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__vector_1+0x3e>
		interrupt_flag = RX0;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 d6 01 	sts	0x01D6, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	8c e2       	ldi	r24, 0x2C	; 44
 1dc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
 1e2:	81 ff       	sbrs	r24, 1
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <__vector_1+0x52>
		interrupt_flag = RX1;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 d6 01 	sts	0x01D6, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCP_bit_modify>
	}
	
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
 220:	80 ec       	ldi	r24, 0xC0	; 192
 222:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	82 e4       	ldi	r24, 0x42	; 66
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <MCP_reset+0x10>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <MCP_reset+0x16>
	_delay_us(200);
	SPI_set_ss(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
 236:	08 95       	ret

00000238 <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	//printf("hello from MCP read 1\n");
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	//printf("hello from MCP read 2\n");
	// Send 8-bit address
	SPI_transmit_receive(address);
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	//printf("hello from MCP read 3\n");
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
 256:	c8 2f       	mov	r28, r24
	//printf("hello from MCP read 4\n");
	SPI_set_ss(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	return received;
}
 260:	8c 2f       	mov	r24, r28
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <MCP_init>:

uint8_t MCP_init( void )
{
	//SPI_init();
	//printf("hello from MCP init 1\n");
	MCP_reset();
 266:	0e 94 0c 01 	call	0x218	; 0x218 <MCP_reset>
	//printf("hello from MCP init 2\n");
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 26a:	8e e0       	ldi	r24, 0x0E	; 14
 26c:	0e 94 1c 01 	call	0x238	; 0x238 <MCP_read>
	//printf("hello from MCP init 3\n");
	
	if ((value & MODE_MASK) != MODE_CONFIG){
 270:	80 7e       	andi	r24, 0xE0	; 224
 272:	80 38       	cpi	r24, 0x80	; 128
 274:	31 f0       	breq	.+12     	; 0x282 <MCP_init+0x1c>
		printf("MCP2515 is NOT in configuration mode after reset\n");
 276:	83 e3       	ldi	r24, 0x33	; 51
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 76 03 	call	0x6ec	; 0x6ec <puts>
		return 1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
	}
	//printf("hello from MCP init 4\n");
	return 0;
 282:	80 e0       	ldi	r24, 0x00	; 0
}
 284:	08 95       	ret

00000286 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	d8 2f       	mov	r29, r24
 28c:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(address);
 29c:	8d 2f       	mov	r24, r29
 29e:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(data);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
 2b6:	cf 93       	push	r28
 2b8:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_set_ss(1); //(?)
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
}
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	18 2f       	mov	r17, r24
 2dc:	d6 2f       	mov	r29, r22
 2de:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(mask);
 2f4:	8d 2f       	mov	r24, r29
 2f6:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	SPI_transmit_receive(data);
 2fa:	8c 2f       	mov	r24, r28
 2fc:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_transmit_receive>
	
	SPI_set_ss(1);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 98 01 	call	0x330	; 0x330 <SPI_set_ss>
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
 310:	87 b3       	in	r24, 0x17	; 23
 312:	80 6b       	ori	r24, 0xB0	; 176
 314:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
 316:	81 e1       	ldi	r24, 0x11	; 17
 318:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
 31a:	6e 9a       	sbi	0x0d, 6	; 13
 31c:	08 95       	ret

0000031e <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
 31e:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
 320:	77 9b       	sbis	0x0e, 7	; 14
 322:	fe cf       	rjmp	.-4      	; 0x320 <SPI_transmit_receive+0x2>
 324:	82 e4       	ldi	r24, 0x42	; 66
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <SPI_transmit_receive+0x8>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <SPI_transmit_receive+0xe>
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
 32c:	8f b1       	in	r24, 0x0f	; 15
	
}
 32e:	08 95       	ret

00000330 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	91 05       	cpc	r25, r1
 334:	11 f4       	brne	.+4      	; 0x33a <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
 336:	c4 9a       	sbi	0x18, 4	; 24
 338:	08 95       	ret
	}
	else if (val == 0){
 33a:	89 2b       	or	r24, r25
 33c:	09 f4       	brne	.+2      	; 0x340 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
 33e:	c4 98       	cbi	0x18, 4	; 24
 340:	08 95       	ret

00000342 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
 342:	5d 9b       	sbis	0x0b, 5	; 11
 344:	fe cf       	rjmp	.-4      	; 0x342 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
 346:	8c b9       	out	0x0c, r24	; 12
 348:	08 95       	ret

0000034a <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
 34a:	5f 9b       	sbis	0x0b, 7	; 11
 34c:	fe cf       	rjmp	.-4      	; 0x34a <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
 34e:	8c b1       	in	r24, 0x0c	; 12
 350:	08 95       	ret

00000352 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
 352:	20 b5       	in	r18, 0x20	; 32
 354:	92 2b       	or	r25, r18
 356:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
 358:	99 b1       	in	r25, 0x09	; 9
 35a:	89 2b       	or	r24, r25
 35c:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 35e:	8a b1       	in	r24, 0x0a	; 10
 360:	88 61       	ori	r24, 0x18	; 24
 362:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 364:	80 b5       	in	r24, 0x20	; 32
 366:	8e 68       	ori	r24, 0x8E	; 142
 368:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
 36a:	65 ea       	ldi	r22, 0xA5	; 165
 36c:	71 e0       	ldi	r23, 0x01	; 1
 36e:	81 ea       	ldi	r24, 0xA1	; 161
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 17 03 	call	0x62e	; 0x62e <fdevopen>
 376:	08 95       	ret

00000378 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	set_bit(MCUCR, SRE);
 378:	85 b7       	in	r24, 0x35	; 53
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 37e:	80 b7       	in	r24, 0x30	; 48
 380:	80 62       	ori	r24, 0x20	; 32
 382:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	clear_bit(DDRD, PD3);
 384:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	08 95       	ret

0000038c <ADC_read>:

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
 38c:	84 30       	cpi	r24, 0x04	; 4
 38e:	70 f4       	brcc	.+28     	; 0x3ac <ADC_read+0x20>
	*ext_adc = 0x04 | channel; // bitwise OR
 390:	84 60       	ori	r24, 0x04	; 4
 392:	80 93 00 14 	sts	0x1400, r24
	
	// wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
 396:	83 99       	sbic	0x10, 3	; 16
 398:	fe cf       	rjmp	.-4      	; 0x396 <ADC_read+0xa>
 39a:	85 ef       	ldi	r24, 0xF5	; 245
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <ADC_read+0x12>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <ADC_read+0x18>
 3a4:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
 3a6:	80 91 00 14 	lds	r24, 0x1400
 3aa:	08 95       	ret

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
 3ac:	80 e0       	ldi	r24, 0x00	; 0
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
	
}
 3ae:	08 95       	ret

000003b0 <SEND2CAN_send_joy_pos_x>:
#include "touch_panel.h"
#include "../../../communication_drivers/can.h"
#include <stdlib.h>

void SEND2CAN_send_joy_pos_x()
{
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	2b 97       	sbiw	r28, 0x0b	; 11
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
	static JOY_position_t prev_joy_pos;
	JOY_position_t joy_pos = JOY_read_adc();
 3cc:	0e 94 a9 02 	call	0x552	; 0x552 <JOY_read_adc>
 3d0:	6b 01       	movw	r12, r22
 3d2:	7c 01       	movw	r14, r24
	can_msg msg;
	if(joy_pos.x != prev_joy_pos.x){
 3d4:	80 91 df 01 	lds	r24, 0x01DF
 3d8:	90 91 e0 01 	lds	r25, 0x01E0
 3dc:	8e 15       	cp	r24, r14
 3de:	9f 05       	cpc	r25, r15
 3e0:	09 f1       	breq	.+66     	; 0x424 <SEND2CAN_send_joy_pos_x+0x74>
		msg.id = ATmega162_ID;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	9a 83       	std	Y+2, r25	; 0x02
 3e8:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_JOY_POS_X;
 3ea:	1c 82       	std	Y+4, r1	; 0x04
		msg.data[1] = joy_pos.x;
 3ec:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
 3f2:	ce 01       	movw	r24, r28
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	0e 94 89 00 	call	0x112	; 0x112 <CAN_msg_send>
		printf("\n\nSent joystick position (x): (%d) \n",msg.data[1]);
 3fa:	8d 81       	ldd	r24, Y+5	; 0x05
 3fc:	1f 92       	push	r1
 3fe:	8f 93       	push	r24
 400:	84 e6       	ldi	r24, 0x64	; 100
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	9f 93       	push	r25
 406:	8f 93       	push	r24
 408:	0e 94 62 03 	call	0x6c4	; 0x6c4 <printf>
		prev_joy_pos = joy_pos;
 40c:	c0 92 dd 01 	sts	0x01DD, r12
 410:	d0 92 de 01 	sts	0x01DE, r13
 414:	e0 92 df 01 	sts	0x01DF, r14
 418:	f0 92 e0 01 	sts	0x01E0, r15
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
	}
}
 424:	2b 96       	adiw	r28, 0x0b	; 11
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	08 95       	ret

0000043e <SEND2CAN_send_slider_pos>:

void SEND2CAN_send_slider_pos()
{
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	2b 97       	sbiw	r28, 0x0b	; 11
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
	static TOUCH_slider_pos_t prev_slider_pos;
	TOUCH_slider_pos_t slider_pos = TOUCH_get_slider_position();
 45a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TOUCH_get_slider_position>
 45e:	6b 01       	movw	r12, r22
 460:	7c 01       	movw	r14, r24
	can_msg msg;
	
	if(slider_pos.right_slider != prev_slider_pos.right_slider){
 462:	80 91 db 01 	lds	r24, 0x01DB
 466:	90 91 dc 01 	lds	r25, 0x01DC
 46a:	8e 15       	cp	r24, r14
 46c:	9f 05       	cpc	r25, r15
 46e:	11 f1       	breq	.+68     	; 0x4b4 <SEND2CAN_send_slider_pos+0x76>
		msg.id = ATmega162_ID;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	9a 83       	std	Y+2, r25	; 0x02
 476:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_SLIDER_POS_R;
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = slider_pos.right_slider;
 47c:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
 482:	ce 01       	movw	r24, r28
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	0e 94 89 00 	call	0x112	; 0x112 <CAN_msg_send>
		printf("\n\nSent slider position: (%d) \n",msg.data[1]);
 48a:	8d 81       	ldd	r24, Y+5	; 0x05
 48c:	1f 92       	push	r1
 48e:	8f 93       	push	r24
 490:	89 e8       	ldi	r24, 0x89	; 137
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	9f 93       	push	r25
 496:	8f 93       	push	r24
 498:	0e 94 62 03 	call	0x6c4	; 0x6c4 <printf>
		prev_slider_pos = slider_pos;
 49c:	c0 92 d9 01 	sts	0x01D9, r12
 4a0:	d0 92 da 01 	sts	0x01DA, r13
 4a4:	e0 92 db 01 	sts	0x01DB, r14
 4a8:	f0 92 dc 01 	sts	0x01DC, r15
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
	}
	
}
 4b4:	2b 96       	adiw	r28, 0x0b	; 11
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	df 90       	pop	r13
 4ca:	cf 90       	pop	r12
 4cc:	08 95       	ret

000004ce <SEND2CAN_touch_button_pressed>:

void SEND2CAN_touch_button_pressed()
{
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	2b 97       	sbiw	r28, 0x0b	; 11
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
	static int prev_button_pressed;
	can_msg msg;
	
	int button_pressed = TOUCH_button();
 4e6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <TOUCH_button>
 4ea:	8c 01       	movw	r16, r24
	if(button_pressed == 1 && prev_button_pressed == 0){
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	91 05       	cpc	r25, r1
 4f0:	09 f5       	brne	.+66     	; 0x534 <__stack+0x35>
 4f2:	80 91 d7 01 	lds	r24, 0x01D7
 4f6:	90 91 d8 01 	lds	r25, 0x01D8
 4fa:	89 2b       	or	r24, r25
 4fc:	d9 f4       	brne	.+54     	; 0x534 <__stack+0x35>
		msg.id = ATmega162_ID;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	9a 83       	std	Y+2, r25	; 0x02
 504:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_TOUCH_BUTTON;
 506:	84 e0       	ldi	r24, 0x04	; 4
 508:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = button_pressed;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	8d 83       	std	Y+5, r24	; 0x05
		msg.length = 2;
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
 512:	ce 01       	movw	r24, r28
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	0e 94 89 00 	call	0x112	; 0x112 <CAN_msg_send>
		printf("\n\nSent button press (x): (%d) \n",msg.data[1]);
 51a:	8d 81       	ldd	r24, Y+5	; 0x05
 51c:	1f 92       	push	r1
 51e:	8f 93       	push	r24
 520:	88 ea       	ldi	r24, 0xA8	; 168
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	9f 93       	push	r25
 526:	8f 93       	push	r24
 528:	0e 94 62 03 	call	0x6c4	; 0x6c4 <printf>
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
	}
	prev_button_pressed = button_pressed;
 534:	10 93 d8 01 	sts	0x01D8, r17
 538:	00 93 d7 01 	sts	0x01D7, r16
 53c:	2b 96       	adiw	r28, 0x0b	; 11
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	08 95       	ret

00000552 <JOY_read_adc>:

int JOY_button(){
	return !(test_bit(PINB, PINB0));
}

JOY_position_t JOY_read_adc( void ){
 552:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 55a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 55c:	8c ec       	ldi	r24, 0xCC	; 204
 55e:	94 e0       	ldi	r25, 0x04	; 4
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <JOY_read_adc+0xe>
 564:	00 c0       	rjmp	.+0      	; 0x566 <JOY_read_adc+0x14>
 566:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 56e:	28 2f       	mov	r18, r24
	
	return pos;
 570:	6c 2f       	mov	r22, r28
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	82 2f       	mov	r24, r18
 576:	90 e0       	ldi	r25, 0x00	; 0
}
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <JOY_calibrate>:
	set_bit(PORTB, PB0);
	
}

void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
 57c:	0e 94 a9 02 	call	0x552	; 0x552 <JOY_read_adc>
 580:	60 93 e1 01 	sts	0x01E1, r22
 584:	70 93 e2 01 	sts	0x01E2, r23
 588:	80 93 e3 01 	sts	0x01E3, r24
 58c:	90 93 e4 01 	sts	0x01E4, r25
 590:	08 95       	ret

00000592 <JOY_init>:

JOY_position_t neutral_pos; 


void JOY_init( void ){
	JOY_calibrate();
 592:	0e 94 be 02 	call	0x57c	; 0x57c <JOY_calibrate>
	
	// Initialize PORT B, pin 0 (joystick button) as input
	clear_bit(DDRB, PINB0);
 596:	b8 98       	cbi	0x17, 0	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB0);
 598:	c0 9a       	sbi	0x18, 0	; 24
 59a:	08 95       	ret

0000059c <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 0, 1 and 2 as input
	clear_bit(DDRB, PINB1);
 59c:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
 59e:	ba 98       	cbi	0x17, 2	; 23
 5a0:	08 95       	ret

000005a2 <TOUCH_button>:
		//if(test_bit(PINB, PB2)) { return 1; }
		//break;
		//default:
		//return 0;
	//}
	if (test_bit(PINB, PB1) || test_bit(PINB, PB2)){
 5a2:	b1 99       	sbic	0x16, 1	; 22
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <TOUCH_button+0x10>
 5a6:	86 b3       	in	r24, 0x16	; 22
		return 1;
 5a8:	82 fb       	bst	r24, 2
 5aa:	88 27       	eor	r24, r24
 5ac:	80 f9       	bld	r24, 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	08 95       	ret
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 5b6:	08 95       	ret

000005b8 <TOUCH_read_adc>:

TOUCH_slider_pos_t TOUCH_read_adc( void ){
 5b8:	cf 93       	push	r28
	TOUCH_slider_pos_t pos;
	pos.left_slider = ADC_read(LEFT_SLIDER_CHANNEL);
 5ba:	83 e0       	ldi	r24, 0x03	; 3
 5bc:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 5c0:	c8 2f       	mov	r28, r24
 5c2:	8c ec       	ldi	r24, 0xCC	; 204
 5c4:	94 e0       	ldi	r25, 0x04	; 4
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <TOUCH_read_adc+0xe>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <TOUCH_read_adc+0x14>
 5cc:	00 00       	nop
	_delay_ms(1);
	pos.right_slider = ADC_read(RIGHT_SLIDER_CHANNEL);
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_read>
 5d4:	28 2f       	mov	r18, r24
	
	return pos;
 5d6:	6c 2f       	mov	r22, r28
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	82 2f       	mov	r24, r18
 5dc:	90 e0       	ldi	r25, 0x00	; 0
}
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <TOUCH_get_slider_position>:

TOUCH_slider_pos_t TOUCH_get_slider_position(){
	TOUCH_slider_pos_t current_pos = TOUCH_read_adc();
 5e2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <TOUCH_read_adc>
	return current_pos;
 5e6:	08 95       	ret

000005e8 <main>:
#include <util/delay.h>
//#include <stdio.h>
#include <avr/interrupt.h>

int main( void ){
	cli();
 5e8:	f8 94       	cli
	// Initializations 
	UART_Init( MYUBRR );
 5ea:	8f e1       	ldi	r24, 0x1F	; 31
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 a9 01 	call	0x352	; 0x352 <UART_Init>
	ADC_init();
 5f2:	0e 94 bc 01 	call	0x378	; 0x378 <ADC_init>
	
	JOY_init();
 5f6:	0e 94 c9 02 	call	0x592	; 0x592 <JOY_init>
	TOUCH_init();
 5fa:	0e 94 ce 02 	call	0x59c	; 0x59c <TOUCH_init>
	//OLED_init();
	//MENU_init();
	
	SPI_init();
 5fe:	0e 94 88 01 	call	0x310	; 0x310 <SPI_init>
	MCP_init();
 602:	0e 94 33 01 	call	0x266	; 0x266 <MCP_init>
	CAN_init();
 606:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	printf("\n\n\nInit done\n");
 60a:	88 ec       	ldi	r24, 0xC8	; 200
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 76 03 	call	0x6ec	; 0x6ec <puts>
	sei();
 612:	78 94       	sei
		//printf("Sent length: %d \t Received length: %d \n", send.length, receive.length);
		//printf("\n\nSent message: %s \n", send.data);
		//printf("Sent id: %d \n", send.id);
		//printf("Sent length: %d \n", send.length);
		
		SEND2CAN_send_joy_pos_x();
 614:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <SEND2CAN_send_joy_pos_x>
		SEND2CAN_send_slider_pos();
 618:	0e 94 1f 02 	call	0x43e	; 0x43e <SEND2CAN_send_slider_pos>
		SEND2CAN_touch_button_pressed();
 61c:	0e 94 67 02 	call	0x4ce	; 0x4ce <SEND2CAN_touch_button_pressed>
 620:	8c ec       	ldi	r24, 0xCC	; 204
 622:	94 e0       	ldi	r25, 0x04	; 4
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <main+0x3c>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x42>
 62a:	00 00       	nop
 62c:	f3 cf       	rjmp	.-26     	; 0x614 <main+0x2c>

0000062e <fdevopen>:
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	ec 01       	movw	r28, r24
 638:	8b 01       	movw	r16, r22
 63a:	00 97       	sbiw	r24, 0x00	; 0
 63c:	31 f4       	brne	.+12     	; 0x64a <fdevopen+0x1c>
 63e:	61 15       	cp	r22, r1
 640:	71 05       	cpc	r23, r1
 642:	19 f4       	brne	.+6      	; 0x64a <fdevopen+0x1c>
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	38 c0       	rjmp	.+112    	; 0x6ba <fdevopen+0x8c>
 64a:	6e e0       	ldi	r22, 0x0E	; 14
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 75 05 	call	0xaea	; 0xaea <calloc>
 656:	fc 01       	movw	r30, r24
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	a1 f3       	breq	.-24     	; 0x644 <fdevopen+0x16>
 65c:	80 e8       	ldi	r24, 0x80	; 128
 65e:	83 83       	std	Z+3, r24	; 0x03
 660:	01 15       	cp	r16, r1
 662:	11 05       	cpc	r17, r1
 664:	71 f0       	breq	.+28     	; 0x682 <fdevopen+0x54>
 666:	13 87       	std	Z+11, r17	; 0x0b
 668:	02 87       	std	Z+10, r16	; 0x0a
 66a:	81 e8       	ldi	r24, 0x81	; 129
 66c:	83 83       	std	Z+3, r24	; 0x03
 66e:	80 91 e5 01 	lds	r24, 0x01E5
 672:	90 91 e6 01 	lds	r25, 0x01E6
 676:	89 2b       	or	r24, r25
 678:	21 f4       	brne	.+8      	; 0x682 <fdevopen+0x54>
 67a:	f0 93 e6 01 	sts	0x01E6, r31
 67e:	e0 93 e5 01 	sts	0x01E5, r30
 682:	20 97       	sbiw	r28, 0x00	; 0
 684:	c9 f0       	breq	.+50     	; 0x6b8 <fdevopen+0x8a>
 686:	d1 87       	std	Z+9, r29	; 0x09
 688:	c0 87       	std	Z+8, r28	; 0x08
 68a:	83 81       	ldd	r24, Z+3	; 0x03
 68c:	82 60       	ori	r24, 0x02	; 2
 68e:	83 83       	std	Z+3, r24	; 0x03
 690:	80 91 e7 01 	lds	r24, 0x01E7
 694:	90 91 e8 01 	lds	r25, 0x01E8
 698:	89 2b       	or	r24, r25
 69a:	71 f4       	brne	.+28     	; 0x6b8 <fdevopen+0x8a>
 69c:	f0 93 e8 01 	sts	0x01E8, r31
 6a0:	e0 93 e7 01 	sts	0x01E7, r30
 6a4:	80 91 e9 01 	lds	r24, 0x01E9
 6a8:	90 91 ea 01 	lds	r25, 0x01EA
 6ac:	89 2b       	or	r24, r25
 6ae:	21 f4       	brne	.+8      	; 0x6b8 <fdevopen+0x8a>
 6b0:	f0 93 ea 01 	sts	0x01EA, r31
 6b4:	e0 93 e9 01 	sts	0x01E9, r30
 6b8:	cf 01       	movw	r24, r30
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	08 95       	ret

000006c4 <printf>:
 6c4:	a0 e0       	ldi	r26, 0x00	; 0
 6c6:	b0 e0       	ldi	r27, 0x00	; 0
 6c8:	e8 e6       	ldi	r30, 0x68	; 104
 6ca:	f3 e0       	ldi	r31, 0x03	; 3
 6cc:	0c 94 75 07 	jmp	0xeea	; 0xeea <__prologue_saves__+0x20>
 6d0:	fe 01       	movw	r30, r28
 6d2:	35 96       	adiw	r30, 0x05	; 5
 6d4:	61 91       	ld	r22, Z+
 6d6:	71 91       	ld	r23, Z+
 6d8:	af 01       	movw	r20, r30
 6da:	80 91 e7 01 	lds	r24, 0x01E7
 6de:	90 91 e8 01 	lds	r25, 0x01E8
 6e2:	0e 94 a3 03 	call	0x746	; 0x746 <vfprintf>
 6e6:	e2 e0       	ldi	r30, 0x02	; 2
 6e8:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__epilogue_restores__+0x20>

000006ec <puts>:
 6ec:	0f 93       	push	r16
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	e0 91 e7 01 	lds	r30, 0x01E7
 6f8:	f0 91 e8 01 	lds	r31, 0x01E8
 6fc:	23 81       	ldd	r18, Z+3	; 0x03
 6fe:	21 ff       	sbrs	r18, 1
 700:	1b c0       	rjmp	.+54     	; 0x738 <puts+0x4c>
 702:	ec 01       	movw	r28, r24
 704:	00 e0       	ldi	r16, 0x00	; 0
 706:	10 e0       	ldi	r17, 0x00	; 0
 708:	89 91       	ld	r24, Y+
 70a:	60 91 e7 01 	lds	r22, 0x01E7
 70e:	70 91 e8 01 	lds	r23, 0x01E8
 712:	db 01       	movw	r26, r22
 714:	18 96       	adiw	r26, 0x08	; 8
 716:	ed 91       	ld	r30, X+
 718:	fc 91       	ld	r31, X
 71a:	19 97       	sbiw	r26, 0x09	; 9
 71c:	88 23       	and	r24, r24
 71e:	31 f0       	breq	.+12     	; 0x72c <puts+0x40>
 720:	09 95       	icall
 722:	89 2b       	or	r24, r25
 724:	89 f3       	breq	.-30     	; 0x708 <puts+0x1c>
 726:	0f ef       	ldi	r16, 0xFF	; 255
 728:	1f ef       	ldi	r17, 0xFF	; 255
 72a:	ee cf       	rjmp	.-36     	; 0x708 <puts+0x1c>
 72c:	8a e0       	ldi	r24, 0x0A	; 10
 72e:	09 95       	icall
 730:	89 2b       	or	r24, r25
 732:	11 f4       	brne	.+4      	; 0x738 <puts+0x4c>
 734:	c8 01       	movw	r24, r16
 736:	02 c0       	rjmp	.+4      	; 0x73c <puts+0x50>
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	9f ef       	ldi	r25, 0xFF	; 255
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	08 95       	ret

00000746 <vfprintf>:
 746:	ac e0       	ldi	r26, 0x0C	; 12
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	e9 ea       	ldi	r30, 0xA9	; 169
 74c:	f3 e0       	ldi	r31, 0x03	; 3
 74e:	0c 94 65 07 	jmp	0xeca	; 0xeca <__prologue_saves__>
 752:	7c 01       	movw	r14, r24
 754:	6b 01       	movw	r12, r22
 756:	8a 01       	movw	r16, r20
 758:	fc 01       	movw	r30, r24
 75a:	17 82       	std	Z+7, r1	; 0x07
 75c:	16 82       	std	Z+6, r1	; 0x06
 75e:	83 81       	ldd	r24, Z+3	; 0x03
 760:	81 ff       	sbrs	r24, 1
 762:	bd c1       	rjmp	.+890    	; 0xade <vfprintf+0x398>
 764:	ce 01       	movw	r24, r28
 766:	01 96       	adiw	r24, 0x01	; 1
 768:	4c 01       	movw	r8, r24
 76a:	f7 01       	movw	r30, r14
 76c:	93 81       	ldd	r25, Z+3	; 0x03
 76e:	f6 01       	movw	r30, r12
 770:	93 fd       	sbrc	r25, 3
 772:	85 91       	lpm	r24, Z+
 774:	93 ff       	sbrs	r25, 3
 776:	81 91       	ld	r24, Z+
 778:	6f 01       	movw	r12, r30
 77a:	88 23       	and	r24, r24
 77c:	09 f4       	brne	.+2      	; 0x780 <vfprintf+0x3a>
 77e:	ab c1       	rjmp	.+854    	; 0xad6 <vfprintf+0x390>
 780:	85 32       	cpi	r24, 0x25	; 37
 782:	39 f4       	brne	.+14     	; 0x792 <vfprintf+0x4c>
 784:	93 fd       	sbrc	r25, 3
 786:	85 91       	lpm	r24, Z+
 788:	93 ff       	sbrs	r25, 3
 78a:	81 91       	ld	r24, Z+
 78c:	6f 01       	movw	r12, r30
 78e:	85 32       	cpi	r24, 0x25	; 37
 790:	29 f4       	brne	.+10     	; 0x79c <vfprintf+0x56>
 792:	b7 01       	movw	r22, r14
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 79a:	e7 cf       	rjmp	.-50     	; 0x76a <vfprintf+0x24>
 79c:	51 2c       	mov	r5, r1
 79e:	31 2c       	mov	r3, r1
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	20 32       	cpi	r18, 0x20	; 32
 7a4:	a0 f4       	brcc	.+40     	; 0x7ce <vfprintf+0x88>
 7a6:	8b 32       	cpi	r24, 0x2B	; 43
 7a8:	69 f0       	breq	.+26     	; 0x7c4 <vfprintf+0x7e>
 7aa:	30 f4       	brcc	.+12     	; 0x7b8 <vfprintf+0x72>
 7ac:	80 32       	cpi	r24, 0x20	; 32
 7ae:	59 f0       	breq	.+22     	; 0x7c6 <vfprintf+0x80>
 7b0:	83 32       	cpi	r24, 0x23	; 35
 7b2:	69 f4       	brne	.+26     	; 0x7ce <vfprintf+0x88>
 7b4:	20 61       	ori	r18, 0x10	; 16
 7b6:	2c c0       	rjmp	.+88     	; 0x810 <vfprintf+0xca>
 7b8:	8d 32       	cpi	r24, 0x2D	; 45
 7ba:	39 f0       	breq	.+14     	; 0x7ca <vfprintf+0x84>
 7bc:	80 33       	cpi	r24, 0x30	; 48
 7be:	39 f4       	brne	.+14     	; 0x7ce <vfprintf+0x88>
 7c0:	21 60       	ori	r18, 0x01	; 1
 7c2:	26 c0       	rjmp	.+76     	; 0x810 <vfprintf+0xca>
 7c4:	22 60       	ori	r18, 0x02	; 2
 7c6:	24 60       	ori	r18, 0x04	; 4
 7c8:	23 c0       	rjmp	.+70     	; 0x810 <vfprintf+0xca>
 7ca:	28 60       	ori	r18, 0x08	; 8
 7cc:	21 c0       	rjmp	.+66     	; 0x810 <vfprintf+0xca>
 7ce:	27 fd       	sbrc	r18, 7
 7d0:	27 c0       	rjmp	.+78     	; 0x820 <vfprintf+0xda>
 7d2:	30 ed       	ldi	r19, 0xD0	; 208
 7d4:	38 0f       	add	r19, r24
 7d6:	3a 30       	cpi	r19, 0x0A	; 10
 7d8:	78 f4       	brcc	.+30     	; 0x7f8 <vfprintf+0xb2>
 7da:	26 ff       	sbrs	r18, 6
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0xa4>
 7de:	fa e0       	ldi	r31, 0x0A	; 10
 7e0:	5f 9e       	mul	r5, r31
 7e2:	30 0d       	add	r19, r0
 7e4:	11 24       	eor	r1, r1
 7e6:	53 2e       	mov	r5, r19
 7e8:	13 c0       	rjmp	.+38     	; 0x810 <vfprintf+0xca>
 7ea:	8a e0       	ldi	r24, 0x0A	; 10
 7ec:	38 9e       	mul	r3, r24
 7ee:	30 0d       	add	r19, r0
 7f0:	11 24       	eor	r1, r1
 7f2:	33 2e       	mov	r3, r19
 7f4:	20 62       	ori	r18, 0x20	; 32
 7f6:	0c c0       	rjmp	.+24     	; 0x810 <vfprintf+0xca>
 7f8:	8e 32       	cpi	r24, 0x2E	; 46
 7fa:	21 f4       	brne	.+8      	; 0x804 <vfprintf+0xbe>
 7fc:	26 fd       	sbrc	r18, 6
 7fe:	6b c1       	rjmp	.+726    	; 0xad6 <vfprintf+0x390>
 800:	20 64       	ori	r18, 0x40	; 64
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0xca>
 804:	8c 36       	cpi	r24, 0x6C	; 108
 806:	11 f4       	brne	.+4      	; 0x80c <vfprintf+0xc6>
 808:	20 68       	ori	r18, 0x80	; 128
 80a:	02 c0       	rjmp	.+4      	; 0x810 <vfprintf+0xca>
 80c:	88 36       	cpi	r24, 0x68	; 104
 80e:	41 f4       	brne	.+16     	; 0x820 <vfprintf+0xda>
 810:	f6 01       	movw	r30, r12
 812:	93 fd       	sbrc	r25, 3
 814:	85 91       	lpm	r24, Z+
 816:	93 ff       	sbrs	r25, 3
 818:	81 91       	ld	r24, Z+
 81a:	6f 01       	movw	r12, r30
 81c:	81 11       	cpse	r24, r1
 81e:	c1 cf       	rjmp	.-126    	; 0x7a2 <vfprintf+0x5c>
 820:	98 2f       	mov	r25, r24
 822:	9f 7d       	andi	r25, 0xDF	; 223
 824:	95 54       	subi	r25, 0x45	; 69
 826:	93 30       	cpi	r25, 0x03	; 3
 828:	28 f4       	brcc	.+10     	; 0x834 <vfprintf+0xee>
 82a:	0c 5f       	subi	r16, 0xFC	; 252
 82c:	1f 4f       	sbci	r17, 0xFF	; 255
 82e:	ff e3       	ldi	r31, 0x3F	; 63
 830:	f9 83       	std	Y+1, r31	; 0x01
 832:	0d c0       	rjmp	.+26     	; 0x84e <vfprintf+0x108>
 834:	83 36       	cpi	r24, 0x63	; 99
 836:	31 f0       	breq	.+12     	; 0x844 <vfprintf+0xfe>
 838:	83 37       	cpi	r24, 0x73	; 115
 83a:	71 f0       	breq	.+28     	; 0x858 <vfprintf+0x112>
 83c:	83 35       	cpi	r24, 0x53	; 83
 83e:	09 f0       	breq	.+2      	; 0x842 <vfprintf+0xfc>
 840:	5b c0       	rjmp	.+182    	; 0x8f8 <vfprintf+0x1b2>
 842:	22 c0       	rjmp	.+68     	; 0x888 <vfprintf+0x142>
 844:	f8 01       	movw	r30, r16
 846:	80 81       	ld	r24, Z
 848:	89 83       	std	Y+1, r24	; 0x01
 84a:	0e 5f       	subi	r16, 0xFE	; 254
 84c:	1f 4f       	sbci	r17, 0xFF	; 255
 84e:	44 24       	eor	r4, r4
 850:	43 94       	inc	r4
 852:	51 2c       	mov	r5, r1
 854:	54 01       	movw	r10, r8
 856:	15 c0       	rjmp	.+42     	; 0x882 <vfprintf+0x13c>
 858:	38 01       	movw	r6, r16
 85a:	f2 e0       	ldi	r31, 0x02	; 2
 85c:	6f 0e       	add	r6, r31
 85e:	71 1c       	adc	r7, r1
 860:	f8 01       	movw	r30, r16
 862:	a0 80       	ld	r10, Z
 864:	b1 80       	ldd	r11, Z+1	; 0x01
 866:	26 ff       	sbrs	r18, 6
 868:	03 c0       	rjmp	.+6      	; 0x870 <vfprintf+0x12a>
 86a:	65 2d       	mov	r22, r5
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <vfprintf+0x12e>
 870:	6f ef       	ldi	r22, 0xFF	; 255
 872:	7f ef       	ldi	r23, 0xFF	; 255
 874:	c5 01       	movw	r24, r10
 876:	2c 87       	std	Y+12, r18	; 0x0c
 878:	0e 94 ca 06 	call	0xd94	; 0xd94 <strnlen>
 87c:	2c 01       	movw	r4, r24
 87e:	83 01       	movw	r16, r6
 880:	2c 85       	ldd	r18, Y+12	; 0x0c
 882:	2f 77       	andi	r18, 0x7F	; 127
 884:	22 2e       	mov	r2, r18
 886:	17 c0       	rjmp	.+46     	; 0x8b6 <vfprintf+0x170>
 888:	38 01       	movw	r6, r16
 88a:	f2 e0       	ldi	r31, 0x02	; 2
 88c:	6f 0e       	add	r6, r31
 88e:	71 1c       	adc	r7, r1
 890:	f8 01       	movw	r30, r16
 892:	a0 80       	ld	r10, Z
 894:	b1 80       	ldd	r11, Z+1	; 0x01
 896:	26 ff       	sbrs	r18, 6
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <vfprintf+0x15a>
 89a:	65 2d       	mov	r22, r5
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <vfprintf+0x15e>
 8a0:	6f ef       	ldi	r22, 0xFF	; 255
 8a2:	7f ef       	ldi	r23, 0xFF	; 255
 8a4:	c5 01       	movw	r24, r10
 8a6:	2c 87       	std	Y+12, r18	; 0x0c
 8a8:	0e 94 b8 06 	call	0xd70	; 0xd70 <strnlen_P>
 8ac:	2c 01       	movw	r4, r24
 8ae:	2c 85       	ldd	r18, Y+12	; 0x0c
 8b0:	20 68       	ori	r18, 0x80	; 128
 8b2:	22 2e       	mov	r2, r18
 8b4:	83 01       	movw	r16, r6
 8b6:	23 fc       	sbrc	r2, 3
 8b8:	1b c0       	rjmp	.+54     	; 0x8f0 <vfprintf+0x1aa>
 8ba:	83 2d       	mov	r24, r3
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	48 16       	cp	r4, r24
 8c0:	59 06       	cpc	r5, r25
 8c2:	b0 f4       	brcc	.+44     	; 0x8f0 <vfprintf+0x1aa>
 8c4:	b7 01       	movw	r22, r14
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 8ce:	3a 94       	dec	r3
 8d0:	f4 cf       	rjmp	.-24     	; 0x8ba <vfprintf+0x174>
 8d2:	f5 01       	movw	r30, r10
 8d4:	27 fc       	sbrc	r2, 7
 8d6:	85 91       	lpm	r24, Z+
 8d8:	27 fe       	sbrs	r2, 7
 8da:	81 91       	ld	r24, Z+
 8dc:	5f 01       	movw	r10, r30
 8de:	b7 01       	movw	r22, r14
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 8e6:	31 10       	cpse	r3, r1
 8e8:	3a 94       	dec	r3
 8ea:	f1 e0       	ldi	r31, 0x01	; 1
 8ec:	4f 1a       	sub	r4, r31
 8ee:	51 08       	sbc	r5, r1
 8f0:	41 14       	cp	r4, r1
 8f2:	51 04       	cpc	r5, r1
 8f4:	71 f7       	brne	.-36     	; 0x8d2 <vfprintf+0x18c>
 8f6:	e5 c0       	rjmp	.+458    	; 0xac2 <vfprintf+0x37c>
 8f8:	84 36       	cpi	r24, 0x64	; 100
 8fa:	11 f0       	breq	.+4      	; 0x900 <vfprintf+0x1ba>
 8fc:	89 36       	cpi	r24, 0x69	; 105
 8fe:	39 f5       	brne	.+78     	; 0x94e <vfprintf+0x208>
 900:	f8 01       	movw	r30, r16
 902:	27 ff       	sbrs	r18, 7
 904:	07 c0       	rjmp	.+14     	; 0x914 <vfprintf+0x1ce>
 906:	60 81       	ld	r22, Z
 908:	71 81       	ldd	r23, Z+1	; 0x01
 90a:	82 81       	ldd	r24, Z+2	; 0x02
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	0c 5f       	subi	r16, 0xFC	; 252
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	08 c0       	rjmp	.+16     	; 0x924 <vfprintf+0x1de>
 914:	60 81       	ld	r22, Z
 916:	71 81       	ldd	r23, Z+1	; 0x01
 918:	88 27       	eor	r24, r24
 91a:	77 fd       	sbrc	r23, 7
 91c:	80 95       	com	r24
 91e:	98 2f       	mov	r25, r24
 920:	0e 5f       	subi	r16, 0xFE	; 254
 922:	1f 4f       	sbci	r17, 0xFF	; 255
 924:	2f 76       	andi	r18, 0x6F	; 111
 926:	b2 2e       	mov	r11, r18
 928:	97 ff       	sbrs	r25, 7
 92a:	09 c0       	rjmp	.+18     	; 0x93e <vfprintf+0x1f8>
 92c:	90 95       	com	r25
 92e:	80 95       	com	r24
 930:	70 95       	com	r23
 932:	61 95       	neg	r22
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	20 68       	ori	r18, 0x80	; 128
 93c:	b2 2e       	mov	r11, r18
 93e:	2a e0       	ldi	r18, 0x0A	; 10
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	a4 01       	movw	r20, r8
 944:	0e 94 07 07 	call	0xe0e	; 0xe0e <__ultoa_invert>
 948:	a8 2e       	mov	r10, r24
 94a:	a8 18       	sub	r10, r8
 94c:	44 c0       	rjmp	.+136    	; 0x9d6 <vfprintf+0x290>
 94e:	85 37       	cpi	r24, 0x75	; 117
 950:	29 f4       	brne	.+10     	; 0x95c <vfprintf+0x216>
 952:	2f 7e       	andi	r18, 0xEF	; 239
 954:	b2 2e       	mov	r11, r18
 956:	2a e0       	ldi	r18, 0x0A	; 10
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	25 c0       	rjmp	.+74     	; 0x9a6 <vfprintf+0x260>
 95c:	f2 2f       	mov	r31, r18
 95e:	f9 7f       	andi	r31, 0xF9	; 249
 960:	bf 2e       	mov	r11, r31
 962:	8f 36       	cpi	r24, 0x6F	; 111
 964:	c1 f0       	breq	.+48     	; 0x996 <vfprintf+0x250>
 966:	18 f4       	brcc	.+6      	; 0x96e <vfprintf+0x228>
 968:	88 35       	cpi	r24, 0x58	; 88
 96a:	79 f0       	breq	.+30     	; 0x98a <vfprintf+0x244>
 96c:	b4 c0       	rjmp	.+360    	; 0xad6 <vfprintf+0x390>
 96e:	80 37       	cpi	r24, 0x70	; 112
 970:	19 f0       	breq	.+6      	; 0x978 <vfprintf+0x232>
 972:	88 37       	cpi	r24, 0x78	; 120
 974:	21 f0       	breq	.+8      	; 0x97e <vfprintf+0x238>
 976:	af c0       	rjmp	.+350    	; 0xad6 <vfprintf+0x390>
 978:	2f 2f       	mov	r18, r31
 97a:	20 61       	ori	r18, 0x10	; 16
 97c:	b2 2e       	mov	r11, r18
 97e:	b4 fe       	sbrs	r11, 4
 980:	0d c0       	rjmp	.+26     	; 0x99c <vfprintf+0x256>
 982:	8b 2d       	mov	r24, r11
 984:	84 60       	ori	r24, 0x04	; 4
 986:	b8 2e       	mov	r11, r24
 988:	09 c0       	rjmp	.+18     	; 0x99c <vfprintf+0x256>
 98a:	24 ff       	sbrs	r18, 4
 98c:	0a c0       	rjmp	.+20     	; 0x9a2 <vfprintf+0x25c>
 98e:	9f 2f       	mov	r25, r31
 990:	96 60       	ori	r25, 0x06	; 6
 992:	b9 2e       	mov	r11, r25
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <vfprintf+0x25c>
 996:	28 e0       	ldi	r18, 0x08	; 8
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	05 c0       	rjmp	.+10     	; 0x9a6 <vfprintf+0x260>
 99c:	20 e1       	ldi	r18, 0x10	; 16
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <vfprintf+0x260>
 9a2:	20 e1       	ldi	r18, 0x10	; 16
 9a4:	32 e0       	ldi	r19, 0x02	; 2
 9a6:	f8 01       	movw	r30, r16
 9a8:	b7 fe       	sbrs	r11, 7
 9aa:	07 c0       	rjmp	.+14     	; 0x9ba <vfprintf+0x274>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	82 81       	ldd	r24, Z+2	; 0x02
 9b2:	93 81       	ldd	r25, Z+3	; 0x03
 9b4:	0c 5f       	subi	r16, 0xFC	; 252
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <vfprintf+0x280>
 9ba:	60 81       	ld	r22, Z
 9bc:	71 81       	ldd	r23, Z+1	; 0x01
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 5f       	subi	r16, 0xFE	; 254
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	a4 01       	movw	r20, r8
 9c8:	0e 94 07 07 	call	0xe0e	; 0xe0e <__ultoa_invert>
 9cc:	a8 2e       	mov	r10, r24
 9ce:	a8 18       	sub	r10, r8
 9d0:	fb 2d       	mov	r31, r11
 9d2:	ff 77       	andi	r31, 0x7F	; 127
 9d4:	bf 2e       	mov	r11, r31
 9d6:	b6 fe       	sbrs	r11, 6
 9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <vfprintf+0x2aa>
 9da:	2b 2d       	mov	r18, r11
 9dc:	2e 7f       	andi	r18, 0xFE	; 254
 9de:	a5 14       	cp	r10, r5
 9e0:	50 f4       	brcc	.+20     	; 0x9f6 <vfprintf+0x2b0>
 9e2:	b4 fe       	sbrs	r11, 4
 9e4:	0a c0       	rjmp	.+20     	; 0x9fa <vfprintf+0x2b4>
 9e6:	b2 fc       	sbrc	r11, 2
 9e8:	08 c0       	rjmp	.+16     	; 0x9fa <vfprintf+0x2b4>
 9ea:	2b 2d       	mov	r18, r11
 9ec:	2e 7e       	andi	r18, 0xEE	; 238
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <vfprintf+0x2b4>
 9f0:	7a 2c       	mov	r7, r10
 9f2:	2b 2d       	mov	r18, r11
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <vfprintf+0x2b6>
 9f6:	7a 2c       	mov	r7, r10
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <vfprintf+0x2b6>
 9fa:	75 2c       	mov	r7, r5
 9fc:	24 ff       	sbrs	r18, 4
 9fe:	0d c0       	rjmp	.+26     	; 0xa1a <vfprintf+0x2d4>
 a00:	fe 01       	movw	r30, r28
 a02:	ea 0d       	add	r30, r10
 a04:	f1 1d       	adc	r31, r1
 a06:	80 81       	ld	r24, Z
 a08:	80 33       	cpi	r24, 0x30	; 48
 a0a:	11 f4       	brne	.+4      	; 0xa10 <vfprintf+0x2ca>
 a0c:	29 7e       	andi	r18, 0xE9	; 233
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <vfprintf+0x2dc>
 a10:	22 ff       	sbrs	r18, 2
 a12:	06 c0       	rjmp	.+12     	; 0xa20 <vfprintf+0x2da>
 a14:	73 94       	inc	r7
 a16:	73 94       	inc	r7
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <vfprintf+0x2dc>
 a1a:	82 2f       	mov	r24, r18
 a1c:	86 78       	andi	r24, 0x86	; 134
 a1e:	09 f0       	breq	.+2      	; 0xa22 <vfprintf+0x2dc>
 a20:	73 94       	inc	r7
 a22:	23 fd       	sbrc	r18, 3
 a24:	13 c0       	rjmp	.+38     	; 0xa4c <vfprintf+0x306>
 a26:	20 ff       	sbrs	r18, 0
 a28:	06 c0       	rjmp	.+12     	; 0xa36 <vfprintf+0x2f0>
 a2a:	5a 2c       	mov	r5, r10
 a2c:	73 14       	cp	r7, r3
 a2e:	18 f4       	brcc	.+6      	; 0xa36 <vfprintf+0x2f0>
 a30:	53 0c       	add	r5, r3
 a32:	57 18       	sub	r5, r7
 a34:	73 2c       	mov	r7, r3
 a36:	73 14       	cp	r7, r3
 a38:	68 f4       	brcc	.+26     	; 0xa54 <vfprintf+0x30e>
 a3a:	b7 01       	movw	r22, r14
 a3c:	80 e2       	ldi	r24, 0x20	; 32
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	2c 87       	std	Y+12, r18	; 0x0c
 a42:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 a46:	73 94       	inc	r7
 a48:	2c 85       	ldd	r18, Y+12	; 0x0c
 a4a:	f5 cf       	rjmp	.-22     	; 0xa36 <vfprintf+0x2f0>
 a4c:	73 14       	cp	r7, r3
 a4e:	10 f4       	brcc	.+4      	; 0xa54 <vfprintf+0x30e>
 a50:	37 18       	sub	r3, r7
 a52:	01 c0       	rjmp	.+2      	; 0xa56 <vfprintf+0x310>
 a54:	31 2c       	mov	r3, r1
 a56:	24 ff       	sbrs	r18, 4
 a58:	12 c0       	rjmp	.+36     	; 0xa7e <vfprintf+0x338>
 a5a:	b7 01       	movw	r22, r14
 a5c:	80 e3       	ldi	r24, 0x30	; 48
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	2c 87       	std	Y+12, r18	; 0x0c
 a62:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 a66:	2c 85       	ldd	r18, Y+12	; 0x0c
 a68:	22 ff       	sbrs	r18, 2
 a6a:	17 c0       	rjmp	.+46     	; 0xa9a <vfprintf+0x354>
 a6c:	21 ff       	sbrs	r18, 1
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x330>
 a70:	88 e5       	ldi	r24, 0x58	; 88
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0x334>
 a76:	88 e7       	ldi	r24, 0x78	; 120
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	b7 01       	movw	r22, r14
 a7c:	0c c0       	rjmp	.+24     	; 0xa96 <vfprintf+0x350>
 a7e:	82 2f       	mov	r24, r18
 a80:	86 78       	andi	r24, 0x86	; 134
 a82:	59 f0       	breq	.+22     	; 0xa9a <vfprintf+0x354>
 a84:	21 fd       	sbrc	r18, 1
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0x346>
 a88:	80 e2       	ldi	r24, 0x20	; 32
 a8a:	01 c0       	rjmp	.+2      	; 0xa8e <vfprintf+0x348>
 a8c:	8b e2       	ldi	r24, 0x2B	; 43
 a8e:	27 fd       	sbrc	r18, 7
 a90:	8d e2       	ldi	r24, 0x2D	; 45
 a92:	b7 01       	movw	r22, r14
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 a9a:	a5 14       	cp	r10, r5
 a9c:	38 f4       	brcc	.+14     	; 0xaac <vfprintf+0x366>
 a9e:	b7 01       	movw	r22, r14
 aa0:	80 e3       	ldi	r24, 0x30	; 48
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 aa8:	5a 94       	dec	r5
 aaa:	f7 cf       	rjmp	.-18     	; 0xa9a <vfprintf+0x354>
 aac:	aa 94       	dec	r10
 aae:	f4 01       	movw	r30, r8
 ab0:	ea 0d       	add	r30, r10
 ab2:	f1 1d       	adc	r31, r1
 ab4:	80 81       	ld	r24, Z
 ab6:	b7 01       	movw	r22, r14
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 abe:	a1 10       	cpse	r10, r1
 ac0:	f5 cf       	rjmp	.-22     	; 0xaac <vfprintf+0x366>
 ac2:	33 20       	and	r3, r3
 ac4:	09 f4       	brne	.+2      	; 0xac8 <vfprintf+0x382>
 ac6:	51 ce       	rjmp	.-862    	; 0x76a <vfprintf+0x24>
 ac8:	b7 01       	movw	r22, r14
 aca:	80 e2       	ldi	r24, 0x20	; 32
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 ad2:	3a 94       	dec	r3
 ad4:	f6 cf       	rjmp	.-20     	; 0xac2 <vfprintf+0x37c>
 ad6:	f7 01       	movw	r30, r14
 ad8:	86 81       	ldd	r24, Z+6	; 0x06
 ada:	97 81       	ldd	r25, Z+7	; 0x07
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <vfprintf+0x39c>
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	9f ef       	ldi	r25, 0xFF	; 255
 ae2:	2c 96       	adiw	r28, 0x0c	; 12
 ae4:	e2 e1       	ldi	r30, 0x12	; 18
 ae6:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__epilogue_restores__>

00000aea <calloc>:
 aea:	0f 93       	push	r16
 aec:	1f 93       	push	r17
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	86 9f       	mul	r24, r22
 af4:	80 01       	movw	r16, r0
 af6:	87 9f       	mul	r24, r23
 af8:	10 0d       	add	r17, r0
 afa:	96 9f       	mul	r25, r22
 afc:	10 0d       	add	r17, r0
 afe:	11 24       	eor	r1, r1
 b00:	c8 01       	movw	r24, r16
 b02:	0e 94 91 05 	call	0xb22	; 0xb22 <malloc>
 b06:	ec 01       	movw	r28, r24
 b08:	00 97       	sbiw	r24, 0x00	; 0
 b0a:	29 f0       	breq	.+10     	; 0xb16 <calloc+0x2c>
 b0c:	a8 01       	movw	r20, r16
 b0e:	60 e0       	ldi	r22, 0x00	; 0
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	0e 94 c3 06 	call	0xd86	; 0xd86 <memset>
 b16:	ce 01       	movw	r24, r28
 b18:	df 91       	pop	r29
 b1a:	cf 91       	pop	r28
 b1c:	1f 91       	pop	r17
 b1e:	0f 91       	pop	r16
 b20:	08 95       	ret

00000b22 <malloc>:
 b22:	cf 93       	push	r28
 b24:	df 93       	push	r29
 b26:	82 30       	cpi	r24, 0x02	; 2
 b28:	91 05       	cpc	r25, r1
 b2a:	10 f4       	brcc	.+4      	; 0xb30 <malloc+0xe>
 b2c:	82 e0       	ldi	r24, 0x02	; 2
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	e0 91 ed 01 	lds	r30, 0x01ED
 b34:	f0 91 ee 01 	lds	r31, 0x01EE
 b38:	20 e0       	ldi	r18, 0x00	; 0
 b3a:	30 e0       	ldi	r19, 0x00	; 0
 b3c:	a0 e0       	ldi	r26, 0x00	; 0
 b3e:	b0 e0       	ldi	r27, 0x00	; 0
 b40:	30 97       	sbiw	r30, 0x00	; 0
 b42:	39 f1       	breq	.+78     	; 0xb92 <malloc+0x70>
 b44:	40 81       	ld	r20, Z
 b46:	51 81       	ldd	r21, Z+1	; 0x01
 b48:	48 17       	cp	r20, r24
 b4a:	59 07       	cpc	r21, r25
 b4c:	b8 f0       	brcs	.+46     	; 0xb7c <malloc+0x5a>
 b4e:	48 17       	cp	r20, r24
 b50:	59 07       	cpc	r21, r25
 b52:	71 f4       	brne	.+28     	; 0xb70 <malloc+0x4e>
 b54:	82 81       	ldd	r24, Z+2	; 0x02
 b56:	93 81       	ldd	r25, Z+3	; 0x03
 b58:	10 97       	sbiw	r26, 0x00	; 0
 b5a:	29 f0       	breq	.+10     	; 0xb66 <malloc+0x44>
 b5c:	13 96       	adiw	r26, 0x03	; 3
 b5e:	9c 93       	st	X, r25
 b60:	8e 93       	st	-X, r24
 b62:	12 97       	sbiw	r26, 0x02	; 2
 b64:	2c c0       	rjmp	.+88     	; 0xbbe <malloc+0x9c>
 b66:	90 93 ee 01 	sts	0x01EE, r25
 b6a:	80 93 ed 01 	sts	0x01ED, r24
 b6e:	27 c0       	rjmp	.+78     	; 0xbbe <malloc+0x9c>
 b70:	21 15       	cp	r18, r1
 b72:	31 05       	cpc	r19, r1
 b74:	31 f0       	breq	.+12     	; 0xb82 <malloc+0x60>
 b76:	42 17       	cp	r20, r18
 b78:	53 07       	cpc	r21, r19
 b7a:	18 f0       	brcs	.+6      	; 0xb82 <malloc+0x60>
 b7c:	a9 01       	movw	r20, r18
 b7e:	db 01       	movw	r26, r22
 b80:	01 c0       	rjmp	.+2      	; 0xb84 <malloc+0x62>
 b82:	ef 01       	movw	r28, r30
 b84:	9a 01       	movw	r18, r20
 b86:	bd 01       	movw	r22, r26
 b88:	df 01       	movw	r26, r30
 b8a:	02 80       	ldd	r0, Z+2	; 0x02
 b8c:	f3 81       	ldd	r31, Z+3	; 0x03
 b8e:	e0 2d       	mov	r30, r0
 b90:	d7 cf       	rjmp	.-82     	; 0xb40 <malloc+0x1e>
 b92:	21 15       	cp	r18, r1
 b94:	31 05       	cpc	r19, r1
 b96:	f9 f0       	breq	.+62     	; 0xbd6 <malloc+0xb4>
 b98:	28 1b       	sub	r18, r24
 b9a:	39 0b       	sbc	r19, r25
 b9c:	24 30       	cpi	r18, 0x04	; 4
 b9e:	31 05       	cpc	r19, r1
 ba0:	80 f4       	brcc	.+32     	; 0xbc2 <malloc+0xa0>
 ba2:	8a 81       	ldd	r24, Y+2	; 0x02
 ba4:	9b 81       	ldd	r25, Y+3	; 0x03
 ba6:	61 15       	cp	r22, r1
 ba8:	71 05       	cpc	r23, r1
 baa:	21 f0       	breq	.+8      	; 0xbb4 <malloc+0x92>
 bac:	fb 01       	movw	r30, r22
 bae:	93 83       	std	Z+3, r25	; 0x03
 bb0:	82 83       	std	Z+2, r24	; 0x02
 bb2:	04 c0       	rjmp	.+8      	; 0xbbc <malloc+0x9a>
 bb4:	90 93 ee 01 	sts	0x01EE, r25
 bb8:	80 93 ed 01 	sts	0x01ED, r24
 bbc:	fe 01       	movw	r30, r28
 bbe:	32 96       	adiw	r30, 0x02	; 2
 bc0:	44 c0       	rjmp	.+136    	; 0xc4a <malloc+0x128>
 bc2:	fe 01       	movw	r30, r28
 bc4:	e2 0f       	add	r30, r18
 bc6:	f3 1f       	adc	r31, r19
 bc8:	81 93       	st	Z+, r24
 bca:	91 93       	st	Z+, r25
 bcc:	22 50       	subi	r18, 0x02	; 2
 bce:	31 09       	sbc	r19, r1
 bd0:	39 83       	std	Y+1, r19	; 0x01
 bd2:	28 83       	st	Y, r18
 bd4:	3a c0       	rjmp	.+116    	; 0xc4a <malloc+0x128>
 bd6:	20 91 eb 01 	lds	r18, 0x01EB
 bda:	30 91 ec 01 	lds	r19, 0x01EC
 bde:	23 2b       	or	r18, r19
 be0:	41 f4       	brne	.+16     	; 0xbf2 <malloc+0xd0>
 be2:	20 91 02 01 	lds	r18, 0x0102
 be6:	30 91 03 01 	lds	r19, 0x0103
 bea:	30 93 ec 01 	sts	0x01EC, r19
 bee:	20 93 eb 01 	sts	0x01EB, r18
 bf2:	20 91 00 01 	lds	r18, 0x0100
 bf6:	30 91 01 01 	lds	r19, 0x0101
 bfa:	21 15       	cp	r18, r1
 bfc:	31 05       	cpc	r19, r1
 bfe:	41 f4       	brne	.+16     	; 0xc10 <malloc+0xee>
 c00:	2d b7       	in	r18, 0x3d	; 61
 c02:	3e b7       	in	r19, 0x3e	; 62
 c04:	40 91 04 01 	lds	r20, 0x0104
 c08:	50 91 05 01 	lds	r21, 0x0105
 c0c:	24 1b       	sub	r18, r20
 c0e:	35 0b       	sbc	r19, r21
 c10:	e0 91 eb 01 	lds	r30, 0x01EB
 c14:	f0 91 ec 01 	lds	r31, 0x01EC
 c18:	e2 17       	cp	r30, r18
 c1a:	f3 07       	cpc	r31, r19
 c1c:	a0 f4       	brcc	.+40     	; 0xc46 <malloc+0x124>
 c1e:	2e 1b       	sub	r18, r30
 c20:	3f 0b       	sbc	r19, r31
 c22:	28 17       	cp	r18, r24
 c24:	39 07       	cpc	r19, r25
 c26:	78 f0       	brcs	.+30     	; 0xc46 <malloc+0x124>
 c28:	ac 01       	movw	r20, r24
 c2a:	4e 5f       	subi	r20, 0xFE	; 254
 c2c:	5f 4f       	sbci	r21, 0xFF	; 255
 c2e:	24 17       	cp	r18, r20
 c30:	35 07       	cpc	r19, r21
 c32:	48 f0       	brcs	.+18     	; 0xc46 <malloc+0x124>
 c34:	4e 0f       	add	r20, r30
 c36:	5f 1f       	adc	r21, r31
 c38:	50 93 ec 01 	sts	0x01EC, r21
 c3c:	40 93 eb 01 	sts	0x01EB, r20
 c40:	81 93       	st	Z+, r24
 c42:	91 93       	st	Z+, r25
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <malloc+0x128>
 c46:	e0 e0       	ldi	r30, 0x00	; 0
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	cf 01       	movw	r24, r30
 c4c:	df 91       	pop	r29
 c4e:	cf 91       	pop	r28
 c50:	08 95       	ret

00000c52 <free>:
 c52:	cf 93       	push	r28
 c54:	df 93       	push	r29
 c56:	00 97       	sbiw	r24, 0x00	; 0
 c58:	09 f4       	brne	.+2      	; 0xc5c <free+0xa>
 c5a:	87 c0       	rjmp	.+270    	; 0xd6a <free+0x118>
 c5c:	fc 01       	movw	r30, r24
 c5e:	32 97       	sbiw	r30, 0x02	; 2
 c60:	13 82       	std	Z+3, r1	; 0x03
 c62:	12 82       	std	Z+2, r1	; 0x02
 c64:	c0 91 ed 01 	lds	r28, 0x01ED
 c68:	d0 91 ee 01 	lds	r29, 0x01EE
 c6c:	20 97       	sbiw	r28, 0x00	; 0
 c6e:	81 f4       	brne	.+32     	; 0xc90 <free+0x3e>
 c70:	20 81       	ld	r18, Z
 c72:	31 81       	ldd	r19, Z+1	; 0x01
 c74:	28 0f       	add	r18, r24
 c76:	39 1f       	adc	r19, r25
 c78:	80 91 eb 01 	lds	r24, 0x01EB
 c7c:	90 91 ec 01 	lds	r25, 0x01EC
 c80:	82 17       	cp	r24, r18
 c82:	93 07       	cpc	r25, r19
 c84:	79 f5       	brne	.+94     	; 0xce4 <free+0x92>
 c86:	f0 93 ec 01 	sts	0x01EC, r31
 c8a:	e0 93 eb 01 	sts	0x01EB, r30
 c8e:	6d c0       	rjmp	.+218    	; 0xd6a <free+0x118>
 c90:	de 01       	movw	r26, r28
 c92:	20 e0       	ldi	r18, 0x00	; 0
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	ae 17       	cp	r26, r30
 c98:	bf 07       	cpc	r27, r31
 c9a:	50 f4       	brcc	.+20     	; 0xcb0 <free+0x5e>
 c9c:	12 96       	adiw	r26, 0x02	; 2
 c9e:	4d 91       	ld	r20, X+
 ca0:	5c 91       	ld	r21, X
 ca2:	13 97       	sbiw	r26, 0x03	; 3
 ca4:	9d 01       	movw	r18, r26
 ca6:	41 15       	cp	r20, r1
 ca8:	51 05       	cpc	r21, r1
 caa:	09 f1       	breq	.+66     	; 0xcee <free+0x9c>
 cac:	da 01       	movw	r26, r20
 cae:	f3 cf       	rjmp	.-26     	; 0xc96 <free+0x44>
 cb0:	b3 83       	std	Z+3, r27	; 0x03
 cb2:	a2 83       	std	Z+2, r26	; 0x02
 cb4:	40 81       	ld	r20, Z
 cb6:	51 81       	ldd	r21, Z+1	; 0x01
 cb8:	84 0f       	add	r24, r20
 cba:	95 1f       	adc	r25, r21
 cbc:	8a 17       	cp	r24, r26
 cbe:	9b 07       	cpc	r25, r27
 cc0:	71 f4       	brne	.+28     	; 0xcde <free+0x8c>
 cc2:	8d 91       	ld	r24, X+
 cc4:	9c 91       	ld	r25, X
 cc6:	11 97       	sbiw	r26, 0x01	; 1
 cc8:	84 0f       	add	r24, r20
 cca:	95 1f       	adc	r25, r21
 ccc:	02 96       	adiw	r24, 0x02	; 2
 cce:	91 83       	std	Z+1, r25	; 0x01
 cd0:	80 83       	st	Z, r24
 cd2:	12 96       	adiw	r26, 0x02	; 2
 cd4:	8d 91       	ld	r24, X+
 cd6:	9c 91       	ld	r25, X
 cd8:	13 97       	sbiw	r26, 0x03	; 3
 cda:	93 83       	std	Z+3, r25	; 0x03
 cdc:	82 83       	std	Z+2, r24	; 0x02
 cde:	21 15       	cp	r18, r1
 ce0:	31 05       	cpc	r19, r1
 ce2:	29 f4       	brne	.+10     	; 0xcee <free+0x9c>
 ce4:	f0 93 ee 01 	sts	0x01EE, r31
 ce8:	e0 93 ed 01 	sts	0x01ED, r30
 cec:	3e c0       	rjmp	.+124    	; 0xd6a <free+0x118>
 cee:	d9 01       	movw	r26, r18
 cf0:	13 96       	adiw	r26, 0x03	; 3
 cf2:	fc 93       	st	X, r31
 cf4:	ee 93       	st	-X, r30
 cf6:	12 97       	sbiw	r26, 0x02	; 2
 cf8:	4d 91       	ld	r20, X+
 cfa:	5d 91       	ld	r21, X+
 cfc:	a4 0f       	add	r26, r20
 cfe:	b5 1f       	adc	r27, r21
 d00:	ea 17       	cp	r30, r26
 d02:	fb 07       	cpc	r31, r27
 d04:	79 f4       	brne	.+30     	; 0xd24 <free+0xd2>
 d06:	80 81       	ld	r24, Z
 d08:	91 81       	ldd	r25, Z+1	; 0x01
 d0a:	84 0f       	add	r24, r20
 d0c:	95 1f       	adc	r25, r21
 d0e:	02 96       	adiw	r24, 0x02	; 2
 d10:	d9 01       	movw	r26, r18
 d12:	11 96       	adiw	r26, 0x01	; 1
 d14:	9c 93       	st	X, r25
 d16:	8e 93       	st	-X, r24
 d18:	82 81       	ldd	r24, Z+2	; 0x02
 d1a:	93 81       	ldd	r25, Z+3	; 0x03
 d1c:	13 96       	adiw	r26, 0x03	; 3
 d1e:	9c 93       	st	X, r25
 d20:	8e 93       	st	-X, r24
 d22:	12 97       	sbiw	r26, 0x02	; 2
 d24:	e0 e0       	ldi	r30, 0x00	; 0
 d26:	f0 e0       	ldi	r31, 0x00	; 0
 d28:	8a 81       	ldd	r24, Y+2	; 0x02
 d2a:	9b 81       	ldd	r25, Y+3	; 0x03
 d2c:	00 97       	sbiw	r24, 0x00	; 0
 d2e:	19 f0       	breq	.+6      	; 0xd36 <free+0xe4>
 d30:	fe 01       	movw	r30, r28
 d32:	ec 01       	movw	r28, r24
 d34:	f9 cf       	rjmp	.-14     	; 0xd28 <free+0xd6>
 d36:	ce 01       	movw	r24, r28
 d38:	02 96       	adiw	r24, 0x02	; 2
 d3a:	28 81       	ld	r18, Y
 d3c:	39 81       	ldd	r19, Y+1	; 0x01
 d3e:	82 0f       	add	r24, r18
 d40:	93 1f       	adc	r25, r19
 d42:	20 91 eb 01 	lds	r18, 0x01EB
 d46:	30 91 ec 01 	lds	r19, 0x01EC
 d4a:	28 17       	cp	r18, r24
 d4c:	39 07       	cpc	r19, r25
 d4e:	69 f4       	brne	.+26     	; 0xd6a <free+0x118>
 d50:	30 97       	sbiw	r30, 0x00	; 0
 d52:	29 f4       	brne	.+10     	; 0xd5e <free+0x10c>
 d54:	10 92 ee 01 	sts	0x01EE, r1
 d58:	10 92 ed 01 	sts	0x01ED, r1
 d5c:	02 c0       	rjmp	.+4      	; 0xd62 <free+0x110>
 d5e:	13 82       	std	Z+3, r1	; 0x03
 d60:	12 82       	std	Z+2, r1	; 0x02
 d62:	d0 93 ec 01 	sts	0x01EC, r29
 d66:	c0 93 eb 01 	sts	0x01EB, r28
 d6a:	df 91       	pop	r29
 d6c:	cf 91       	pop	r28
 d6e:	08 95       	ret

00000d70 <strnlen_P>:
 d70:	fc 01       	movw	r30, r24
 d72:	05 90       	lpm	r0, Z+
 d74:	61 50       	subi	r22, 0x01	; 1
 d76:	70 40       	sbci	r23, 0x00	; 0
 d78:	01 10       	cpse	r0, r1
 d7a:	d8 f7       	brcc	.-10     	; 0xd72 <strnlen_P+0x2>
 d7c:	80 95       	com	r24
 d7e:	90 95       	com	r25
 d80:	8e 0f       	add	r24, r30
 d82:	9f 1f       	adc	r25, r31
 d84:	08 95       	ret

00000d86 <memset>:
 d86:	dc 01       	movw	r26, r24
 d88:	01 c0       	rjmp	.+2      	; 0xd8c <memset+0x6>
 d8a:	6d 93       	st	X+, r22
 d8c:	41 50       	subi	r20, 0x01	; 1
 d8e:	50 40       	sbci	r21, 0x00	; 0
 d90:	e0 f7       	brcc	.-8      	; 0xd8a <memset+0x4>
 d92:	08 95       	ret

00000d94 <strnlen>:
 d94:	fc 01       	movw	r30, r24
 d96:	61 50       	subi	r22, 0x01	; 1
 d98:	70 40       	sbci	r23, 0x00	; 0
 d9a:	01 90       	ld	r0, Z+
 d9c:	01 10       	cpse	r0, r1
 d9e:	d8 f7       	brcc	.-10     	; 0xd96 <strnlen+0x2>
 da0:	80 95       	com	r24
 da2:	90 95       	com	r25
 da4:	8e 0f       	add	r24, r30
 da6:	9f 1f       	adc	r25, r31
 da8:	08 95       	ret

00000daa <fputc>:
 daa:	0f 93       	push	r16
 dac:	1f 93       	push	r17
 dae:	cf 93       	push	r28
 db0:	df 93       	push	r29
 db2:	18 2f       	mov	r17, r24
 db4:	09 2f       	mov	r16, r25
 db6:	eb 01       	movw	r28, r22
 db8:	8b 81       	ldd	r24, Y+3	; 0x03
 dba:	81 fd       	sbrc	r24, 1
 dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <fputc+0x1a>
 dbe:	8f ef       	ldi	r24, 0xFF	; 255
 dc0:	9f ef       	ldi	r25, 0xFF	; 255
 dc2:	20 c0       	rjmp	.+64     	; 0xe04 <fputc+0x5a>
 dc4:	82 ff       	sbrs	r24, 2
 dc6:	10 c0       	rjmp	.+32     	; 0xde8 <fputc+0x3e>
 dc8:	4e 81       	ldd	r20, Y+6	; 0x06
 dca:	5f 81       	ldd	r21, Y+7	; 0x07
 dcc:	2c 81       	ldd	r18, Y+4	; 0x04
 dce:	3d 81       	ldd	r19, Y+5	; 0x05
 dd0:	42 17       	cp	r20, r18
 dd2:	53 07       	cpc	r21, r19
 dd4:	7c f4       	brge	.+30     	; 0xdf4 <fputc+0x4a>
 dd6:	e8 81       	ld	r30, Y
 dd8:	f9 81       	ldd	r31, Y+1	; 0x01
 dda:	9f 01       	movw	r18, r30
 ddc:	2f 5f       	subi	r18, 0xFF	; 255
 dde:	3f 4f       	sbci	r19, 0xFF	; 255
 de0:	39 83       	std	Y+1, r19	; 0x01
 de2:	28 83       	st	Y, r18
 de4:	10 83       	st	Z, r17
 de6:	06 c0       	rjmp	.+12     	; 0xdf4 <fputc+0x4a>
 de8:	e8 85       	ldd	r30, Y+8	; 0x08
 dea:	f9 85       	ldd	r31, Y+9	; 0x09
 dec:	81 2f       	mov	r24, r17
 dee:	09 95       	icall
 df0:	89 2b       	or	r24, r25
 df2:	29 f7       	brne	.-54     	; 0xdbe <fputc+0x14>
 df4:	2e 81       	ldd	r18, Y+6	; 0x06
 df6:	3f 81       	ldd	r19, Y+7	; 0x07
 df8:	2f 5f       	subi	r18, 0xFF	; 255
 dfa:	3f 4f       	sbci	r19, 0xFF	; 255
 dfc:	3f 83       	std	Y+7, r19	; 0x07
 dfe:	2e 83       	std	Y+6, r18	; 0x06
 e00:	81 2f       	mov	r24, r17
 e02:	90 2f       	mov	r25, r16
 e04:	df 91       	pop	r29
 e06:	cf 91       	pop	r28
 e08:	1f 91       	pop	r17
 e0a:	0f 91       	pop	r16
 e0c:	08 95       	ret

00000e0e <__ultoa_invert>:
 e0e:	fa 01       	movw	r30, r20
 e10:	aa 27       	eor	r26, r26
 e12:	28 30       	cpi	r18, 0x08	; 8
 e14:	51 f1       	breq	.+84     	; 0xe6a <__ultoa_invert+0x5c>
 e16:	20 31       	cpi	r18, 0x10	; 16
 e18:	81 f1       	breq	.+96     	; 0xe7a <__ultoa_invert+0x6c>
 e1a:	e8 94       	clt
 e1c:	6f 93       	push	r22
 e1e:	6e 7f       	andi	r22, 0xFE	; 254
 e20:	6e 5f       	subi	r22, 0xFE	; 254
 e22:	7f 4f       	sbci	r23, 0xFF	; 255
 e24:	8f 4f       	sbci	r24, 0xFF	; 255
 e26:	9f 4f       	sbci	r25, 0xFF	; 255
 e28:	af 4f       	sbci	r26, 0xFF	; 255
 e2a:	b1 e0       	ldi	r27, 0x01	; 1
 e2c:	3e d0       	rcall	.+124    	; 0xeaa <__ultoa_invert+0x9c>
 e2e:	b4 e0       	ldi	r27, 0x04	; 4
 e30:	3c d0       	rcall	.+120    	; 0xeaa <__ultoa_invert+0x9c>
 e32:	67 0f       	add	r22, r23
 e34:	78 1f       	adc	r23, r24
 e36:	89 1f       	adc	r24, r25
 e38:	9a 1f       	adc	r25, r26
 e3a:	a1 1d       	adc	r26, r1
 e3c:	68 0f       	add	r22, r24
 e3e:	79 1f       	adc	r23, r25
 e40:	8a 1f       	adc	r24, r26
 e42:	91 1d       	adc	r25, r1
 e44:	a1 1d       	adc	r26, r1
 e46:	6a 0f       	add	r22, r26
 e48:	71 1d       	adc	r23, r1
 e4a:	81 1d       	adc	r24, r1
 e4c:	91 1d       	adc	r25, r1
 e4e:	a1 1d       	adc	r26, r1
 e50:	20 d0       	rcall	.+64     	; 0xe92 <__ultoa_invert+0x84>
 e52:	09 f4       	brne	.+2      	; 0xe56 <__ultoa_invert+0x48>
 e54:	68 94       	set
 e56:	3f 91       	pop	r19
 e58:	2a e0       	ldi	r18, 0x0A	; 10
 e5a:	26 9f       	mul	r18, r22
 e5c:	11 24       	eor	r1, r1
 e5e:	30 19       	sub	r19, r0
 e60:	30 5d       	subi	r19, 0xD0	; 208
 e62:	31 93       	st	Z+, r19
 e64:	de f6       	brtc	.-74     	; 0xe1c <__ultoa_invert+0xe>
 e66:	cf 01       	movw	r24, r30
 e68:	08 95       	ret
 e6a:	46 2f       	mov	r20, r22
 e6c:	47 70       	andi	r20, 0x07	; 7
 e6e:	40 5d       	subi	r20, 0xD0	; 208
 e70:	41 93       	st	Z+, r20
 e72:	b3 e0       	ldi	r27, 0x03	; 3
 e74:	0f d0       	rcall	.+30     	; 0xe94 <__ultoa_invert+0x86>
 e76:	c9 f7       	brne	.-14     	; 0xe6a <__ultoa_invert+0x5c>
 e78:	f6 cf       	rjmp	.-20     	; 0xe66 <__ultoa_invert+0x58>
 e7a:	46 2f       	mov	r20, r22
 e7c:	4f 70       	andi	r20, 0x0F	; 15
 e7e:	40 5d       	subi	r20, 0xD0	; 208
 e80:	4a 33       	cpi	r20, 0x3A	; 58
 e82:	18 f0       	brcs	.+6      	; 0xe8a <__ultoa_invert+0x7c>
 e84:	49 5d       	subi	r20, 0xD9	; 217
 e86:	31 fd       	sbrc	r19, 1
 e88:	40 52       	subi	r20, 0x20	; 32
 e8a:	41 93       	st	Z+, r20
 e8c:	02 d0       	rcall	.+4      	; 0xe92 <__ultoa_invert+0x84>
 e8e:	a9 f7       	brne	.-22     	; 0xe7a <__ultoa_invert+0x6c>
 e90:	ea cf       	rjmp	.-44     	; 0xe66 <__ultoa_invert+0x58>
 e92:	b4 e0       	ldi	r27, 0x04	; 4
 e94:	a6 95       	lsr	r26
 e96:	97 95       	ror	r25
 e98:	87 95       	ror	r24
 e9a:	77 95       	ror	r23
 e9c:	67 95       	ror	r22
 e9e:	ba 95       	dec	r27
 ea0:	c9 f7       	brne	.-14     	; 0xe94 <__ultoa_invert+0x86>
 ea2:	00 97       	sbiw	r24, 0x00	; 0
 ea4:	61 05       	cpc	r22, r1
 ea6:	71 05       	cpc	r23, r1
 ea8:	08 95       	ret
 eaa:	9b 01       	movw	r18, r22
 eac:	ac 01       	movw	r20, r24
 eae:	0a 2e       	mov	r0, r26
 eb0:	06 94       	lsr	r0
 eb2:	57 95       	ror	r21
 eb4:	47 95       	ror	r20
 eb6:	37 95       	ror	r19
 eb8:	27 95       	ror	r18
 eba:	ba 95       	dec	r27
 ebc:	c9 f7       	brne	.-14     	; 0xeb0 <__ultoa_invert+0xa2>
 ebe:	62 0f       	add	r22, r18
 ec0:	73 1f       	adc	r23, r19
 ec2:	84 1f       	adc	r24, r20
 ec4:	95 1f       	adc	r25, r21
 ec6:	a0 1d       	adc	r26, r0
 ec8:	08 95       	ret

00000eca <__prologue_saves__>:
 eca:	2f 92       	push	r2
 ecc:	3f 92       	push	r3
 ece:	4f 92       	push	r4
 ed0:	5f 92       	push	r5
 ed2:	6f 92       	push	r6
 ed4:	7f 92       	push	r7
 ed6:	8f 92       	push	r8
 ed8:	9f 92       	push	r9
 eda:	af 92       	push	r10
 edc:	bf 92       	push	r11
 ede:	cf 92       	push	r12
 ee0:	df 92       	push	r13
 ee2:	ef 92       	push	r14
 ee4:	ff 92       	push	r15
 ee6:	0f 93       	push	r16
 ee8:	1f 93       	push	r17
 eea:	cf 93       	push	r28
 eec:	df 93       	push	r29
 eee:	cd b7       	in	r28, 0x3d	; 61
 ef0:	de b7       	in	r29, 0x3e	; 62
 ef2:	ca 1b       	sub	r28, r26
 ef4:	db 0b       	sbc	r29, r27
 ef6:	0f b6       	in	r0, 0x3f	; 63
 ef8:	f8 94       	cli
 efa:	de bf       	out	0x3e, r29	; 62
 efc:	0f be       	out	0x3f, r0	; 63
 efe:	cd bf       	out	0x3d, r28	; 61
 f00:	09 94       	ijmp

00000f02 <__epilogue_restores__>:
 f02:	2a 88       	ldd	r2, Y+18	; 0x12
 f04:	39 88       	ldd	r3, Y+17	; 0x11
 f06:	48 88       	ldd	r4, Y+16	; 0x10
 f08:	5f 84       	ldd	r5, Y+15	; 0x0f
 f0a:	6e 84       	ldd	r6, Y+14	; 0x0e
 f0c:	7d 84       	ldd	r7, Y+13	; 0x0d
 f0e:	8c 84       	ldd	r8, Y+12	; 0x0c
 f10:	9b 84       	ldd	r9, Y+11	; 0x0b
 f12:	aa 84       	ldd	r10, Y+10	; 0x0a
 f14:	b9 84       	ldd	r11, Y+9	; 0x09
 f16:	c8 84       	ldd	r12, Y+8	; 0x08
 f18:	df 80       	ldd	r13, Y+7	; 0x07
 f1a:	ee 80       	ldd	r14, Y+6	; 0x06
 f1c:	fd 80       	ldd	r15, Y+5	; 0x05
 f1e:	0c 81       	ldd	r16, Y+4	; 0x04
 f20:	1b 81       	ldd	r17, Y+3	; 0x03
 f22:	aa 81       	ldd	r26, Y+2	; 0x02
 f24:	b9 81       	ldd	r27, Y+1	; 0x01
 f26:	ce 0f       	add	r28, r30
 f28:	d1 1d       	adc	r29, r1
 f2a:	0f b6       	in	r0, 0x3f	; 63
 f2c:	f8 94       	cli
 f2e:	de bf       	out	0x3e, r29	; 62
 f30:	0f be       	out	0x3f, r0	; 63
 f32:	cd bf       	out	0x3d, r28	; 61
 f34:	ed 01       	movw	r28, r26
 f36:	08 95       	ret

00000f38 <_exit>:
 f38:	f8 94       	cli

00000f3a <__stop_program>:
 f3a:	ff cf       	rjmp	.-2      	; 0xf3a <__stop_program>
