
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e2  00800100  00001d66  00001dfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  008003e2  008003e2  000020dc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000490  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e67  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000182c  00000000  00000000  0000642f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019be  00000000  00000000  00007c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c10  00000000  00000000  0000961c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cf6  00000000  00000000  0000a22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000024ad  00000000  00000000  0000af22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  0000d3cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__ctors_end>
       4:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_1>
       8:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
       c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      10:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      14:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      18:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      1c:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_7>
      20:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      24:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      28:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      2c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      30:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      34:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_13>
      38:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      3c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      40:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_16>
      44:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      48:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      4c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      50:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      54:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      58:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      5c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      60:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      64:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      68:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
      6c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	0c 0c       	add	r0, r12
      72:	0c 0c       	add	r0, r12
      74:	0c 0c       	add	r0, r12
      76:	0c 0c       	add	r0, r12
      78:	0c 0c       	add	r0, r12
      7a:	0c 0c       	add	r0, r12
      7c:	0c 0c       	add	r0, r12
      7e:	0c 0c       	add	r0, r12
      80:	0c 0c       	add	r0, r12
      82:	0c 0c       	add	r0, r12
      84:	0c 0c       	add	r0, r12
      86:	0c 0c       	add	r0, r12
      88:	0c 0c       	add	r0, r12
      8a:	0c 0c       	add	r0, r12
      8c:	0c 0c       	add	r0, r12
      8e:	0c 0c       	add	r0, r12
      90:	09 09       	sbc	r16, r9
      92:	09 0c       	add	r0, r9
      94:	0c 0c       	add	r0, r12
      96:	0c 0c       	add	r0, r12
      98:	0c 0c       	add	r0, r12
      9a:	0c 0c       	add	r0, r12
      9c:	0c 0c       	add	r0, r12
      9e:	0c 0c       	add	r0, r12
      a0:	0c 0c       	add	r0, r12
      a2:	0c 0c       	add	r0, r12
      a4:	0c 0c       	add	r0, r12
      a6:	0c 0c       	add	r0, r12
      a8:	0c 0c       	add	r0, r12
      aa:	0c 0c       	add	r0, r12
      ac:	0c 0c       	add	r0, r12
      ae:	0c 09       	sbc	r16, r12
      b0:	09 09       	sbc	r16, r9
      b2:	0c 0c       	add	r0, r12
      b4:	0c 0c       	add	r0, r12
      b6:	0c 0c       	add	r0, r12
      b8:	0c 0c       	add	r0, r12
      ba:	0c 0c       	add	r0, r12
      bc:	0c 0c       	add	r0, r12
      be:	00 00       	nop
      c0:	32 32       	cpi	r19, 0x22	; 34
      c2:	32 23       	and	r19, r18
      c4:	0f 32       	cpi	r16, 0x2F	; 47
      c6:	23 0f       	add	r18, r19
      c8:	41 32       	cpi	r20, 0x21	; 33
      ca:	32 32       	cpi	r19, 0x22	; 34
      cc:	32 23       	and	r19, r18
      ce:	0f 32       	cpi	r16, 0x2F	; 47
      d0:	23 0f       	add	r18, r19
      d2:	41 32       	cpi	r20, 0x21	; 33
      d4:	32 1e       	adc	r3, r18
      d6:	0f 32       	cpi	r16, 0x2F	; 47
      d8:	20 11       	cpse	r18, r0
      da:	0c 0c       	add	r0, r12
      dc:	19 20       	and	r1, r9
      de:	19 32       	cpi	r17, 0x29	; 41
      e0:	20 11       	cpse	r18, r0
      e2:	0c 0c       	add	r0, r12
      e4:	19 23       	and	r17, r25
      e6:	19 32       	cpi	r17, 0x29	; 41
      e8:	23 0c       	add	r2, r3
      ea:	32 25       	eor	r19, r2
      ec:	0c 41       	sbci	r16, 0x1C	; 28
      ee:	32 32       	cpi	r19, 0x22	; 34
      f0:	1e 0f       	add	r17, r30
      f2:	32 20       	and	r3, r2
      f4:	11 0c       	add	r1, r1
      f6:	0c 19       	sub	r16, r12
      f8:	20 19       	sub	r18, r0
      fa:	32 20       	and	r3, r2
      fc:	11 0c       	add	r1, r1
      fe:	0c 19       	sub	r16, r12
     100:	23 19       	sub	r18, r3
     102:	32 25       	eor	r19, r2
     104:	0c 32       	cpi	r16, 0x2C	; 44
     106:	25 0c       	add	r2, r5
     108:	41 41       	sbci	r20, 0x11	; 17
     10a:	00 00       	nop
     10c:	00 00       	nop
	...

00000110 <frequency>:
     110:	00 d0 24 45 00 d0 24 45 00 00 00 00 00 d0 24 45     ..$E..$E......$E
     120:	00 00 00 00 00 d0 02 45 00 d0 24 45 00 00 00 00     .......E..$E....
     130:	00 00 44 45 00 00 00 00 00 00 00 00 00 00 00 00     ..DE............
     140:	00 00 c4 44 00 00 00 00 00 00 00 00 00 00 00 00     ...D............
     150:	00 d0 02 45 00 00 00 00 00 00 00 00 00 00 c4 44     ...E...........D
	...
     168:	00 e0 a4 44 00 00 00 00 00 00 00 00 00 00 dc 44     ...D...........D
     178:	00 00 00 00 00 00 f7 44 00 00 00 00 00 20 e9 44     .......D..... .D
     188:	00 00 dc 44 00 00 00 00 00 00 c4 44 00 d0 24 45     ...D.......D..$E
     198:	00 00 44 45 00 00 5c 45 00 00 00 00 00 a0 2e 45     ..DE..\E.......E
     1a8:	00 00 44 45 00 00 00 00 00 d0 24 45 00 00 00 00     ..DE......$E....
     1b8:	00 d0 02 45 00 d0 12 45 00 00 f7 44 00 00 00 00     ...E...E...D....
     1c8:	00 00 00 00 00 d0 02 45 00 00 00 00 00 00 00 00     .......E........
     1d8:	00 00 c4 44 00 00 00 00 00 00 00 00 00 e0 a4 44     ...D...........D
	...
     1f0:	00 00 dc 44 00 00 00 00 00 00 f7 44 00 00 00 00     ...D.......D....
     200:	00 20 e9 44 00 00 dc 44 00 00 00 00 00 00 c4 44     . .D...D.......D
     210:	00 d0 24 45 00 00 44 45 00 00 5c 45 00 00 00 00     ..$E..DE..\E....
     220:	00 a0 2e 45 00 00 44 45 00 00 00 00 00 d0 24 45     ...E..DE......$E
     230:	00 00 00 00 00 d0 02 45 00 d0 12 45 00 00 f7 44     .......E...E...D
	...
     250:	00 00 dc 43 00 00 dc 43 00 00 dc 43 00 80 ae 43     ...C...C...C...C
     260:	00 c0 02 44 00 00 dc 43 00 80 ae 43 00 c0 02 44     ...D...C...C...D
     270:	00 00 dc 43 00 00 00 00 00 c0 24 44 00 c0 24 44     ...C......$D..$D
     280:	00 c0 24 44 00 80 2e 44 00 c0 02 44 00 80 cf 43     ..$D...D...D...C
     290:	00 80 ae 43 00 c0 02 44 00 00 dc 43 00 00 00 00     ...C...D...C....
     2a0:	00 00 5c 44 00 00 dc 43 00 00 dc 43 00 00 5c 44     ..\D...C...C..\D
     2b0:	00 c0 4f 44 00 00 44 44 00 00 39 44 00 80 2e 44     ..OD..DD..9D...D
     2c0:	00 00 39 44 00 00 00 00 00 00 e9 43 00 80 1b 44     ..9D.......C...D
     2d0:	00 c0 12 44 00 80 0a 44 00 c0 02 44 00 00 f7 43     ...D...D...D...C
     2e0:	00 c0 02 44 00 00 00 00 00 80 ae 43 00 80 cf 43     ...D.......C...C
     2f0:	00 80 ae 43 00 00 dc 43 00 c0 02 44 00 00 dc 43     ...C...C...D...C
     300:	00 c0 02 44 00 c0 24 44 00 00 00 00 00 00 5c 44     ...D..$D......\D
     310:	00 00 dc 43 00 00 dc 43 00 00 5c 44 00 c0 4f 44     ...C...C..\D..OD
     320:	00 00 44 44 00 00 39 44 00 80 2e 44 00 00 39 44     ..DD..9D...D..9D
     330:	00 00 00 00 00 00 e9 43 00 80 1b 44 00 c0 12 44     .......C...D...D
     340:	00 80 0a 44 00 c0 02 44 00 00 f7 43 00 c0 02 44     ...D...D...C...D
     350:	00 00 00 00 00 80 ae 43 00 80 cf 43 00 80 ae 43     .......C...C...C
     360:	00 c0 02 44 00 00 dc 43 00 80 ae 43 00 c0 02 44     ...D...C...C...D
     370:	00 00 dc 43 00 00 00 00 00 00 00 00 00 00 00 00     ...C............
	...

00000390 <font5>:
     390:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     3a0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     3b0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     3c0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     3d0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     3e0:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     3f0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     400:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     410:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     420:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     430:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     440:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     450:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     460:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     470:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     480:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     490:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     4a0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     4b0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     4c0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     4d0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     4e0:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     4f0:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     500:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     510:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     520:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     530:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     540:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     550:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     560:	00 00 41 36 08 00 02 01 03 02 01 00                 ..A6........

0000056c <__ctors_end>:
     56c:	11 24       	eor	r1, r1
     56e:	1f be       	out	0x3f, r1	; 63
     570:	cf ef       	ldi	r28, 0xFF	; 255
     572:	d4 e0       	ldi	r29, 0x04	; 4
     574:	de bf       	out	0x3e, r29	; 62
     576:	cd bf       	out	0x3d, r28	; 61

00000578 <__do_copy_data>:
     578:	13 e0       	ldi	r17, 0x03	; 3
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b1 e0       	ldi	r27, 0x01	; 1
     57e:	e6 e6       	ldi	r30, 0x66	; 102
     580:	fd e1       	ldi	r31, 0x1D	; 29
     582:	02 c0       	rjmp	.+4      	; 0x588 <__do_copy_data+0x10>
     584:	05 90       	lpm	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	a2 3e       	cpi	r26, 0xE2	; 226
     58a:	b1 07       	cpc	r27, r17
     58c:	d9 f7       	brne	.-10     	; 0x584 <__do_copy_data+0xc>

0000058e <__do_clear_bss>:
     58e:	24 e0       	ldi	r18, 0x04	; 4
     590:	a2 ee       	ldi	r26, 0xE2	; 226
     592:	b3 e0       	ldi	r27, 0x03	; 3
     594:	01 c0       	rjmp	.+2      	; 0x598 <.do_clear_bss_start>

00000596 <.do_clear_bss_loop>:
     596:	1d 92       	st	X+, r1

00000598 <.do_clear_bss_start>:
     598:	a7 30       	cpi	r26, 0x07	; 7
     59a:	b2 07       	cpc	r27, r18
     59c:	e1 f7       	brne	.-8      	; 0x596 <.do_clear_bss_loop>
     59e:	0e 94 24 08 	call	0x1048	; 0x1048 <main>
     5a2:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <_exit>

000005a6 <__bad_interrupt>:
     5a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005aa <CAN_init>:
enum interrupt_flags interrupt_flag = no_flag; 


int CAN_init()
{
	MCP_init();
     5aa:	0e 94 69 03 	call	0x6d2	; 0x6d2 <MCP_init>
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     5ae:	40 e6       	ldi	r20, 0x60	; 96
     5b0:	60 e6       	ldi	r22, 0x60	; 96
     5b2:	80 e6       	ldi	r24, 0x60	; 96
     5b4:	0e 94 93 03 	call	0x726	; 0x726 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     5b8:	40 e6       	ldi	r20, 0x60	; 96
     5ba:	60 e6       	ldi	r22, 0x60	; 96
     5bc:	80 e7       	ldi	r24, 0x70	; 112
     5be:	0e 94 93 03 	call	0x726	; 0x726 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     5c2:	44 e0       	ldi	r20, 0x04	; 4
     5c4:	64 e0       	ldi	r22, 0x04	; 4
     5c6:	80 e6       	ldi	r24, 0x60	; 96
     5c8:	0e 94 93 03 	call	0x726	; 0x726 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     5cc:	44 e0       	ldi	r20, 0x04	; 4
     5ce:	64 e0       	ldi	r22, 0x04	; 4
     5d0:	80 e7       	ldi	r24, 0x70	; 112
     5d2:	0e 94 93 03 	call	0x726	; 0x726 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	60 ee       	ldi	r22, 0xE0	; 224
     5da:	8f e0       	ldi	r24, 0x0F	; 15
     5dc:	0e 94 93 03 	call	0x726	; 0x726 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     5e0:	8e e0       	ldi	r24, 0x0E	; 14
     5e2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     5e6:	80 7e       	andi	r24, 0xE0	; 224
     5e8:	39 f0       	breq	.+14     	; 0x5f8 <CAN_init+0x4e>
		printf("MCP2515 is NOT in normal mode after CAN init\n");
     5ea:	86 e3       	ldi	r24, 0x36	; 54
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 8b 0a 	call	0x1516	; 0x1516 <puts>
		return 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	08 95       	ret
	}
	
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
     5f8:	63 e0       	ldi	r22, 0x03	; 3
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
     5fc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (0 << ISC01) | (0 << ISC00);
     600:	85 b7       	in	r24, 0x35	; 53
     602:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     604:	8b b7       	in	r24, 0x3b	; 59
     606:	80 64       	ori	r24, 0x40	; 64
     608:	8b bf       	out	0x3b, r24	; 59
	// Falling edge of INT2 generates interrupt request
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
}
     60e:	08 95       	ret

00000610 <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
     610:	1f 92       	push	r1
     612:	0f 92       	push	r0
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	0f 92       	push	r0
     618:	11 24       	eor	r1, r1
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
     632:	8c e2       	ldi	r24, 0x2C	; 44
     634:	0e 94 52 03 	call	0x6a4	; 0x6a4 <MCP_read>

	if (interrupt & MCP_RX0IF){
     638:	80 ff       	sbrs	r24, 0
     63a:	09 c0       	rjmp	.+18     	; 0x64e <__vector_1+0x3e>
		interrupt_flag = RX0;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 e2 03 	sts	0x03E2, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	8c e2       	ldi	r24, 0x2C	; 44
     648:	0e 94 93 03 	call	0x726	; 0x726 <MCP_bit_modify>
     64c:	0a c0       	rjmp	.+20     	; 0x662 <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
     64e:	81 ff       	sbrs	r24, 1
     650:	08 c0       	rjmp	.+16     	; 0x662 <__vector_1+0x52>
		interrupt_flag = RX1;
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	80 93 e2 03 	sts	0x03E2, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	62 e0       	ldi	r22, 0x02	; 2
     65c:	8c e2       	ldi	r24, 0x2C	; 44
     65e:	0e 94 93 03 	call	0x726	; 0x726 <MCP_bit_modify>
	}
	
}
     662:	ff 91       	pop	r31
     664:	ef 91       	pop	r30
     666:	bf 91       	pop	r27
     668:	af 91       	pop	r26
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	7f 91       	pop	r23
     670:	6f 91       	pop	r22
     672:	5f 91       	pop	r21
     674:	4f 91       	pop	r20
     676:	3f 91       	pop	r19
     678:	2f 91       	pop	r18
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
     68c:	80 ec       	ldi	r24, 0xC0	; 192
     68e:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     692:	82 e4       	ldi	r24, 0x42	; 66
     694:	8a 95       	dec	r24
     696:	f1 f7       	brne	.-4      	; 0x694 <MCP_reset+0x10>
     698:	00 c0       	rjmp	.+0      	; 0x69a <MCP_reset+0x16>
	_delay_us(200);
	SPI_set_ss(1);
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_set_ss>
     6a2:	08 95       	ret

000006a4 <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
     6a4:	cf 93       	push	r28
     6a6:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_set_ss>
	//printf("hello from MCP read 1\n");
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	//printf("hello from MCP read 2\n");
	// Send 8-bit address
	SPI_transmit_receive(address);
     6b6:	8c 2f       	mov	r24, r28
     6b8:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	//printf("hello from MCP read 3\n");
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
     6c2:	c8 2f       	mov	r28, r24
	//printf("hello from MCP read 4\n");
	SPI_set_ss(1);
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_set_ss>
	return received;
}
     6cc:	8c 2f       	mov	r24, r28
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <MCP_init>:
#include <util/delay.h>


uint8_t MCP_init( void )
{
	SPI_init();
     6d2:	0e 94 b1 03 	call	0x762	; 0x762 <SPI_init>
	//printf("hello from MCP init 1\n");
	MCP_reset();
     6d6:	0e 94 42 03 	call	0x684	; 0x684 <MCP_reset>
	//printf("hello from MCP init 2\n");
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     6da:	8e e0       	ldi	r24, 0x0E	; 14
     6dc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <MCP_read>
	//printf("hello from MCP init 3\n");
	
	if ((value & MODE_MASK) != MODE_CONFIG){
     6e0:	80 7e       	andi	r24, 0xE0	; 224
     6e2:	80 38       	cpi	r24, 0x80	; 128
     6e4:	31 f0       	breq	.+12     	; 0x6f2 <MCP_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset\n");
     6e6:	83 e6       	ldi	r24, 0x63	; 99
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	0e 94 8b 0a 	call	0x1516	; 0x1516 <puts>
		return 1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	08 95       	ret
	}
	//printf("hello from MCP init 4\n");
	return 0;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
}
     6f4:	08 95       	ret

000006f6 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	d8 2f       	mov	r29, r24
     6fc:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	SPI_transmit_receive(address);
     70c:	8d 2f       	mov	r24, r29
     70e:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	SPI_transmit_receive(data);
     712:	8c 2f       	mov	r24, r28
     714:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_set_ss>
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	18 2f       	mov	r17, r24
     72e:	d6 2f       	mov	r29, r22
     730:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
     73a:	85 e0       	ldi	r24, 0x05	; 5
     73c:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
     740:	81 2f       	mov	r24, r17
     742:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	SPI_transmit_receive(mask);
     746:	8d 2f       	mov	r24, r29
     748:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	SPI_transmit_receive(data);
     74c:	8c 2f       	mov	r24, r28
     74e:	0e 94 b8 03 	call	0x770	; 0x770 <SPI_transmit_receive>
	
	SPI_set_ss(1);
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 c3 03 	call	0x786	; 0x786 <SPI_set_ss>
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	08 95       	ret

00000762 <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
     762:	87 b3       	in	r24, 0x17	; 23
     764:	80 6b       	ori	r24, 0xB0	; 176
     766:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
     768:	81 e1       	ldi	r24, 0x11	; 17
     76a:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
     76c:	6e 9a       	sbi	0x0d, 6	; 13
     76e:	08 95       	ret

00000770 <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
     770:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
     772:	77 9b       	sbis	0x0e, 7	; 14
     774:	fe cf       	rjmp	.-4      	; 0x772 <SPI_transmit_receive+0x2>
     776:	85 ef       	ldi	r24, 0xF5	; 245
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <SPI_transmit_receive+0xa>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <SPI_transmit_receive+0x10>
     780:	00 00       	nop
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
     782:	8f b1       	in	r24, 0x0f	; 15
	
}
     784:	08 95       	ret

00000786 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	91 05       	cpc	r25, r1
     78a:	11 f4       	brne	.+4      	; 0x790 <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     78c:	c4 9a       	sbi	0x18, 4	; 24
     78e:	08 95       	ret
	}
	else if (val == 0){
     790:	89 2b       	or	r24, r25
     792:	09 f4       	brne	.+2      	; 0x796 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     794:	c4 98       	cbi	0x18, 4	; 24
     796:	08 95       	ret

00000798 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
     798:	5d 9b       	sbis	0x0b, 5	; 11
     79a:	fe cf       	rjmp	.-4      	; 0x798 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
     79c:	8c b9       	out	0x0c, r24	; 12
     79e:	08 95       	ret

000007a0 <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
     7a0:	5f 9b       	sbis	0x0b, 7	; 11
     7a2:	fe cf       	rjmp	.-4      	; 0x7a0 <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
     7a4:	8c b1       	in	r24, 0x0c	; 12
     7a6:	08 95       	ret

000007a8 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
     7a8:	20 b5       	in	r18, 0x20	; 32
     7aa:	92 2b       	or	r25, r18
     7ac:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
     7ae:	99 b1       	in	r25, 0x09	; 9
     7b0:	89 2b       	or	r24, r25
     7b2:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     7b4:	8a b1       	in	r24, 0x0a	; 10
     7b6:	88 61       	ori	r24, 0x18	; 24
     7b8:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     7ba:	80 b5       	in	r24, 0x20	; 32
     7bc:	8e 68       	ori	r24, 0x8E	; 142
     7be:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
     7c0:	60 ed       	ldi	r22, 0xD0	; 208
     7c2:	73 e0       	ldi	r23, 0x03	; 3
     7c4:	8c ec       	ldi	r24, 0xCC	; 204
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <fdevopen>
     7cc:	08 95       	ret

000007ce <SOUND_duration_init>:
int current_song;

void SOUND_duration_init(void)
{
	// Set PE2 as output
	DDRE |= (1 << PE2);
     7ce:	32 9a       	sbi	0x06, 2	; 6
	
	SOUND_frequency_init();
     7d0:	0e 94 00 05 	call	0xa00	; 0xa00 <SOUND_frequency_init>
	//Timer3 - normal mode, prescale = 32
	TCCR3A &= ~(1 << COM3A1) & ~(1 << COM3A0) & ~(1 << WGM31) & ~(1 << WGM30);
     7d4:	eb e8       	ldi	r30, 0x8B	; 139
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	8c 73       	andi	r24, 0x3C	; 60
     7dc:	80 83       	st	Z, r24
	TCCR3B &= ~(1 << WGM33) | (1 << CS30);
     7de:	ea e8       	ldi	r30, 0x8A	; 138
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	8f 7e       	andi	r24, 0xEF	; 239
     7e6:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << CS32) | (1 << CS31);
     7e8:	80 81       	ld	r24, Z
     7ea:	8e 60       	ori	r24, 0x0E	; 14
     7ec:	80 83       	st	Z, r24
     7ee:	08 95       	ret

000007f0 <SOUND_play_note>:
}

void SOUND_play_note(void)
{
	// set note high
	set_bit(PORTE, PE2);
     7f0:	3a 9a       	sbi	0x07, 2	; 7
	//PORTE |= (1<<PE2);
	SOUND_set_sound_on(1);
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 0b 05 	call	0xa16	; 0xa16 <SOUND_set_sound_on>
     7fa:	08 95       	ret

000007fc <SOUND_stop_note>:

void SOUND_stop_note(void)
{
	// set note low
	//PORTE &= ~(1<<PE2);
	clear_bit(PORTE, PE2);
     7fc:	3a 98       	cbi	0x07, 2	; 7
	SOUND_set_sound_on(0);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 0b 05 	call	0xa16	; 0xa16 <SOUND_set_sound_on>
     806:	08 95       	ret

00000808 <SOUND_start_note>:
	
	SOUND_start_note(pgm_read_float(&frequency[current_song][0]),pgm_read_byte(&duration[current_song][0]));
}

void SOUND_start_note(float freq, uint8_t dur)
{
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	6b 01       	movw	r12, r22
     812:	7c 01       	movw	r14, r24
	OCR3A = 1000*dur;
     814:	28 ee       	ldi	r18, 0xE8	; 232
     816:	33 e0       	ldi	r19, 0x03	; 3
     818:	42 9f       	mul	r20, r18
     81a:	c0 01       	movw	r24, r0
     81c:	43 9f       	mul	r20, r19
     81e:	90 0d       	add	r25, r0
     820:	11 24       	eor	r1, r1
     822:	90 93 87 00 	sts	0x0087, r25
     826:	80 93 86 00 	sts	0x0086, r24
	printf("Start note! Freq: %d \t Dur: %d\n", (int)freq, dur);
     82a:	1f 92       	push	r1
     82c:	4f 93       	push	r20
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0e 94 86 09 	call	0x130c	; 0x130c <__fixsfsi>
     836:	7f 93       	push	r23
     838:	6f 93       	push	r22
     83a:	84 e9       	ldi	r24, 0x94	; 148
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	9f 93       	push	r25
     840:	8f 93       	push	r24
     842:	0e 94 77 0a 	call	0x14ee	; 0x14ee <printf>
	if (freq == 0){
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	a9 01       	movw	r20, r18
     858:	c7 01       	movw	r24, r14
     85a:	b6 01       	movw	r22, r12
     85c:	0e 94 1a 09 	call	0x1234	; 0x1234 <__cmpsf2>
     860:	81 11       	cpse	r24, r1
     862:	09 c0       	rjmp	.+18     	; 0x876 <SOUND_start_note+0x6e>
		SOUND_stop_note();
     864:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SOUND_stop_note>
		SOUND_timer0_stop();
     868:	0e 94 10 05 	call	0xa20	; 0xa20 <SOUND_timer0_stop>
		timer0_on = 0;
     86c:	10 92 ed 03 	sts	0x03ED, r1
     870:	10 92 ec 03 	sts	0x03EC, r1
     874:	0d c0       	rjmp	.+26     	; 0x890 <SOUND_start_note+0x88>
	}
	else {
		OCR0 = 1/freq;
     876:	a7 01       	movw	r20, r14
     878:	96 01       	movw	r18, r12
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	80 e8       	ldi	r24, 0x80	; 128
     880:	9f e3       	ldi	r25, 0x3F	; 63
     882:	0e 94 1e 09 	call	0x123c	; 0x123c <__divsf3>
     886:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fixunssfsi>
     88a:	61 bf       	out	0x31, r22	; 49
		SOUND_play_note();
     88c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <SOUND_play_note>
	}
}
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	08 95       	ret

0000089a <SOUND_timer3_start>:
}

void SOUND_timer3_start(void)
{
	//Set the compare match interrupt enable
	ETIMSK |= (1 << OCIE3A);
     89a:	ed e7       	ldi	r30, 0x7D	; 125
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	80 61       	ori	r24, 0x10	; 16
     8a2:	80 83       	st	Z, r24
     8a4:	08 95       	ret

000008a6 <SOUND_start_song>:
}



void SOUND_start_song(int song)
{
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	ec 01       	movw	r28, r24
	SOUND_timer0_start();
     8ac:	0e 94 07 05 	call	0xa0e	; 0xa0e <SOUND_timer0_start>
	timer0_on = 1;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 ed 03 	sts	0x03ED, r25
     8b8:	80 93 ec 03 	sts	0x03EC, r24
	SOUND_timer3_start();
     8bc:	0e 94 4d 04 	call	0x89a	; 0x89a <SOUND_timer3_start>
	current_song = song;
     8c0:	d0 93 ef 03 	sts	0x03EF, r29
     8c4:	c0 93 ee 03 	sts	0x03EE, r28
	
	SOUND_start_note(pgm_read_float(&frequency[current_song][0]),pgm_read_byte(&duration[current_song][0]));
     8c8:	80 e5       	ldi	r24, 0x50	; 80
     8ca:	8c 9f       	mul	r24, r28
     8cc:	f0 01       	movw	r30, r0
     8ce:	8d 9f       	mul	r24, r29
     8d0:	f0 0d       	add	r31, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	e0 59       	subi	r30, 0x90	; 144
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	44 91       	lpm	r20, Z
     8da:	80 e4       	ldi	r24, 0x40	; 64
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	c8 9f       	mul	r28, r24
     8e0:	f0 01       	movw	r30, r0
     8e2:	c9 9f       	mul	r28, r25
     8e4:	f0 0d       	add	r31, r0
     8e6:	d8 9f       	mul	r29, r24
     8e8:	f0 0d       	add	r31, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	e0 5f       	subi	r30, 0xF0	; 240
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	65 91       	lpm	r22, Z+
     8f2:	75 91       	lpm	r23, Z+
     8f4:	85 91       	lpm	r24, Z+
     8f6:	94 91       	lpm	r25, Z
     8f8:	0e 94 04 04 	call	0x808	; 0x808 <SOUND_start_note>
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <__vector_7>:
	ETIMSK &= ~(1<< OCIE3A);
}

//
ISR(TIMER3_COMPA_vect)
{
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
	if (!timer0_on){
     924:	80 91 ec 03 	lds	r24, 0x03EC
     928:	90 91 ed 03 	lds	r25, 0x03ED
     92c:	89 2b       	or	r24, r25
     92e:	41 f4       	brne	.+16     	; 0x940 <__vector_7+0x3e>
		SOUND_timer0_start();
     930:	0e 94 07 05 	call	0xa0e	; 0xa0e <SOUND_timer0_start>
		timer0_on = 1;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	90 93 ed 03 	sts	0x03ED, r25
     93c:	80 93 ec 03 	sts	0x03EC, r24
	}
	number++;
     940:	80 91 e3 03 	lds	r24, 0x03E3
     944:	90 91 e4 03 	lds	r25, 0x03E4
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	90 93 e4 03 	sts	0x03E4, r25
     94e:	80 93 e3 03 	sts	0x03E3, r24
	if (pgm_read_byte(&duration[current_song][number])!=NULL){
     952:	20 91 ee 03 	lds	r18, 0x03EE
     956:	30 91 ef 03 	lds	r19, 0x03EF
     95a:	40 e5       	ldi	r20, 0x50	; 80
     95c:	42 9f       	mul	r20, r18
     95e:	f0 01       	movw	r30, r0
     960:	43 9f       	mul	r20, r19
     962:	f0 0d       	add	r31, r0
     964:	11 24       	eor	r1, r1
     966:	e8 0f       	add	r30, r24
     968:	f9 1f       	adc	r31, r25
     96a:	e0 59       	subi	r30, 0x90	; 144
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	44 91       	lpm	r20, Z
     970:	44 23       	and	r20, r20
     972:	b9 f0       	breq	.+46     	; 0x9a2 <__vector_7+0xa0>
		SOUND_start_note(pgm_read_float(&frequency[current_song][number]), pgm_read_byte(&duration[current_song][number]));
     974:	44 91       	lpm	r20, Z
     976:	50 e5       	ldi	r21, 0x50	; 80
     978:	52 9f       	mul	r21, r18
     97a:	f0 01       	movw	r30, r0
     97c:	53 9f       	mul	r21, r19
     97e:	f0 0d       	add	r31, r0
     980:	11 24       	eor	r1, r1
     982:	8e 0f       	add	r24, r30
     984:	9f 1f       	adc	r25, r31
     986:	fc 01       	movw	r30, r24
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	e0 5f       	subi	r30, 0xF0	; 240
     992:	fe 4f       	sbci	r31, 0xFE	; 254
     994:	65 91       	lpm	r22, Z+
     996:	75 91       	lpm	r23, Z+
     998:	85 91       	lpm	r24, Z+
     99a:	94 91       	lpm	r25, Z
     99c:	0e 94 04 04 	call	0x808	; 0x808 <SOUND_start_note>
     9a0:	1e c0       	rjmp	.+60     	; 0x9de <__vector_7+0xdc>
	}else{
		number = 0;
     9a2:	10 92 e4 03 	sts	0x03E4, r1
     9a6:	10 92 e3 03 	sts	0x03E3, r1
		SOUND_start_note(pgm_read_float(&frequency[current_song][number]), pgm_read_byte(&duration[current_song][number]));
     9aa:	80 e5       	ldi	r24, 0x50	; 80
     9ac:	82 9f       	mul	r24, r18
     9ae:	f0 01       	movw	r30, r0
     9b0:	83 9f       	mul	r24, r19
     9b2:	f0 0d       	add	r31, r0
     9b4:	11 24       	eor	r1, r1
     9b6:	e0 59       	subi	r30, 0x90	; 144
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	44 91       	lpm	r20, Z
     9bc:	80 e4       	ldi	r24, 0x40	; 64
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	28 9f       	mul	r18, r24
     9c2:	f0 01       	movw	r30, r0
     9c4:	29 9f       	mul	r18, r25
     9c6:	f0 0d       	add	r31, r0
     9c8:	38 9f       	mul	r19, r24
     9ca:	f0 0d       	add	r31, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	e0 5f       	subi	r30, 0xF0	; 240
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	65 91       	lpm	r22, Z+
     9d4:	75 91       	lpm	r23, Z+
     9d6:	85 91       	lpm	r24, Z+
     9d8:	94 91       	lpm	r25, Z
     9da:	0e 94 04 04 	call	0x808	; 0x808 <SOUND_start_note>
	}
}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <SOUND_frequency_init>:
int sound_on;

void SOUND_frequency_init(void)
{
	//Timer0-normal mode and prescaler=64
	TCCR0 |= (1<<CS01) | (1<<CS00);
     a00:	83 b7       	in	r24, 0x33	; 51
     a02:	83 60       	ori	r24, 0x03	; 3
     a04:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<WGM00) & ~(1<<WGM01) & ~(1<<CS02);
     a06:	83 b7       	in	r24, 0x33	; 51
     a08:	83 7b       	andi	r24, 0xB3	; 179
     a0a:	83 bf       	out	0x33, r24	; 51
     a0c:	08 95       	ret

00000a0e <SOUND_timer0_start>:


void SOUND_timer0_start(void)
{
	//Set the compare match interrupt enable
	TIMSK |= (1 << OCIE0);
     a0e:	89 b7       	in	r24, 0x39	; 57
     a10:	81 60       	ori	r24, 0x01	; 1
     a12:	89 bf       	out	0x39, r24	; 57
     a14:	08 95       	ret

00000a16 <SOUND_set_sound_on>:
}


void SOUND_set_sound_on(int on)
{
	sound_on = on;
     a16:	90 93 e6 03 	sts	0x03E6, r25
     a1a:	80 93 e5 03 	sts	0x03E5, r24
     a1e:	08 95       	ret

00000a20 <SOUND_timer0_stop>:
}


int SOUND_timer0_stop()
{
	TIMSK &= ~(1 << OCIE0);
     a20:	89 b7       	in	r24, 0x39	; 57
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	89 bf       	out	0x39, r24	; 57
}
     a26:	08 95       	ret

00000a28 <__vector_16>:


ISR(TIMER0_COMP_vect)
{
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
	//printf("Timer0 got interrupt\n");
	if (sound_on){
     a4a:	80 91 e5 03 	lds	r24, 0x03E5
     a4e:	90 91 e6 03 	lds	r25, 0x03E6
     a52:	89 2b       	or	r24, r25
     a54:	19 f0       	breq	.+6      	; 0xa5c <__vector_16+0x34>
		//printf("Sound on %d\n", sound_on);
		SOUND_stop_note();
     a56:	0e 94 fe 03 	call	0x7fc	; 0x7fc <SOUND_stop_note>
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <__vector_16+0x38>
	}else{
		//printf("Sound off %d\n", sound_on);
		SOUND_play_note();
     a5c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <SOUND_play_note>
	}
}
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	bf 91       	pop	r27
     a66:	af 91       	pop	r26
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	7f 91       	pop	r23
     a6e:	6f 91       	pop	r22
     a70:	5f 91       	pop	r21
     a72:	4f 91       	pop	r20
     a74:	3f 91       	pop	r19
     a76:	2f 91       	pop	r18
     a78:	0f 90       	pop	r0
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	0f 90       	pop	r0
     a7e:	1f 90       	pop	r1
     a80:	18 95       	reti

00000a82 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	MCUCR |= (1 << SRE);
     a82:	85 b7       	in	r24, 0x35	; 53
     a84:	80 68       	ori	r24, 0x80	; 128
     a86:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     a88:	80 b7       	in	r24, 0x30	; 48
     a8a:	80 62       	ori	r24, 0x20	; 32
     a8c:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	DDRD &= ~(1 << PD3);
     a8e:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	08 95       	ret

00000a96 <ADC_read>:

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
     a96:	84 30       	cpi	r24, 0x04	; 4
     a98:	70 f4       	brcc	.+28     	; 0xab6 <ADC_read+0x20>
	*ext_adc = 0x04 | channel; // bitwise OR
     a9a:	84 60       	ori	r24, 0x04	; 4
     a9c:	80 93 00 14 	sts	0x1400, r24
	
	// wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
     aa0:	83 99       	sbic	0x10, 3	; 16
     aa2:	fe cf       	rjmp	.-4      	; 0xaa0 <ADC_read+0xa>
     aa4:	85 ef       	ldi	r24, 0xF5	; 245
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <ADC_read+0x12>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <ADC_read+0x18>
     aae:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
     ab0:	80 91 00 14 	lds	r24, 0x1400
     ab4:	08 95       	ret

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
     ab6:	80 e0       	ldi	r24, 0x00	; 0
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
	
}
     ab8:	08 95       	ret

00000aba <EEPROM_write>:
#include <avr/interrupt.h>


void EEPROM_write(uint8_t data, unsigned int address)
{
	cli();
     aba:	f8 94       	cli
	
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     abc:	e1 99       	sbic	0x1c, 1	; 28
     abe:	fe cf       	rjmp	.-4      	; 0xabc <EEPROM_write+0x2>
	
	// Set up address and data registers
	EEAR = address;
     ac0:	7f bb       	out	0x1f, r23	; 31
     ac2:	6e bb       	out	0x1e, r22	; 30
	EEDR = data;
     ac4:	8d bb       	out	0x1d, r24	; 29
	
	// Write logical one to Master Write Enable
	EECR |= (1 << EEMWE);
     ac6:	e2 9a       	sbi	0x1c, 2	; 28
	
	// Start eeprom write
	EECR |= (1 << EEWE);
     ac8:	e1 9a       	sbi	0x1c, 1	; 28
	
	sei();
     aca:	78 94       	sei
     acc:	08 95       	ret

00000ace <EEPROM_read>:
}

uint8_t EEPROM_read(unsigned int address)
{
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     ace:	e1 99       	sbic	0x1c, 1	; 28
     ad0:	fe cf       	rjmp	.-4      	; 0xace <EEPROM_read>
	
	// Set up address register
	EEAR = address;
     ad2:	9f bb       	out	0x1f, r25	; 31
     ad4:	8e bb       	out	0x1e, r24	; 30
	
	// Start eeprom read
	EECR |= (1 << EERE);
     ad6:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     ad8:	8d b3       	in	r24, 0x1d	; 29
     ada:	08 95       	ret

00000adc <JOY_read_adc>:

int JOY_button(){
	return !(test_bit(PINB, PINB0));
}

JOY_position_t JOY_read_adc( void ){
     adc:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	0e 94 4b 05 	call	0xa96	; 0xa96 <ADC_read>
     ae4:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae6:	8c ec       	ldi	r24, 0xCC	; 204
     ae8:	94 e0       	ldi	r25, 0x04	; 4
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <JOY_read_adc+0xe>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <JOY_read_adc+0x14>
     af0:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0e 94 4b 05 	call	0xa96	; 0xa96 <ADC_read>
     af8:	28 2f       	mov	r18, r24
	
	return pos;
     afa:	6c 2f       	mov	r22, r28
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	82 2f       	mov	r24, r18
     b00:	90 e0       	ldi	r25, 0x00	; 0
}
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <JOY_calibrate>:
	set_bit(PORTB, PB0);
	
}

void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
     b06:	0e 94 6e 05 	call	0xadc	; 0xadc <JOY_read_adc>
     b0a:	60 93 f0 03 	sts	0x03F0, r22
     b0e:	70 93 f1 03 	sts	0x03F1, r23
     b12:	80 93 f2 03 	sts	0x03F2, r24
     b16:	90 93 f3 03 	sts	0x03F3, r25
     b1a:	08 95       	ret

00000b1c <JOY_init>:

JOY_position_t neutral_pos; 


void JOY_init( void ){
	JOY_calibrate();
     b1c:	0e 94 83 05 	call	0xb06	; 0xb06 <JOY_calibrate>
	
	// Initialize PORT B, pin 0 (joystick button) as input
	clear_bit(DDRB, PINB0);
     b20:	b8 98       	cbi	0x17, 0	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB0);
     b22:	c0 9a       	sbi	0x18, 0	; 24
     b24:	08 95       	ret

00000b26 <OLED_goto_column>:
}


void OLED_goto_column( uint8_t column )
{
	if (column < NUM_COLUMNS){
     b26:	88 23       	and	r24, r24
     b28:	8c f0       	brlt	.+34     	; 0xb4c <OLED_goto_column+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     b2a:	e0 91 16 01 	lds	r30, 0x0116
     b2e:	f0 91 17 01 	lds	r31, 0x0117
     b32:	91 e2       	ldi	r25, 0x21	; 33
     b34:	90 83       	st	Z, r25
     b36:	e0 91 16 01 	lds	r30, 0x0116
     b3a:	f0 91 17 01 	lds	r31, 0x0117
     b3e:	80 83       	st	Z, r24
     b40:	e0 91 16 01 	lds	r30, 0x0116
     b44:	f0 91 17 01 	lds	r31, 0x0117
     b48:	8f e7       	ldi	r24, 0x7F	; 127
     b4a:	80 83       	st	Z, r24
     b4c:	08 95       	ret

00000b4e <OLED_goto_line>:
	}
}

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
     b4e:	88 30       	cpi	r24, 0x08	; 8
     b50:	98 f4       	brcc	.+38     	; 0xb78 <OLED_goto_line+0x2a>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     b52:	e0 91 16 01 	lds	r30, 0x0116
     b56:	f0 91 17 01 	lds	r31, 0x0117
     b5a:	92 e2       	ldi	r25, 0x22	; 34
     b5c:	90 83       	st	Z, r25

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
		OLED_write_command(SET_PAGE_ADDRESS);
		line = l;
     b5e:	80 93 e9 03 	sts	0x03E9, r24
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     b62:	e0 91 16 01 	lds	r30, 0x0116
     b66:	f0 91 17 01 	lds	r31, 0x0117
     b6a:	80 83       	st	Z, r24
     b6c:	e0 91 16 01 	lds	r30, 0x0116
     b70:	f0 91 17 01 	lds	r31, 0x0117
     b74:	87 e0       	ldi	r24, 0x07	; 7
     b76:	80 83       	st	Z, r24
     b78:	08 95       	ret

00000b7a <OLED_pos>:
		OLED_write_command(7);
	}
}

void OLED_pos(uint8_t row, uint8_t column)
{
     b7a:	cf 93       	push	r28
     b7c:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
     b7e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <OLED_goto_line>
	OLED_goto_column(column);
     b82:	8c 2f       	mov	r24, r28
     b84:	0e 94 93 05 	call	0xb26	; 0xb26 <OLED_goto_column>
}
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <OLED_print_char>:
}

void OLED_print_char( char character )
{	
	//printf("Character: %c \n", *character);
	if ((character) == '\n'){
     b8c:	8a 30       	cpi	r24, 0x0A	; 10
     b8e:	39 f4       	brne	.+14     	; 0xb9e <OLED_print_char+0x12>
		//printf("newline\n");
		OLED_pos((line + 1), 0);
     b90:	80 91 e9 03 	lds	r24, 0x03E9
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_pos>
     b9c:	08 95       	ret
     b9e:	e8 2f       	mov	r30, r24
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	b0 97       	sbiw	r30, 0x20	; 32
     ba4:	cf 01       	movw	r24, r30
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	e8 0f       	add	r30, r24
     bb0:	f9 1f       	adc	r31, r25
     bb2:	e0 57       	subi	r30, 0x70	; 112
     bb4:	fc 4f       	sbci	r31, 0xFC	; 252
}

void OLED_print_char( char character )
{	
	//printf("Character: %c \n", *character);
	if ((character) == '\n'){
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
		//printf("newline\n");
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
			OLED_write_data(pgm_read_byte(&font5[character - ' '][i]));
     bba:	24 91       	lpm	r18, Z
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     bbc:	a0 91 14 01 	lds	r26, 0x0114
     bc0:	b0 91 15 01 	lds	r27, 0x0115
     bc4:	2c 93       	st	X, r18
	if ((character) == '\n'){
		//printf("newline\n");
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	31 96       	adiw	r30, 0x01	; 1
     bca:	85 30       	cpi	r24, 0x05	; 5
     bcc:	91 05       	cpc	r25, r1
     bce:	a9 f7       	brne	.-22     	; 0xbba <OLED_print_char+0x2e>
     bd0:	08 95       	ret

00000bd2 <OLED_home>:
}

void OLED_home( void )
{
	// go "home", upper left corner
	OLED_pos(0, 0);
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_pos>
     bda:	08 95       	ret

00000bdc <OLED_clear_line>:


void OLED_clear_line( uint8_t line )
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_pos>
	
	// go through all columns
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
     be2:	80 e0       	ldi	r24, 0x00	; 0
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     be4:	e0 91 14 01 	lds	r30, 0x0114
     be8:	f0 91 15 01 	lds	r31, 0x0115
     bec:	10 82       	st	Z, r1
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
	
	// go through all columns
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	80 38       	cpi	r24, 0x80	; 128
     bf2:	c1 f7       	brne	.-16     	; 0xbe4 <OLED_clear_line+0x8>
		// write 8 bits to each column
		OLED_write_data(0x00);
	}
}
     bf4:	08 95       	ret

00000bf6 <OLED_reset>:

void OLED_reset( void )
{
     bf6:	cf 93       	push	r28
	// clear all lines
	for (uint8_t line = 0; line < NUM_LINES; line++){
     bf8:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(line);
     bfa:	8c 2f       	mov	r24, r28
     bfc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OLED_clear_line>
}

void OLED_reset( void )
{
	// clear all lines
	for (uint8_t line = 0; line < NUM_LINES; line++){
     c00:	cf 5f       	subi	r28, 0xFF	; 255
     c02:	c8 30       	cpi	r28, 0x08	; 8
     c04:	d1 f7       	brne	.-12     	; 0xbfa <OLED_reset+0x4>
		OLED_clear_line(line);
	}
	
	// go home
	OLED_home();
     c06:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <OLED_home>
}
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <OLED_init>:
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     c0e:	e0 91 16 01 	lds	r30, 0x0116
     c12:	f0 91 17 01 	lds	r31, 0x0117
     c16:	8e ea       	ldi	r24, 0xAE	; 174
     c18:	80 83       	st	Z, r24
     c1a:	e0 91 16 01 	lds	r30, 0x0116
     c1e:	f0 91 17 01 	lds	r31, 0x0117
     c22:	81 ea       	ldi	r24, 0xA1	; 161
     c24:	80 83       	st	Z, r24
     c26:	e0 91 16 01 	lds	r30, 0x0116
     c2a:	f0 91 17 01 	lds	r31, 0x0117
     c2e:	8a ed       	ldi	r24, 0xDA	; 218
     c30:	80 83       	st	Z, r24
     c32:	e0 91 16 01 	lds	r30, 0x0116
     c36:	f0 91 17 01 	lds	r31, 0x0117
     c3a:	82 e1       	ldi	r24, 0x12	; 18
     c3c:	80 83       	st	Z, r24
     c3e:	e0 91 16 01 	lds	r30, 0x0116
     c42:	f0 91 17 01 	lds	r31, 0x0117
     c46:	88 ec       	ldi	r24, 0xC8	; 200
     c48:	80 83       	st	Z, r24
     c4a:	e0 91 16 01 	lds	r30, 0x0116
     c4e:	f0 91 17 01 	lds	r31, 0x0117
     c52:	88 ea       	ldi	r24, 0xA8	; 168
     c54:	80 83       	st	Z, r24
     c56:	e0 91 16 01 	lds	r30, 0x0116
     c5a:	f0 91 17 01 	lds	r31, 0x0117
     c5e:	8f e3       	ldi	r24, 0x3F	; 63
     c60:	80 83       	st	Z, r24
     c62:	e0 91 16 01 	lds	r30, 0x0116
     c66:	f0 91 17 01 	lds	r31, 0x0117
     c6a:	85 ed       	ldi	r24, 0xD5	; 213
     c6c:	80 83       	st	Z, r24
     c6e:	e0 91 16 01 	lds	r30, 0x0116
     c72:	f0 91 17 01 	lds	r31, 0x0117
     c76:	80 e8       	ldi	r24, 0x80	; 128
     c78:	80 83       	st	Z, r24
     c7a:	e0 91 16 01 	lds	r30, 0x0116
     c7e:	f0 91 17 01 	lds	r31, 0x0117
     c82:	81 e8       	ldi	r24, 0x81	; 129
     c84:	80 83       	st	Z, r24
     c86:	e0 91 16 01 	lds	r30, 0x0116
     c8a:	f0 91 17 01 	lds	r31, 0x0117
     c8e:	80 e5       	ldi	r24, 0x50	; 80
     c90:	80 83       	st	Z, r24
     c92:	e0 91 16 01 	lds	r30, 0x0116
     c96:	f0 91 17 01 	lds	r31, 0x0117
     c9a:	89 ed       	ldi	r24, 0xD9	; 217
     c9c:	80 83       	st	Z, r24
     c9e:	e0 91 16 01 	lds	r30, 0x0116
     ca2:	f0 91 17 01 	lds	r31, 0x0117
     ca6:	81 e2       	ldi	r24, 0x21	; 33
     ca8:	80 83       	st	Z, r24
     caa:	e0 91 16 01 	lds	r30, 0x0116
     cae:	f0 91 17 01 	lds	r31, 0x0117
     cb2:	80 e2       	ldi	r24, 0x20	; 32
     cb4:	80 83       	st	Z, r24
     cb6:	e0 91 16 01 	lds	r30, 0x0116
     cba:	f0 91 17 01 	lds	r31, 0x0117
     cbe:	10 82       	st	Z, r1
     cc0:	e0 91 16 01 	lds	r30, 0x0116
     cc4:	f0 91 17 01 	lds	r31, 0x0117
     cc8:	8b ed       	ldi	r24, 0xDB	; 219
     cca:	80 83       	st	Z, r24
     ccc:	e0 91 16 01 	lds	r30, 0x0116
     cd0:	f0 91 17 01 	lds	r31, 0x0117
     cd4:	80 e3       	ldi	r24, 0x30	; 48
     cd6:	80 83       	st	Z, r24
     cd8:	e0 91 16 01 	lds	r30, 0x0116
     cdc:	f0 91 17 01 	lds	r31, 0x0117
     ce0:	8d ea       	ldi	r24, 0xAD	; 173
     ce2:	80 83       	st	Z, r24
     ce4:	e0 91 16 01 	lds	r30, 0x0116
     ce8:	f0 91 17 01 	lds	r31, 0x0117
     cec:	10 82       	st	Z, r1
     cee:	e0 91 16 01 	lds	r30, 0x0116
     cf2:	f0 91 17 01 	lds	r31, 0x0117
     cf6:	84 ea       	ldi	r24, 0xA4	; 164
     cf8:	80 83       	st	Z, r24
     cfa:	e0 91 16 01 	lds	r30, 0x0116
     cfe:	f0 91 17 01 	lds	r31, 0x0117
     d02:	86 ea       	ldi	r24, 0xA6	; 166
     d04:	80 83       	st	Z, r24
     d06:	e0 91 16 01 	lds	r30, 0x0116
     d0a:	f0 91 17 01 	lds	r31, 0x0117
     d0e:	8f ea       	ldi	r24, 0xAF	; 175
     d10:	80 83       	st	Z, r24
	OLED_write_command(ENTIRE_DISPLAY_ON);			  //out  follows  RAM  content

	OLED_write_command(SET_NORMAL_DISPLAY);
	OLED_write_command(DISPLAY_ON);
	
	OLED_reset();
     d12:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <OLED_reset>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     d16:	e0 91 16 01 	lds	r30, 0x0116
     d1a:	f0 91 17 01 	lds	r31, 0x0117
     d1e:	83 ed       	ldi	r24, 0xD3	; 211
     d20:	80 83       	st	Z, r24
     d22:	e0 91 16 01 	lds	r30, 0x0116
     d26:	f0 91 17 01 	lds	r31, 0x0117
     d2a:	10 82       	st	Z, r1
     d2c:	08 95       	ret

00000d2e <OLED_set_contrast>:
     d2e:	e0 91 16 01 	lds	r30, 0x0116
     d32:	f0 91 17 01 	lds	r31, 0x0117
     d36:	91 e8       	ldi	r25, 0x81	; 129
     d38:	90 83       	st	Z, r25
     d3a:	e0 91 16 01 	lds	r30, 0x0116
     d3e:	f0 91 17 01 	lds	r31, 0x0117
     d42:	80 83       	st	Z, r24
     d44:	08 95       	ret

00000d46 <OLED_invert_screen>:
}

void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
     d46:	80 91 e7 03 	lds	r24, 0x03E7
     d4a:	90 91 e8 03 	lds	r25, 0x03E8
     d4e:	89 2b       	or	r24, r25
     d50:	69 f4       	brne	.+26     	; 0xd6c <OLED_invert_screen+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     d52:	e0 91 16 01 	lds	r30, 0x0116
     d56:	f0 91 17 01 	lds	r31, 0x0117
     d5a:	87 ea       	ldi	r24, 0xA7	; 167
     d5c:	80 83       	st	Z, r24
void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 e8 03 	sts	0x03E8, r25
     d66:	80 93 e7 03 	sts	0x03E7, r24
     d6a:	08 95       	ret
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     d6c:	e0 91 16 01 	lds	r30, 0x0116
     d70:	f0 91 17 01 	lds	r31, 0x0117
     d74:	86 ea       	ldi	r24, 0xA6	; 166
     d76:	80 83       	st	Z, r24
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
		}else{
		OLED_write_command(SET_NORMAL_DISPLAY);
		inverted = 0;
     d78:	10 92 e8 03 	sts	0x03E8, r1
     d7c:	10 92 e7 03 	sts	0x03E7, r1
     d80:	08 95       	ret

00000d82 <OLED_printf>:
		OLED_print_char(c[i]);
		i++;
	}
}

void OLED_printf(const char* fmt, ...){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	fe 01       	movw	r30, r28
     d8c:	35 96       	adiw	r30, 0x05	; 5
     d8e:	61 91       	ld	r22, Z+
     d90:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, fmt);
	vfprintf(&oled_stdout, fmt, args);
     d92:	af 01       	movw	r20, r30
     d94:	86 e0       	ldi	r24, 0x06	; 6
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 b8 0a 	call	0x1570	; 0x1570 <vfprintf>
	va_end(args);
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <OLED_print_arrow>:
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     da2:	e0 91 14 01 	lds	r30, 0x0114
     da6:	f0 91 15 01 	lds	r31, 0x0115
     daa:	88 e1       	ldi	r24, 0x18	; 24
     dac:	80 83       	st	Z, r24
     dae:	e0 91 14 01 	lds	r30, 0x0114
     db2:	f0 91 15 01 	lds	r31, 0x0115
     db6:	80 83       	st	Z, r24
     db8:	e0 91 14 01 	lds	r30, 0x0114
     dbc:	f0 91 15 01 	lds	r31, 0x0115
     dc0:	80 83       	st	Z, r24
     dc2:	e0 91 14 01 	lds	r30, 0x0114
     dc6:	f0 91 15 01 	lds	r31, 0x0115
     dca:	80 83       	st	Z, r24
     dcc:	e0 91 14 01 	lds	r30, 0x0114
     dd0:	f0 91 15 01 	lds	r31, 0x0115
     dd4:	80 83       	st	Z, r24
     dd6:	e0 91 14 01 	lds	r30, 0x0114
     dda:	f0 91 15 01 	lds	r31, 0x0115
     dde:	9f ef       	ldi	r25, 0xFF	; 255
     de0:	90 83       	st	Z, r25
     de2:	e0 91 14 01 	lds	r30, 0x0114
     de6:	f0 91 15 01 	lds	r31, 0x0115
     dea:	9e e7       	ldi	r25, 0x7E	; 126
     dec:	90 83       	st	Z, r25
     dee:	e0 91 14 01 	lds	r30, 0x0114
     df2:	f0 91 15 01 	lds	r31, 0x0115
     df6:	9c e3       	ldi	r25, 0x3C	; 60
     df8:	90 83       	st	Z, r25
     dfa:	e0 91 14 01 	lds	r30, 0x0114
     dfe:	f0 91 15 01 	lds	r31, 0x0115
     e02:	80 83       	st	Z, r24
     e04:	e0 91 14 01 	lds	r30, 0x0114
     e08:	f0 91 15 01 	lds	r31, 0x0115
     e0c:	10 82       	st	Z, r1
     e0e:	08 95       	ret

00000e10 <TIMER_init>:

int current_time = 0;

void TIMER_init(){
	//CTC mode
	TCCR1B |= (1 << WGM12);
     e10:	8e b5       	in	r24, 0x2e	; 46
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	8e bd       	out	0x2e, r24	; 46
	
	// Prescaler = 256
	TCCR1B |= (1 << CS12);
     e16:	8e b5       	in	r24, 0x2e	; 46
     e18:	84 60       	ori	r24, 0x04	; 4
     e1a:	8e bd       	out	0x2e, r24	; 46
	
	// Set output compare value
	OCR1A = 0x4B00;		// 19200, corresponds to match every second
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	9b e4       	ldi	r25, 0x4B	; 75
     e20:	9b bd       	out	0x2b, r25	; 43
     e22:	8a bd       	out	0x2a, r24	; 42
     e24:	08 95       	ret

00000e26 <__vector_13>:
	
	
}

ISR(TIMER1_COMPA_vect){
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
	current_time = current_time + 1;
     e34:	80 91 ea 03 	lds	r24, 0x03EA
     e38:	90 91 eb 03 	lds	r25, 0x03EB
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	90 93 eb 03 	sts	0x03EB, r25
     e42:	80 93 ea 03 	sts	0x03EA, r24
}
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 1 and 2 as input
	clear_bit(DDRB, PINB1);
     e54:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
     e56:	ba 98       	cbi	0x17, 2	; 23
     e58:	08 95       	ret

00000e5a <HIGHSCORE_load_from_eeprom>:
			}
		}
	 }
}

highscore_info_t HIGHSCORE_load_from_eeprom(int number){
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	2d 97       	sbiw	r28, 0x0d	; 13
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	5c 01       	movw	r10, r24
	highscore_info_t user;
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	8b 01       	movw	r16, r22
     e8a:	00 0f       	add	r16, r16
     e8c:	11 1f       	adc	r17, r17
     e8e:	00 0f       	add	r16, r16
     e90:	11 1f       	adc	r17, r17
     e92:	00 0f       	add	r16, r16
     e94:	11 1f       	adc	r17, r17
     e96:	06 1b       	sub	r16, r22
     e98:	17 0b       	sbc	r17, r23
     e9a:	78 01       	movw	r14, r16
     e9c:	c8 01       	movw	r24, r16
     e9e:	0e 94 67 05 	call	0xace	; 0xace <EEPROM_read>
     ea2:	88 2e       	mov	r8, r24
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
     ea4:	c8 01       	movw	r24, r16
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	0e 94 67 05 	call	0xace	; 0xace <EEPROM_read>
	user.score = score_msb << 8 | score_lsb;
     eac:	91 2c       	mov	r9, r1
     eae:	98 2c       	mov	r9, r8
     eb0:	88 24       	eor	r8, r8
     eb2:	88 2a       	or	r8, r24
     eb4:	8e 01       	movw	r16, r28
     eb6:	0d 5f       	subi	r16, 0xFD	; 253
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	6e 01       	movw	r12, r28
     ebc:	8e e0       	ldi	r24, 0x0E	; 14
     ebe:	c8 0e       	add	r12, r24
     ec0:	d1 1c       	adc	r13, r1
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	e8 1a       	sub	r14, r24
     ec8:	f9 0a       	sbc	r15, r25
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
     eca:	c7 01       	movw	r24, r14
     ecc:	80 0f       	add	r24, r16
     ece:	91 1f       	adc	r25, r17
     ed0:	0e 94 67 05 	call	0xace	; 0xace <EEPROM_read>
     ed4:	f8 01       	movw	r30, r16
     ed6:	81 93       	st	Z+, r24
     ed8:	8f 01       	movw	r16, r30
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
	user.score = score_msb << 8 | score_lsb;
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
     eda:	ec 15       	cp	r30, r12
     edc:	fd 05       	cpc	r31, r13
     ede:	a9 f7       	brne	.-22     	; 0xeca <HIGHSCORE_load_from_eeprom+0x70>
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
	return user;
     ee0:	9a 82       	std	Y+2, r9	; 0x02
     ee2:	89 82       	std	Y+1, r8	; 0x01
     ee4:	8d e0       	ldi	r24, 0x0D	; 13
     ee6:	fe 01       	movw	r30, r28
     ee8:	31 96       	adiw	r30, 0x01	; 1
     eea:	d5 01       	movw	r26, r10
     eec:	01 90       	ld	r0, Z+
     eee:	0d 92       	st	X+, r0
     ef0:	8a 95       	dec	r24
     ef2:	e1 f7       	brne	.-8      	; 0xeec <HIGHSCORE_load_from_eeprom+0x92>
}
     ef4:	c5 01       	movw	r24, r10
     ef6:	2d 96       	adiw	r28, 0x0d	; 13
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	9f 90       	pop	r9
     f18:	8f 90       	pop	r8
     f1a:	08 95       	ret

00000f1c <HIGHSCORE_print>:
		OLED_printf("%c\n", c);
	}
}

void HIGHSCORE_print()
{
     f1c:	9f 92       	push	r9
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	6a 97       	sbiw	r28, 0x1a	; 26
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
	int max_num_highscores = 5;
	highscore_info_t user;
	OLED_reset();
     f42:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <OLED_reset>
	OLED_printf("Highscores");
     f46:	80 eb       	ldi	r24, 0xB0	; 176
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	9f 93       	push	r25
     f4c:	8f 93       	push	r24
     f4e:	0e 94 c1 06 	call	0xd82	; 0xd82 <OLED_printf>
	OLED_pos(1, 0);
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_pos>
	OLED_printf("#  Score");
     f5a:	8d ee       	ldi	r24, 0xED	; 237
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	9f 93       	push	r25
     f60:	8f 93       	push	r24
     f62:	0e 94 c1 06 	call	0xd82	; 0xd82 <OLED_printf>
	OLED_goto_column(55);
     f66:	87 e3       	ldi	r24, 0x37	; 55
     f68:	0e 94 93 05 	call	0xb26	; 0xb26 <OLED_goto_column>
	OLED_printf("User\n");
     f6c:	86 ef       	ldi	r24, 0xF6	; 246
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	0e 94 c1 06 	call	0xd82	; 0xd82 <OLED_printf>
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
	for (int i = 0; i < max_num_highscores; i++){
     f84:	00 e0       	ldi	r16, 0x00	; 0
     f86:	10 e0       	ldi	r17, 0x00	; 0
		user = HIGHSCORE_load_from_eeprom(i);
     f88:	0f 2e       	mov	r0, r31
     f8a:	fd e0       	ldi	r31, 0x0D	; 13
     f8c:	9f 2e       	mov	r9, r31
     f8e:	f0 2d       	mov	r31, r0
		OLED_printf("%d  %d", i+1, user.score);
     f90:	0f 2e       	mov	r0, r31
     f92:	fc ef       	ldi	r31, 0xFC	; 252
     f94:	af 2e       	mov	r10, r31
     f96:	f2 e0       	ldi	r31, 0x02	; 2
     f98:	bf 2e       	mov	r11, r31
     f9a:	f0 2d       	mov	r31, r0
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
     f9c:	6e 01       	movw	r12, r28
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	c8 0e       	add	r12, r24
     fa2:	d1 1c       	adc	r13, r1
     fa4:	0f 2e       	mov	r0, r31
     fa6:	f3 e0       	ldi	r31, 0x03	; 3
     fa8:	ef 2e       	mov	r14, r31
     faa:	f3 e0       	ldi	r31, 0x03	; 3
     fac:	ff 2e       	mov	r15, r31
     fae:	f0 2d       	mov	r31, r0
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
		user = HIGHSCORE_load_from_eeprom(i);
     fb0:	b8 01       	movw	r22, r16
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 96       	adiw	r24, 0x0e	; 14
     fb6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <HIGHSCORE_load_from_eeprom>
     fba:	fe 01       	movw	r30, r28
     fbc:	3e 96       	adiw	r30, 0x0e	; 14
     fbe:	de 01       	movw	r26, r28
     fc0:	11 96       	adiw	r26, 0x01	; 1
     fc2:	89 2d       	mov	r24, r9
     fc4:	01 90       	ld	r0, Z+
     fc6:	0d 92       	st	X+, r0
     fc8:	8a 95       	dec	r24
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <HIGHSCORE_print+0xa8>
		OLED_printf("%d  %d", i+1, user.score);
     fcc:	0f 5f       	subi	r16, 0xFF	; 255
     fce:	1f 4f       	sbci	r17, 0xFF	; 255
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	8f 93       	push	r24
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	8f 93       	push	r24
     fd8:	1f 93       	push	r17
     fda:	0f 93       	push	r16
     fdc:	bf 92       	push	r11
     fde:	af 92       	push	r10
     fe0:	0e 94 c1 06 	call	0xd82	; 0xd82 <OLED_printf>
		OLED_goto_column(55);
     fe4:	87 e3       	ldi	r24, 0x37	; 55
     fe6:	0e 94 93 05 	call	0xb26	; 0xb26 <OLED_goto_column>
		OLED_printf("%s\n",user.name);
     fea:	df 92       	push	r13
     fec:	cf 92       	push	r12
     fee:	ff 92       	push	r15
     ff0:	ef 92       	push	r14
     ff2:	0e 94 c1 06 	call	0xd82	; 0xd82 <OLED_printf>
	OLED_printf("Highscores");
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	05 30       	cpi	r16, 0x05	; 5
    1002:	11 05       	cpc	r17, r1
    1004:	a9 f6       	brne	.-86     	; 0xfb0 <HIGHSCORE_print+0x94>
		OLED_printf("%d  %d", i+1, user.score);
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
		//OLED_goto_column(0);
	}
}
    1006:	6a 96       	adiw	r28, 0x1a	; 26
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	08 95       	ret

0000102a <HIGHSCORE_clear>:


void HIGHSCORE_clear()
{
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    102e:	c0 e0       	ldi	r28, 0x00	; 0
    1030:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_write(0, i);
    1032:	be 01       	movw	r22, r28
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	0e 94 5d 05 	call	0xaba	; 0xaba <EEPROM_write>
}


void HIGHSCORE_clear()
{
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    103a:	21 96       	adiw	r28, 0x01	; 1
    103c:	c4 35       	cpi	r28, 0x54	; 84
    103e:	d1 05       	cpc	r29, r1
    1040:	c1 f7       	brne	.-16     	; 0x1032 <HIGHSCORE_clear+0x8>
		EEPROM_write(0, i);
	}
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <main>:
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
	
	cli();
    1048:	f8 94       	cli
	UART_Init( MYUBRR );
    104a:	8f e1       	ldi	r24, 0x1F	; 31
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UART_Init>
	ADC_init();
    1052:	0e 94 41 05 	call	0xa82	; 0xa82 <ADC_init>
	JOY_init();
    1056:	0e 94 8e 05 	call	0xb1c	; 0xb1c <JOY_init>
	TOUCH_init();
    105a:	0e 94 2a 07 	call	0xe54	; 0xe54 <TOUCH_init>
	MENU_init();
    105e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <MENU_init>
	CAN_init();
    1062:	0e 94 d5 02 	call	0x5aa	; 0x5aa <CAN_init>
	TIMER_init();
    1066:	0e 94 08 07 	call	0xe10	; 0xe10 <TIMER_init>
	SOUND_duration_init();
    106a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SOUND_duration_init>
	
	
	printf("Init done\n");
    106e:	87 e0       	ldi	r24, 0x07	; 7
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	0e 94 8b 0a 	call	0x1516	; 0x1516 <puts>
	STATE_OPTION_set(menu);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 12 09 	call	0x1224	; 0x1224 <STATE_OPTION_set>
	sei();
    107c:	78 94       	sei
	//OLED_SRAM_write("Test", 0, 0);
	//OLED_SRAM_flush();

	char username[NUM_USERNAME_BYTES];

	SOUND_start_song(1);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 53 04 	call	0x8a6	; 0x8a6 <SOUND_start_song>
    1086:	ff cf       	rjmp	.-2      	; 0x1086 <main+0x3e>

00001088 <contrast_low_func>:
#include <string.h>
#include <util/delay.h>

menu_item_info_t main_menu, play_game, highscores, settings, slow_speed, medium_speed, fast_speed, clear_highscores, contrast_level, invert_screen,contrast_low,contrast_medium,contrast_high;

void contrast_low_func(){ OLED_set_contrast( LOW_CONTRAST ); }
    1088:	80 e1       	ldi	r24, 0x10	; 16
    108a:	0e 94 97 06 	call	0xd2e	; 0xd2e <OLED_set_contrast>
    108e:	08 95       	ret

00001090 <contrast_medium_func>:
void contrast_medium_func(){ OLED_set_contrast( MEDIUM_CONTRAST ); }
    1090:	80 e5       	ldi	r24, 0x50	; 80
    1092:	0e 94 97 06 	call	0xd2e	; 0xd2e <OLED_set_contrast>
    1096:	08 95       	ret

00001098 <contrast_high_func>:
void contrast_high_func(){ OLED_set_contrast( HIGH_CONTRAST ); }
    1098:	80 ef       	ldi	r24, 0xF0	; 240
    109a:	0e 94 97 06 	call	0xd2e	; 0xd2e <OLED_set_contrast>
    109e:	08 95       	ret

000010a0 <slow_speed_func>:
void slow_speed_func(){ STATE_OPTION_set_speed(1); STATE_OPTION_set(game_init); }
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 15 09 	call	0x122a	; 0x122a <STATE_OPTION_set_speed>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0e 94 12 09 	call	0x1224	; 0x1224 <STATE_OPTION_set>
    10ae:	08 95       	ret

000010b0 <medium_speed_func>:
void medium_speed_func(){ STATE_OPTION_set_speed(2); STATE_OPTION_set(game_init); }
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 15 09 	call	0x122a	; 0x122a <STATE_OPTION_set_speed>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 12 09 	call	0x1224	; 0x1224 <STATE_OPTION_set>
    10be:	08 95       	ret

000010c0 <fast_speed_func>:
void fast_speed_func(){ STATE_OPTION_set_speed(3); STATE_OPTION_set(game_init); }
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 15 09 	call	0x122a	; 0x122a <STATE_OPTION_set_speed>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	0e 94 12 09 	call	0x1224	; 0x1224 <STATE_OPTION_set>
    10ce:	08 95       	ret

000010d0 <MENU_highlight_item>:
	}
}


void MENU_highlight_item( void )
{
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
	for (int i = 1; i < current_menu->child_num + 1; i++){
    10d8:	e0 91 f6 03 	lds	r30, 0x03F6
    10dc:	f0 91 f7 03 	lds	r31, 0x03F7
    10e0:	82 89       	ldd	r24, Z+18	; 0x12
    10e2:	93 89       	ldd	r25, Z+19	; 0x13
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	02 97       	sbiw	r24, 0x02	; 2
    10e8:	cc f0       	brlt	.+50     	; 0x111c <MENU_highlight_item+0x4c>
    10ea:	c1 e0       	ldi	r28, 0x01	; 1
    10ec:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i, 0);
		OLED_printf("  ");
    10ee:	0b ec       	ldi	r16, 0xCB	; 203
    10f0:	12 e0       	ldi	r17, 0x02	; 2


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
		OLED_pos(i, 0);
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	8c 2f       	mov	r24, r28
    10f6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_pos>
		OLED_printf("  ");
    10fa:	1f 93       	push	r17
    10fc:	0f 93       	push	r16
    10fe:	0e 94 c1 06 	call	0xd82	; 0xd82 <OLED_printf>
}


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
    1102:	21 96       	adiw	r28, 0x01	; 1
    1104:	e0 91 f6 03 	lds	r30, 0x03F6
    1108:	f0 91 f7 03 	lds	r31, 0x03F7
    110c:	82 89       	ldd	r24, Z+18	; 0x12
    110e:	93 89       	ldd	r25, Z+19	; 0x13
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	c8 17       	cp	r28, r24
    1118:	d9 07       	cpc	r29, r25
    111a:	5c f3       	brlt	.-42     	; 0x10f2 <MENU_highlight_item+0x22>
		OLED_pos(i, 0);
		OLED_printf("  ");
	}
	
	OLED_pos(line, 0);
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	80 91 f4 03 	lds	r24, 0x03F4
    1122:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_pos>
	OLED_print_arrow();
    1126:	0e 94 d1 06 	call	0xda2	; 0xda2 <OLED_print_arrow>
}
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	08 95       	ret

00001134 <MENU_print_menu>:
	MENU_print_menu();
	MENU_highlight_item();
}


void MENU_print_menu(){
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
	OLED_reset();
    113c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <OLED_reset>
	OLED_printf("%s",current_menu->name);
    1140:	e0 91 f6 03 	lds	r30, 0x03F6
    1144:	f0 91 f7 03 	lds	r31, 0x03F7
    1148:	81 81       	ldd	r24, Z+1	; 0x01
    114a:	8f 93       	push	r24
    114c:	80 81       	ld	r24, Z
    114e:	8f 93       	push	r24
    1150:	81 e1       	ldi	r24, 0x11	; 17
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	9f 93       	push	r25
    1156:	8f 93       	push	r24
    1158:	0e 94 c1 06 	call	0xd82	; 0xd82 <OLED_printf>
	if (current_child!= NULL){
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	80 91 f8 03 	lds	r24, 0x03F8
    1168:	90 91 f9 03 	lds	r25, 0x03F9
    116c:	89 2b       	or	r24, r25
    116e:	11 f0       	breq	.+4      	; 0x1174 <MENU_print_menu+0x40>
		MENU_highlight_item();
    1170:	0e 94 68 08 	call	0x10d0	; 0x10d0 <MENU_highlight_item>
	}
	for (int i = 0; i < current_menu->child_num; i++){
    1174:	e0 91 f6 03 	lds	r30, 0x03F6
    1178:	f0 91 f7 03 	lds	r31, 0x03F7
    117c:	82 89       	ldd	r24, Z+18	; 0x12
    117e:	93 89       	ldd	r25, Z+19	; 0x13
    1180:	18 16       	cp	r1, r24
    1182:	19 06       	cpc	r1, r25
    1184:	7c f5       	brge	.+94     	; 0x11e4 <MENU_print_menu+0xb0>
    1186:	c0 e0       	ldi	r28, 0x00	; 0
    1188:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
    118a:	01 e1       	ldi	r16, 0x11	; 17
    118c:	13 e0       	ldi	r17, 0x03	; 3
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
		OLED_pos(i + 1, 10);
    118e:	6a e0       	ldi	r22, 0x0A	; 10
    1190:	8c 2f       	mov	r24, r28
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_pos>
		OLED_goto_column(10);
    1198:	8a e0       	ldi	r24, 0x0A	; 10
    119a:	0e 94 93 05 	call	0xb26	; 0xb26 <OLED_goto_column>
		OLED_printf("%s", current_menu->child[i]->name);
    119e:	80 91 f6 03 	lds	r24, 0x03F6
    11a2:	90 91 f7 03 	lds	r25, 0x03F7
    11a6:	fe 01       	movw	r30, r28
    11a8:	32 96       	adiw	r30, 0x02	; 2
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	e8 0f       	add	r30, r24
    11b0:	f9 1f       	adc	r31, r25
    11b2:	01 90       	ld	r0, Z+
    11b4:	f0 81       	ld	r31, Z
    11b6:	e0 2d       	mov	r30, r0
    11b8:	81 81       	ldd	r24, Z+1	; 0x01
    11ba:	8f 93       	push	r24
    11bc:	80 81       	ld	r24, Z
    11be:	8f 93       	push	r24
    11c0:	1f 93       	push	r17
    11c2:	0f 93       	push	r16
    11c4:	0e 94 c1 06 	call	0xd82	; 0xd82 <OLED_printf>
	OLED_reset();
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
    11c8:	21 96       	adiw	r28, 0x01	; 1
    11ca:	e0 91 f6 03 	lds	r30, 0x03F6
    11ce:	f0 91 f7 03 	lds	r31, 0x03F7
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	82 89       	ldd	r24, Z+18	; 0x12
    11dc:	93 89       	ldd	r25, Z+19	; 0x13
    11de:	c8 17       	cp	r28, r24
    11e0:	d9 07       	cpc	r29, r25
    11e2:	ac f2       	brlt	.-86     	; 0x118e <MENU_print_menu+0x5a>
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
	}
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	08 95       	ret

000011ee <MENU_init>:
menu_item_info_t *current_child;
int line;


void MENU_init( void ){
	OLED_init();
    11ee:	0e 94 07 06 	call	0xc0e	; 0xc0e <OLED_init>
	current_menu = &main_menu;
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	92 e0       	ldi	r25, 0x02	; 2
    11f6:	90 93 f7 03 	sts	0x03F7, r25
    11fa:	80 93 f6 03 	sts	0x03F6, r24
	current_child = main_menu.child[0];
    11fe:	80 91 24 02 	lds	r24, 0x0224
    1202:	90 91 25 02 	lds	r25, 0x0225
    1206:	90 93 f9 03 	sts	0x03F9, r25
    120a:	80 93 f8 03 	sts	0x03F8, r24
	line = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	90 93 f5 03 	sts	0x03F5, r25
    1216:	80 93 f4 03 	sts	0x03F4, r24
	MENU_print_menu();
    121a:	0e 94 9a 08 	call	0x1134	; 0x1134 <MENU_print_menu>
	MENU_highlight_item();
    121e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <MENU_highlight_item>
    1222:	08 95       	ret

00001224 <STATE_OPTION_set>:

state_t state;
int speed;

void STATE_OPTION_set(state_t new_state){
	state = new_state;
    1224:	80 93 fa 03 	sts	0x03FA, r24
    1228:	08 95       	ret

0000122a <STATE_OPTION_set_speed>:
state_t STATE_OPTION_get(void){
	return state;
}

void STATE_OPTION_set_speed(int new_speed){
	speed = new_speed;
    122a:	90 93 fc 03 	sts	0x03FC, r25
    122e:	80 93 fb 03 	sts	0x03FB, r24
    1232:	08 95       	ret

00001234 <__cmpsf2>:
    1234:	9c d0       	rcall	.+312    	; 0x136e <__fp_cmp>
    1236:	08 f4       	brcc	.+2      	; 0x123a <__cmpsf2+0x6>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	08 95       	ret

0000123c <__divsf3>:
    123c:	0c d0       	rcall	.+24     	; 0x1256 <__divsf3x>
    123e:	d2 c0       	rjmp	.+420    	; 0x13e4 <__fp_round>
    1240:	ca d0       	rcall	.+404    	; 0x13d6 <__fp_pscB>
    1242:	40 f0       	brcs	.+16     	; 0x1254 <__divsf3+0x18>
    1244:	c1 d0       	rcall	.+386    	; 0x13c8 <__fp_pscA>
    1246:	30 f0       	brcs	.+12     	; 0x1254 <__divsf3+0x18>
    1248:	21 f4       	brne	.+8      	; 0x1252 <__divsf3+0x16>
    124a:	5f 3f       	cpi	r21, 0xFF	; 255
    124c:	19 f0       	breq	.+6      	; 0x1254 <__divsf3+0x18>
    124e:	b3 c0       	rjmp	.+358    	; 0x13b6 <__fp_inf>
    1250:	51 11       	cpse	r21, r1
    1252:	fc c0       	rjmp	.+504    	; 0x144c <__fp_szero>
    1254:	b6 c0       	rjmp	.+364    	; 0x13c2 <__fp_nan>

00001256 <__divsf3x>:
    1256:	d7 d0       	rcall	.+430    	; 0x1406 <__fp_split3>
    1258:	98 f3       	brcs	.-26     	; 0x1240 <__divsf3+0x4>

0000125a <__divsf3_pse>:
    125a:	99 23       	and	r25, r25
    125c:	c9 f3       	breq	.-14     	; 0x1250 <__divsf3+0x14>
    125e:	55 23       	and	r21, r21
    1260:	b1 f3       	breq	.-20     	; 0x124e <__divsf3+0x12>
    1262:	95 1b       	sub	r25, r21
    1264:	55 0b       	sbc	r21, r21
    1266:	bb 27       	eor	r27, r27
    1268:	aa 27       	eor	r26, r26
    126a:	62 17       	cp	r22, r18
    126c:	73 07       	cpc	r23, r19
    126e:	84 07       	cpc	r24, r20
    1270:	38 f0       	brcs	.+14     	; 0x1280 <__divsf3_pse+0x26>
    1272:	9f 5f       	subi	r25, 0xFF	; 255
    1274:	5f 4f       	sbci	r21, 0xFF	; 255
    1276:	22 0f       	add	r18, r18
    1278:	33 1f       	adc	r19, r19
    127a:	44 1f       	adc	r20, r20
    127c:	aa 1f       	adc	r26, r26
    127e:	a9 f3       	breq	.-22     	; 0x126a <__divsf3_pse+0x10>
    1280:	33 d0       	rcall	.+102    	; 0x12e8 <__divsf3_pse+0x8e>
    1282:	0e 2e       	mov	r0, r30
    1284:	3a f0       	brmi	.+14     	; 0x1294 <__divsf3_pse+0x3a>
    1286:	e0 e8       	ldi	r30, 0x80	; 128
    1288:	30 d0       	rcall	.+96     	; 0x12ea <__divsf3_pse+0x90>
    128a:	91 50       	subi	r25, 0x01	; 1
    128c:	50 40       	sbci	r21, 0x00	; 0
    128e:	e6 95       	lsr	r30
    1290:	00 1c       	adc	r0, r0
    1292:	ca f7       	brpl	.-14     	; 0x1286 <__divsf3_pse+0x2c>
    1294:	29 d0       	rcall	.+82     	; 0x12e8 <__divsf3_pse+0x8e>
    1296:	fe 2f       	mov	r31, r30
    1298:	27 d0       	rcall	.+78     	; 0x12e8 <__divsf3_pse+0x8e>
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	bb 1f       	adc	r27, r27
    12a2:	26 17       	cp	r18, r22
    12a4:	37 07       	cpc	r19, r23
    12a6:	48 07       	cpc	r20, r24
    12a8:	ab 07       	cpc	r26, r27
    12aa:	b0 e8       	ldi	r27, 0x80	; 128
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <__divsf3_pse+0x56>
    12ae:	bb 0b       	sbc	r27, r27
    12b0:	80 2d       	mov	r24, r0
    12b2:	bf 01       	movw	r22, r30
    12b4:	ff 27       	eor	r31, r31
    12b6:	93 58       	subi	r25, 0x83	; 131
    12b8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ba:	2a f0       	brmi	.+10     	; 0x12c6 <__divsf3_pse+0x6c>
    12bc:	9e 3f       	cpi	r25, 0xFE	; 254
    12be:	51 05       	cpc	r21, r1
    12c0:	68 f0       	brcs	.+26     	; 0x12dc <__divsf3_pse+0x82>
    12c2:	79 c0       	rjmp	.+242    	; 0x13b6 <__fp_inf>
    12c4:	c3 c0       	rjmp	.+390    	; 0x144c <__fp_szero>
    12c6:	5f 3f       	cpi	r21, 0xFF	; 255
    12c8:	ec f3       	brlt	.-6      	; 0x12c4 <__divsf3_pse+0x6a>
    12ca:	98 3e       	cpi	r25, 0xE8	; 232
    12cc:	dc f3       	brlt	.-10     	; 0x12c4 <__divsf3_pse+0x6a>
    12ce:	86 95       	lsr	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	b7 95       	ror	r27
    12d6:	f7 95       	ror	r31
    12d8:	9f 5f       	subi	r25, 0xFF	; 255
    12da:	c9 f7       	brne	.-14     	; 0x12ce <__divsf3_pse+0x74>
    12dc:	88 0f       	add	r24, r24
    12de:	91 1d       	adc	r25, r1
    12e0:	96 95       	lsr	r25
    12e2:	87 95       	ror	r24
    12e4:	97 f9       	bld	r25, 7
    12e6:	08 95       	ret
    12e8:	e1 e0       	ldi	r30, 0x01	; 1
    12ea:	66 0f       	add	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	88 1f       	adc	r24, r24
    12f0:	bb 1f       	adc	r27, r27
    12f2:	62 17       	cp	r22, r18
    12f4:	73 07       	cpc	r23, r19
    12f6:	84 07       	cpc	r24, r20
    12f8:	ba 07       	cpc	r27, r26
    12fa:	20 f0       	brcs	.+8      	; 0x1304 <__divsf3_pse+0xaa>
    12fc:	62 1b       	sub	r22, r18
    12fe:	73 0b       	sbc	r23, r19
    1300:	84 0b       	sbc	r24, r20
    1302:	ba 0b       	sbc	r27, r26
    1304:	ee 1f       	adc	r30, r30
    1306:	88 f7       	brcc	.-30     	; 0x12ea <__divsf3_pse+0x90>
    1308:	e0 95       	com	r30
    130a:	08 95       	ret

0000130c <__fixsfsi>:
    130c:	04 d0       	rcall	.+8      	; 0x1316 <__fixunssfsi>
    130e:	68 94       	set
    1310:	b1 11       	cpse	r27, r1
    1312:	9c c0       	rjmp	.+312    	; 0x144c <__fp_szero>
    1314:	08 95       	ret

00001316 <__fixunssfsi>:
    1316:	7f d0       	rcall	.+254    	; 0x1416 <__fp_splitA>
    1318:	88 f0       	brcs	.+34     	; 0x133c <__fixunssfsi+0x26>
    131a:	9f 57       	subi	r25, 0x7F	; 127
    131c:	90 f0       	brcs	.+36     	; 0x1342 <__fixunssfsi+0x2c>
    131e:	b9 2f       	mov	r27, r25
    1320:	99 27       	eor	r25, r25
    1322:	b7 51       	subi	r27, 0x17	; 23
    1324:	a0 f0       	brcs	.+40     	; 0x134e <__fixunssfsi+0x38>
    1326:	d1 f0       	breq	.+52     	; 0x135c <__fixunssfsi+0x46>
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	88 1f       	adc	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	1a f0       	brmi	.+6      	; 0x1338 <__fixunssfsi+0x22>
    1332:	ba 95       	dec	r27
    1334:	c9 f7       	brne	.-14     	; 0x1328 <__fixunssfsi+0x12>
    1336:	12 c0       	rjmp	.+36     	; 0x135c <__fixunssfsi+0x46>
    1338:	b1 30       	cpi	r27, 0x01	; 1
    133a:	81 f0       	breq	.+32     	; 0x135c <__fixunssfsi+0x46>
    133c:	86 d0       	rcall	.+268    	; 0x144a <__fp_zero>
    133e:	b1 e0       	ldi	r27, 0x01	; 1
    1340:	08 95       	ret
    1342:	83 c0       	rjmp	.+262    	; 0x144a <__fp_zero>
    1344:	67 2f       	mov	r22, r23
    1346:	78 2f       	mov	r23, r24
    1348:	88 27       	eor	r24, r24
    134a:	b8 5f       	subi	r27, 0xF8	; 248
    134c:	39 f0       	breq	.+14     	; 0x135c <__fixunssfsi+0x46>
    134e:	b9 3f       	cpi	r27, 0xF9	; 249
    1350:	cc f3       	brlt	.-14     	; 0x1344 <__fixunssfsi+0x2e>
    1352:	86 95       	lsr	r24
    1354:	77 95       	ror	r23
    1356:	67 95       	ror	r22
    1358:	b3 95       	inc	r27
    135a:	d9 f7       	brne	.-10     	; 0x1352 <__fixunssfsi+0x3c>
    135c:	3e f4       	brtc	.+14     	; 0x136c <__fixunssfsi+0x56>
    135e:	90 95       	com	r25
    1360:	80 95       	com	r24
    1362:	70 95       	com	r23
    1364:	61 95       	neg	r22
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	08 95       	ret

0000136e <__fp_cmp>:
    136e:	99 0f       	add	r25, r25
    1370:	00 08       	sbc	r0, r0
    1372:	55 0f       	add	r21, r21
    1374:	aa 0b       	sbc	r26, r26
    1376:	e0 e8       	ldi	r30, 0x80	; 128
    1378:	fe ef       	ldi	r31, 0xFE	; 254
    137a:	16 16       	cp	r1, r22
    137c:	17 06       	cpc	r1, r23
    137e:	e8 07       	cpc	r30, r24
    1380:	f9 07       	cpc	r31, r25
    1382:	c0 f0       	brcs	.+48     	; 0x13b4 <__fp_cmp+0x46>
    1384:	12 16       	cp	r1, r18
    1386:	13 06       	cpc	r1, r19
    1388:	e4 07       	cpc	r30, r20
    138a:	f5 07       	cpc	r31, r21
    138c:	98 f0       	brcs	.+38     	; 0x13b4 <__fp_cmp+0x46>
    138e:	62 1b       	sub	r22, r18
    1390:	73 0b       	sbc	r23, r19
    1392:	84 0b       	sbc	r24, r20
    1394:	95 0b       	sbc	r25, r21
    1396:	39 f4       	brne	.+14     	; 0x13a6 <__fp_cmp+0x38>
    1398:	0a 26       	eor	r0, r26
    139a:	61 f0       	breq	.+24     	; 0x13b4 <__fp_cmp+0x46>
    139c:	23 2b       	or	r18, r19
    139e:	24 2b       	or	r18, r20
    13a0:	25 2b       	or	r18, r21
    13a2:	21 f4       	brne	.+8      	; 0x13ac <__fp_cmp+0x3e>
    13a4:	08 95       	ret
    13a6:	0a 26       	eor	r0, r26
    13a8:	09 f4       	brne	.+2      	; 0x13ac <__fp_cmp+0x3e>
    13aa:	a1 40       	sbci	r26, 0x01	; 1
    13ac:	a6 95       	lsr	r26
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	81 1d       	adc	r24, r1
    13b2:	81 1d       	adc	r24, r1
    13b4:	08 95       	ret

000013b6 <__fp_inf>:
    13b6:	97 f9       	bld	r25, 7
    13b8:	9f 67       	ori	r25, 0x7F	; 127
    13ba:	80 e8       	ldi	r24, 0x80	; 128
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	08 95       	ret

000013c2 <__fp_nan>:
    13c2:	9f ef       	ldi	r25, 0xFF	; 255
    13c4:	80 ec       	ldi	r24, 0xC0	; 192
    13c6:	08 95       	ret

000013c8 <__fp_pscA>:
    13c8:	00 24       	eor	r0, r0
    13ca:	0a 94       	dec	r0
    13cc:	16 16       	cp	r1, r22
    13ce:	17 06       	cpc	r1, r23
    13d0:	18 06       	cpc	r1, r24
    13d2:	09 06       	cpc	r0, r25
    13d4:	08 95       	ret

000013d6 <__fp_pscB>:
    13d6:	00 24       	eor	r0, r0
    13d8:	0a 94       	dec	r0
    13da:	12 16       	cp	r1, r18
    13dc:	13 06       	cpc	r1, r19
    13de:	14 06       	cpc	r1, r20
    13e0:	05 06       	cpc	r0, r21
    13e2:	08 95       	ret

000013e4 <__fp_round>:
    13e4:	09 2e       	mov	r0, r25
    13e6:	03 94       	inc	r0
    13e8:	00 0c       	add	r0, r0
    13ea:	11 f4       	brne	.+4      	; 0x13f0 <__fp_round+0xc>
    13ec:	88 23       	and	r24, r24
    13ee:	52 f0       	brmi	.+20     	; 0x1404 <__fp_round+0x20>
    13f0:	bb 0f       	add	r27, r27
    13f2:	40 f4       	brcc	.+16     	; 0x1404 <__fp_round+0x20>
    13f4:	bf 2b       	or	r27, r31
    13f6:	11 f4       	brne	.+4      	; 0x13fc <__fp_round+0x18>
    13f8:	60 ff       	sbrs	r22, 0
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <__fp_round+0x20>
    13fc:	6f 5f       	subi	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	8f 4f       	sbci	r24, 0xFF	; 255
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	08 95       	ret

00001406 <__fp_split3>:
    1406:	57 fd       	sbrc	r21, 7
    1408:	90 58       	subi	r25, 0x80	; 128
    140a:	44 0f       	add	r20, r20
    140c:	55 1f       	adc	r21, r21
    140e:	59 f0       	breq	.+22     	; 0x1426 <__fp_splitA+0x10>
    1410:	5f 3f       	cpi	r21, 0xFF	; 255
    1412:	71 f0       	breq	.+28     	; 0x1430 <__fp_splitA+0x1a>
    1414:	47 95       	ror	r20

00001416 <__fp_splitA>:
    1416:	88 0f       	add	r24, r24
    1418:	97 fb       	bst	r25, 7
    141a:	99 1f       	adc	r25, r25
    141c:	61 f0       	breq	.+24     	; 0x1436 <__fp_splitA+0x20>
    141e:	9f 3f       	cpi	r25, 0xFF	; 255
    1420:	79 f0       	breq	.+30     	; 0x1440 <__fp_splitA+0x2a>
    1422:	87 95       	ror	r24
    1424:	08 95       	ret
    1426:	12 16       	cp	r1, r18
    1428:	13 06       	cpc	r1, r19
    142a:	14 06       	cpc	r1, r20
    142c:	55 1f       	adc	r21, r21
    142e:	f2 cf       	rjmp	.-28     	; 0x1414 <__fp_split3+0xe>
    1430:	46 95       	lsr	r20
    1432:	f1 df       	rcall	.-30     	; 0x1416 <__fp_splitA>
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <__fp_splitA+0x30>
    1436:	16 16       	cp	r1, r22
    1438:	17 06       	cpc	r1, r23
    143a:	18 06       	cpc	r1, r24
    143c:	99 1f       	adc	r25, r25
    143e:	f1 cf       	rjmp	.-30     	; 0x1422 <__fp_splitA+0xc>
    1440:	86 95       	lsr	r24
    1442:	71 05       	cpc	r23, r1
    1444:	61 05       	cpc	r22, r1
    1446:	08 94       	sec
    1448:	08 95       	ret

0000144a <__fp_zero>:
    144a:	e8 94       	clt

0000144c <__fp_szero>:
    144c:	bb 27       	eor	r27, r27
    144e:	66 27       	eor	r22, r22
    1450:	77 27       	eor	r23, r23
    1452:	cb 01       	movw	r24, r22
    1454:	97 f9       	bld	r25, 7
    1456:	08 95       	ret

00001458 <fdevopen>:
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	ec 01       	movw	r28, r24
    1462:	8b 01       	movw	r16, r22
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	31 f4       	brne	.+12     	; 0x1474 <fdevopen+0x1c>
    1468:	61 15       	cp	r22, r1
    146a:	71 05       	cpc	r23, r1
    146c:	19 f4       	brne	.+6      	; 0x1474 <fdevopen+0x1c>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	38 c0       	rjmp	.+112    	; 0x14e4 <fdevopen+0x8c>
    1474:	6e e0       	ldi	r22, 0x0E	; 14
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <calloc>
    1480:	fc 01       	movw	r30, r24
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	a1 f3       	breq	.-24     	; 0x146e <fdevopen+0x16>
    1486:	80 e8       	ldi	r24, 0x80	; 128
    1488:	83 83       	std	Z+3, r24	; 0x03
    148a:	01 15       	cp	r16, r1
    148c:	11 05       	cpc	r17, r1
    148e:	71 f0       	breq	.+28     	; 0x14ac <fdevopen+0x54>
    1490:	13 87       	std	Z+11, r17	; 0x0b
    1492:	02 87       	std	Z+10, r16	; 0x0a
    1494:	81 e8       	ldi	r24, 0x81	; 129
    1496:	83 83       	std	Z+3, r24	; 0x03
    1498:	80 91 fd 03 	lds	r24, 0x03FD
    149c:	90 91 fe 03 	lds	r25, 0x03FE
    14a0:	89 2b       	or	r24, r25
    14a2:	21 f4       	brne	.+8      	; 0x14ac <fdevopen+0x54>
    14a4:	f0 93 fe 03 	sts	0x03FE, r31
    14a8:	e0 93 fd 03 	sts	0x03FD, r30
    14ac:	20 97       	sbiw	r28, 0x00	; 0
    14ae:	c9 f0       	breq	.+50     	; 0x14e2 <fdevopen+0x8a>
    14b0:	d1 87       	std	Z+9, r29	; 0x09
    14b2:	c0 87       	std	Z+8, r28	; 0x08
    14b4:	83 81       	ldd	r24, Z+3	; 0x03
    14b6:	82 60       	ori	r24, 0x02	; 2
    14b8:	83 83       	std	Z+3, r24	; 0x03
    14ba:	80 91 ff 03 	lds	r24, 0x03FF
    14be:	90 91 00 04 	lds	r25, 0x0400
    14c2:	89 2b       	or	r24, r25
    14c4:	71 f4       	brne	.+28     	; 0x14e2 <fdevopen+0x8a>
    14c6:	f0 93 00 04 	sts	0x0400, r31
    14ca:	e0 93 ff 03 	sts	0x03FF, r30
    14ce:	80 91 01 04 	lds	r24, 0x0401
    14d2:	90 91 02 04 	lds	r25, 0x0402
    14d6:	89 2b       	or	r24, r25
    14d8:	21 f4       	brne	.+8      	; 0x14e2 <fdevopen+0x8a>
    14da:	f0 93 02 04 	sts	0x0402, r31
    14de:	e0 93 01 04 	sts	0x0401, r30
    14e2:	cf 01       	movw	r24, r30
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <printf>:
    14ee:	a0 e0       	ldi	r26, 0x00	; 0
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ed e7       	ldi	r30, 0x7D	; 125
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__prologue_saves__+0x20>
    14fa:	fe 01       	movw	r30, r28
    14fc:	35 96       	adiw	r30, 0x05	; 5
    14fe:	61 91       	ld	r22, Z+
    1500:	71 91       	ld	r23, Z+
    1502:	af 01       	movw	r20, r30
    1504:	80 91 ff 03 	lds	r24, 0x03FF
    1508:	90 91 00 04 	lds	r25, 0x0400
    150c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <vfprintf>
    1510:	e2 e0       	ldi	r30, 0x02	; 2
    1512:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__epilogue_restores__+0x20>

00001516 <puts>:
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	e0 91 ff 03 	lds	r30, 0x03FF
    1522:	f0 91 00 04 	lds	r31, 0x0400
    1526:	23 81       	ldd	r18, Z+3	; 0x03
    1528:	21 ff       	sbrs	r18, 1
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <puts+0x4c>
    152c:	ec 01       	movw	r28, r24
    152e:	00 e0       	ldi	r16, 0x00	; 0
    1530:	10 e0       	ldi	r17, 0x00	; 0
    1532:	89 91       	ld	r24, Y+
    1534:	60 91 ff 03 	lds	r22, 0x03FF
    1538:	70 91 00 04 	lds	r23, 0x0400
    153c:	db 01       	movw	r26, r22
    153e:	18 96       	adiw	r26, 0x08	; 8
    1540:	ed 91       	ld	r30, X+
    1542:	fc 91       	ld	r31, X
    1544:	19 97       	sbiw	r26, 0x09	; 9
    1546:	88 23       	and	r24, r24
    1548:	31 f0       	breq	.+12     	; 0x1556 <puts+0x40>
    154a:	09 95       	icall
    154c:	89 2b       	or	r24, r25
    154e:	89 f3       	breq	.-30     	; 0x1532 <puts+0x1c>
    1550:	0f ef       	ldi	r16, 0xFF	; 255
    1552:	1f ef       	ldi	r17, 0xFF	; 255
    1554:	ee cf       	rjmp	.-36     	; 0x1532 <puts+0x1c>
    1556:	8a e0       	ldi	r24, 0x0A	; 10
    1558:	09 95       	icall
    155a:	89 2b       	or	r24, r25
    155c:	11 f4       	brne	.+4      	; 0x1562 <puts+0x4c>
    155e:	c8 01       	movw	r24, r16
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <puts+0x50>
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	9f ef       	ldi	r25, 0xFF	; 255
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	08 95       	ret

00001570 <vfprintf>:
    1570:	ac e0       	ldi	r26, 0x0C	; 12
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ee eb       	ldi	r30, 0xBE	; 190
    1576:	fa e0       	ldi	r31, 0x0A	; 10
    1578:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__prologue_saves__>
    157c:	7c 01       	movw	r14, r24
    157e:	6b 01       	movw	r12, r22
    1580:	8a 01       	movw	r16, r20
    1582:	fc 01       	movw	r30, r24
    1584:	17 82       	std	Z+7, r1	; 0x07
    1586:	16 82       	std	Z+6, r1	; 0x06
    1588:	83 81       	ldd	r24, Z+3	; 0x03
    158a:	81 ff       	sbrs	r24, 1
    158c:	bd c1       	rjmp	.+890    	; 0x1908 <vfprintf+0x398>
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	4c 01       	movw	r8, r24
    1594:	f7 01       	movw	r30, r14
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	f6 01       	movw	r30, r12
    159a:	93 fd       	sbrc	r25, 3
    159c:	85 91       	lpm	r24, Z+
    159e:	93 ff       	sbrs	r25, 3
    15a0:	81 91       	ld	r24, Z+
    15a2:	6f 01       	movw	r12, r30
    15a4:	88 23       	and	r24, r24
    15a6:	09 f4       	brne	.+2      	; 0x15aa <vfprintf+0x3a>
    15a8:	ab c1       	rjmp	.+854    	; 0x1900 <vfprintf+0x390>
    15aa:	85 32       	cpi	r24, 0x25	; 37
    15ac:	39 f4       	brne	.+14     	; 0x15bc <vfprintf+0x4c>
    15ae:	93 fd       	sbrc	r25, 3
    15b0:	85 91       	lpm	r24, Z+
    15b2:	93 ff       	sbrs	r25, 3
    15b4:	81 91       	ld	r24, Z+
    15b6:	6f 01       	movw	r12, r30
    15b8:	85 32       	cpi	r24, 0x25	; 37
    15ba:	29 f4       	brne	.+10     	; 0x15c6 <vfprintf+0x56>
    15bc:	b7 01       	movw	r22, r14
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    15c4:	e7 cf       	rjmp	.-50     	; 0x1594 <vfprintf+0x24>
    15c6:	51 2c       	mov	r5, r1
    15c8:	31 2c       	mov	r3, r1
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	20 32       	cpi	r18, 0x20	; 32
    15ce:	a0 f4       	brcc	.+40     	; 0x15f8 <vfprintf+0x88>
    15d0:	8b 32       	cpi	r24, 0x2B	; 43
    15d2:	69 f0       	breq	.+26     	; 0x15ee <vfprintf+0x7e>
    15d4:	30 f4       	brcc	.+12     	; 0x15e2 <vfprintf+0x72>
    15d6:	80 32       	cpi	r24, 0x20	; 32
    15d8:	59 f0       	breq	.+22     	; 0x15f0 <vfprintf+0x80>
    15da:	83 32       	cpi	r24, 0x23	; 35
    15dc:	69 f4       	brne	.+26     	; 0x15f8 <vfprintf+0x88>
    15de:	20 61       	ori	r18, 0x10	; 16
    15e0:	2c c0       	rjmp	.+88     	; 0x163a <vfprintf+0xca>
    15e2:	8d 32       	cpi	r24, 0x2D	; 45
    15e4:	39 f0       	breq	.+14     	; 0x15f4 <vfprintf+0x84>
    15e6:	80 33       	cpi	r24, 0x30	; 48
    15e8:	39 f4       	brne	.+14     	; 0x15f8 <vfprintf+0x88>
    15ea:	21 60       	ori	r18, 0x01	; 1
    15ec:	26 c0       	rjmp	.+76     	; 0x163a <vfprintf+0xca>
    15ee:	22 60       	ori	r18, 0x02	; 2
    15f0:	24 60       	ori	r18, 0x04	; 4
    15f2:	23 c0       	rjmp	.+70     	; 0x163a <vfprintf+0xca>
    15f4:	28 60       	ori	r18, 0x08	; 8
    15f6:	21 c0       	rjmp	.+66     	; 0x163a <vfprintf+0xca>
    15f8:	27 fd       	sbrc	r18, 7
    15fa:	27 c0       	rjmp	.+78     	; 0x164a <vfprintf+0xda>
    15fc:	30 ed       	ldi	r19, 0xD0	; 208
    15fe:	38 0f       	add	r19, r24
    1600:	3a 30       	cpi	r19, 0x0A	; 10
    1602:	78 f4       	brcc	.+30     	; 0x1622 <vfprintf+0xb2>
    1604:	26 ff       	sbrs	r18, 6
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <vfprintf+0xa4>
    1608:	fa e0       	ldi	r31, 0x0A	; 10
    160a:	5f 9e       	mul	r5, r31
    160c:	30 0d       	add	r19, r0
    160e:	11 24       	eor	r1, r1
    1610:	53 2e       	mov	r5, r19
    1612:	13 c0       	rjmp	.+38     	; 0x163a <vfprintf+0xca>
    1614:	8a e0       	ldi	r24, 0x0A	; 10
    1616:	38 9e       	mul	r3, r24
    1618:	30 0d       	add	r19, r0
    161a:	11 24       	eor	r1, r1
    161c:	33 2e       	mov	r3, r19
    161e:	20 62       	ori	r18, 0x20	; 32
    1620:	0c c0       	rjmp	.+24     	; 0x163a <vfprintf+0xca>
    1622:	8e 32       	cpi	r24, 0x2E	; 46
    1624:	21 f4       	brne	.+8      	; 0x162e <vfprintf+0xbe>
    1626:	26 fd       	sbrc	r18, 6
    1628:	6b c1       	rjmp	.+726    	; 0x1900 <vfprintf+0x390>
    162a:	20 64       	ori	r18, 0x40	; 64
    162c:	06 c0       	rjmp	.+12     	; 0x163a <vfprintf+0xca>
    162e:	8c 36       	cpi	r24, 0x6C	; 108
    1630:	11 f4       	brne	.+4      	; 0x1636 <vfprintf+0xc6>
    1632:	20 68       	ori	r18, 0x80	; 128
    1634:	02 c0       	rjmp	.+4      	; 0x163a <vfprintf+0xca>
    1636:	88 36       	cpi	r24, 0x68	; 104
    1638:	41 f4       	brne	.+16     	; 0x164a <vfprintf+0xda>
    163a:	f6 01       	movw	r30, r12
    163c:	93 fd       	sbrc	r25, 3
    163e:	85 91       	lpm	r24, Z+
    1640:	93 ff       	sbrs	r25, 3
    1642:	81 91       	ld	r24, Z+
    1644:	6f 01       	movw	r12, r30
    1646:	81 11       	cpse	r24, r1
    1648:	c1 cf       	rjmp	.-126    	; 0x15cc <vfprintf+0x5c>
    164a:	98 2f       	mov	r25, r24
    164c:	9f 7d       	andi	r25, 0xDF	; 223
    164e:	95 54       	subi	r25, 0x45	; 69
    1650:	93 30       	cpi	r25, 0x03	; 3
    1652:	28 f4       	brcc	.+10     	; 0x165e <vfprintf+0xee>
    1654:	0c 5f       	subi	r16, 0xFC	; 252
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	ff e3       	ldi	r31, 0x3F	; 63
    165a:	f9 83       	std	Y+1, r31	; 0x01
    165c:	0d c0       	rjmp	.+26     	; 0x1678 <vfprintf+0x108>
    165e:	83 36       	cpi	r24, 0x63	; 99
    1660:	31 f0       	breq	.+12     	; 0x166e <vfprintf+0xfe>
    1662:	83 37       	cpi	r24, 0x73	; 115
    1664:	71 f0       	breq	.+28     	; 0x1682 <vfprintf+0x112>
    1666:	83 35       	cpi	r24, 0x53	; 83
    1668:	09 f0       	breq	.+2      	; 0x166c <vfprintf+0xfc>
    166a:	5b c0       	rjmp	.+182    	; 0x1722 <vfprintf+0x1b2>
    166c:	22 c0       	rjmp	.+68     	; 0x16b2 <vfprintf+0x142>
    166e:	f8 01       	movw	r30, r16
    1670:	80 81       	ld	r24, Z
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	0e 5f       	subi	r16, 0xFE	; 254
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	44 24       	eor	r4, r4
    167a:	43 94       	inc	r4
    167c:	51 2c       	mov	r5, r1
    167e:	54 01       	movw	r10, r8
    1680:	15 c0       	rjmp	.+42     	; 0x16ac <vfprintf+0x13c>
    1682:	38 01       	movw	r6, r16
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	6f 0e       	add	r6, r31
    1688:	71 1c       	adc	r7, r1
    168a:	f8 01       	movw	r30, r16
    168c:	a0 80       	ld	r10, Z
    168e:	b1 80       	ldd	r11, Z+1	; 0x01
    1690:	26 ff       	sbrs	r18, 6
    1692:	03 c0       	rjmp	.+6      	; 0x169a <vfprintf+0x12a>
    1694:	65 2d       	mov	r22, r5
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfprintf+0x12e>
    169a:	6f ef       	ldi	r22, 0xFF	; 255
    169c:	7f ef       	ldi	r23, 0xFF	; 255
    169e:	c5 01       	movw	r24, r10
    16a0:	2c 87       	std	Y+12, r18	; 0x0c
    16a2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <strnlen>
    16a6:	2c 01       	movw	r4, r24
    16a8:	83 01       	movw	r16, r6
    16aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ac:	2f 77       	andi	r18, 0x7F	; 127
    16ae:	22 2e       	mov	r2, r18
    16b0:	17 c0       	rjmp	.+46     	; 0x16e0 <vfprintf+0x170>
    16b2:	38 01       	movw	r6, r16
    16b4:	f2 e0       	ldi	r31, 0x02	; 2
    16b6:	6f 0e       	add	r6, r31
    16b8:	71 1c       	adc	r7, r1
    16ba:	f8 01       	movw	r30, r16
    16bc:	a0 80       	ld	r10, Z
    16be:	b1 80       	ldd	r11, Z+1	; 0x01
    16c0:	26 ff       	sbrs	r18, 6
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <vfprintf+0x15a>
    16c4:	65 2d       	mov	r22, r5
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <vfprintf+0x15e>
    16ca:	6f ef       	ldi	r22, 0xFF	; 255
    16cc:	7f ef       	ldi	r23, 0xFF	; 255
    16ce:	c5 01       	movw	r24, r10
    16d0:	2c 87       	std	Y+12, r18	; 0x0c
    16d2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <strnlen_P>
    16d6:	2c 01       	movw	r4, r24
    16d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    16da:	20 68       	ori	r18, 0x80	; 128
    16dc:	22 2e       	mov	r2, r18
    16de:	83 01       	movw	r16, r6
    16e0:	23 fc       	sbrc	r2, 3
    16e2:	1b c0       	rjmp	.+54     	; 0x171a <vfprintf+0x1aa>
    16e4:	83 2d       	mov	r24, r3
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	48 16       	cp	r4, r24
    16ea:	59 06       	cpc	r5, r25
    16ec:	b0 f4       	brcc	.+44     	; 0x171a <vfprintf+0x1aa>
    16ee:	b7 01       	movw	r22, r14
    16f0:	80 e2       	ldi	r24, 0x20	; 32
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    16f8:	3a 94       	dec	r3
    16fa:	f4 cf       	rjmp	.-24     	; 0x16e4 <vfprintf+0x174>
    16fc:	f5 01       	movw	r30, r10
    16fe:	27 fc       	sbrc	r2, 7
    1700:	85 91       	lpm	r24, Z+
    1702:	27 fe       	sbrs	r2, 7
    1704:	81 91       	ld	r24, Z+
    1706:	5f 01       	movw	r10, r30
    1708:	b7 01       	movw	r22, r14
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    1710:	31 10       	cpse	r3, r1
    1712:	3a 94       	dec	r3
    1714:	f1 e0       	ldi	r31, 0x01	; 1
    1716:	4f 1a       	sub	r4, r31
    1718:	51 08       	sbc	r5, r1
    171a:	41 14       	cp	r4, r1
    171c:	51 04       	cpc	r5, r1
    171e:	71 f7       	brne	.-36     	; 0x16fc <vfprintf+0x18c>
    1720:	e5 c0       	rjmp	.+458    	; 0x18ec <vfprintf+0x37c>
    1722:	84 36       	cpi	r24, 0x64	; 100
    1724:	11 f0       	breq	.+4      	; 0x172a <vfprintf+0x1ba>
    1726:	89 36       	cpi	r24, 0x69	; 105
    1728:	39 f5       	brne	.+78     	; 0x1778 <vfprintf+0x208>
    172a:	f8 01       	movw	r30, r16
    172c:	27 ff       	sbrs	r18, 7
    172e:	07 c0       	rjmp	.+14     	; 0x173e <vfprintf+0x1ce>
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	0c 5f       	subi	r16, 0xFC	; 252
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	08 c0       	rjmp	.+16     	; 0x174e <vfprintf+0x1de>
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	88 27       	eor	r24, r24
    1744:	77 fd       	sbrc	r23, 7
    1746:	80 95       	com	r24
    1748:	98 2f       	mov	r25, r24
    174a:	0e 5f       	subi	r16, 0xFE	; 254
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	2f 76       	andi	r18, 0x6F	; 111
    1750:	b2 2e       	mov	r11, r18
    1752:	97 ff       	sbrs	r25, 7
    1754:	09 c0       	rjmp	.+18     	; 0x1768 <vfprintf+0x1f8>
    1756:	90 95       	com	r25
    1758:	80 95       	com	r24
    175a:	70 95       	com	r23
    175c:	61 95       	neg	r22
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	8f 4f       	sbci	r24, 0xFF	; 255
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	20 68       	ori	r18, 0x80	; 128
    1766:	b2 2e       	mov	r11, r18
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	a4 01       	movw	r20, r8
    176e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__ultoa_invert>
    1772:	a8 2e       	mov	r10, r24
    1774:	a8 18       	sub	r10, r8
    1776:	44 c0       	rjmp	.+136    	; 0x1800 <vfprintf+0x290>
    1778:	85 37       	cpi	r24, 0x75	; 117
    177a:	29 f4       	brne	.+10     	; 0x1786 <vfprintf+0x216>
    177c:	2f 7e       	andi	r18, 0xEF	; 239
    177e:	b2 2e       	mov	r11, r18
    1780:	2a e0       	ldi	r18, 0x0A	; 10
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	25 c0       	rjmp	.+74     	; 0x17d0 <vfprintf+0x260>
    1786:	f2 2f       	mov	r31, r18
    1788:	f9 7f       	andi	r31, 0xF9	; 249
    178a:	bf 2e       	mov	r11, r31
    178c:	8f 36       	cpi	r24, 0x6F	; 111
    178e:	c1 f0       	breq	.+48     	; 0x17c0 <vfprintf+0x250>
    1790:	18 f4       	brcc	.+6      	; 0x1798 <vfprintf+0x228>
    1792:	88 35       	cpi	r24, 0x58	; 88
    1794:	79 f0       	breq	.+30     	; 0x17b4 <vfprintf+0x244>
    1796:	b4 c0       	rjmp	.+360    	; 0x1900 <vfprintf+0x390>
    1798:	80 37       	cpi	r24, 0x70	; 112
    179a:	19 f0       	breq	.+6      	; 0x17a2 <vfprintf+0x232>
    179c:	88 37       	cpi	r24, 0x78	; 120
    179e:	21 f0       	breq	.+8      	; 0x17a8 <vfprintf+0x238>
    17a0:	af c0       	rjmp	.+350    	; 0x1900 <vfprintf+0x390>
    17a2:	2f 2f       	mov	r18, r31
    17a4:	20 61       	ori	r18, 0x10	; 16
    17a6:	b2 2e       	mov	r11, r18
    17a8:	b4 fe       	sbrs	r11, 4
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <vfprintf+0x256>
    17ac:	8b 2d       	mov	r24, r11
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	b8 2e       	mov	r11, r24
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <vfprintf+0x256>
    17b4:	24 ff       	sbrs	r18, 4
    17b6:	0a c0       	rjmp	.+20     	; 0x17cc <vfprintf+0x25c>
    17b8:	9f 2f       	mov	r25, r31
    17ba:	96 60       	ori	r25, 0x06	; 6
    17bc:	b9 2e       	mov	r11, r25
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <vfprintf+0x25c>
    17c0:	28 e0       	ldi	r18, 0x08	; 8
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <vfprintf+0x260>
    17c6:	20 e1       	ldi	r18, 0x10	; 16
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <vfprintf+0x260>
    17cc:	20 e1       	ldi	r18, 0x10	; 16
    17ce:	32 e0       	ldi	r19, 0x02	; 2
    17d0:	f8 01       	movw	r30, r16
    17d2:	b7 fe       	sbrs	r11, 7
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <vfprintf+0x274>
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	0c 5f       	subi	r16, 0xFC	; 252
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	06 c0       	rjmp	.+12     	; 0x17f0 <vfprintf+0x280>
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 5f       	subi	r16, 0xFE	; 254
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	a4 01       	movw	r20, r8
    17f2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__ultoa_invert>
    17f6:	a8 2e       	mov	r10, r24
    17f8:	a8 18       	sub	r10, r8
    17fa:	fb 2d       	mov	r31, r11
    17fc:	ff 77       	andi	r31, 0x7F	; 127
    17fe:	bf 2e       	mov	r11, r31
    1800:	b6 fe       	sbrs	r11, 6
    1802:	0b c0       	rjmp	.+22     	; 0x181a <vfprintf+0x2aa>
    1804:	2b 2d       	mov	r18, r11
    1806:	2e 7f       	andi	r18, 0xFE	; 254
    1808:	a5 14       	cp	r10, r5
    180a:	50 f4       	brcc	.+20     	; 0x1820 <vfprintf+0x2b0>
    180c:	b4 fe       	sbrs	r11, 4
    180e:	0a c0       	rjmp	.+20     	; 0x1824 <vfprintf+0x2b4>
    1810:	b2 fc       	sbrc	r11, 2
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <vfprintf+0x2b4>
    1814:	2b 2d       	mov	r18, r11
    1816:	2e 7e       	andi	r18, 0xEE	; 238
    1818:	05 c0       	rjmp	.+10     	; 0x1824 <vfprintf+0x2b4>
    181a:	7a 2c       	mov	r7, r10
    181c:	2b 2d       	mov	r18, r11
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <vfprintf+0x2b6>
    1820:	7a 2c       	mov	r7, r10
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <vfprintf+0x2b6>
    1824:	75 2c       	mov	r7, r5
    1826:	24 ff       	sbrs	r18, 4
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x2d4>
    182a:	fe 01       	movw	r30, r28
    182c:	ea 0d       	add	r30, r10
    182e:	f1 1d       	adc	r31, r1
    1830:	80 81       	ld	r24, Z
    1832:	80 33       	cpi	r24, 0x30	; 48
    1834:	11 f4       	brne	.+4      	; 0x183a <vfprintf+0x2ca>
    1836:	29 7e       	andi	r18, 0xE9	; 233
    1838:	09 c0       	rjmp	.+18     	; 0x184c <vfprintf+0x2dc>
    183a:	22 ff       	sbrs	r18, 2
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x2da>
    183e:	73 94       	inc	r7
    1840:	73 94       	inc	r7
    1842:	04 c0       	rjmp	.+8      	; 0x184c <vfprintf+0x2dc>
    1844:	82 2f       	mov	r24, r18
    1846:	86 78       	andi	r24, 0x86	; 134
    1848:	09 f0       	breq	.+2      	; 0x184c <vfprintf+0x2dc>
    184a:	73 94       	inc	r7
    184c:	23 fd       	sbrc	r18, 3
    184e:	13 c0       	rjmp	.+38     	; 0x1876 <vfprintf+0x306>
    1850:	20 ff       	sbrs	r18, 0
    1852:	06 c0       	rjmp	.+12     	; 0x1860 <vfprintf+0x2f0>
    1854:	5a 2c       	mov	r5, r10
    1856:	73 14       	cp	r7, r3
    1858:	18 f4       	brcc	.+6      	; 0x1860 <vfprintf+0x2f0>
    185a:	53 0c       	add	r5, r3
    185c:	57 18       	sub	r5, r7
    185e:	73 2c       	mov	r7, r3
    1860:	73 14       	cp	r7, r3
    1862:	68 f4       	brcc	.+26     	; 0x187e <vfprintf+0x30e>
    1864:	b7 01       	movw	r22, r14
    1866:	80 e2       	ldi	r24, 0x20	; 32
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	2c 87       	std	Y+12, r18	; 0x0c
    186c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    1870:	73 94       	inc	r7
    1872:	2c 85       	ldd	r18, Y+12	; 0x0c
    1874:	f5 cf       	rjmp	.-22     	; 0x1860 <vfprintf+0x2f0>
    1876:	73 14       	cp	r7, r3
    1878:	10 f4       	brcc	.+4      	; 0x187e <vfprintf+0x30e>
    187a:	37 18       	sub	r3, r7
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <vfprintf+0x310>
    187e:	31 2c       	mov	r3, r1
    1880:	24 ff       	sbrs	r18, 4
    1882:	12 c0       	rjmp	.+36     	; 0x18a8 <vfprintf+0x338>
    1884:	b7 01       	movw	r22, r14
    1886:	80 e3       	ldi	r24, 0x30	; 48
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	2c 87       	std	Y+12, r18	; 0x0c
    188c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    1890:	2c 85       	ldd	r18, Y+12	; 0x0c
    1892:	22 ff       	sbrs	r18, 2
    1894:	17 c0       	rjmp	.+46     	; 0x18c4 <vfprintf+0x354>
    1896:	21 ff       	sbrs	r18, 1
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <vfprintf+0x330>
    189a:	88 e5       	ldi	r24, 0x58	; 88
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <vfprintf+0x334>
    18a0:	88 e7       	ldi	r24, 0x78	; 120
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	b7 01       	movw	r22, r14
    18a6:	0c c0       	rjmp	.+24     	; 0x18c0 <vfprintf+0x350>
    18a8:	82 2f       	mov	r24, r18
    18aa:	86 78       	andi	r24, 0x86	; 134
    18ac:	59 f0       	breq	.+22     	; 0x18c4 <vfprintf+0x354>
    18ae:	21 fd       	sbrc	r18, 1
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <vfprintf+0x346>
    18b2:	80 e2       	ldi	r24, 0x20	; 32
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <vfprintf+0x348>
    18b6:	8b e2       	ldi	r24, 0x2B	; 43
    18b8:	27 fd       	sbrc	r18, 7
    18ba:	8d e2       	ldi	r24, 0x2D	; 45
    18bc:	b7 01       	movw	r22, r14
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    18c4:	a5 14       	cp	r10, r5
    18c6:	38 f4       	brcc	.+14     	; 0x18d6 <vfprintf+0x366>
    18c8:	b7 01       	movw	r22, r14
    18ca:	80 e3       	ldi	r24, 0x30	; 48
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    18d2:	5a 94       	dec	r5
    18d4:	f7 cf       	rjmp	.-18     	; 0x18c4 <vfprintf+0x354>
    18d6:	aa 94       	dec	r10
    18d8:	f4 01       	movw	r30, r8
    18da:	ea 0d       	add	r30, r10
    18dc:	f1 1d       	adc	r31, r1
    18de:	80 81       	ld	r24, Z
    18e0:	b7 01       	movw	r22, r14
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    18e8:	a1 10       	cpse	r10, r1
    18ea:	f5 cf       	rjmp	.-22     	; 0x18d6 <vfprintf+0x366>
    18ec:	33 20       	and	r3, r3
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <vfprintf+0x382>
    18f0:	51 ce       	rjmp	.-862    	; 0x1594 <vfprintf+0x24>
    18f2:	b7 01       	movw	r22, r14
    18f4:	80 e2       	ldi	r24, 0x20	; 32
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <fputc>
    18fc:	3a 94       	dec	r3
    18fe:	f6 cf       	rjmp	.-20     	; 0x18ec <vfprintf+0x37c>
    1900:	f7 01       	movw	r30, r14
    1902:	86 81       	ldd	r24, Z+6	; 0x06
    1904:	97 81       	ldd	r25, Z+7	; 0x07
    1906:	02 c0       	rjmp	.+4      	; 0x190c <vfprintf+0x39c>
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	9f ef       	ldi	r25, 0xFF	; 255
    190c:	2c 96       	adiw	r28, 0x0c	; 12
    190e:	e2 e1       	ldi	r30, 0x12	; 18
    1910:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__epilogue_restores__>

00001914 <calloc>:
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	86 9f       	mul	r24, r22
    191e:	80 01       	movw	r16, r0
    1920:	87 9f       	mul	r24, r23
    1922:	10 0d       	add	r17, r0
    1924:	96 9f       	mul	r25, r22
    1926:	10 0d       	add	r17, r0
    1928:	11 24       	eor	r1, r1
    192a:	c8 01       	movw	r24, r16
    192c:	0e 94 a6 0c 	call	0x194c	; 0x194c <malloc>
    1930:	ec 01       	movw	r28, r24
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	29 f0       	breq	.+10     	; 0x1940 <calloc+0x2c>
    1936:	a8 01       	movw	r20, r16
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <memset>
    1940:	ce 01       	movw	r24, r28
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <malloc>:
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	91 05       	cpc	r25, r1
    1954:	10 f4       	brcc	.+4      	; 0x195a <malloc+0xe>
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	e0 91 05 04 	lds	r30, 0x0405
    195e:	f0 91 06 04 	lds	r31, 0x0406
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	a0 e0       	ldi	r26, 0x00	; 0
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	30 97       	sbiw	r30, 0x00	; 0
    196c:	39 f1       	breq	.+78     	; 0x19bc <malloc+0x70>
    196e:	40 81       	ld	r20, Z
    1970:	51 81       	ldd	r21, Z+1	; 0x01
    1972:	48 17       	cp	r20, r24
    1974:	59 07       	cpc	r21, r25
    1976:	b8 f0       	brcs	.+46     	; 0x19a6 <malloc+0x5a>
    1978:	48 17       	cp	r20, r24
    197a:	59 07       	cpc	r21, r25
    197c:	71 f4       	brne	.+28     	; 0x199a <malloc+0x4e>
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	10 97       	sbiw	r26, 0x00	; 0
    1984:	29 f0       	breq	.+10     	; 0x1990 <malloc+0x44>
    1986:	13 96       	adiw	r26, 0x03	; 3
    1988:	9c 93       	st	X, r25
    198a:	8e 93       	st	-X, r24
    198c:	12 97       	sbiw	r26, 0x02	; 2
    198e:	2c c0       	rjmp	.+88     	; 0x19e8 <malloc+0x9c>
    1990:	90 93 06 04 	sts	0x0406, r25
    1994:	80 93 05 04 	sts	0x0405, r24
    1998:	27 c0       	rjmp	.+78     	; 0x19e8 <malloc+0x9c>
    199a:	21 15       	cp	r18, r1
    199c:	31 05       	cpc	r19, r1
    199e:	31 f0       	breq	.+12     	; 0x19ac <malloc+0x60>
    19a0:	42 17       	cp	r20, r18
    19a2:	53 07       	cpc	r21, r19
    19a4:	18 f0       	brcs	.+6      	; 0x19ac <malloc+0x60>
    19a6:	a9 01       	movw	r20, r18
    19a8:	db 01       	movw	r26, r22
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <malloc+0x62>
    19ac:	ef 01       	movw	r28, r30
    19ae:	9a 01       	movw	r18, r20
    19b0:	bd 01       	movw	r22, r26
    19b2:	df 01       	movw	r26, r30
    19b4:	02 80       	ldd	r0, Z+2	; 0x02
    19b6:	f3 81       	ldd	r31, Z+3	; 0x03
    19b8:	e0 2d       	mov	r30, r0
    19ba:	d7 cf       	rjmp	.-82     	; 0x196a <malloc+0x1e>
    19bc:	21 15       	cp	r18, r1
    19be:	31 05       	cpc	r19, r1
    19c0:	f9 f0       	breq	.+62     	; 0x1a00 <malloc+0xb4>
    19c2:	28 1b       	sub	r18, r24
    19c4:	39 0b       	sbc	r19, r25
    19c6:	24 30       	cpi	r18, 0x04	; 4
    19c8:	31 05       	cpc	r19, r1
    19ca:	80 f4       	brcc	.+32     	; 0x19ec <malloc+0xa0>
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	61 15       	cp	r22, r1
    19d2:	71 05       	cpc	r23, r1
    19d4:	21 f0       	breq	.+8      	; 0x19de <malloc+0x92>
    19d6:	fb 01       	movw	r30, r22
    19d8:	93 83       	std	Z+3, r25	; 0x03
    19da:	82 83       	std	Z+2, r24	; 0x02
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <malloc+0x9a>
    19de:	90 93 06 04 	sts	0x0406, r25
    19e2:	80 93 05 04 	sts	0x0405, r24
    19e6:	fe 01       	movw	r30, r28
    19e8:	32 96       	adiw	r30, 0x02	; 2
    19ea:	44 c0       	rjmp	.+136    	; 0x1a74 <malloc+0x128>
    19ec:	fe 01       	movw	r30, r28
    19ee:	e2 0f       	add	r30, r18
    19f0:	f3 1f       	adc	r31, r19
    19f2:	81 93       	st	Z+, r24
    19f4:	91 93       	st	Z+, r25
    19f6:	22 50       	subi	r18, 0x02	; 2
    19f8:	31 09       	sbc	r19, r1
    19fa:	39 83       	std	Y+1, r19	; 0x01
    19fc:	28 83       	st	Y, r18
    19fe:	3a c0       	rjmp	.+116    	; 0x1a74 <malloc+0x128>
    1a00:	20 91 03 04 	lds	r18, 0x0403
    1a04:	30 91 04 04 	lds	r19, 0x0404
    1a08:	23 2b       	or	r18, r19
    1a0a:	41 f4       	brne	.+16     	; 0x1a1c <malloc+0xd0>
    1a0c:	20 91 02 01 	lds	r18, 0x0102
    1a10:	30 91 03 01 	lds	r19, 0x0103
    1a14:	30 93 04 04 	sts	0x0404, r19
    1a18:	20 93 03 04 	sts	0x0403, r18
    1a1c:	20 91 00 01 	lds	r18, 0x0100
    1a20:	30 91 01 01 	lds	r19, 0x0101
    1a24:	21 15       	cp	r18, r1
    1a26:	31 05       	cpc	r19, r1
    1a28:	41 f4       	brne	.+16     	; 0x1a3a <malloc+0xee>
    1a2a:	2d b7       	in	r18, 0x3d	; 61
    1a2c:	3e b7       	in	r19, 0x3e	; 62
    1a2e:	40 91 04 01 	lds	r20, 0x0104
    1a32:	50 91 05 01 	lds	r21, 0x0105
    1a36:	24 1b       	sub	r18, r20
    1a38:	35 0b       	sbc	r19, r21
    1a3a:	e0 91 03 04 	lds	r30, 0x0403
    1a3e:	f0 91 04 04 	lds	r31, 0x0404
    1a42:	e2 17       	cp	r30, r18
    1a44:	f3 07       	cpc	r31, r19
    1a46:	a0 f4       	brcc	.+40     	; 0x1a70 <malloc+0x124>
    1a48:	2e 1b       	sub	r18, r30
    1a4a:	3f 0b       	sbc	r19, r31
    1a4c:	28 17       	cp	r18, r24
    1a4e:	39 07       	cpc	r19, r25
    1a50:	78 f0       	brcs	.+30     	; 0x1a70 <malloc+0x124>
    1a52:	ac 01       	movw	r20, r24
    1a54:	4e 5f       	subi	r20, 0xFE	; 254
    1a56:	5f 4f       	sbci	r21, 0xFF	; 255
    1a58:	24 17       	cp	r18, r20
    1a5a:	35 07       	cpc	r19, r21
    1a5c:	48 f0       	brcs	.+18     	; 0x1a70 <malloc+0x124>
    1a5e:	4e 0f       	add	r20, r30
    1a60:	5f 1f       	adc	r21, r31
    1a62:	50 93 04 04 	sts	0x0404, r21
    1a66:	40 93 03 04 	sts	0x0403, r20
    1a6a:	81 93       	st	Z+, r24
    1a6c:	91 93       	st	Z+, r25
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <malloc+0x128>
    1a70:	e0 e0       	ldi	r30, 0x00	; 0
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	cf 01       	movw	r24, r30
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	08 95       	ret

00001a7c <free>:
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <free+0xa>
    1a84:	87 c0       	rjmp	.+270    	; 0x1b94 <free+0x118>
    1a86:	fc 01       	movw	r30, r24
    1a88:	32 97       	sbiw	r30, 0x02	; 2
    1a8a:	13 82       	std	Z+3, r1	; 0x03
    1a8c:	12 82       	std	Z+2, r1	; 0x02
    1a8e:	c0 91 05 04 	lds	r28, 0x0405
    1a92:	d0 91 06 04 	lds	r29, 0x0406
    1a96:	20 97       	sbiw	r28, 0x00	; 0
    1a98:	81 f4       	brne	.+32     	; 0x1aba <free+0x3e>
    1a9a:	20 81       	ld	r18, Z
    1a9c:	31 81       	ldd	r19, Z+1	; 0x01
    1a9e:	28 0f       	add	r18, r24
    1aa0:	39 1f       	adc	r19, r25
    1aa2:	80 91 03 04 	lds	r24, 0x0403
    1aa6:	90 91 04 04 	lds	r25, 0x0404
    1aaa:	82 17       	cp	r24, r18
    1aac:	93 07       	cpc	r25, r19
    1aae:	79 f5       	brne	.+94     	; 0x1b0e <free+0x92>
    1ab0:	f0 93 04 04 	sts	0x0404, r31
    1ab4:	e0 93 03 04 	sts	0x0403, r30
    1ab8:	6d c0       	rjmp	.+218    	; 0x1b94 <free+0x118>
    1aba:	de 01       	movw	r26, r28
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	ae 17       	cp	r26, r30
    1ac2:	bf 07       	cpc	r27, r31
    1ac4:	50 f4       	brcc	.+20     	; 0x1ada <free+0x5e>
    1ac6:	12 96       	adiw	r26, 0x02	; 2
    1ac8:	4d 91       	ld	r20, X+
    1aca:	5c 91       	ld	r21, X
    1acc:	13 97       	sbiw	r26, 0x03	; 3
    1ace:	9d 01       	movw	r18, r26
    1ad0:	41 15       	cp	r20, r1
    1ad2:	51 05       	cpc	r21, r1
    1ad4:	09 f1       	breq	.+66     	; 0x1b18 <free+0x9c>
    1ad6:	da 01       	movw	r26, r20
    1ad8:	f3 cf       	rjmp	.-26     	; 0x1ac0 <free+0x44>
    1ada:	b3 83       	std	Z+3, r27	; 0x03
    1adc:	a2 83       	std	Z+2, r26	; 0x02
    1ade:	40 81       	ld	r20, Z
    1ae0:	51 81       	ldd	r21, Z+1	; 0x01
    1ae2:	84 0f       	add	r24, r20
    1ae4:	95 1f       	adc	r25, r21
    1ae6:	8a 17       	cp	r24, r26
    1ae8:	9b 07       	cpc	r25, r27
    1aea:	71 f4       	brne	.+28     	; 0x1b08 <free+0x8c>
    1aec:	8d 91       	ld	r24, X+
    1aee:	9c 91       	ld	r25, X
    1af0:	11 97       	sbiw	r26, 0x01	; 1
    1af2:	84 0f       	add	r24, r20
    1af4:	95 1f       	adc	r25, r21
    1af6:	02 96       	adiw	r24, 0x02	; 2
    1af8:	91 83       	std	Z+1, r25	; 0x01
    1afa:	80 83       	st	Z, r24
    1afc:	12 96       	adiw	r26, 0x02	; 2
    1afe:	8d 91       	ld	r24, X+
    1b00:	9c 91       	ld	r25, X
    1b02:	13 97       	sbiw	r26, 0x03	; 3
    1b04:	93 83       	std	Z+3, r25	; 0x03
    1b06:	82 83       	std	Z+2, r24	; 0x02
    1b08:	21 15       	cp	r18, r1
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	29 f4       	brne	.+10     	; 0x1b18 <free+0x9c>
    1b0e:	f0 93 06 04 	sts	0x0406, r31
    1b12:	e0 93 05 04 	sts	0x0405, r30
    1b16:	3e c0       	rjmp	.+124    	; 0x1b94 <free+0x118>
    1b18:	d9 01       	movw	r26, r18
    1b1a:	13 96       	adiw	r26, 0x03	; 3
    1b1c:	fc 93       	st	X, r31
    1b1e:	ee 93       	st	-X, r30
    1b20:	12 97       	sbiw	r26, 0x02	; 2
    1b22:	4d 91       	ld	r20, X+
    1b24:	5d 91       	ld	r21, X+
    1b26:	a4 0f       	add	r26, r20
    1b28:	b5 1f       	adc	r27, r21
    1b2a:	ea 17       	cp	r30, r26
    1b2c:	fb 07       	cpc	r31, r27
    1b2e:	79 f4       	brne	.+30     	; 0x1b4e <free+0xd2>
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	84 0f       	add	r24, r20
    1b36:	95 1f       	adc	r25, r21
    1b38:	02 96       	adiw	r24, 0x02	; 2
    1b3a:	d9 01       	movw	r26, r18
    1b3c:	11 96       	adiw	r26, 0x01	; 1
    1b3e:	9c 93       	st	X, r25
    1b40:	8e 93       	st	-X, r24
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	13 96       	adiw	r26, 0x03	; 3
    1b48:	9c 93       	st	X, r25
    1b4a:	8e 93       	st	-X, r24
    1b4c:	12 97       	sbiw	r26, 0x02	; 2
    1b4e:	e0 e0       	ldi	r30, 0x00	; 0
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <free+0xe4>
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ec 01       	movw	r28, r24
    1b5e:	f9 cf       	rjmp	.-14     	; 0x1b52 <free+0xd6>
    1b60:	ce 01       	movw	r24, r28
    1b62:	02 96       	adiw	r24, 0x02	; 2
    1b64:	28 81       	ld	r18, Y
    1b66:	39 81       	ldd	r19, Y+1	; 0x01
    1b68:	82 0f       	add	r24, r18
    1b6a:	93 1f       	adc	r25, r19
    1b6c:	20 91 03 04 	lds	r18, 0x0403
    1b70:	30 91 04 04 	lds	r19, 0x0404
    1b74:	28 17       	cp	r18, r24
    1b76:	39 07       	cpc	r19, r25
    1b78:	69 f4       	brne	.+26     	; 0x1b94 <free+0x118>
    1b7a:	30 97       	sbiw	r30, 0x00	; 0
    1b7c:	29 f4       	brne	.+10     	; 0x1b88 <free+0x10c>
    1b7e:	10 92 06 04 	sts	0x0406, r1
    1b82:	10 92 05 04 	sts	0x0405, r1
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <free+0x110>
    1b88:	13 82       	std	Z+3, r1	; 0x03
    1b8a:	12 82       	std	Z+2, r1	; 0x02
    1b8c:	d0 93 04 04 	sts	0x0404, r29
    1b90:	c0 93 03 04 	sts	0x0403, r28
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	08 95       	ret

00001b9a <strnlen_P>:
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	05 90       	lpm	r0, Z+
    1b9e:	61 50       	subi	r22, 0x01	; 1
    1ba0:	70 40       	sbci	r23, 0x00	; 0
    1ba2:	01 10       	cpse	r0, r1
    1ba4:	d8 f7       	brcc	.-10     	; 0x1b9c <strnlen_P+0x2>
    1ba6:	80 95       	com	r24
    1ba8:	90 95       	com	r25
    1baa:	8e 0f       	add	r24, r30
    1bac:	9f 1f       	adc	r25, r31
    1bae:	08 95       	ret

00001bb0 <memset>:
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <memset+0x6>
    1bb4:	6d 93       	st	X+, r22
    1bb6:	41 50       	subi	r20, 0x01	; 1
    1bb8:	50 40       	sbci	r21, 0x00	; 0
    1bba:	e0 f7       	brcc	.-8      	; 0x1bb4 <memset+0x4>
    1bbc:	08 95       	ret

00001bbe <strnlen>:
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	61 50       	subi	r22, 0x01	; 1
    1bc2:	70 40       	sbci	r23, 0x00	; 0
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	01 10       	cpse	r0, r1
    1bc8:	d8 f7       	brcc	.-10     	; 0x1bc0 <strnlen+0x2>
    1bca:	80 95       	com	r24
    1bcc:	90 95       	com	r25
    1bce:	8e 0f       	add	r24, r30
    1bd0:	9f 1f       	adc	r25, r31
    1bd2:	08 95       	ret

00001bd4 <fputc>:
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	18 2f       	mov	r17, r24
    1bde:	09 2f       	mov	r16, r25
    1be0:	eb 01       	movw	r28, r22
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	81 fd       	sbrc	r24, 1
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <fputc+0x1a>
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	20 c0       	rjmp	.+64     	; 0x1c2e <fputc+0x5a>
    1bee:	82 ff       	sbrs	r24, 2
    1bf0:	10 c0       	rjmp	.+32     	; 0x1c12 <fputc+0x3e>
    1bf2:	4e 81       	ldd	r20, Y+6	; 0x06
    1bf4:	5f 81       	ldd	r21, Y+7	; 0x07
    1bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfa:	42 17       	cp	r20, r18
    1bfc:	53 07       	cpc	r21, r19
    1bfe:	7c f4       	brge	.+30     	; 0x1c1e <fputc+0x4a>
    1c00:	e8 81       	ld	r30, Y
    1c02:	f9 81       	ldd	r31, Y+1	; 0x01
    1c04:	9f 01       	movw	r18, r30
    1c06:	2f 5f       	subi	r18, 0xFF	; 255
    1c08:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0a:	39 83       	std	Y+1, r19	; 0x01
    1c0c:	28 83       	st	Y, r18
    1c0e:	10 83       	st	Z, r17
    1c10:	06 c0       	rjmp	.+12     	; 0x1c1e <fputc+0x4a>
    1c12:	e8 85       	ldd	r30, Y+8	; 0x08
    1c14:	f9 85       	ldd	r31, Y+9	; 0x09
    1c16:	81 2f       	mov	r24, r17
    1c18:	09 95       	icall
    1c1a:	89 2b       	or	r24, r25
    1c1c:	29 f7       	brne	.-54     	; 0x1be8 <fputc+0x14>
    1c1e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c20:	3f 81       	ldd	r19, Y+7	; 0x07
    1c22:	2f 5f       	subi	r18, 0xFF	; 255
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	3f 83       	std	Y+7, r19	; 0x07
    1c28:	2e 83       	std	Y+6, r18	; 0x06
    1c2a:	81 2f       	mov	r24, r17
    1c2c:	90 2f       	mov	r25, r16
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	0f 91       	pop	r16
    1c36:	08 95       	ret

00001c38 <__ultoa_invert>:
    1c38:	fa 01       	movw	r30, r20
    1c3a:	aa 27       	eor	r26, r26
    1c3c:	28 30       	cpi	r18, 0x08	; 8
    1c3e:	51 f1       	breq	.+84     	; 0x1c94 <__ultoa_invert+0x5c>
    1c40:	20 31       	cpi	r18, 0x10	; 16
    1c42:	81 f1       	breq	.+96     	; 0x1ca4 <__ultoa_invert+0x6c>
    1c44:	e8 94       	clt
    1c46:	6f 93       	push	r22
    1c48:	6e 7f       	andi	r22, 0xFE	; 254
    1c4a:	6e 5f       	subi	r22, 0xFE	; 254
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c50:	9f 4f       	sbci	r25, 0xFF	; 255
    1c52:	af 4f       	sbci	r26, 0xFF	; 255
    1c54:	b1 e0       	ldi	r27, 0x01	; 1
    1c56:	3e d0       	rcall	.+124    	; 0x1cd4 <__ultoa_invert+0x9c>
    1c58:	b4 e0       	ldi	r27, 0x04	; 4
    1c5a:	3c d0       	rcall	.+120    	; 0x1cd4 <__ultoa_invert+0x9c>
    1c5c:	67 0f       	add	r22, r23
    1c5e:	78 1f       	adc	r23, r24
    1c60:	89 1f       	adc	r24, r25
    1c62:	9a 1f       	adc	r25, r26
    1c64:	a1 1d       	adc	r26, r1
    1c66:	68 0f       	add	r22, r24
    1c68:	79 1f       	adc	r23, r25
    1c6a:	8a 1f       	adc	r24, r26
    1c6c:	91 1d       	adc	r25, r1
    1c6e:	a1 1d       	adc	r26, r1
    1c70:	6a 0f       	add	r22, r26
    1c72:	71 1d       	adc	r23, r1
    1c74:	81 1d       	adc	r24, r1
    1c76:	91 1d       	adc	r25, r1
    1c78:	a1 1d       	adc	r26, r1
    1c7a:	20 d0       	rcall	.+64     	; 0x1cbc <__ultoa_invert+0x84>
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <__ultoa_invert+0x48>
    1c7e:	68 94       	set
    1c80:	3f 91       	pop	r19
    1c82:	2a e0       	ldi	r18, 0x0A	; 10
    1c84:	26 9f       	mul	r18, r22
    1c86:	11 24       	eor	r1, r1
    1c88:	30 19       	sub	r19, r0
    1c8a:	30 5d       	subi	r19, 0xD0	; 208
    1c8c:	31 93       	st	Z+, r19
    1c8e:	de f6       	brtc	.-74     	; 0x1c46 <__ultoa_invert+0xe>
    1c90:	cf 01       	movw	r24, r30
    1c92:	08 95       	ret
    1c94:	46 2f       	mov	r20, r22
    1c96:	47 70       	andi	r20, 0x07	; 7
    1c98:	40 5d       	subi	r20, 0xD0	; 208
    1c9a:	41 93       	st	Z+, r20
    1c9c:	b3 e0       	ldi	r27, 0x03	; 3
    1c9e:	0f d0       	rcall	.+30     	; 0x1cbe <__ultoa_invert+0x86>
    1ca0:	c9 f7       	brne	.-14     	; 0x1c94 <__ultoa_invert+0x5c>
    1ca2:	f6 cf       	rjmp	.-20     	; 0x1c90 <__ultoa_invert+0x58>
    1ca4:	46 2f       	mov	r20, r22
    1ca6:	4f 70       	andi	r20, 0x0F	; 15
    1ca8:	40 5d       	subi	r20, 0xD0	; 208
    1caa:	4a 33       	cpi	r20, 0x3A	; 58
    1cac:	18 f0       	brcs	.+6      	; 0x1cb4 <__ultoa_invert+0x7c>
    1cae:	49 5d       	subi	r20, 0xD9	; 217
    1cb0:	31 fd       	sbrc	r19, 1
    1cb2:	40 52       	subi	r20, 0x20	; 32
    1cb4:	41 93       	st	Z+, r20
    1cb6:	02 d0       	rcall	.+4      	; 0x1cbc <__ultoa_invert+0x84>
    1cb8:	a9 f7       	brne	.-22     	; 0x1ca4 <__ultoa_invert+0x6c>
    1cba:	ea cf       	rjmp	.-44     	; 0x1c90 <__ultoa_invert+0x58>
    1cbc:	b4 e0       	ldi	r27, 0x04	; 4
    1cbe:	a6 95       	lsr	r26
    1cc0:	97 95       	ror	r25
    1cc2:	87 95       	ror	r24
    1cc4:	77 95       	ror	r23
    1cc6:	67 95       	ror	r22
    1cc8:	ba 95       	dec	r27
    1cca:	c9 f7       	brne	.-14     	; 0x1cbe <__ultoa_invert+0x86>
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	61 05       	cpc	r22, r1
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	08 95       	ret
    1cd4:	9b 01       	movw	r18, r22
    1cd6:	ac 01       	movw	r20, r24
    1cd8:	0a 2e       	mov	r0, r26
    1cda:	06 94       	lsr	r0
    1cdc:	57 95       	ror	r21
    1cde:	47 95       	ror	r20
    1ce0:	37 95       	ror	r19
    1ce2:	27 95       	ror	r18
    1ce4:	ba 95       	dec	r27
    1ce6:	c9 f7       	brne	.-14     	; 0x1cda <__ultoa_invert+0xa2>
    1ce8:	62 0f       	add	r22, r18
    1cea:	73 1f       	adc	r23, r19
    1cec:	84 1f       	adc	r24, r20
    1cee:	95 1f       	adc	r25, r21
    1cf0:	a0 1d       	adc	r26, r0
    1cf2:	08 95       	ret

00001cf4 <__prologue_saves__>:
    1cf4:	2f 92       	push	r2
    1cf6:	3f 92       	push	r3
    1cf8:	4f 92       	push	r4
    1cfa:	5f 92       	push	r5
    1cfc:	6f 92       	push	r6
    1cfe:	7f 92       	push	r7
    1d00:	8f 92       	push	r8
    1d02:	9f 92       	push	r9
    1d04:	af 92       	push	r10
    1d06:	bf 92       	push	r11
    1d08:	cf 92       	push	r12
    1d0a:	df 92       	push	r13
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	ca 1b       	sub	r28, r26
    1d1e:	db 0b       	sbc	r29, r27
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	09 94       	ijmp

00001d2c <__epilogue_restores__>:
    1d2c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d2e:	39 88       	ldd	r3, Y+17	; 0x11
    1d30:	48 88       	ldd	r4, Y+16	; 0x10
    1d32:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d34:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d36:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d38:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d3e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d40:	c8 84       	ldd	r12, Y+8	; 0x08
    1d42:	df 80       	ldd	r13, Y+7	; 0x07
    1d44:	ee 80       	ldd	r14, Y+6	; 0x06
    1d46:	fd 80       	ldd	r15, Y+5	; 0x05
    1d48:	0c 81       	ldd	r16, Y+4	; 0x04
    1d4a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d4c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d4e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d50:	ce 0f       	add	r28, r30
    1d52:	d1 1d       	adc	r29, r1
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	ed 01       	movw	r28, r26
    1d60:	08 95       	ret

00001d62 <_exit>:
    1d62:	f8 94       	cli

00001d64 <__stop_program>:
    1d64:	ff cf       	rjmp	.-2      	; 0x1d64 <__stop_program>
