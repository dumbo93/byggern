
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c2  00800100  00002148  000021dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  008003c2  008003c2  0000249e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000249e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000408  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c09  00000000  00000000  00002902  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016bb  00000000  00000000  0000650b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000188e  00000000  00000000  00007bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a54  00000000  00000000  00009454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bd3  00000000  00000000  00009ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ea1  00000000  00000000  0000aa7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000318  00000000  00000000  0000c91c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_1>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_13>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5f       	subi	r16, 0xF0	; 240
      78:	00 00       	nop
      7a:	00 07       	cpc	r16, r16
      7c:	00 07       	cpc	r16, r16
      7e:	00 14       	cp	r0, r0
      80:	7f 14       	cp	r7, r15
      82:	7f 14       	cp	r7, r15
      84:	24 2a       	or	r2, r20
      86:	7f 2a       	or	r7, r31
      88:	12 23       	and	r17, r18
      8a:	13 08       	sbc	r1, r3
      8c:	64 62       	ori	r22, 0x24	; 36
      8e:	36 49       	sbci	r19, 0x96	; 150
      90:	55 22       	and	r5, r21
      92:	50 00       	.word	0x0050	; ????
      94:	05 03       	mulsu	r16, r21
      96:	00 00       	nop
      98:	00 1c       	adc	r0, r0
      9a:	22 41       	sbci	r18, 0x12	; 18
      9c:	00 00       	nop
      9e:	41 22       	and	r4, r17
      a0:	1c 00       	.word	0x001c	; ????
      a2:	08 2a       	or	r0, r24
      a4:	1c 2a       	or	r1, r28
      a6:	08 08       	sbc	r0, r8
      a8:	08 3e       	cpi	r16, 0xE8	; 232
      aa:	08 08       	sbc	r0, r8
      ac:	00 50       	subi	r16, 0x00	; 0
      ae:	30 00       	.word	0x0030	; ????
      b0:	00 08       	sbc	r0, r0
      b2:	08 08       	sbc	r0, r8
      b4:	08 08       	sbc	r0, r8
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 02       	muls	r16, r20
      c0:	3e 51       	subi	r19, 0x1E	; 30
      c2:	49 45       	sbci	r20, 0x59	; 89
      c4:	3e 00       	.word	0x003e	; ????
      c6:	42 7f       	andi	r20, 0xF2	; 242
      c8:	40 00       	.word	0x0040	; ????
      ca:	42 61       	ori	r20, 0x12	; 18
      cc:	51 49       	sbci	r21, 0x91	; 145
      ce:	46 21       	and	r20, r6
      d0:	41 45       	sbci	r20, 0x51	; 81
      d2:	4b 31       	cpi	r20, 0x1B	; 27
      d4:	18 14       	cp	r1, r8
      d6:	12 7f       	andi	r17, 0xF2	; 242
      d8:	10 27       	eor	r17, r16
      da:	45 45       	sbci	r20, 0x55	; 85
      dc:	45 39       	cpi	r20, 0x95	; 149
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	49 49       	sbci	r20, 0x99	; 153
      e2:	30 01       	movw	r6, r0
      e4:	71 09       	sbc	r23, r1
      e6:	05 03       	mulsu	r16, r21
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	49 49       	sbci	r20, 0x99	; 153
      ec:	36 06       	cpc	r3, r22
      ee:	49 49       	sbci	r20, 0x99	; 153
      f0:	29 1e       	adc	r2, r25
      f2:	00 36       	cpi	r16, 0x60	; 96
      f4:	36 00       	.word	0x0036	; ????
      f6:	00 00       	nop
      f8:	56 36       	cpi	r21, 0x66	; 102
      fa:	00 00       	nop
      fc:	00 08       	sbc	r0, r0
      fe:	14 22       	and	r1, r20
     100:	41 14       	cp	r4, r1
     102:	14 14       	cp	r1, r4
     104:	14 14       	cp	r1, r4
     106:	41 22       	and	r4, r17
     108:	14 08       	sbc	r1, r4
     10a:	00 02       	muls	r16, r16
     10c:	01 51       	subi	r16, 0x11	; 17
     10e:	09 06       	cpc	r0, r25
     110:	32 49       	sbci	r19, 0x92	; 146
     112:	79 41       	sbci	r23, 0x19	; 25
     114:	3e 7e       	andi	r19, 0xEE	; 238
     116:	11 11       	cpse	r17, r1
     118:	11 7e       	andi	r17, 0xE1	; 225
     11a:	7f 49       	sbci	r23, 0x9F	; 159
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	36 3e       	cpi	r19, 0xE6	; 230
     120:	41 41       	sbci	r20, 0x11	; 17
     122:	41 22       	and	r4, r17
     124:	7f 41       	sbci	r23, 0x1F	; 31
     126:	41 22       	and	r4, r17
     128:	1c 7f       	andi	r17, 0xFC	; 252
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	49 41       	sbci	r20, 0x19	; 25
     12e:	7f 09       	sbc	r23, r15
     130:	09 01       	movw	r0, r18
     132:	01 3e       	cpi	r16, 0xE1	; 225
     134:	41 41       	sbci	r20, 0x11	; 17
     136:	51 32       	cpi	r21, 0x21	; 33
     138:	7f 08       	sbc	r7, r15
     13a:	08 08       	sbc	r0, r8
     13c:	7f 00       	.word	0x007f	; ????
     13e:	41 7f       	andi	r20, 0xF1	; 241
     140:	41 00       	.word	0x0041	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	41 3f       	cpi	r20, 0xF1	; 241
     146:	01 7f       	andi	r16, 0xF1	; 241
     148:	08 14       	cp	r0, r8
     14a:	22 41       	sbci	r18, 0x12	; 18
     14c:	7f 40       	sbci	r23, 0x0F	; 15
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	40 7f       	andi	r20, 0xF0	; 240
     152:	02 04       	cpc	r0, r2
     154:	02 7f       	andi	r16, 0xF2	; 242
     156:	7f 04       	cpc	r7, r15
     158:	08 10       	cpse	r0, r8
     15a:	7f 3e       	cpi	r23, 0xEF	; 239
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 3e       	cpi	r20, 0xE1	; 225
     160:	7f 09       	sbc	r23, r15
     162:	09 09       	sbc	r16, r9
     164:	06 3e       	cpi	r16, 0xE6	; 230
     166:	41 51       	subi	r20, 0x11	; 17
     168:	21 5e       	subi	r18, 0xE1	; 225
     16a:	7f 09       	sbc	r23, r15
     16c:	19 29       	or	r17, r9
     16e:	46 46       	sbci	r20, 0x66	; 102
     170:	49 49       	sbci	r20, 0x99	; 153
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	01 01       	movw	r0, r2
     176:	7f 01       	movw	r14, r30
     178:	01 3f       	cpi	r16, 0xF1	; 241
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	40 3f       	cpi	r20, 0xF0	; 240
     17e:	1f 20       	and	r1, r15
     180:	40 20       	and	r4, r0
     182:	1f 7f       	andi	r17, 0xFF	; 255
     184:	20 18       	sub	r2, r0
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	63 14       	cp	r6, r3
     18a:	08 14       	cp	r0, r8
     18c:	63 03       	mulsu	r22, r19
     18e:	04 78       	andi	r16, 0x84	; 132
     190:	04 03       	mulsu	r16, r20
     192:	61 51       	subi	r22, 0x11	; 17
     194:	49 45       	sbci	r20, 0x59	; 89
     196:	43 00       	.word	0x0043	; ????
     198:	00 7f       	andi	r16, 0xF0	; 240
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	02 04       	cpc	r0, r2
     19e:	08 10       	cpse	r0, r8
     1a0:	20 41       	sbci	r18, 0x10	; 16
     1a2:	41 7f       	andi	r20, 0xF1	; 241
     1a4:	00 00       	nop
     1a6:	04 02       	muls	r16, r20
     1a8:	01 02       	muls	r16, r17
     1aa:	04 40       	sbci	r16, 0x04	; 4
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 40       	sbci	r20, 0x00	; 0
     1b0:	00 01       	movw	r0, r0
     1b2:	02 04       	cpc	r0, r2
     1b4:	00 20       	and	r0, r0
     1b6:	54 54       	subi	r21, 0x44	; 68
     1b8:	54 78       	andi	r21, 0x84	; 132
     1ba:	7f 48       	sbci	r23, 0x8F	; 143
     1bc:	44 44       	sbci	r20, 0x44	; 68
     1be:	38 38       	cpi	r19, 0x88	; 136
     1c0:	44 44       	sbci	r20, 0x44	; 68
     1c2:	44 20       	and	r4, r4
     1c4:	38 44       	sbci	r19, 0x48	; 72
     1c6:	44 48       	sbci	r20, 0x84	; 132
     1c8:	7f 38       	cpi	r23, 0x8F	; 143
     1ca:	54 54       	subi	r21, 0x44	; 68
     1cc:	54 18       	sub	r5, r4
     1ce:	08 7e       	andi	r16, 0xE8	; 232
     1d0:	09 01       	movw	r0, r18
     1d2:	02 08       	sbc	r0, r2
     1d4:	14 54       	subi	r17, 0x44	; 68
     1d6:	54 3c       	cpi	r21, 0xC4	; 196
     1d8:	7f 08       	sbc	r7, r15
     1da:	04 04       	cpc	r0, r4
     1dc:	78 00       	.word	0x0078	; ????
     1de:	44 7d       	andi	r20, 0xD4	; 212
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	44 3d       	cpi	r20, 0xD4	; 212
     1e6:	00 00       	nop
     1e8:	7f 10       	cpse	r7, r15
     1ea:	28 44       	sbci	r18, 0x48	; 72
     1ec:	00 41       	sbci	r16, 0x10	; 16
     1ee:	7f 40       	sbci	r23, 0x0F	; 15
     1f0:	00 7c       	andi	r16, 0xC0	; 192
     1f2:	04 18       	sub	r0, r4
     1f4:	04 78       	andi	r16, 0x84	; 132
     1f6:	7c 08       	sbc	r7, r12
     1f8:	04 04       	cpc	r0, r4
     1fa:	78 38       	cpi	r23, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 38       	cpi	r20, 0x84	; 132
     200:	7c 14       	cp	r7, r12
     202:	14 14       	cp	r1, r4
     204:	08 08       	sbc	r0, r8
     206:	14 14       	cp	r1, r4
     208:	18 7c       	andi	r17, 0xC8	; 200
     20a:	7c 08       	sbc	r7, r12
     20c:	04 04       	cpc	r0, r4
     20e:	08 48       	sbci	r16, 0x88	; 136
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 20       	and	r5, r4
     214:	04 3f       	cpi	r16, 0xF4	; 244
     216:	44 40       	sbci	r20, 0x04	; 4
     218:	20 3c       	cpi	r18, 0xC0	; 192
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	20 7c       	andi	r18, 0xC0	; 192
     21e:	1c 20       	and	r1, r12
     220:	40 20       	and	r4, r0
     222:	1c 3c       	cpi	r17, 0xCC	; 204
     224:	40 30       	cpi	r20, 0x00	; 0
     226:	40 3c       	cpi	r20, 0xC0	; 192
     228:	44 28       	or	r4, r4
     22a:	10 28       	or	r1, r0
     22c:	44 0c       	add	r4, r4
     22e:	50 50       	subi	r21, 0x00	; 0
     230:	50 3c       	cpi	r21, 0xC0	; 192
     232:	44 64       	ori	r20, 0x44	; 68
     234:	54 4c       	sbci	r21, 0xC4	; 196
     236:	44 00       	.word	0x0044	; ????
     238:	08 36       	cpi	r16, 0x68	; 104
     23a:	41 00       	.word	0x0041	; ????
     23c:	00 00       	nop
     23e:	7f 00       	.word	0x007f	; ????
     240:	00 00       	nop
     242:	41 36       	cpi	r20, 0x61	; 97
     244:	08 00       	.word	0x0008	; ????
     246:	02 01       	movw	r0, r4
     248:	03 02       	muls	r16, r19
     24a:	01 00       	.word	0x0001	; ????

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	13 e0       	ldi	r17, 0x03	; 3
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e8 e4       	ldi	r30, 0x48	; 72
     260:	f1 e2       	ldi	r31, 0x21	; 33
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a2 3c       	cpi	r26, 0xC2	; 194
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	23 e0       	ldi	r18, 0x03	; 3
     270:	a2 ec       	ldi	r26, 0xC2	; 194
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a9 3e       	cpi	r26, 0xE9	; 233
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 3f 09 	call	0x127e	; 0x127e <main>
     282:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <CAN_init>:
enum interrupt_flags interrupt_flag = no_flag; 


int CAN_init()
{
	MCP_init();
     28a:	0e 94 8f 02 	call	0x51e	; 0x51e <MCP_init>
	// Turn mask/filters off
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     28e:	40 e6       	ldi	r20, 0x60	; 96
     290:	60 e6       	ldi	r22, 0x60	; 96
     292:	80 e6       	ldi	r24, 0x60	; 96
     294:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_FILTER_OFF, MCP_FILTER_OFF);
     298:	40 e6       	ldi	r20, 0x60	; 96
     29a:	60 e6       	ldi	r22, 0x60	; 96
     29c:	80 e7       	ldi	r24, 0x70	; 112
     29e:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	
	// Rollover enable
	MCP_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     2a2:	44 e0       	ldi	r20, 0x04	; 4
     2a4:	64 e0       	ldi	r22, 0x04	; 4
     2a6:	80 e6       	ldi	r24, 0x60	; 96
     2a8:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	MCP_bit_modify(MCP_RXB1CTRL, MCP_ROLLOVER, MCP_ROLLOVER);
     2ac:	44 e0       	ldi	r20, 0x04	; 4
     2ae:	64 e0       	ldi	r22, 0x04	; 4
     2b0:	80 e7       	ldi	r24, 0x70	; 112
     2b2:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	
	//Set to loop-back mode
	//MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	// Set to normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	60 ee       	ldi	r22, 0xE0	; 224
     2ba:	8f e0       	ldi	r24, 0x0F	; 15
     2bc:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     2c0:	8e e0       	ldi	r24, 0x0E	; 14
     2c2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     2c6:	80 7e       	andi	r24, 0xE0	; 224
     2c8:	39 f0       	breq	.+14     	; 0x2d8 <CAN_init+0x4e>
		printf("MCP2515 is NOT in normal mode after CAN init\n");
     2ca:	86 e3       	ldi	r24, 0x36	; 54
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <puts>
		return 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	08 95       	ret
	}
	
	
	// Interrupt pin (enable CANINTE.RXnIE)
	MCP_write(MCP_CANINTE, MCP_RX_INT);
     2d8:	63 e0       	ldi	r22, 0x03	; 3
     2da:	8b e2       	ldi	r24, 0x2B	; 43
     2dc:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	
	#if defined(__AVR_ATmega162__)
	// Falling edge of INT0 generates interrupt request
	MCUCR |= (0 << ISC01) | (0 << ISC00);
     2e0:	85 b7       	in	r24, 0x35	; 53
     2e2:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
     2e4:	8b b7       	in	r24, 0x3b	; 59
     2e6:	80 64       	ori	r24, 0x40	; 64
     2e8:	8b bf       	out	0x3b, r24	; 59
	// Falling edge of INT2 generates interrupt request
	EICRA |= (0 << ISC21) | (0 << ISC20);
	// Enable external interrupts of INT2
	EIMSK |= (1 << INT2);
	#endif
	return 0;
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
}
     2ee:	08 95       	ret

000002f0 <CAN_msg_send>:

void CAN_msg_send(can_msg *message)
{
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	7c 01       	movw	r14, r24
	// Write ID to TXB0SIDH
	MCP_write(MCP_TXB0SIDH, (message->id) >> 3);
     2fe:	fc 01       	movw	r30, r24
     300:	60 81       	ld	r22, Z
     302:	71 81       	ldd	r23, Z+1	; 0x01
     304:	76 95       	lsr	r23
     306:	67 95       	ror	r22
     308:	76 95       	lsr	r23
     30a:	67 95       	ror	r22
     30c:	76 95       	lsr	r23
     30e:	67 95       	ror	r22
     310:	81 e3       	ldi	r24, 0x31	; 49
     312:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	// Write 0 to TXB0SIDL and extended identifier registers
	MCP_write(MCP_TXB0SIDL, (message->id) << 5);
     316:	f7 01       	movw	r30, r14
     318:	60 81       	ld	r22, Z
     31a:	62 95       	swap	r22
     31c:	66 0f       	add	r22, r22
     31e:	60 7e       	andi	r22, 0xE0	; 224
     320:	82 e3       	ldi	r24, 0x32	; 50
     322:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	MCP_write(MCP_TXB0EID8, 0);
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	83 e3       	ldi	r24, 0x33	; 51
     32a:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	84 e3       	ldi	r24, 0x34	; 52
     332:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
     336:	f7 01       	movw	r30, r14
     338:	62 81       	ldd	r22, Z+2	; 0x02
     33a:	85 e3       	ldi	r24, 0x35	; 53
     33c:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	
	for (int i = 0; i < message->length; i++){
     340:	f7 01       	movw	r30, r14
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	88 23       	and	r24, r24
     346:	99 f0       	breq	.+38     	; 0x36e <CAN_msg_send+0x7e>
     348:	87 01       	movw	r16, r14
     34a:	0d 5f       	subi	r16, 0xFD	; 253
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	c0 e0       	ldi	r28, 0x00	; 0
     350:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
     352:	f8 01       	movw	r30, r16
     354:	61 91       	ld	r22, Z+
     356:	8f 01       	movw	r16, r30
     358:	8c 2f       	mov	r24, r28
     35a:	8a 5c       	subi	r24, 0xCA	; 202
     35c:	0e 94 a1 02 	call	0x542	; 0x542 <MCP_write>
	MCP_write(MCP_TXB0EID0, 0);
	
	//Write data length
	MCP_write(MCP_TXB0DLC, message->length);
	
	for (int i = 0; i < message->length; i++){
     360:	21 96       	adiw	r28, 0x01	; 1
     362:	f7 01       	movw	r30, r14
     364:	22 81       	ldd	r18, Z+2	; 0x02
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	c2 17       	cp	r28, r18
     36a:	d3 07       	cpc	r29, r19
     36c:	94 f3       	brlt	.-28     	; 0x352 <CAN_msg_send+0x62>
		MCP_write(MCP_TXB0SIDH + 5 + i, message->data[i] );
	}
	MCP_request_to_send(MCP_RTS_TX0);
     36e:	81 e8       	ldi	r24, 0x81	; 129
     370:	0e 94 b9 02 	call	0x572	; 0x572 <MCP_request_to_send>
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	08 95       	ret

00000382 <CAN_msg_receive>:

void CAN_msg_receive(can_msg *msg, uint8_t reg)
{
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	7c 01       	movw	r14, r24
     394:	c6 2f       	mov	r28, r22

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	86 0f       	add	r24, r22
     39a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
     39e:	d8 2f       	mov	r29, r24
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	8c 0f       	add	r24, r28
     3a4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
     3a8:	48 2f       	mov	r20, r24
     3aa:	42 95       	swap	r20
     3ac:	46 95       	lsr	r20
     3ae:	47 70       	andi	r20, 0x07	; 7
     3b0:	2d 2f       	mov	r18, r29
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	c9 01       	movw	r24, r18
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	84 2b       	or	r24, r20
     3c4:	f7 01       	movw	r30, r14
     3c6:	91 83       	std	Z+1, r25	; 0x01
     3c8:	80 83       	st	Z, r24
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	8c 0f       	add	r24, r28
     3ce:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	f7 01       	movw	r30, r14
     3d6:	82 83       	std	Z+2, r24	; 0x02
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     3d8:	88 23       	and	r24, r24
     3da:	f9 f0       	breq	.+62     	; 0x41a <CAN_msg_receive+0x98>
     3dc:	0f 2e       	mov	r0, r31
     3de:	f6 e0       	ldi	r31, 0x06	; 6
     3e0:	df 2e       	mov	r13, r31
     3e2:	f0 2d       	mov	r31, r0
     3e4:	dc 0e       	add	r13, r28
     3e6:	87 01       	movw	r16, r14
     3e8:	0d 5f       	subi	r16, 0xFD	; 253
     3ea:	1f 4f       	sbci	r17, 0xFF	; 255
     3ec:	0f 2e       	mov	r0, r31
     3ee:	fe e0       	ldi	r31, 0x0E	; 14
     3f0:	cf 2e       	mov	r12, r31
     3f2:	f0 2d       	mov	r31, r0
     3f4:	cc 0e       	add	r12, r28
{

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
     3f6:	c0 e0       	ldi	r28, 0x00	; 0
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
	while( (i < msg->length) && (i < 8) ){
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
     3fa:	8d 2d       	mov	r24, r13
     3fc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
     400:	f8 01       	movw	r30, r16
     402:	81 93       	st	Z+, r24
     404:	8f 01       	movw	r16, r30
		i++;
     406:	21 96       	adiw	r28, 0x01	; 1

	msg->id = (MCP_read(reg + 1) << 3) | (MCP_read(reg + 2) >> 5); //RXBnSIDH and RXBnSIDL (id)
	msg->length = (MCP_read(reg + 5) & 0x0F ); // bit 0 to 3 are data length code bits. register + 5 is RXBnDLC (data length)
		
	int i = 0;
	while( (i < msg->length) && (i < 8) ){
     408:	f7 01       	movw	r30, r14
     40a:	22 81       	ldd	r18, Z+2	; 0x02
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	c2 17       	cp	r28, r18
     410:	d3 07       	cpc	r29, r19
     412:	1c f4       	brge	.+6      	; 0x41a <CAN_msg_receive+0x98>
     414:	d3 94       	inc	r13
     416:	dc 10       	cpse	r13, r12
     418:	f0 cf       	rjmp	.-32     	; 0x3fa <CAN_msg_receive+0x78>
		msg->data[i] = MCP_read(reg + 6 + i);	//RXBnDM (receive buffer)
		i++;
	}	
	
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	08 95       	ret

0000042c <CAN_handle_interrupt>:

void CAN_handle_interrupt(can_msg *msg)
{
	//printf("EFLG: %x\n", MCP_read(MCP_EFLG));
	//printf("RXB0CTRL: %x\n", MCP_read(MCP_RXB0CTRL));
	switch(interrupt_flag){
     42c:	20 91 c2 03 	lds	r18, 0x03C2
     430:	21 30       	cpi	r18, 0x01	; 1
     432:	41 f0       	breq	.+16     	; 0x444 <CAN_handle_interrupt+0x18>
     434:	18 f0       	brcs	.+6      	; 0x43c <CAN_handle_interrupt+0x10>
     436:	22 30       	cpi	r18, 0x02	; 2
     438:	59 f0       	breq	.+22     	; 0x450 <CAN_handle_interrupt+0x24>
     43a:	08 95       	ret
		case no_flag:
		//printf("no interrupt 1\n");
			msg->data[0] = CAN_NO_MESSAGE;
     43c:	2a e0       	ldi	r18, 0x0A	; 10
     43e:	fc 01       	movw	r30, r24
     440:	23 83       	std	Z+3, r18	; 0x03
			break;
     442:	08 95       	ret
		case RX0:
			CAN_msg_receive(msg, MCP_RXB0CTRL);
     444:	60 e6       	ldi	r22, 0x60	; 96
     446:	0e 94 c1 01 	call	0x382	; 0x382 <CAN_msg_receive>
			interrupt_flag = no_flag;
     44a:	10 92 c2 03 	sts	0x03C2, r1
			//printf("interrupt handled 1\n");
			break;
     44e:	08 95       	ret
		case RX1:
			CAN_msg_receive(msg, MCP_RXB1CTRL);
     450:	60 e7       	ldi	r22, 0x70	; 112
     452:	0e 94 c1 01 	call	0x382	; 0x382 <CAN_msg_receive>
			interrupt_flag = no_flag;
     456:	10 92 c2 03 	sts	0x03C2, r1
     45a:	08 95       	ret

0000045c <__vector_1>:
	}
}


#if defined(__AVR_ATmega162__)
ISR(INT0_vect){
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	2f 93       	push	r18
     468:	3f 93       	push	r19
     46a:	4f 93       	push	r20
     46c:	5f 93       	push	r21
     46e:	6f 93       	push	r22
     470:	7f 93       	push	r23
     472:	8f 93       	push	r24
     474:	9f 93       	push	r25
     476:	af 93       	push	r26
     478:	bf 93       	push	r27
     47a:	ef 93       	push	r30
     47c:	ff 93       	push	r31
	uint8_t interrupt = MCP_read(MCP_CANINTF);
     47e:	8c e2       	ldi	r24, 0x2C	; 44
     480:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>

	if (interrupt & MCP_RX0IF){
     484:	80 ff       	sbrs	r24, 0
     486:	09 c0       	rjmp	.+18     	; 0x49a <__vector_1+0x3e>
		interrupt_flag = RX0;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 c2 03 	sts	0x03C2, r24
		// clear CANINTF.RX0IF
		MCP_bit_modify(MCP_CANINTF, 0x01, 0x00);
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	8c e2       	ldi	r24, 0x2C	; 44
     494:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
     498:	0a c0       	rjmp	.+20     	; 0x4ae <__vector_1+0x52>
	}
	else if (interrupt & MCP_RX1IF){
     49a:	81 ff       	sbrs	r24, 1
     49c:	08 c0       	rjmp	.+16     	; 0x4ae <__vector_1+0x52>
		interrupt_flag = RX1;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	80 93 c2 03 	sts	0x03C2, r24
		// clear CANINTF.RX1IF
		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	62 e0       	ldi	r22, 0x02	; 2
     4a8:	8c e2       	ldi	r24, 0x2C	; 44
     4aa:	0e 94 c8 02 	call	0x590	; 0x590 <MCP_bit_modify>
	}
	
}
     4ae:	ff 91       	pop	r31
     4b0:	ef 91       	pop	r30
     4b2:	bf 91       	pop	r27
     4b4:	af 91       	pop	r26
     4b6:	9f 91       	pop	r25
     4b8:	8f 91       	pop	r24
     4ba:	7f 91       	pop	r23
     4bc:	6f 91       	pop	r22
     4be:	5f 91       	pop	r21
     4c0:	4f 91       	pop	r20
     4c2:	3f 91       	pop	r19
     4c4:	2f 91       	pop	r18
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <MCP_reset>:
}

void MCP_reset( void )
{
	// Lower the _CS pin
	SPI_set_ss(0);
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	// Send reset instruction
	SPI_transmit_receive(MCP_RESET);
     4d8:	80 ec       	ldi	r24, 0xC0	; 192
     4da:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4de:	82 e4       	ldi	r24, 0x42	; 66
     4e0:	8a 95       	dec	r24
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <MCP_reset+0x10>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <MCP_reset+0x16>
	_delay_us(200);
	SPI_set_ss(1);
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
     4ee:	08 95       	ret

000004f0 <MCP_read>:
}

uint8_t MCP_read( uint8_t address )
{
     4f0:	cf 93       	push	r28
     4f2:	c8 2f       	mov	r28, r24
	uint8_t received;
	// Lower the _CS pin
	SPI_set_ss(0);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	//printf("hello from MCP read 1\n");
	// Send read instruction
	SPI_transmit_receive(MCP_READ);
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	//printf("hello from MCP read 2\n");
	// Send 8-bit address
	SPI_transmit_receive(address);
     502:	8c 2f       	mov	r24, r28
     504:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	//printf("hello from MCP read 3\n");
	// Send dummy data and receive data from MCP2515
	received = SPI_transmit_receive(0);
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
     50e:	c8 2f       	mov	r28, r24
	//printf("hello from MCP read 4\n");
	SPI_set_ss(1);
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	return received;
}
     518:	8c 2f       	mov	r24, r28
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <MCP_init>:
#include <util/delay.h>


uint8_t MCP_init( void )
{
	SPI_init();
     51e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_init>
	//printf("hello from MCP init 1\n");
	MCP_reset();
     522:	0e 94 68 02 	call	0x4d0	; 0x4d0 <MCP_reset>
	//printf("hello from MCP init 2\n");
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     526:	8e e0       	ldi	r24, 0x0E	; 14
     528:	0e 94 78 02 	call	0x4f0	; 0x4f0 <MCP_read>
	//printf("hello from MCP init 3\n");
	
	if ((value & MODE_MASK) != MODE_CONFIG){
     52c:	80 7e       	andi	r24, 0xE0	; 224
     52e:	80 38       	cpi	r24, 0x80	; 128
     530:	31 f0       	breq	.+12     	; 0x53e <MCP_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset\n");
     532:	83 e6       	ldi	r24, 0x63	; 99
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <puts>
		return 1;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	08 95       	ret
	}
	//printf("hello from MCP init 4\n");
	return 0;
     53e:	80 e0       	ldi	r24, 0x00	; 0
}
     540:	08 95       	ret

00000542 <MCP_write>:
	SPI_set_ss(1);
	return received;
}

void MCP_write( uint8_t address, uint8_t data )
{
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	d8 2f       	mov	r29, r24
     548:	c6 2f       	mov	r28, r22
	SPI_set_ss(0);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	SPI_transmit_receive(MCP_WRITE);
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_transmit_receive(address);
     558:	8d 2f       	mov	r24, r29
     55a:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_transmit_receive(data);
     55e:	8c 2f       	mov	r24, r28
     560:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	// set SS pin high(?)
	SPI_set_ss(1);
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <MCP_request_to_send>:

//RTS command is either MCP_RTS_TX0, MCP_RTS_TX1, MCP_RTS_TX2 or MCP_RTS_ALL
void MCP_request_to_send( uint8_t RTS_command )
{
     572:	cf 93       	push	r28
     574:	c8 2f       	mov	r28, r24
	SPI_set_ss(0);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	SPI_transmit_receive(RTS_command);
     57e:	8c 2f       	mov	r24, r28
     580:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_set_ss(1); //(?)
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
}
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <MCP_bit_modify>:
	
	return status;
}

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	18 2f       	mov	r17, r24
     598:	d6 2f       	mov	r29, r22
     59a:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
	SPI_transmit_receive(MCP_BITMOD);
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	
	SPI_transmit_receive(address);
     5aa:	81 2f       	mov	r24, r17
     5ac:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_transmit_receive(mask);
     5b0:	8d 2f       	mov	r24, r29
     5b2:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	SPI_transmit_receive(data);
     5b6:	8c 2f       	mov	r24, r28
     5b8:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_transmit_receive>
	
	SPI_set_ss(1);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_set_ss>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	08 95       	ret

000005cc <SPI_init>:

void SPI_init( void )
{
	// Set MOSI, SCK and SS output
	#if defined(__AVR_ATmega162__)
	DDRB |= (1 << DDB5)|(1 << DDB7)|(1 << DDB4);
     5cc:	87 b3       	in	r24, 0x17	; 23
     5ce:	80 6b       	ori	r24, 0xB0	; 176
     5d0:	87 bb       	out	0x17, r24	; 23
	#if defined(__AVR_ATmega2560__)
	DDRB |= (1 << DDB2)|(1 << DDB1)|(1 << DDB0) | (1 << DDB7);
	#endif
	
	// Enable SPI, Master, set clock rate
	SPCR = (1 << MSTR)|(1 << SPR0);
     5d2:	81 e1       	ldi	r24, 0x11	; 17
     5d4:	8d b9       	out	0x0d, r24	; 13
	
	SPCR |= (1 << SPE);
     5d6:	6e 9a       	sbi	0x0d, 6	; 13
     5d8:	08 95       	ret

000005da <SPI_transmit_receive>:
}

uint8_t SPI_transmit_receive(uint8_t data)
{
	// Start transmission (write to data register)
	SPDR = data;
     5da:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	//printf("Hello from SPI transmit receive 1\n");
	while(!(SPSR & (1 << SPIF)));
     5dc:	77 9b       	sbis	0x0e, 7	; 14
     5de:	fe cf       	rjmp	.-4      	; 0x5dc <SPI_transmit_receive+0x2>
     5e0:	85 ef       	ldi	r24, 0xF5	; 245
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <SPI_transmit_receive+0xa>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <SPI_transmit_receive+0x10>
     5ea:	00 00       	nop
	//printf("Hello from SPI transmit receive 2\n");
	
	_delay_us(200);
	return SPDR;
     5ec:	8f b1       	in	r24, 0x0f	; 15
	
}
     5ee:	08 95       	ret

000005f0 <SPI_set_ss>:

// Set _SS to 1 or 0
void SPI_set_ss( int val )
{
	#if defined(__AVR_ATmega162__)
	if (val == 1){
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	91 05       	cpc	r25, r1
     5f4:	11 f4       	brne	.+4      	; 0x5fa <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     5f6:	c4 9a       	sbi	0x18, 4	; 24
     5f8:	08 95       	ret
	}
	else if (val == 0){
     5fa:	89 2b       	or	r24, r25
     5fc:	09 f4       	brne	.+2      	; 0x600 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     5fe:	c4 98       	cbi	0x18, 4	; 24
     600:	08 95       	ret

00000602 <UART_Transmit>:

// transmit data
void UART_Transmit (unsigned char data)
{
	// Wait for empty transmit buffer
	while (!( UCSR0A & (1<<UDRE0))); 
     602:	5d 9b       	sbis	0x0b, 5	; 11
     604:	fe cf       	rjmp	.-4      	; 0x602 <UART_Transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;  
     606:	8c b9       	out	0x0c, r24	; 12
     608:	08 95       	ret

0000060a <UART_Recieve>:

// function to receive data
unsigned char UART_Recieve (void)
{
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));  
     60a:	5f 9b       	sbis	0x0b, 7	; 11
     60c:	fe cf       	rjmp	.-4      	; 0x60a <UART_Recieve>
	
	//Get and return received data from buffer
	return UDR0;  
     60e:	8c b1       	in	r24, 0x0c	; 12
     610:	08 95       	ret

00000612 <UART_Init>:

void UART_Init( unsigned int ubrr ){
	/* 
	Set baud rate
	 */
	UBRR0H |= (unsigned char)(ubrr>>8);
     612:	20 b5       	in	r18, 0x20	; 32
     614:	92 2b       	or	r25, r18
     616:	90 bd       	out	0x20, r25	; 32
	UBRR0L |= (unsigned char)ubrr;
     618:	99 b1       	in	r25, 0x09	; 9
     61a:	89 2b       	or	r24, r25
     61c:	89 b9       	out	0x09, r24	; 9
	/* 
	Enable receiver and transmitter
	 */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     61e:	8a b1       	in	r24, 0x0a	; 10
     620:	88 61       	ori	r24, 0x18	; 24
     622:	8a b9       	out	0x0a, r24	; 10
	
	/* 
	Set frame format: 8data, 2stop bit
	 */
	#if defined(__AVR_ATmega162__)
	UCSR0C |= (1<<URSEL0)|(1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     624:	80 b5       	in	r24, 0x20	; 32
     626:	8e 68       	ori	r24, 0x8E	; 142
     628:	80 bd       	out	0x20, r24	; 32
	#endif
	#if defined(__AVR_ATmega2560__)
	UCSR0C |= (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	#endif
	
	fdevopen(&UART_Transmit, &UART_Recieve);
     62a:	65 e0       	ldi	r22, 0x05	; 5
     62c:	73 e0       	ldi	r23, 0x03	; 3
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 31 0c 	call	0x1862	; 0x1862 <fdevopen>
     636:	08 95       	ret

00000638 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

int ADC_init(void)
{
	MCUCR |= (1 << SRE);
     638:	85 b7       	in	r24, 0x35	; 53
     63a:	80 68       	ori	r24, 0x80	; 128
     63c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     63e:	80 b7       	in	r24, 0x30	; 48
     640:	80 62       	ori	r24, 0x20	; 32
     642:	80 bf       	out	0x30, r24	; 48
	
	// Set the interrupt pin to input
	DDRD &= ~(1 << PD3);
     644:	8b 98       	cbi	0x11, 3	; 17
	return 0;
}
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	08 95       	ret

0000064c <ADC_read>:

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
     64c:	84 30       	cpi	r24, 0x04	; 4
     64e:	70 f4       	brcc	.+28     	; 0x66c <ADC_read+0x20>
	*ext_adc = 0x04 | channel; // bitwise OR
     650:	84 60       	ori	r24, 0x04	; 4
     652:	80 93 00 14 	sts	0x1400, r24
	
	// wait until interrupt is low, which means we can read the converted data
	loop_until_bit_is_clear(PIND, PD3);
     656:	83 99       	sbic	0x10, 3	; 16
     658:	fe cf       	rjmp	.-4      	; 0x656 <ADC_read+0xa>
     65a:	85 ef       	ldi	r24, 0xF5	; 245
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <ADC_read+0x12>
     662:	00 c0       	rjmp	.+0      	; 0x664 <ADC_read+0x18>
     664:	00 00       	nop
	_delay_us(200);
	
	return *ext_adc;
     666:	80 91 00 14 	lds	r24, 0x1400
     66a:	08 95       	ret

uint8_t ADC_read(uint8_t channel)
{
	volatile uint8_t *ext_adc = (uint8_t *) ADC_DATA_ADDRESS; // Start address for the ADC
	
	if (channel > 3){ return 0; }
     66c:	80 e0       	ldi	r24, 0x00	; 0
	loop_until_bit_is_clear(PIND, PD3);
	_delay_us(200);
	
	return *ext_adc;
	
}
     66e:	08 95       	ret

00000670 <EEPROM_write>:
#include <avr/interrupt.h>


void EEPROM_write(uint8_t data, unsigned int address)
{
	cli();
     670:	f8 94       	cli
	
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     672:	e1 99       	sbic	0x1c, 1	; 28
     674:	fe cf       	rjmp	.-4      	; 0x672 <EEPROM_write+0x2>
	
	// Set up address and data registers
	EEAR = address;
     676:	7f bb       	out	0x1f, r23	; 31
     678:	6e bb       	out	0x1e, r22	; 30
	EEDR = data;
     67a:	8d bb       	out	0x1d, r24	; 29
	
	// Write logical one to Master Write Enable
	EECR |= (1 << EEMWE);
     67c:	e2 9a       	sbi	0x1c, 2	; 28
	
	// Start eeprom write
	EECR |= (1 << EEWE);
     67e:	e1 9a       	sbi	0x1c, 1	; 28
	
	sei();
     680:	78 94       	sei
     682:	08 95       	ret

00000684 <EEPROM_read>:
}

uint8_t EEPROM_read(unsigned int address)
{
	// Wait for completion of previous write
	while(EECR & (1 << EEWE));
     684:	e1 99       	sbic	0x1c, 1	; 28
     686:	fe cf       	rjmp	.-4      	; 0x684 <EEPROM_read>
	
	// Set up address register
	EEAR = address;
     688:	9f bb       	out	0x1f, r25	; 31
     68a:	8e bb       	out	0x1e, r24	; 30
	
	// Start eeprom read
	EECR |= (1 << EERE);
     68c:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     68e:	8d b3       	in	r24, 0x1d	; 29
     690:	08 95       	ret

00000692 <SEND2CAN_send_joy_pos_x>:
#include "../../../communication_drivers/can.h"
#include <stdlib.h>
#include <math.h>

void SEND2CAN_send_joy_pos_x()
{
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	2b 97       	sbiw	r28, 0x0b	; 11
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
	static JOY_position_t prev_joy_pos;
	JOY_position_t joy_pos = JOY_read_adc();
     6ae:	0e 94 2b 04 	call	0x856	; 0x856 <JOY_read_adc>
     6b2:	6b 01       	movw	r12, r22
     6b4:	7c 01       	movw	r14, r24
	can_msg msg;
	if(abs(joy_pos.x - prev_joy_pos.x) > 5){
     6b6:	80 91 cb 03 	lds	r24, 0x03CB
     6ba:	90 91 cc 03 	lds	r25, 0x03CC
     6be:	97 01       	movw	r18, r14
     6c0:	28 1b       	sub	r18, r24
     6c2:	39 0b       	sbc	r19, r25
     6c4:	c9 01       	movw	r24, r18
     6c6:	99 23       	and	r25, r25
     6c8:	24 f4       	brge	.+8      	; 0x6d2 <SEND2CAN_send_joy_pos_x+0x40>
     6ca:	88 27       	eor	r24, r24
     6cc:	99 27       	eor	r25, r25
     6ce:	82 1b       	sub	r24, r18
     6d0:	93 0b       	sbc	r25, r19
     6d2:	06 97       	sbiw	r24, 0x06	; 6
     6d4:	a4 f0       	brlt	.+40     	; 0x6fe <SEND2CAN_send_joy_pos_x+0x6c>
		msg.id = ATmega162_ID;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_JOY_POS_X;
     6de:	1c 82       	std	Y+4, r1	; 0x04
		msg.data[1] = joy_pos.x;
     6e0:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     6e6:	ce 01       	movw	r24, r28
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_msg_send>
		//printf("\n\nSent joystick position (x): (%d) \n",msg.data[1]);
		prev_joy_pos = joy_pos;
     6ee:	c0 92 c9 03 	sts	0x03C9, r12
     6f2:	d0 92 ca 03 	sts	0x03CA, r13
     6f6:	e0 92 cb 03 	sts	0x03CB, r14
     6fa:	f0 92 cc 03 	sts	0x03CC, r15
	}
}
     6fe:	2b 96       	adiw	r28, 0x0b	; 11
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	08 95       	ret

00000718 <SEND2CAN_send_slider_pos>:

void SEND2CAN_send_slider_pos()
{
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	2b 97       	sbiw	r28, 0x0b	; 11
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
	static TOUCH_slider_pos_t prev_slider_pos;
	TOUCH_slider_pos_t slider_pos = TOUCH_get_slider_position();
     734:	0e 94 8c 06 	call	0xd18	; 0xd18 <TOUCH_get_slider_position>
     738:	6b 01       	movw	r12, r22
     73a:	7c 01       	movw	r14, r24
	can_msg msg;
	
	if(abs(slider_pos.right_slider - prev_slider_pos.right_slider) > 5){
     73c:	80 91 c7 03 	lds	r24, 0x03C7
     740:	90 91 c8 03 	lds	r25, 0x03C8
     744:	97 01       	movw	r18, r14
     746:	28 1b       	sub	r18, r24
     748:	39 0b       	sbc	r19, r25
     74a:	c9 01       	movw	r24, r18
     74c:	99 23       	and	r25, r25
     74e:	24 f4       	brge	.+8      	; 0x758 <SEND2CAN_send_slider_pos+0x40>
     750:	88 27       	eor	r24, r24
     752:	99 27       	eor	r25, r25
     754:	82 1b       	sub	r24, r18
     756:	93 0b       	sbc	r25, r19
     758:	06 97       	sbiw	r24, 0x06	; 6
     75a:	ac f0       	brlt	.+42     	; 0x786 <SEND2CAN_send_slider_pos+0x6e>
		msg.id = ATmega162_ID;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9a 83       	std	Y+2, r25	; 0x02
     762:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_SLIDER_POS_R;
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = slider_pos.right_slider;
     768:	ed 82       	std	Y+5, r14	; 0x05
		msg.length = 2;
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_msg_send>
		//printf("\n\nSent slider position: (%d) \n",msg.data[1]);
		prev_slider_pos = slider_pos;
     776:	c0 92 c5 03 	sts	0x03C5, r12
     77a:	d0 92 c6 03 	sts	0x03C6, r13
     77e:	e0 92 c7 03 	sts	0x03C7, r14
     782:	f0 92 c8 03 	sts	0x03C8, r15
	}
	
}
     786:	2b 96       	adiw	r28, 0x0b	; 11
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	08 95       	ret

000007a0 <SEND2CAN_touch_button_pressed>:

void SEND2CAN_touch_button_pressed()
{
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	2b 97       	sbiw	r28, 0x0b	; 11
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
	static int prev_button_pressed;
	can_msg msg;
	
	int button_pressed = TOUCH_button();
     7b8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TOUCH_button>
     7bc:	8c 01       	movw	r16, r24
	if(button_pressed == 1 && prev_button_pressed == 0){
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	91 05       	cpc	r25, r1
     7c2:	a1 f4       	brne	.+40     	; 0x7ec <SEND2CAN_touch_button_pressed+0x4c>
     7c4:	80 91 c3 03 	lds	r24, 0x03C3
     7c8:	90 91 c4 03 	lds	r25, 0x03C4
     7cc:	89 2b       	or	r24, r25
     7ce:	71 f4       	brne	.+28     	; 0x7ec <SEND2CAN_touch_button_pressed+0x4c>
		msg.id = ATmega162_ID;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	9a 83       	std	Y+2, r25	; 0x02
     7d6:	89 83       	std	Y+1, r24	; 0x01
		msg.data[0] = CAN_TOUCH_BUTTON;
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	8c 83       	std	Y+4, r24	; 0x04
		msg.data[1] = button_pressed;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	8d 83       	std	Y+5, r24	; 0x05
		msg.length = 2;
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	8b 83       	std	Y+3, r24	; 0x03
		CAN_msg_send(&msg);
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_msg_send>
		//printf("\n\nSent button press (x): (%d) \n",msg.data[1]);
	}
	prev_button_pressed = button_pressed;
     7ec:	10 93 c4 03 	sts	0x03C4, r17
     7f0:	00 93 c3 03 	sts	0x03C3, r16
}
     7f4:	2b 96       	adiw	r28, 0x0b	; 11
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <SEND2CAN_send_speed>:

void SEND2CAN_send_speed(int speed){
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	2b 97       	sbiw	r28, 0x0b	; 11
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
	can_msg msg;
	msg.id = ATmega162_ID;
     81e:	21 e0       	ldi	r18, 0x01	; 1
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	3a 83       	std	Y+2, r19	; 0x02
     824:	29 83       	std	Y+1, r18	; 0x01
	msg.data[0] = CAN_SPEED;
     826:	96 e0       	ldi	r25, 0x06	; 6
     828:	9c 83       	std	Y+4, r25	; 0x04
	msg.data[1] = (uint8_t)speed;
     82a:	8d 83       	std	Y+5, r24	; 0x05
	msg.length = 2;
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	8b 83       	std	Y+3, r24	; 0x03
	CAN_msg_send(&msg);
     830:	ce 01       	movw	r24, r28
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CAN_msg_send>
}
     838:	2b 96       	adiw	r28, 0x0b	; 11
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <JOY_button>:
void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
}

int JOY_button(){
	return !(test_bit(PINB, PINB0));
     84a:	96 b3       	in	r25, 0x16	; 22
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	89 27       	eor	r24, r25
}
     850:	81 70       	andi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	08 95       	ret

00000856 <JOY_read_adc>:

JOY_position_t JOY_read_adc( void ){
     856:	cf 93       	push	r28
	JOY_position_t pos;
	pos.y = ADC_read(Y_POS_CHANNEL);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 26 03 	call	0x64c	; 0x64c <ADC_read>
     85e:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     860:	8c ec       	ldi	r24, 0xCC	; 204
     862:	94 e0       	ldi	r25, 0x04	; 4
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <JOY_read_adc+0xe>
     868:	00 c0       	rjmp	.+0      	; 0x86a <JOY_read_adc+0x14>
     86a:	00 00       	nop
	_delay_ms(1);
	pos.x = ADC_read(X_POS_CHANNEL);
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	0e 94 26 03 	call	0x64c	; 0x64c <ADC_read>
     872:	28 2f       	mov	r18, r24
	
	return pos;
     874:	6c 2f       	mov	r22, r28
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	82 2f       	mov	r24, r18
     87a:	90 e0       	ldi	r25, 0x00	; 0
}
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <JOY_calibrate>:
	set_bit(PORTB, PB0);
	
}

void JOY_calibrate( void ){
	neutral_pos = JOY_read_adc();
     880:	0e 94 2b 04 	call	0x856	; 0x856 <JOY_read_adc>
     884:	60 93 d2 03 	sts	0x03D2, r22
     888:	70 93 d3 03 	sts	0x03D3, r23
     88c:	80 93 d4 03 	sts	0x03D4, r24
     890:	90 93 d5 03 	sts	0x03D5, r25
     894:	08 95       	ret

00000896 <JOY_init>:

JOY_position_t neutral_pos; 


void JOY_init( void ){
	JOY_calibrate();
     896:	0e 94 40 04 	call	0x880	; 0x880 <JOY_calibrate>
	
	// Initialize PORT B, pin 0 (joystick button) as input
	clear_bit(DDRB, PINB0);
     89a:	b8 98       	cbi	0x17, 0	; 23
	
	// Activate pull-up resistor for joystick button
	set_bit(PORTB, PB0);
     89c:	c0 9a       	sbi	0x18, 0	; 24
     89e:	08 95       	ret

000008a0 <JOY_get_position>:
	pos.x = ADC_read(X_POS_CHANNEL);
	
	return pos;
}

JOY_position_t JOY_get_position(){
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
	JOY_position_t current_pos = JOY_read_adc();
     8a6:	0e 94 2b 04 	call	0x856	; 0x856 <JOY_read_adc>
     8aa:	8b 01       	movw	r16, r22
     8ac:	9c 01       	movw	r18, r24
	
	JOY_position_t pos_percentage;
	pos_percentage.y = (current_pos.y - neutral_pos.y) * 100 / neutral_pos.y;
     8ae:	60 91 d2 03 	lds	r22, 0x03D2
     8b2:	70 91 d3 03 	lds	r23, 0x03D3
     8b6:	a8 01       	movw	r20, r16
     8b8:	46 1b       	sub	r20, r22
     8ba:	57 0b       	sbc	r21, r23
     8bc:	e4 e6       	ldi	r30, 0x64	; 100
     8be:	e4 9f       	mul	r30, r20
     8c0:	c0 01       	movw	r24, r0
     8c2:	e5 9f       	mul	r30, r21
     8c4:	90 0d       	add	r25, r0
     8c6:	11 24       	eor	r1, r1
     8c8:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodhi4>
     8cc:	c6 2f       	mov	r28, r22
     8ce:	f7 2f       	mov	r31, r23
	pos_percentage.x = (current_pos.x - neutral_pos.x) * 100 / neutral_pos.x;
     8d0:	60 91 d4 03 	lds	r22, 0x03D4
     8d4:	70 91 d5 03 	lds	r23, 0x03D5
     8d8:	26 1b       	sub	r18, r22
     8da:	37 0b       	sbc	r19, r23
     8dc:	e2 9f       	mul	r30, r18
     8de:	c0 01       	movw	r24, r0
     8e0:	e3 9f       	mul	r30, r19
     8e2:	90 0d       	add	r25, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodhi4>
     8ea:	9b 01       	movw	r18, r22
     8ec:	6c 39       	cpi	r22, 0x9C	; 156
     8ee:	4f ef       	ldi	r20, 0xFF	; 255
     8f0:	74 07       	cpc	r23, r20
     8f2:	14 f4       	brge	.+4      	; 0x8f8 <JOY_get_position+0x58>
     8f4:	2c e9       	ldi	r18, 0x9C	; 156
     8f6:	3f ef       	ldi	r19, 0xFF	; 255
     8f8:	8c 2f       	mov	r24, r28
     8fa:	9f 2f       	mov	r25, r31
     8fc:	8c 39       	cpi	r24, 0x9C	; 156
     8fe:	4f ef       	ldi	r20, 0xFF	; 255
     900:	94 07       	cpc	r25, r20
     902:	14 f4       	brge	.+4      	; 0x908 <JOY_get_position+0x68>
     904:	8c e9       	ldi	r24, 0x9C	; 156
     906:	9f ef       	ldi	r25, 0xFF	; 255
     908:	ac 01       	movw	r20, r24
     90a:	85 36       	cpi	r24, 0x65	; 101
     90c:	91 05       	cpc	r25, r1
     90e:	14 f0       	brlt	.+4      	; 0x914 <JOY_get_position+0x74>
     910:	44 e6       	ldi	r20, 0x64	; 100
     912:	50 e0       	ldi	r21, 0x00	; 0
	else if (pos_percentage.x < -100) { pos_percentage.x = -100; }
	
	if (pos_percentage.y > 100) { pos_percentage.y = 100; }
	else if (pos_percentage.y < -100) { pos_percentage.y = -100; }

	return pos_percentage;
     914:	ba 01       	movw	r22, r20
     916:	25 36       	cpi	r18, 0x65	; 101
     918:	31 05       	cpc	r19, r1
     91a:	14 f0       	brlt	.+4      	; 0x920 <JOY_get_position+0x80>
     91c:	24 e6       	ldi	r18, 0x64	; 100
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	c9 01       	movw	r24, r18
}
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <JOY_get_direction>:

JOY_direction_t JOY_get_direction(){
	JOY_position_t current_pos = JOY_get_position();
     92a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <JOY_get_position>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
     932:	fc 01       	movw	r30, r24
     934:	7d 96       	adiw	r30, 0x1d	; 29
     936:	fb 97       	sbiw	r30, 0x3b	; 59
     938:	20 f4       	brcc	.+8      	; 0x942 <JOY_get_direction+0x18>
     93a:	fb 01       	movw	r30, r22
     93c:	7d 96       	adiw	r30, 0x1d	; 29
     93e:	fb 97       	sbiw	r30, 0x3b	; 59
     940:	d8 f0       	brcs	.+54     	; 0x978 <JOY_get_direction+0x4e>
		return NEUTRAL;
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
     942:	dc 01       	movw	r26, r24
     944:	55 23       	and	r21, r21
     946:	24 f4       	brge	.+8      	; 0x950 <JOY_get_direction+0x26>
     948:	aa 27       	eor	r26, r26
     94a:	bb 27       	eor	r27, r27
     94c:	a8 1b       	sub	r26, r24
     94e:	b9 0b       	sbc	r27, r25
     950:	fb 01       	movw	r30, r22
     952:	33 23       	and	r19, r19
     954:	24 f4       	brge	.+8      	; 0x95e <JOY_get_direction+0x34>
     956:	ee 27       	eor	r30, r30
     958:	ff 27       	eor	r31, r31
     95a:	e6 1b       	sub	r30, r22
     95c:	f7 0b       	sbc	r31, r23
     95e:	ea 17       	cp	r30, r26
     960:	fb 07       	cpc	r31, r27
     962:	2c f4       	brge	.+10     	; 0x96e <JOY_get_direction+0x44>
		if (current_pos.x > 0) { return RIGHT; }
     964:	14 16       	cp	r1, r20
     966:	15 06       	cpc	r1, r21
     968:	4c f4       	brge	.+18     	; 0x97c <JOY_get_direction+0x52>
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	08 95       	ret
		else { return LEFT; }
	}
	else {
		if (current_pos.y > 0) { return UP; }
     96e:	12 16       	cp	r1, r18
     970:	13 06       	cpc	r1, r19
     972:	34 f4       	brge	.+12     	; 0x980 <JOY_get_direction+0x56>
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	08 95       	ret

JOY_direction_t JOY_get_direction(){
	JOY_position_t current_pos = JOY_get_position();
	
	if (abs(current_pos.x) < 30 && abs(current_pos.y) < 30) {
		return NEUTRAL;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	08 95       	ret
	}
	else if (abs(current_pos.x) > abs(current_pos.y)){
		if (current_pos.x > 0) { return RIGHT; }
		else { return LEFT; }
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	08 95       	ret
	}
	else {
		if (current_pos.y > 0) { return UP; }
		else { return DOWN; }
     980:	84 e0       	ldi	r24, 0x04	; 4
	}
     982:	08 95       	ret

00000984 <OLED_goto_column>:
}


void OLED_goto_column( uint8_t column )
{
	if (column < NUM_COLUMNS){
     984:	88 23       	and	r24, r24
     986:	8c f0       	brlt	.+34     	; 0x9aa <OLED_goto_column+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     988:	e0 91 16 01 	lds	r30, 0x0116
     98c:	f0 91 17 01 	lds	r31, 0x0117
     990:	91 e2       	ldi	r25, 0x21	; 33
     992:	90 83       	st	Z, r25
     994:	e0 91 16 01 	lds	r30, 0x0116
     998:	f0 91 17 01 	lds	r31, 0x0117
     99c:	80 83       	st	Z, r24
     99e:	e0 91 16 01 	lds	r30, 0x0116
     9a2:	f0 91 17 01 	lds	r31, 0x0117
     9a6:	8f e7       	ldi	r24, 0x7F	; 127
     9a8:	80 83       	st	Z, r24
     9aa:	08 95       	ret

000009ac <OLED_goto_line>:
	}
}

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
     9ac:	88 30       	cpi	r24, 0x08	; 8
     9ae:	98 f4       	brcc	.+38     	; 0x9d6 <OLED_goto_line+0x2a>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     9b0:	e0 91 16 01 	lds	r30, 0x0116
     9b4:	f0 91 17 01 	lds	r31, 0x0117
     9b8:	92 e2       	ldi	r25, 0x22	; 34
     9ba:	90 83       	st	Z, r25

void OLED_goto_line( uint8_t l )
{
	if (l < NUM_LINES){
		OLED_write_command(SET_PAGE_ADDRESS);
		line = l;
     9bc:	80 93 cf 03 	sts	0x03CF, r24
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     9c0:	e0 91 16 01 	lds	r30, 0x0116
     9c4:	f0 91 17 01 	lds	r31, 0x0117
     9c8:	80 83       	st	Z, r24
     9ca:	e0 91 16 01 	lds	r30, 0x0116
     9ce:	f0 91 17 01 	lds	r31, 0x0117
     9d2:	87 e0       	ldi	r24, 0x07	; 7
     9d4:	80 83       	st	Z, r24
     9d6:	08 95       	ret

000009d8 <OLED_pos>:
		OLED_write_command(7);
	}
}

void OLED_pos(uint8_t row, uint8_t column)
{
     9d8:	cf 93       	push	r28
     9da:	c6 2f       	mov	r28, r22
	OLED_goto_line(row);
     9dc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <OLED_goto_line>
	OLED_goto_column(column);
     9e0:	8c 2f       	mov	r24, r28
     9e2:	0e 94 c2 04 	call	0x984	; 0x984 <OLED_goto_column>
}
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <OLED_print_char>:
}

void OLED_print_char( char character )
{	
	//printf("Character: %c \n", *character);
	if ((character) == '\n'){
     9ea:	8a 30       	cpi	r24, 0x0A	; 10
     9ec:	39 f4       	brne	.+14     	; 0x9fc <OLED_print_char+0x12>
		//printf("newline\n");
		OLED_pos((line + 1), 0);
     9ee:	80 91 cf 03 	lds	r24, 0x03CF
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
     9fa:	08 95       	ret
     9fc:	e8 2f       	mov	r30, r24
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	b0 97       	sbiw	r30, 0x20	; 32
     a02:	cf 01       	movw	r24, r30
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	e8 0f       	add	r30, r24
     a0e:	f9 1f       	adc	r31, r25
     a10:	e0 59       	subi	r30, 0x90	; 144
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
}

void OLED_print_char( char character )
{	
	//printf("Character: %c \n", *character);
	if ((character) == '\n'){
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
		//printf("newline\n");
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
			OLED_write_data(pgm_read_byte(&font5[character - ' '][i]));
     a18:	24 91       	lpm	r18, Z
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     a1a:	a0 91 14 01 	lds	r26, 0x0114
     a1e:	b0 91 15 01 	lds	r27, 0x0115
     a22:	2c 93       	st	X, r18
	if ((character) == '\n'){
		//printf("newline\n");
		OLED_pos((line + 1), 0);
	}
	else{
		for (int i = 0; i < 5; i++){
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	31 96       	adiw	r30, 0x01	; 1
     a28:	85 30       	cpi	r24, 0x05	; 5
     a2a:	91 05       	cpc	r25, r1
     a2c:	a9 f7       	brne	.-22     	; 0xa18 <OLED_print_char+0x2e>
     a2e:	08 95       	ret

00000a30 <OLED_home>:
}

void OLED_home( void )
{
	// go "home", upper left corner
	OLED_pos(0, 0);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
     a38:	08 95       	ret

00000a3a <OLED_clear_line>:


void OLED_clear_line( uint8_t line )
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	
	// go through all columns
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
     a40:	80 e0       	ldi	r24, 0x00	; 0
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     a42:	e0 91 14 01 	lds	r30, 0x0114
     a46:	f0 91 15 01 	lds	r31, 0x0115
     a4a:	10 82       	st	Z, r1
{
	// go to start position: first column in this line
	OLED_pos(line, 0);
	
	// go through all columns
	for (uint8_t col = 0; col < NUM_COLUMNS; col++){
     a4c:	8f 5f       	subi	r24, 0xFF	; 255
     a4e:	80 38       	cpi	r24, 0x80	; 128
     a50:	c1 f7       	brne	.-16     	; 0xa42 <OLED_clear_line+0x8>
		// write 8 bits to each column
		OLED_write_data(0x00);
	}
}
     a52:	08 95       	ret

00000a54 <OLED_reset>:

void OLED_reset( void )
{
     a54:	cf 93       	push	r28
	// clear all lines
	for (uint8_t line = 0; line < NUM_LINES; line++){
     a56:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(line);
     a58:	8c 2f       	mov	r24, r28
     a5a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <OLED_clear_line>
}

void OLED_reset( void )
{
	// clear all lines
	for (uint8_t line = 0; line < NUM_LINES; line++){
     a5e:	cf 5f       	subi	r28, 0xFF	; 255
     a60:	c8 30       	cpi	r28, 0x08	; 8
     a62:	d1 f7       	brne	.-12     	; 0xa58 <OLED_reset+0x4>
		OLED_clear_line(line);
	}
	
	// go home
	OLED_home();
     a64:	0e 94 18 05 	call	0xa30	; 0xa30 <OLED_home>
}
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <OLED_init>:
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     a6c:	e0 91 16 01 	lds	r30, 0x0116
     a70:	f0 91 17 01 	lds	r31, 0x0117
     a74:	8e ea       	ldi	r24, 0xAE	; 174
     a76:	80 83       	st	Z, r24
     a78:	e0 91 16 01 	lds	r30, 0x0116
     a7c:	f0 91 17 01 	lds	r31, 0x0117
     a80:	81 ea       	ldi	r24, 0xA1	; 161
     a82:	80 83       	st	Z, r24
     a84:	e0 91 16 01 	lds	r30, 0x0116
     a88:	f0 91 17 01 	lds	r31, 0x0117
     a8c:	8a ed       	ldi	r24, 0xDA	; 218
     a8e:	80 83       	st	Z, r24
     a90:	e0 91 16 01 	lds	r30, 0x0116
     a94:	f0 91 17 01 	lds	r31, 0x0117
     a98:	82 e1       	ldi	r24, 0x12	; 18
     a9a:	80 83       	st	Z, r24
     a9c:	e0 91 16 01 	lds	r30, 0x0116
     aa0:	f0 91 17 01 	lds	r31, 0x0117
     aa4:	88 ec       	ldi	r24, 0xC8	; 200
     aa6:	80 83       	st	Z, r24
     aa8:	e0 91 16 01 	lds	r30, 0x0116
     aac:	f0 91 17 01 	lds	r31, 0x0117
     ab0:	88 ea       	ldi	r24, 0xA8	; 168
     ab2:	80 83       	st	Z, r24
     ab4:	e0 91 16 01 	lds	r30, 0x0116
     ab8:	f0 91 17 01 	lds	r31, 0x0117
     abc:	8f e3       	ldi	r24, 0x3F	; 63
     abe:	80 83       	st	Z, r24
     ac0:	e0 91 16 01 	lds	r30, 0x0116
     ac4:	f0 91 17 01 	lds	r31, 0x0117
     ac8:	85 ed       	ldi	r24, 0xD5	; 213
     aca:	80 83       	st	Z, r24
     acc:	e0 91 16 01 	lds	r30, 0x0116
     ad0:	f0 91 17 01 	lds	r31, 0x0117
     ad4:	80 e8       	ldi	r24, 0x80	; 128
     ad6:	80 83       	st	Z, r24
     ad8:	e0 91 16 01 	lds	r30, 0x0116
     adc:	f0 91 17 01 	lds	r31, 0x0117
     ae0:	81 e8       	ldi	r24, 0x81	; 129
     ae2:	80 83       	st	Z, r24
     ae4:	e0 91 16 01 	lds	r30, 0x0116
     ae8:	f0 91 17 01 	lds	r31, 0x0117
     aec:	80 e5       	ldi	r24, 0x50	; 80
     aee:	80 83       	st	Z, r24
     af0:	e0 91 16 01 	lds	r30, 0x0116
     af4:	f0 91 17 01 	lds	r31, 0x0117
     af8:	89 ed       	ldi	r24, 0xD9	; 217
     afa:	80 83       	st	Z, r24
     afc:	e0 91 16 01 	lds	r30, 0x0116
     b00:	f0 91 17 01 	lds	r31, 0x0117
     b04:	81 e2       	ldi	r24, 0x21	; 33
     b06:	80 83       	st	Z, r24
     b08:	e0 91 16 01 	lds	r30, 0x0116
     b0c:	f0 91 17 01 	lds	r31, 0x0117
     b10:	80 e2       	ldi	r24, 0x20	; 32
     b12:	80 83       	st	Z, r24
     b14:	e0 91 16 01 	lds	r30, 0x0116
     b18:	f0 91 17 01 	lds	r31, 0x0117
     b1c:	10 82       	st	Z, r1
     b1e:	e0 91 16 01 	lds	r30, 0x0116
     b22:	f0 91 17 01 	lds	r31, 0x0117
     b26:	8b ed       	ldi	r24, 0xDB	; 219
     b28:	80 83       	st	Z, r24
     b2a:	e0 91 16 01 	lds	r30, 0x0116
     b2e:	f0 91 17 01 	lds	r31, 0x0117
     b32:	80 e3       	ldi	r24, 0x30	; 48
     b34:	80 83       	st	Z, r24
     b36:	e0 91 16 01 	lds	r30, 0x0116
     b3a:	f0 91 17 01 	lds	r31, 0x0117
     b3e:	8d ea       	ldi	r24, 0xAD	; 173
     b40:	80 83       	st	Z, r24
     b42:	e0 91 16 01 	lds	r30, 0x0116
     b46:	f0 91 17 01 	lds	r31, 0x0117
     b4a:	10 82       	st	Z, r1
     b4c:	e0 91 16 01 	lds	r30, 0x0116
     b50:	f0 91 17 01 	lds	r31, 0x0117
     b54:	84 ea       	ldi	r24, 0xA4	; 164
     b56:	80 83       	st	Z, r24
     b58:	e0 91 16 01 	lds	r30, 0x0116
     b5c:	f0 91 17 01 	lds	r31, 0x0117
     b60:	86 ea       	ldi	r24, 0xA6	; 166
     b62:	80 83       	st	Z, r24
     b64:	e0 91 16 01 	lds	r30, 0x0116
     b68:	f0 91 17 01 	lds	r31, 0x0117
     b6c:	8f ea       	ldi	r24, 0xAF	; 175
     b6e:	80 83       	st	Z, r24
	OLED_write_command(ENTIRE_DISPLAY_ON);			  //out  follows  RAM  content

	OLED_write_command(SET_NORMAL_DISPLAY);
	OLED_write_command(DISPLAY_ON);
	
	OLED_reset();
     b70:	0e 94 2a 05 	call	0xa54	; 0xa54 <OLED_reset>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     b74:	e0 91 16 01 	lds	r30, 0x0116
     b78:	f0 91 17 01 	lds	r31, 0x0117
     b7c:	83 ed       	ldi	r24, 0xD3	; 211
     b7e:	80 83       	st	Z, r24
     b80:	e0 91 16 01 	lds	r30, 0x0116
     b84:	f0 91 17 01 	lds	r31, 0x0117
     b88:	10 82       	st	Z, r1
     b8a:	08 95       	ret

00000b8c <OLED_set_contrast>:
     b8c:	e0 91 16 01 	lds	r30, 0x0116
     b90:	f0 91 17 01 	lds	r31, 0x0117
     b94:	91 e8       	ldi	r25, 0x81	; 129
     b96:	90 83       	st	Z, r25
     b98:	e0 91 16 01 	lds	r30, 0x0116
     b9c:	f0 91 17 01 	lds	r31, 0x0117
     ba0:	80 83       	st	Z, r24
     ba2:	08 95       	ret

00000ba4 <OLED_invert_screen>:
}

void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
     ba4:	80 91 cd 03 	lds	r24, 0x03CD
     ba8:	90 91 ce 03 	lds	r25, 0x03CE
     bac:	89 2b       	or	r24, r25
     bae:	69 f4       	brne	.+26     	; 0xbca <OLED_invert_screen+0x26>
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     bb0:	e0 91 16 01 	lds	r30, 0x0116
     bb4:	f0 91 17 01 	lds	r31, 0x0117
     bb8:	87 ea       	ldi	r24, 0xA7	; 167
     bba:	80 83       	st	Z, r24
void OLED_invert_screen()
{
	static int inverted;
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	90 93 ce 03 	sts	0x03CE, r25
     bc4:	80 93 cd 03 	sts	0x03CD, r24
     bc8:	08 95       	ret
	OLED_write_command(0x00);
}

void OLED_write_command( uint8_t command )
{
	*oled_cmd = command;
     bca:	e0 91 16 01 	lds	r30, 0x0116
     bce:	f0 91 17 01 	lds	r31, 0x0117
     bd2:	86 ea       	ldi	r24, 0xA6	; 166
     bd4:	80 83       	st	Z, r24
	if (!inverted){
		OLED_write_command(SET_INVERSE_DISPLAY);
		inverted = 1;
		}else{
		OLED_write_command(SET_NORMAL_DISPLAY);
		inverted = 0;
     bd6:	10 92 ce 03 	sts	0x03CE, r1
     bda:	10 92 cd 03 	sts	0x03CD, r1
     bde:	08 95       	ret

00000be0 <OLED_printf>:
		OLED_print_char(c[i]);
		i++;
	}
}

void OLED_printf(const char* fmt, ...){
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	fe 01       	movw	r30, r28
     bea:	35 96       	adiw	r30, 0x05	; 5
     bec:	61 91       	ld	r22, Z+
     bee:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, fmt);
	vfprintf(&oled_stdout, fmt, args);
     bf0:	af 01       	movw	r20, r30
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <vfprintf>
	va_end(args);
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <OLED_print_arrow>:
	*oled_cmd = command;
}

void OLED_write_data( uint8_t data )
{
	*oled_data = data;
     c00:	e0 91 14 01 	lds	r30, 0x0114
     c04:	f0 91 15 01 	lds	r31, 0x0115
     c08:	88 e1       	ldi	r24, 0x18	; 24
     c0a:	80 83       	st	Z, r24
     c0c:	e0 91 14 01 	lds	r30, 0x0114
     c10:	f0 91 15 01 	lds	r31, 0x0115
     c14:	80 83       	st	Z, r24
     c16:	e0 91 14 01 	lds	r30, 0x0114
     c1a:	f0 91 15 01 	lds	r31, 0x0115
     c1e:	80 83       	st	Z, r24
     c20:	e0 91 14 01 	lds	r30, 0x0114
     c24:	f0 91 15 01 	lds	r31, 0x0115
     c28:	80 83       	st	Z, r24
     c2a:	e0 91 14 01 	lds	r30, 0x0114
     c2e:	f0 91 15 01 	lds	r31, 0x0115
     c32:	80 83       	st	Z, r24
     c34:	e0 91 14 01 	lds	r30, 0x0114
     c38:	f0 91 15 01 	lds	r31, 0x0115
     c3c:	9f ef       	ldi	r25, 0xFF	; 255
     c3e:	90 83       	st	Z, r25
     c40:	e0 91 14 01 	lds	r30, 0x0114
     c44:	f0 91 15 01 	lds	r31, 0x0115
     c48:	9e e7       	ldi	r25, 0x7E	; 126
     c4a:	90 83       	st	Z, r25
     c4c:	e0 91 14 01 	lds	r30, 0x0114
     c50:	f0 91 15 01 	lds	r31, 0x0115
     c54:	9c e3       	ldi	r25, 0x3C	; 60
     c56:	90 83       	st	Z, r25
     c58:	e0 91 14 01 	lds	r30, 0x0114
     c5c:	f0 91 15 01 	lds	r31, 0x0115
     c60:	80 83       	st	Z, r24
     c62:	e0 91 14 01 	lds	r30, 0x0114
     c66:	f0 91 15 01 	lds	r31, 0x0115
     c6a:	10 82       	st	Z, r1
     c6c:	08 95       	ret

00000c6e <TIMER_init>:

int current_time = 0;

void TIMER_init(){
	//CTC mode
	TCCR1B |= (1 << WGM12);
     c6e:	8e b5       	in	r24, 0x2e	; 46
     c70:	88 60       	ori	r24, 0x08	; 8
     c72:	8e bd       	out	0x2e, r24	; 46
	
	// Prescaler = 256
	TCCR1B |= (1 << CS12);
     c74:	8e b5       	in	r24, 0x2e	; 46
     c76:	84 60       	ori	r24, 0x04	; 4
     c78:	8e bd       	out	0x2e, r24	; 46
	
	// Set output compare value
	OCR1A = 0x4B00;		// 19200, corresponds to match every second
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	9b e4       	ldi	r25, 0x4B	; 75
     c7e:	9b bd       	out	0x2b, r25	; 43
     c80:	8a bd       	out	0x2a, r24	; 42
     c82:	08 95       	ret

00000c84 <__vector_13>:
	
	
}

ISR(TIMER1_COMPA_vect){
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
	current_time = current_time + 1;
     c92:	80 91 d0 03 	lds	r24, 0x03D0
     c96:	90 91 d1 03 	lds	r25, 0x03D1
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	90 93 d1 03 	sts	0x03D1, r25
     ca0:	80 93 d0 03 	sts	0x03D0, r24
}
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <TIMER_start>:

void TIMER_start()
{
	TIMSK |= (1 << OCIE1A);
     cb2:	89 b7       	in	r24, 0x39	; 57
     cb4:	80 64       	ori	r24, 0x40	; 64
     cb6:	89 bf       	out	0x39, r24	; 57
	current_time = 0;
     cb8:	10 92 d1 03 	sts	0x03D1, r1
     cbc:	10 92 d0 03 	sts	0x03D0, r1
     cc0:	08 95       	ret

00000cc2 <TIMER_stop>:
}

int TIMER_stop()
{
	TIMSK &= ~(1 << OCIE1A);
     cc2:	89 b7       	in	r24, 0x39	; 57
     cc4:	8f 7b       	andi	r24, 0xBF	; 191
     cc6:	89 bf       	out	0x39, r24	; 57
	return current_time;
     cc8:	80 91 d0 03 	lds	r24, 0x03D0
     ccc:	90 91 d1 03 	lds	r25, 0x03D1
     cd0:	08 95       	ret

00000cd2 <TOUCH_init>:
#include <util/delay.h>

void TOUCH_init( void ){
	
	// Initialize PORT B, pin 1 and 2 as input
	clear_bit(DDRB, PINB1);
     cd2:	b9 98       	cbi	0x17, 1	; 23
	clear_bit(DDRB, PINB2);
     cd4:	ba 98       	cbi	0x17, 2	; 23
     cd6:	08 95       	ret

00000cd8 <TOUCH_button>:
	
}

int TOUCH_button( void ){

	if (test_bit(PINB, PB1) || test_bit(PINB, PB2)){
     cd8:	b1 99       	sbic	0x16, 1	; 22
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <TOUCH_button+0x10>
     cdc:	86 b3       	in	r24, 0x16	; 22
		return 1;
     cde:	82 fb       	bst	r24, 2
     ce0:	88 27       	eor	r24, r24
     ce2:	80 f9       	bld	r24, 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	08 95       	ret
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     cec:	08 95       	ret

00000cee <TOUCH_read_adc>:

TOUCH_slider_pos_t TOUCH_read_adc( void ){
     cee:	cf 93       	push	r28
	TOUCH_slider_pos_t pos;
	pos.left_slider = ADC_read(LEFT_SLIDER_CHANNEL);
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	0e 94 26 03 	call	0x64c	; 0x64c <ADC_read>
     cf6:	c8 2f       	mov	r28, r24
     cf8:	8c ec       	ldi	r24, 0xCC	; 204
     cfa:	94 e0       	ldi	r25, 0x04	; 4
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <TOUCH_read_adc+0xe>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <TOUCH_read_adc+0x14>
     d02:	00 00       	nop
	_delay_ms(1);
	pos.right_slider = ADC_read(RIGHT_SLIDER_CHANNEL);
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	0e 94 26 03 	call	0x64c	; 0x64c <ADC_read>
     d0a:	28 2f       	mov	r18, r24
	
	return pos;
     d0c:	6c 2f       	mov	r22, r28
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	82 2f       	mov	r24, r18
     d12:	90 e0       	ldi	r25, 0x00	; 0
}
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <TOUCH_get_slider_position>:

TOUCH_slider_pos_t TOUCH_get_slider_position(){
	TOUCH_slider_pos_t current_pos = TOUCH_read_adc();
     d18:	0e 94 77 06 	call	0xcee	; 0xcee <TOUCH_read_adc>
	return current_pos;
     d1c:	08 95       	ret

00000d1e <HIGHSCORE_load_from_eeprom>:
			}
		}
	 }
}

highscore_info_t HIGHSCORE_load_from_eeprom(int number){
     d1e:	8f 92       	push	r8
     d20:	9f 92       	push	r9
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	2d 97       	sbiw	r28, 0x0d	; 13
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	5c 01       	movw	r10, r24
	highscore_info_t user;
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	8b 01       	movw	r16, r22
     d4e:	00 0f       	add	r16, r16
     d50:	11 1f       	adc	r17, r17
     d52:	00 0f       	add	r16, r16
     d54:	11 1f       	adc	r17, r17
     d56:	00 0f       	add	r16, r16
     d58:	11 1f       	adc	r17, r17
     d5a:	06 1b       	sub	r16, r22
     d5c:	17 0b       	sbc	r17, r23
     d5e:	78 01       	movw	r14, r16
     d60:	c8 01       	movw	r24, r16
     d62:	0e 94 42 03 	call	0x684	; 0x684 <EEPROM_read>
     d66:	88 2e       	mov	r8, r24
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
     d68:	c8 01       	movw	r24, r16
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	0e 94 42 03 	call	0x684	; 0x684 <EEPROM_read>
	user.score = score_msb << 8 | score_lsb;
     d70:	91 2c       	mov	r9, r1
     d72:	98 2c       	mov	r9, r8
     d74:	88 24       	eor	r8, r8
     d76:	88 2a       	or	r8, r24
     d78:	8e 01       	movw	r16, r28
     d7a:	0d 5f       	subi	r16, 0xFD	; 253
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	6e 01       	movw	r12, r28
     d80:	8e e0       	ldi	r24, 0x0E	; 14
     d82:	c8 0e       	add	r12, r24
     d84:	d1 1c       	adc	r13, r1
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	e8 1a       	sub	r14, r24
     d8c:	f9 0a       	sbc	r15, r25
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
     d8e:	c7 01       	movw	r24, r14
     d90:	80 0f       	add	r24, r16
     d92:	91 1f       	adc	r25, r17
     d94:	0e 94 42 03 	call	0x684	; 0x684 <EEPROM_read>
     d98:	f8 01       	movw	r30, r16
     d9a:	81 93       	st	Z+, r24
     d9c:	8f 01       	movw	r16, r30
	
	uint8_t score_msb = EEPROM_read(NUM_HIGHSCORE_BYTES*number);
	uint8_t score_lsb = EEPROM_read(NUM_HIGHSCORE_BYTES*number + 1);
	user.score = score_msb << 8 | score_lsb;
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
     d9e:	ec 15       	cp	r30, r12
     da0:	fd 05       	cpc	r31, r13
     da2:	a9 f7       	brne	.-22     	; 0xd8e <HIGHSCORE_load_from_eeprom+0x70>
		user.name[i] = EEPROM_read(i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
	return user;
     da4:	9a 82       	std	Y+2, r9	; 0x02
     da6:	89 82       	std	Y+1, r8	; 0x01
     da8:	8d e0       	ldi	r24, 0x0D	; 13
     daa:	fe 01       	movw	r30, r28
     dac:	31 96       	adiw	r30, 0x01	; 1
     dae:	d5 01       	movw	r26, r10
     db0:	01 90       	ld	r0, Z+
     db2:	0d 92       	st	X+, r0
     db4:	8a 95       	dec	r24
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <HIGHSCORE_load_from_eeprom+0x92>
}
     db8:	c5 01       	movw	r24, r10
     dba:	2d 96       	adiw	r28, 0x0d	; 13
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	08 95       	ret

00000de0 <HIGHSCORE_load_to_eeprom>:

void HIGHSCORE_load_to_eeprom(uint16_t score, char *name, int number){
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	18 2f       	mov	r17, r24
     df2:	c6 2e       	mov	r12, r22
     df4:	d7 2e       	mov	r13, r23
	uint8_t score_lsb = score & 0xFF;
	uint8_t score_msb = score >> 8;
	EEPROM_write(score_msb, NUM_HIGHSCORE_BYTES*number);
     df6:	44 0f       	add	r20, r20
     df8:	55 1f       	adc	r21, r21
     dfa:	ea 01       	movw	r28, r20
     dfc:	cc 0f       	add	r28, r28
     dfe:	dd 1f       	adc	r29, r29
     e00:	cc 0f       	add	r28, r28
     e02:	dd 1f       	adc	r29, r29
     e04:	cc 0f       	add	r28, r28
     e06:	dd 1f       	adc	r29, r29
     e08:	c4 1b       	sub	r28, r20
     e0a:	d5 0b       	sbc	r29, r21
     e0c:	7e 01       	movw	r14, r28
     e0e:	be 01       	movw	r22, r28
     e10:	89 2f       	mov	r24, r25
     e12:	0e 94 38 03 	call	0x670	; 0x670 <EEPROM_write>
	EEPROM_write(score_lsb, NUM_HIGHSCORE_BYTES*number + 1);
     e16:	be 01       	movw	r22, r28
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	81 2f       	mov	r24, r17
     e1e:	0e 94 38 03 	call	0x670	; 0x670 <EEPROM_write>
     e22:	0c 2d       	mov	r16, r12
     e24:	1d 2d       	mov	r17, r13
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
     e26:	c0 e0       	ldi	r28, 0x00	; 0
     e28:	d0 e0       	ldi	r29, 0x00	; 0
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	e8 0e       	add	r14, r24
     e2e:	f1 1c       	adc	r15, r1
     e30:	b7 01       	movw	r22, r14
     e32:	6c 0f       	add	r22, r28
     e34:	7d 1f       	adc	r23, r29
		EEPROM_write(name[i], i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
     e36:	f8 01       	movw	r30, r16
     e38:	81 91       	ld	r24, Z+
     e3a:	8f 01       	movw	r16, r30
     e3c:	0e 94 38 03 	call	0x670	; 0x670 <EEPROM_write>
	uint8_t score_lsb = score & 0xFF;
	uint8_t score_msb = score >> 8;
	EEPROM_write(score_msb, NUM_HIGHSCORE_BYTES*number);
	EEPROM_write(score_lsb, NUM_HIGHSCORE_BYTES*number + 1);
	
	for (int i = 0; i < NUM_USERNAME_BYTES; i++){
     e40:	21 96       	adiw	r28, 0x01	; 1
     e42:	cb 30       	cpi	r28, 0x0B	; 11
     e44:	d1 05       	cpc	r29, r1
     e46:	a1 f7       	brne	.-24     	; 0xe30 <HIGHSCORE_load_to_eeprom+0x50>
		EEPROM_write(name[i], i + NUM_HIGHSCORE_BYTES*number + NUM_SCORE_BYTES);
	}
}
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	08 95       	ret

00000e5a <HIGHSCORE_add_score>:

#include <stdlib.h>

//When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
     e5a:	3f 92       	push	r3
     e5c:	4f 92       	push	r4
     e5e:	5f 92       	push	r5
     e60:	6f 92       	push	r6
     e62:	7f 92       	push	r7
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	6a 97       	sbiw	r28, 0x1a	; 26
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	6c 01       	movw	r12, r24
     e8e:	36 2e       	mov	r3, r22
     e90:	47 2e       	mov	r4, r23
     e92:	4a 01       	movw	r8, r20
	highscore_info_t element;
	 for (int i = start; i < MAX_SCORES; i++){
     e94:	46 30       	cpi	r20, 0x06	; 6
     e96:	51 05       	cpc	r21, r1
     e98:	0c f0       	brlt	.+2      	; 0xe9c <HIGHSCORE_add_score+0x42>
     e9a:	59 c0       	rjmp	.+178    	; 0xf4e <HIGHSCORE_add_score+0xf4>
     e9c:	8a 01       	movw	r16, r20
     e9e:	7a 01       	movw	r14, r20
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	e8 1a       	sub	r14, r24
     ea4:	f8 0a       	sbc	r15, r24
		element = HIGHSCORE_load_from_eeprom(i);
     ea6:	0f 2e       	mov	r0, r31
     ea8:	fd e0       	ldi	r31, 0x0D	; 13
     eaa:	5f 2e       	mov	r5, r31
     eac:	f0 2d       	mov	r31, r0
			HIGHSCORE_load_to_eeprom(score, name, i);
			break;
		}
		else if (element.score > score){
			if (start == 0 && i == 4){
				OLED_printf("%s is not in the top 6", name);
     eae:	0f 2e       	mov	r0, r31
     eb0:	f4 e9       	ldi	r31, 0x94	; 148
     eb2:	6f 2e       	mov	r6, r31
     eb4:	f2 e0       	ldi	r31, 0x02	; 2
     eb6:	7f 2e       	mov	r7, r31
     eb8:	f0 2d       	mov	r31, r0
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <HIGHSCORE_add_score+0x6c>
     ebc:	0f 5f       	subi	r16, 0xFF	; 255
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	e8 1a       	sub	r14, r24
     ec4:	f8 0a       	sbc	r15, r24
//When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
	highscore_info_t element;
	 for (int i = start; i < MAX_SCORES; i++){
		element = HIGHSCORE_load_from_eeprom(i);
     ec6:	b8 01       	movw	r22, r16
     ec8:	ce 01       	movw	r24, r28
     eca:	0e 96       	adiw	r24, 0x0e	; 14
     ecc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <HIGHSCORE_load_from_eeprom>
     ed0:	fe 01       	movw	r30, r28
     ed2:	3e 96       	adiw	r30, 0x0e	; 14
     ed4:	de 01       	movw	r26, r28
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	85 2d       	mov	r24, r5
     eda:	01 90       	ld	r0, Z+
     edc:	0d 92       	st	X+, r0
     ede:	8a 95       	dec	r24
     ee0:	e1 f7       	brne	.-8      	; 0xeda <HIGHSCORE_add_score+0x80>
		if  (element.score == 0){
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	39 f4       	brne	.+14     	; 0xef8 <HIGHSCORE_add_score+0x9e>
			HIGHSCORE_load_to_eeprom(score, name, i);
     eea:	a8 01       	movw	r20, r16
     eec:	63 2d       	mov	r22, r3
     eee:	74 2d       	mov	r23, r4
     ef0:	c6 01       	movw	r24, r12
     ef2:	0e 94 f0 06 	call	0xde0	; 0xde0 <HIGHSCORE_load_to_eeprom>
			break;
     ef6:	2b c0       	rjmp	.+86     	; 0xf4e <HIGHSCORE_add_score+0xf4>
		}
		else if (element.score < score){
     ef8:	8c 15       	cp	r24, r12
     efa:	9d 05       	cpc	r25, r13
     efc:	78 f4       	brcc	.+30     	; 0xf1c <HIGHSCORE_add_score+0xc2>
			//score take this place and push the rest one back in the list
			HIGHSCORE_add_score(element.score, element.name, i + 1);
     efe:	a8 01       	movw	r20, r16
     f00:	4f 5f       	subi	r20, 0xFF	; 255
     f02:	5f 4f       	sbci	r21, 0xFF	; 255
     f04:	be 01       	movw	r22, r28
     f06:	6d 5f       	subi	r22, 0xFD	; 253
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <HIGHSCORE_add_score>
			HIGHSCORE_load_to_eeprom(score, name, i);
     f0e:	a8 01       	movw	r20, r16
     f10:	63 2d       	mov	r22, r3
     f12:	74 2d       	mov	r23, r4
     f14:	c6 01       	movw	r24, r12
     f16:	0e 94 f0 06 	call	0xde0	; 0xde0 <HIGHSCORE_load_to_eeprom>
			break;
     f1a:	19 c0       	rjmp	.+50     	; 0xf4e <HIGHSCORE_add_score+0xf4>
		}
		else if (element.score > score){
     f1c:	c8 16       	cp	r12, r24
     f1e:	d9 06       	cpc	r13, r25
     f20:	88 f4       	brcc	.+34     	; 0xf44 <HIGHSCORE_add_score+0xea>
			if (start == 0 && i == 4){
     f22:	81 14       	cp	r8, r1
     f24:	91 04       	cpc	r9, r1
     f26:	71 f4       	brne	.+28     	; 0xf44 <HIGHSCORE_add_score+0xea>
     f28:	04 30       	cpi	r16, 0x04	; 4
     f2a:	11 05       	cpc	r17, r1
     f2c:	59 f4       	brne	.+22     	; 0xf44 <HIGHSCORE_add_score+0xea>
				OLED_printf("%s is not in the top 6", name);
     f2e:	4f 92       	push	r4
     f30:	3f 92       	push	r3
     f32:	7f 92       	push	r7
     f34:	6f 92       	push	r6
     f36:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	bc cf       	rjmp	.-136    	; 0xebc <HIGHSCORE_add_score+0x62>

//When we use add_score somewhere else in the project, start = 0
void HIGHSCORE_add_score(uint16_t score, char *name, int start)
{
	highscore_info_t element;
	 for (int i = start; i < MAX_SCORES; i++){
     f44:	86 e0       	ldi	r24, 0x06	; 6
     f46:	e8 16       	cp	r14, r24
     f48:	f1 04       	cpc	r15, r1
     f4a:	0c f4       	brge	.+2      	; 0xf4e <HIGHSCORE_add_score+0xf4>
     f4c:	b7 cf       	rjmp	.-146    	; 0xebc <HIGHSCORE_add_score+0x62>
			if (start == 0 && i == 4){
				OLED_printf("%s is not in the top 6", name);
			}
		}
	 }
}
     f4e:	6a 96       	adiw	r28, 0x1a	; 26
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	bf 90       	pop	r11
     f6c:	af 90       	pop	r10
     f6e:	9f 90       	pop	r9
     f70:	8f 90       	pop	r8
     f72:	7f 90       	pop	r7
     f74:	6f 90       	pop	r6
     f76:	5f 90       	pop	r5
     f78:	4f 90       	pop	r4
     f7a:	3f 90       	pop	r3
     f7c:	08 95       	ret

00000f7e <HIGHSCORE_highlight_letter>:
	username[NUM_USERNAME_BYTES - 1] = '\0';
	
}

void HIGHSCORE_highlight_letter(int line, int prev_line)
{
     f7e:	cf 93       	push	r28
     f80:	c8 2f       	mov	r28, r24
     f82:	86 2f       	mov	r24, r22
	OLED_pos(prev_line, 0);
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_printf("  ");
     f8a:	2b ea       	ldi	r18, 0xAB	; 171
     f8c:	32 e0       	ldi	r19, 0x02	; 2
     f8e:	3f 93       	push	r19
     f90:	2f 93       	push	r18
     f92:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
	OLED_pos(line, 0);
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	8c 2f       	mov	r24, r28
     f9a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_print_arrow();
     f9e:	0e 94 00 06 	call	0xc00	; 0xc00 <OLED_print_arrow>
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
	
}
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <HIGHSCORE_print_character_list>:

void HIGHSCORE_print_character_list(char start){
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	d8 2e       	mov	r13, r24
	OLED_reset();
     fba:	0e 94 2a 05 	call	0xa54	; 0xa54 <OLED_reset>
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
     fbe:	2e ea       	ldi	r18, 0xAE	; 174
     fc0:	32 e0       	ldi	r19, 0x02	; 2
     fc2:	3f 93       	push	r19
     fc4:	2f 93       	push	r18
     fc6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
	for (char c = start; c < start + 7; c++){
     fca:	cd 2d       	mov	r28, r13
     fcc:	d0 e0       	ldi	r29, 0x00	; 0
     fce:	7e 01       	movw	r14, r28
     fd0:	87 e0       	ldi	r24, 0x07	; 7
     fd2:	e8 0e       	add	r14, r24
     fd4:	f1 1c       	adc	r15, r1
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	ce 15       	cp	r28, r14
     fdc:	df 05       	cpc	r29, r15
     fde:	ac f4       	brge	.+42     	; 0x100a <HIGHSCORE_print_character_list+0x60>
		OLED_goto_column(11);
		OLED_printf("%c\n", c);
     fe0:	09 ec       	ldi	r16, 0xC9	; 201
     fe2:	12 e0       	ldi	r17, 0x02	; 2

void HIGHSCORE_print_character_list(char start){
	OLED_reset();
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
	for (char c = start; c < start + 7; c++){
		OLED_goto_column(11);
     fe4:	8b e0       	ldi	r24, 0x0B	; 11
     fe6:	0e 94 c2 04 	call	0x984	; 0x984 <OLED_goto_column>
		OLED_printf("%c\n", c);
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	1f 93       	push	r17
     ff0:	0f 93       	push	r16
     ff2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
}

void HIGHSCORE_print_character_list(char start){
	OLED_reset();
	OLED_printf("CHOOSE A NAME   FINISH ->\n");
	for (char c = start; c < start + 7; c++){
     ff6:	d3 94       	inc	r13
     ff8:	cd 2d       	mov	r28, r13
     ffa:	d0 e0       	ldi	r29, 0x00	; 0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	ce 15       	cp	r28, r14
    1006:	df 05       	cpc	r29, r15
    1008:	6c f3       	brlt	.-38     	; 0xfe4 <HIGHSCORE_print_character_list+0x3a>
		OLED_goto_column(11);
		OLED_printf("%c\n", c);
	}
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	08 95       	ret

0000101a <HIGHSCORE_get_username>:
	}
}


void HIGHSCORE_get_username(char* username)
{
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	7c 01       	movw	r14, r24
	int i = 0;
	int line = 1;
	int prev_line = 1;
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
    1030:	81 e6       	ldi	r24, 0x61	; 97
    1032:	0e 94 d5 07 	call	0xfaa	; 0xfaa <HIGHSCORE_print_character_list>
	HIGHSCORE_highlight_letter(line, prev_line);
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <HIGHSCORE_highlight_letter>
void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
	int prev_line = 1;
	char ch = 'a';
    1042:	11 e6       	ldi	r17, 0x61	; 97

void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
	int prev_line = 1;
    1044:	bb 24       	eor	r11, r11
    1046:	b3 94       	inc	r11
    1048:	c1 2c       	mov	r12, r1


void HIGHSCORE_get_username(char* username)
{
	int i = 0;
	int line = 1;
    104a:	c1 e0       	ldi	r28, 0x01	; 1
    104c:	d0 e0       	ldi	r29, 0x00	; 0
}


void HIGHSCORE_get_username(char* username)
{
	int i = 0;
    104e:	81 2c       	mov	r8, r1
    1050:	91 2c       	mov	r9, r1
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
	HIGHSCORE_highlight_letter(line, prev_line);
	
	while(i < NUM_USERNAME_BYTES - 1){
		if (JOY_button()){
    1052:	0e 94 25 04 	call	0x84a	; 0x84a <JOY_button>
    1056:	89 2b       	or	r24, r25
    1058:	59 f0       	breq	.+22     	; 0x1070 <HIGHSCORE_get_username+0x56>
			while(JOY_button());
    105a:	0e 94 25 04 	call	0x84a	; 0x84a <JOY_button>
    105e:	89 2b       	or	r24, r25
    1060:	e1 f7       	brne	.-8      	; 0x105a <HIGHSCORE_get_username+0x40>
			username[i] = ch;
    1062:	f7 01       	movw	r30, r14
    1064:	e8 0d       	add	r30, r8
    1066:	f9 1d       	adc	r31, r9
    1068:	10 83       	st	Z, r17
			i++;
    106a:	2f ef       	ldi	r18, 0xFF	; 255
    106c:	82 1a       	sub	r8, r18
    106e:	92 0a       	sbc	r9, r18
			//OLED_pos(3,50);
			//OLED_printf("%s",username);
		}
		switch(JOY_get_direction()){
    1070:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	29 f1       	breq	.+74     	; 0x10c2 <HIGHSCORE_get_username+0xa8>
    1078:	84 30       	cpi	r24, 0x04	; 4
    107a:	09 f4       	brne	.+2      	; 0x107e <HIGHSCORE_get_username+0x64>
    107c:	4a c0       	rjmp	.+148    	; 0x1112 <HIGHSCORE_get_username+0xf8>
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	09 f0       	breq	.+2      	; 0x1084 <HIGHSCORE_get_username+0x6a>
    1082:	55 c0       	rjmp	.+170    	; 0x112e <HIGHSCORE_get_username+0x114>
    1084:	4b c0       	rjmp	.+150    	; 0x111c <HIGHSCORE_get_username+0x102>
			
			case UP:
			while(JOY_get_direction() == UP){
				if (ch > 'a'){
    1086:	12 36       	cpi	r17, 0x62	; 98
    1088:	40 f0       	brcs	.+16     	; 0x109a <HIGHSCORE_get_username+0x80>
					ch--;
    108a:	11 50       	subi	r17, 0x01	; 1
					if (line == 1)
    108c:	c1 30       	cpi	r28, 0x01	; 1
    108e:	d1 05       	cpc	r29, r1
    1090:	21 f4       	brne	.+8      	; 0x109a <HIGHSCORE_get_username+0x80>
						HIGHSCORE_print_character_list(ch);
    1092:	81 2f       	mov	r24, r17
    1094:	0e 94 d5 07 	call	0xfaa	; 0xfaa <HIGHSCORE_print_character_list>
    1098:	06 c0       	rjmp	.+12     	; 0x10a6 <HIGHSCORE_get_username+0x8c>
						//OLED_pos(3,50);
						//OLED_printf("%s",username);
				}
				if (line > 1){
    109a:	c2 30       	cpi	r28, 0x02	; 2
    109c:	d1 05       	cpc	r29, r1
    109e:	1c f0       	brlt	.+6      	; 0x10a6 <HIGHSCORE_get_username+0x8c>
					prev_line = line;
					line--;
    10a0:	bc 2e       	mov	r11, r28
    10a2:	cd 2e       	mov	r12, r29
    10a4:	21 97       	sbiw	r28, 0x01	; 1
				}
				HIGHSCORE_highlight_letter(line, prev_line);
    10a6:	6b 2d       	mov	r22, r11
    10a8:	7c 2d       	mov	r23, r12
    10aa:	ce 01       	movw	r24, r28
    10ac:	0e 94 bf 07 	call	0xf7e	; 0xf7e <HIGHSCORE_highlight_letter>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
    10b4:	e2 e0       	ldi	r30, 0x02	; 2
    10b6:	81 50       	subi	r24, 0x01	; 1
    10b8:	90 40       	sbci	r25, 0x00	; 0
    10ba:	e0 40       	sbci	r30, 0x00	; 0
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <HIGHSCORE_get_username+0x9c>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <HIGHSCORE_get_username+0xa6>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <HIGHSCORE_get_username+0xa8>
			//OLED_printf("%s",username);
		}
		switch(JOY_get_direction()){
			
			case UP:
			while(JOY_get_direction() == UP){
    10c2:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	f1 f2       	breq	.-68     	; 0x1086 <HIGHSCORE_get_username+0x6c>
    10ca:	31 c0       	rjmp	.+98     	; 0x112e <HIGHSCORE_get_username+0x114>
			}
			break;
			
			case DOWN:
			while(JOY_get_direction() == DOWN){
				if (ch < 'z'){
    10cc:	1a 37       	cpi	r17, 0x7A	; 122
    10ce:	68 f4       	brcc	.+26     	; 0x10ea <HIGHSCORE_get_username+0xd0>
					ch++;
    10d0:	aa 24       	eor	r10, r10
    10d2:	a3 94       	inc	r10
    10d4:	a1 0e       	add	r10, r17
					if (line == 7)
    10d6:	c7 30       	cpi	r28, 0x07	; 7
    10d8:	d1 05       	cpc	r29, r1
    10da:	31 f4       	brne	.+12     	; 0x10e8 <HIGHSCORE_get_username+0xce>
						HIGHSCORE_print_character_list(ch - 6);
    10dc:	8b ef       	ldi	r24, 0xFB	; 251
    10de:	81 0f       	add	r24, r17
    10e0:	0e 94 d5 07 	call	0xfaa	; 0xfaa <HIGHSCORE_print_character_list>
			break;
			
			case DOWN:
			while(JOY_get_direction() == DOWN){
				if (ch < 'z'){
					ch++;
    10e4:	1a 2d       	mov	r17, r10
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <HIGHSCORE_get_username+0xdc>
    10e8:	1a 2d       	mov	r17, r10
					if (line == 7)
						HIGHSCORE_print_character_list(ch - 6);
						//OLED_pos(3,50);
						//OLED_printf("%s",username);
				}
				if (line < 7){
    10ea:	c7 30       	cpi	r28, 0x07	; 7
    10ec:	d1 05       	cpc	r29, r1
    10ee:	1c f4       	brge	.+6      	; 0x10f6 <HIGHSCORE_get_username+0xdc>
					prev_line = line;
					line++;
    10f0:	bc 2e       	mov	r11, r28
    10f2:	cd 2e       	mov	r12, r29
    10f4:	21 96       	adiw	r28, 0x01	; 1
				}
				HIGHSCORE_highlight_letter(line, prev_line);
    10f6:	6b 2d       	mov	r22, r11
    10f8:	7c 2d       	mov	r23, r12
    10fa:	ce 01       	movw	r24, r28
    10fc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <HIGHSCORE_highlight_letter>
    1100:	ff ef       	ldi	r31, 0xFF	; 255
    1102:	2f ef       	ldi	r18, 0xFF	; 255
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	f1 50       	subi	r31, 0x01	; 1
    1108:	20 40       	sbci	r18, 0x00	; 0
    110a:	80 40       	sbci	r24, 0x00	; 0
    110c:	e1 f7       	brne	.-8      	; 0x1106 <HIGHSCORE_get_username+0xec>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <HIGHSCORE_get_username+0xf6>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <HIGHSCORE_get_username+0xf8>
				_delay_ms(200);
			}
			break;
			
			case DOWN:
			while(JOY_get_direction() == DOWN){
    1112:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	c9 f2       	breq	.-78     	; 0x10cc <HIGHSCORE_get_username+0xb2>
    111a:	09 c0       	rjmp	.+18     	; 0x112e <HIGHSCORE_get_username+0x114>
				_delay_ms(200);
			}
			break;
			
			case RIGHT:
			while(JOY_get_direction() == RIGHT);
    111c:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	e1 f3       	breq	.-8      	; 0x111c <HIGHSCORE_get_username+0x102>
			username[i] = '\0';
    1124:	f7 01       	movw	r30, r14
    1126:	e8 0d       	add	r30, r8
    1128:	f9 1d       	adc	r31, r9
    112a:	10 82       	st	Z, r1
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <HIGHSCORE_get_username+0x11e>
	int prev_line = 1;
	char ch = 'a';
	HIGHSCORE_print_character_list(ch);
	HIGHSCORE_highlight_letter(line, prev_line);
	
	while(i < NUM_USERNAME_BYTES - 1){
    112e:	9a e0       	ldi	r25, 0x0A	; 10
    1130:	89 16       	cp	r8, r25
    1132:	91 04       	cpc	r9, r1
    1134:	0c f4       	brge	.+2      	; 0x1138 <HIGHSCORE_get_username+0x11e>
    1136:	8d cf       	rjmp	.-230    	; 0x1052 <HIGHSCORE_get_username+0x38>
			
			default:
			break;
		}
	}
	username[NUM_USERNAME_BYTES - 1] = '\0';
    1138:	f7 01       	movw	r30, r14
    113a:	12 86       	std	Z+10, r1	; 0x0a
	
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	cf 90       	pop	r12
    1148:	bf 90       	pop	r11
    114a:	af 90       	pop	r10
    114c:	9f 90       	pop	r9
    114e:	8f 90       	pop	r8
    1150:	08 95       	ret

00001152 <HIGHSCORE_print>:
		OLED_printf("%c\n", c);
	}
}

void HIGHSCORE_print()
{
    1152:	9f 92       	push	r9
    1154:	af 92       	push	r10
    1156:	bf 92       	push	r11
    1158:	cf 92       	push	r12
    115a:	df 92       	push	r13
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	6a 97       	sbiw	r28, 0x1a	; 26
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
	int max_num_highscores = 5;
	highscore_info_t user;
	OLED_reset();
    1178:	0e 94 2a 05 	call	0xa54	; 0xa54 <OLED_reset>
	OLED_printf("Highscores");
    117c:	80 e9       	ldi	r24, 0x90	; 144
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	9f 93       	push	r25
    1182:	8f 93       	push	r24
    1184:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
	OLED_pos(1, 0);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_printf("#  Score");
    1190:	8d ec       	ldi	r24, 0xCD	; 205
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	9f 93       	push	r25
    1196:	8f 93       	push	r24
    1198:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
	OLED_goto_column(55);
    119c:	87 e3       	ldi	r24, 0x37	; 55
    119e:	0e 94 c2 04 	call	0x984	; 0x984 <OLED_goto_column>
	OLED_printf("User\n");
    11a2:	86 ed       	ldi	r24, 0xD6	; 214
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
	for (int i = 0; i < max_num_highscores; i++){
    11ba:	00 e0       	ldi	r16, 0x00	; 0
    11bc:	10 e0       	ldi	r17, 0x00	; 0
		user = HIGHSCORE_load_from_eeprom(i);
    11be:	0f 2e       	mov	r0, r31
    11c0:	fd e0       	ldi	r31, 0x0D	; 13
    11c2:	9f 2e       	mov	r9, r31
    11c4:	f0 2d       	mov	r31, r0
		OLED_printf("%d  %d", i+1, user.score);
    11c6:	0f 2e       	mov	r0, r31
    11c8:	fc ed       	ldi	r31, 0xDC	; 220
    11ca:	af 2e       	mov	r10, r31
    11cc:	f2 e0       	ldi	r31, 0x02	; 2
    11ce:	bf 2e       	mov	r11, r31
    11d0:	f0 2d       	mov	r31, r0
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
    11d2:	6e 01       	movw	r12, r28
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	c8 0e       	add	r12, r24
    11d8:	d1 1c       	adc	r13, r1
    11da:	0f 2e       	mov	r0, r31
    11dc:	f3 ee       	ldi	r31, 0xE3	; 227
    11de:	ef 2e       	mov	r14, r31
    11e0:	f2 e0       	ldi	r31, 0x02	; 2
    11e2:	ff 2e       	mov	r15, r31
    11e4:	f0 2d       	mov	r31, r0
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
		user = HIGHSCORE_load_from_eeprom(i);
    11e6:	b8 01       	movw	r22, r16
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 96       	adiw	r24, 0x0e	; 14
    11ec:	0e 94 8f 06 	call	0xd1e	; 0xd1e <HIGHSCORE_load_from_eeprom>
    11f0:	fe 01       	movw	r30, r28
    11f2:	3e 96       	adiw	r30, 0x0e	; 14
    11f4:	de 01       	movw	r26, r28
    11f6:	11 96       	adiw	r26, 0x01	; 1
    11f8:	89 2d       	mov	r24, r9
    11fa:	01 90       	ld	r0, Z+
    11fc:	0d 92       	st	X+, r0
    11fe:	8a 95       	dec	r24
    1200:	e1 f7       	brne	.-8      	; 0x11fa <HIGHSCORE_print+0xa8>
		OLED_printf("%d  %d", i+1, user.score);
    1202:	0f 5f       	subi	r16, 0xFF	; 255
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	8f 93       	push	r24
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	8f 93       	push	r24
    120e:	1f 93       	push	r17
    1210:	0f 93       	push	r16
    1212:	bf 92       	push	r11
    1214:	af 92       	push	r10
    1216:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
		OLED_goto_column(55);
    121a:	87 e3       	ldi	r24, 0x37	; 55
    121c:	0e 94 c2 04 	call	0x984	; 0x984 <OLED_goto_column>
		OLED_printf("%s\n",user.name);
    1220:	df 92       	push	r13
    1222:	cf 92       	push	r12
    1224:	ff 92       	push	r15
    1226:	ef 92       	push	r14
    1228:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
	OLED_printf("Highscores");
	OLED_pos(1, 0);
	OLED_printf("#  Score");
	OLED_goto_column(55);
	OLED_printf("User\n");
	for (int i = 0; i < max_num_highscores; i++){
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	05 30       	cpi	r16, 0x05	; 5
    1238:	11 05       	cpc	r17, r1
    123a:	a9 f6       	brne	.-86     	; 0x11e6 <HIGHSCORE_print+0x94>
		OLED_printf("%d  %d", i+1, user.score);
		OLED_goto_column(55);
		OLED_printf("%s\n",user.name);
		//OLED_goto_column(0);
	}
}
    123c:	6a 96       	adiw	r28, 0x1a	; 26
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	bf 90       	pop	r11
    125a:	af 90       	pop	r10
    125c:	9f 90       	pop	r9
    125e:	08 95       	ret

00001260 <HIGHSCORE_clear>:


void HIGHSCORE_clear()
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    1264:	c0 e0       	ldi	r28, 0x00	; 0
    1266:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_write(0, i);
    1268:	be 01       	movw	r22, r28
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 38 03 	call	0x670	; 0x670 <EEPROM_write>
}


void HIGHSCORE_clear()
{
	for (int i = 0; i < NUM_HIGHSCORE_BYTES*MAX_SCORES; i++){
    1270:	21 96       	adiw	r28, 0x01	; 1
    1272:	c4 35       	cpi	r28, 0x54	; 84
    1274:	d1 05       	cpc	r29, r1
    1276:	c1 f7       	brne	.-16     	; 0x1268 <HIGHSCORE_clear+0x8>
		EEPROM_write(0, i);
	}
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <main>:
//#include <stdio.h>
#include <avr/interrupt.h>



int main( void ){
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	66 97       	sbiw	r28, 0x16	; 22
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
	
	cli();
    1292:	f8 94       	cli
	UART_Init( MYUBRR );
    1294:	8f e1       	ldi	r24, 0x1F	; 31
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 09 03 	call	0x612	; 0x612 <UART_Init>
	ADC_init();
    129c:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_init>
	JOY_init();
    12a0:	0e 94 4b 04 	call	0x896	; 0x896 <JOY_init>
	TOUCH_init();
    12a4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <TOUCH_init>
	MENU_init();
    12a8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <MENU_init>
	CAN_init();
    12ac:	0e 94 45 01 	call	0x28a	; 0x28a <CAN_init>
	TIMER_init();
    12b0:	0e 94 37 06 	call	0xc6e	; 0xc6e <TIMER_init>
	
	
	printf("Init done\n");
    12b4:	87 ee       	ldi	r24, 0xE7	; 231
    12b6:	92 e0       	ldi	r25, 0x02	; 2
    12b8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <puts>
	STATE_OPTION_set(menu);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
	sei();
    12c2:	78 94       	sei

int main( void ){
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
	int score = 0;
    12c4:	e1 2c       	mov	r14, r1
    12c6:	f1 2c       	mov	r15, r1


int main( void ){
	can_msg receive;
	int msg_type;
	int remaining_lives = 3;
    12c8:	03 e0       	ldi	r16, 0x03	; 3
    12ca:	10 e0       	ldi	r17, 0x00	; 0
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
    12cc:	0f 2e       	mov	r0, r31
    12ce:	f3 e0       	ldi	r31, 0x03	; 3
    12d0:	cf 2e       	mov	r12, r31
    12d2:	f0 2d       	mov	r31, r0
    12d4:	d1 2c       	mov	r13, r1
	char username[NUM_USERNAME_BYTES];

	
	while(1){

		switch (STATE_OPTION_get()){
    12d6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <STATE_OPTION_get>
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	01 f1       	breq	.+64     	; 0x131e <main+0xa0>
    12de:	28 f4       	brcc	.+10     	; 0x12ea <main+0x6c>
    12e0:	88 23       	and	r24, r24
    12e2:	41 f0       	breq	.+16     	; 0x12f4 <main+0x76>
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	59 f0       	breq	.+22     	; 0x12fe <main+0x80>
    12e8:	4b c0       	rjmp	.+150    	; 0x1380 <main+0x102>
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	f9 f0       	breq	.+62     	; 0x132c <main+0xae>
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	49 f1       	breq	.+82     	; 0x1344 <main+0xc6>
    12f2:	46 c0       	rjmp	.+140    	; 0x1380 <main+0x102>
			case menu:
				MENU_select_item();
    12f4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MENU_select_item>
				MENU_navigate();
    12f8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <MENU_navigate>
				break;
    12fc:	44 c0       	rjmp	.+136    	; 0x1386 <main+0x108>
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
    12fe:	0e 94 04 0c 	call	0x1808	; 0x1808 <STATE_OPTION_get_speed>
    1302:	0e 94 05 04 	call	0x80a	; 0x80a <SEND2CAN_send_speed>
				MENU_print_game_screen();
    1306:	0e 94 55 0b 	call	0x16aa	; 0x16aa <MENU_print_game_screen>
				remaining_lives = 3;
				score = 0;
				TIMER_start();
    130a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TIMER_start>
				STATE_OPTION_set(game);
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
				score = 0;
    1314:	e1 2c       	mov	r14, r1
    1316:	f1 2c       	mov	r15, r1
				MENU_navigate();
				break;
			case game_init:
				SEND2CAN_send_speed(STATE_OPTION_get_speed());
				MENU_print_game_screen();
				remaining_lives = 3;
    1318:	0c 2d       	mov	r16, r12
    131a:	1d 2d       	mov	r17, r13
				score = 0;
				TIMER_start();
				STATE_OPTION_set(game);
				break;
    131c:	34 c0       	rjmp	.+104    	; 0x1386 <main+0x108>
			case game:
				SEND2CAN_send_joy_pos_x();
    131e:	0e 94 49 03 	call	0x692	; 0x692 <SEND2CAN_send_joy_pos_x>
				SEND2CAN_send_slider_pos();
    1322:	0e 94 8c 03 	call	0x718	; 0x718 <SEND2CAN_send_slider_pos>
				SEND2CAN_touch_button_pressed();
    1326:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <SEND2CAN_touch_button_pressed>
				break;
    132a:	2d c0       	rjmp	.+90     	; 0x1386 <main+0x108>
			case game_pause:
				if(JOY_button()){
    132c:	0e 94 25 04 	call	0x84a	; 0x84a <JOY_button>
    1330:	89 2b       	or	r24, r25
    1332:	49 f1       	breq	.+82     	; 0x1386 <main+0x108>
					STATE_OPTION_set(game);
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
					MENU_print_game_screen();
    133a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <MENU_print_game_screen>
					TIMER_start();
    133e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TIMER_start>
    1342:	21 c0       	rjmp	.+66     	; 0x1386 <main+0x108>
				}
				break;
			case game_over:
				MENU_print_game_over_screen(score);
    1344:	c7 01       	movw	r24, r14
    1346:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <MENU_print_game_over_screen>
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	9b e3       	ldi	r25, 0x3B	; 59
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	90 40       	sbci	r25, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <main+0xd2>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <main+0xdc>
    135a:	00 00       	nop
				_delay_ms(4000);
				HIGHSCORE_get_username(username);
    135c:	ce 01       	movw	r24, r28
    135e:	0c 96       	adiw	r24, 0x0c	; 12
    1360:	0e 94 0d 08 	call	0x101a	; 0x101a <HIGHSCORE_get_username>
				HIGHSCORE_add_score(score, username, 0);
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	be 01       	movw	r22, r28
    136a:	64 5f       	subi	r22, 0xF4	; 244
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	c7 01       	movw	r24, r14
    1370:	0e 94 2d 07 	call	0xe5a	; 0xe5a <HIGHSCORE_add_score>
				
				STATE_OPTION_set(menu);
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
				MENU_init();
    137a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <MENU_init>
				break;
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <main+0x108>
			default:
				STATE_OPTION_set(menu);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
				break;
		}
		CAN_handle_interrupt(&receive);
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	0e 94 16 02 	call	0x42c	; 0x42c <CAN_handle_interrupt>
		msg_type = receive.data[0];
		switch(msg_type){
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	85 30       	cpi	r24, 0x05	; 5
    1392:	f9 f4       	brne	.+62     	; 0x13d2 <main+0x154>
			case CAN_LIVES:
				if(remaining_lives > 1 && STATE_OPTION_get() == game){
    1394:	02 30       	cpi	r16, 0x02	; 2
    1396:	11 05       	cpc	r17, r1
    1398:	8c f0       	brlt	.+34     	; 0x13bc <main+0x13e>
    139a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <STATE_OPTION_get>
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	69 f4       	brne	.+26     	; 0x13bc <main+0x13e>
					score = score + TIMER_stop();
    13a2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TIMER_stop>
    13a6:	e8 0e       	add	r14, r24
    13a8:	f9 1e       	adc	r15, r25
					remaining_lives = remaining_lives - 1;
    13aa:	01 50       	subi	r16, 0x01	; 1
    13ac:	11 09       	sbc	r17, r1
					STATE_OPTION_set(game_pause);
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
					MENU_print_pause_screen(remaining_lives);
    13b4:	c8 01       	movw	r24, r16
    13b6:	0e 94 30 0b 	call	0x1660	; 0x1660 <MENU_print_pause_screen>
    13ba:	0b c0       	rjmp	.+22     	; 0x13d2 <main+0x154>
				}else if (STATE_OPTION_get() == game){
    13bc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <STATE_OPTION_get>
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	39 f4       	brne	.+14     	; 0x13d2 <main+0x154>
					score = score + TIMER_stop();
    13c4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TIMER_stop>
    13c8:	e8 0e       	add	r14, r24
    13ca:	f9 1e       	adc	r15, r25
					STATE_OPTION_set(game_over);
    13cc:	84 e0       	ldi	r24, 0x04	; 4
    13ce:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 ef       	ldi	r25, 0xF0	; 240
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <main+0x158>
    13da:	7d cf       	rjmp	.-262    	; 0x12d6 <main+0x58>

000013dc <contrast_low_func>:
#include <string.h>
#include <util/delay.h>

menu_item_info_t main_menu, play_game, highscores, settings, slow_speed, medium_speed, fast_speed, clear_highscores, contrast_level, invert_screen,contrast_low,contrast_medium,contrast_high;

void contrast_low_func(){ OLED_set_contrast( LOW_CONTRAST ); }
    13dc:	80 e1       	ldi	r24, 0x10	; 16
    13de:	0e 94 c6 05 	call	0xb8c	; 0xb8c <OLED_set_contrast>
    13e2:	08 95       	ret

000013e4 <contrast_medium_func>:
void contrast_medium_func(){ OLED_set_contrast( MEDIUM_CONTRAST ); }
    13e4:	80 e5       	ldi	r24, 0x50	; 80
    13e6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <OLED_set_contrast>
    13ea:	08 95       	ret

000013ec <contrast_high_func>:
void contrast_high_func(){ OLED_set_contrast( HIGH_CONTRAST ); }
    13ec:	80 ef       	ldi	r24, 0xF0	; 240
    13ee:	0e 94 c6 05 	call	0xb8c	; 0xb8c <OLED_set_contrast>
    13f2:	08 95       	ret

000013f4 <slow_speed_func>:
void slow_speed_func(){ STATE_OPTION_set_speed(1); STATE_OPTION_set(game_init); }
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <STATE_OPTION_set_speed>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
    1402:	08 95       	ret

00001404 <medium_speed_func>:
void medium_speed_func(){ STATE_OPTION_set_speed(2); STATE_OPTION_set(game_init); }
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <STATE_OPTION_set_speed>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
    1412:	08 95       	ret

00001414 <fast_speed_func>:
void fast_speed_func(){ STATE_OPTION_set_speed(3); STATE_OPTION_set(game_init); }
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <STATE_OPTION_set_speed>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STATE_OPTION_set>
    1422:	08 95       	ret

00001424 <MENU_highlight_item>:
	}
}


void MENU_highlight_item( void )
{
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
	for (int i = 1; i < current_menu->child_num + 1; i++){
    142c:	e0 91 d8 03 	lds	r30, 0x03D8
    1430:	f0 91 d9 03 	lds	r31, 0x03D9
    1434:	82 89       	ldd	r24, Z+18	; 0x12
    1436:	93 89       	ldd	r25, Z+19	; 0x13
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	02 97       	sbiw	r24, 0x02	; 2
    143c:	cc f0       	brlt	.+50     	; 0x1470 <MENU_highlight_item+0x4c>
    143e:	c1 e0       	ldi	r28, 0x01	; 1
    1440:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i, 0);
		OLED_printf("  ");
    1442:	0b ea       	ldi	r16, 0xAB	; 171
    1444:	12 e0       	ldi	r17, 0x02	; 2


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
		OLED_pos(i, 0);
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	8c 2f       	mov	r24, r28
    144a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
		OLED_printf("  ");
    144e:	1f 93       	push	r17
    1450:	0f 93       	push	r16
    1452:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
}


void MENU_highlight_item( void )
{
	for (int i = 1; i < current_menu->child_num + 1; i++){
    1456:	21 96       	adiw	r28, 0x01	; 1
    1458:	e0 91 d8 03 	lds	r30, 0x03D8
    145c:	f0 91 d9 03 	lds	r31, 0x03D9
    1460:	82 89       	ldd	r24, Z+18	; 0x12
    1462:	93 89       	ldd	r25, Z+19	; 0x13
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	c8 17       	cp	r28, r24
    146c:	d9 07       	cpc	r29, r25
    146e:	5c f3       	brlt	.-42     	; 0x1446 <MENU_highlight_item+0x22>
		OLED_pos(i, 0);
		OLED_printf("  ");
	}
	
	OLED_pos(line, 0);
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	80 91 d6 03 	lds	r24, 0x03D6
    1476:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_print_arrow();
    147a:	0e 94 00 06 	call	0xc00	; 0xc00 <OLED_print_arrow>
}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <MENU_print_menu>:
	MENU_print_menu();
	MENU_highlight_item();
}


void MENU_print_menu(){
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
	OLED_reset();
    1490:	0e 94 2a 05 	call	0xa54	; 0xa54 <OLED_reset>
	OLED_printf("%s",current_menu->name);
    1494:	e0 91 d8 03 	lds	r30, 0x03D8
    1498:	f0 91 d9 03 	lds	r31, 0x03D9
    149c:	81 81       	ldd	r24, Z+1	; 0x01
    149e:	8f 93       	push	r24
    14a0:	80 81       	ld	r24, Z
    14a2:	8f 93       	push	r24
    14a4:	81 ef       	ldi	r24, 0xF1	; 241
    14a6:	92 e0       	ldi	r25, 0x02	; 2
    14a8:	9f 93       	push	r25
    14aa:	8f 93       	push	r24
    14ac:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
	if (current_child!= NULL){
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	80 91 da 03 	lds	r24, 0x03DA
    14bc:	90 91 db 03 	lds	r25, 0x03DB
    14c0:	89 2b       	or	r24, r25
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <MENU_print_menu+0x40>
		MENU_highlight_item();
    14c4:	0e 94 12 0a 	call	0x1424	; 0x1424 <MENU_highlight_item>
	}
	for (int i = 0; i < current_menu->child_num; i++){
    14c8:	e0 91 d8 03 	lds	r30, 0x03D8
    14cc:	f0 91 d9 03 	lds	r31, 0x03D9
    14d0:	82 89       	ldd	r24, Z+18	; 0x12
    14d2:	93 89       	ldd	r25, Z+19	; 0x13
    14d4:	18 16       	cp	r1, r24
    14d6:	19 06       	cpc	r1, r25
    14d8:	7c f5       	brge	.+94     	; 0x1538 <MENU_print_menu+0xb0>
    14da:	c0 e0       	ldi	r28, 0x00	; 0
    14dc:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
    14de:	01 ef       	ldi	r16, 0xF1	; 241
    14e0:	12 e0       	ldi	r17, 0x02	; 2
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
		OLED_pos(i + 1, 10);
    14e2:	6a e0       	ldi	r22, 0x0A	; 10
    14e4:	8c 2f       	mov	r24, r28
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
		OLED_goto_column(10);
    14ec:	8a e0       	ldi	r24, 0x0A	; 10
    14ee:	0e 94 c2 04 	call	0x984	; 0x984 <OLED_goto_column>
		OLED_printf("%s", current_menu->child[i]->name);
    14f2:	80 91 d8 03 	lds	r24, 0x03D8
    14f6:	90 91 d9 03 	lds	r25, 0x03D9
    14fa:	fe 01       	movw	r30, r28
    14fc:	32 96       	adiw	r30, 0x02	; 2
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	e8 0f       	add	r30, r24
    1504:	f9 1f       	adc	r31, r25
    1506:	01 90       	ld	r0, Z+
    1508:	f0 81       	ld	r31, Z
    150a:	e0 2d       	mov	r30, r0
    150c:	81 81       	ldd	r24, Z+1	; 0x01
    150e:	8f 93       	push	r24
    1510:	80 81       	ld	r24, Z
    1512:	8f 93       	push	r24
    1514:	1f 93       	push	r17
    1516:	0f 93       	push	r16
    1518:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
	OLED_reset();
	OLED_printf("%s",current_menu->name);
	if (current_child!= NULL){
		MENU_highlight_item();
	}
	for (int i = 0; i < current_menu->child_num; i++){
    151c:	21 96       	adiw	r28, 0x01	; 1
    151e:	e0 91 d8 03 	lds	r30, 0x03D8
    1522:	f0 91 d9 03 	lds	r31, 0x03D9
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	82 89       	ldd	r24, Z+18	; 0x12
    1530:	93 89       	ldd	r25, Z+19	; 0x13
    1532:	c8 17       	cp	r28, r24
    1534:	d9 07       	cpc	r29, r25
    1536:	ac f2       	brlt	.-86     	; 0x14e2 <MENU_print_menu+0x5a>
		OLED_pos(i + 1, 10);
		OLED_goto_column(10);
		OLED_printf("%s", current_menu->child[i]->name);
	}
}
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <MENU_init>:
menu_item_info_t *current_child;
int line;


void MENU_init( void ){
	OLED_init();
    1542:	0e 94 36 05 	call	0xa6c	; 0xa6c <OLED_init>
	current_menu = &main_menu;
    1546:	80 e2       	ldi	r24, 0x20	; 32
    1548:	92 e0       	ldi	r25, 0x02	; 2
    154a:	90 93 d9 03 	sts	0x03D9, r25
    154e:	80 93 d8 03 	sts	0x03D8, r24
	current_child = main_menu.child[0];
    1552:	80 91 24 02 	lds	r24, 0x0224
    1556:	90 91 25 02 	lds	r25, 0x0225
    155a:	90 93 db 03 	sts	0x03DB, r25
    155e:	80 93 da 03 	sts	0x03DA, r24
	line = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	90 93 d7 03 	sts	0x03D7, r25
    156a:	80 93 d6 03 	sts	0x03D6, r24
	MENU_print_menu();
    156e:	0e 94 44 0a 	call	0x1488	; 0x1488 <MENU_print_menu>
	MENU_highlight_item();
    1572:	0e 94 12 0a 	call	0x1424	; 0x1424 <MENU_highlight_item>
    1576:	08 95       	ret

00001578 <MENU_navigate>:



void MENU_navigate(){

	switch (JOY_get_direction()){
    1578:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	39 f1       	breq	.+78     	; 0x15ce <MENU_navigate+0x56>
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	09 f4       	brne	.+2      	; 0x1586 <MENU_navigate+0xe>
    1584:	47 c0       	rjmp	.+142    	; 0x1614 <MENU_navigate+0x9c>
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	09 f0       	breq	.+2      	; 0x158c <MENU_navigate+0x14>
    158a:	69 c0       	rjmp	.+210    	; 0x165e <MENU_navigate+0xe6>
		case LEFT:
			while(JOY_get_direction() == LEFT){}
    158c:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	e1 f3       	breq	.-8      	; 0x158c <MENU_navigate+0x14>
			if (current_menu->parent != NULL){
    1594:	e0 91 d8 03 	lds	r30, 0x03D8
    1598:	f0 91 d9 03 	lds	r31, 0x03D9
    159c:	02 80       	ldd	r0, Z+2	; 0x02
    159e:	f3 81       	ldd	r31, Z+3	; 0x03
    15a0:	e0 2d       	mov	r30, r0
    15a2:	30 97       	sbiw	r30, 0x00	; 0
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <MENU_navigate+0x30>
    15a6:	5b c0       	rjmp	.+182    	; 0x165e <MENU_navigate+0xe6>
				line = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	90 93 d7 03 	sts	0x03D7, r25
    15b0:	80 93 d6 03 	sts	0x03D6, r24
				current_menu = current_menu->parent;
    15b4:	f0 93 d9 03 	sts	0x03D9, r31
    15b8:	e0 93 d8 03 	sts	0x03D8, r30
				current_child = current_menu->child[0];
    15bc:	84 81       	ldd	r24, Z+4	; 0x04
    15be:	95 81       	ldd	r25, Z+5	; 0x05
    15c0:	90 93 db 03 	sts	0x03DB, r25
    15c4:	80 93 da 03 	sts	0x03DA, r24
				MENU_print_menu();
    15c8:	0e 94 44 0a 	call	0x1488	; 0x1488 <MENU_print_menu>
    15cc:	08 95       	ret
			}
			break;
		case UP:
		while(JOY_get_direction() == UP){}
    15ce:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	e1 f3       	breq	.-8      	; 0x15ce <MENU_navigate+0x56>
			if (line > 1){
    15d6:	80 91 d6 03 	lds	r24, 0x03D6
    15da:	90 91 d7 03 	lds	r25, 0x03D7
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	91 05       	cpc	r25, r1
    15e2:	ec f1       	brlt	.+122    	; 0x165e <MENU_navigate+0xe6>
				line = line - 1;
    15e4:	9c 01       	movw	r18, r24
    15e6:	21 50       	subi	r18, 0x01	; 1
    15e8:	31 09       	sbc	r19, r1
    15ea:	30 93 d7 03 	sts	0x03D7, r19
    15ee:	20 93 d6 03 	sts	0x03D6, r18
				current_child = current_menu->child[line - 1];
    15f2:	e0 91 d8 03 	lds	r30, 0x03D8
    15f6:	f0 91 d9 03 	lds	r31, 0x03D9
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	e8 0f       	add	r30, r24
    1600:	f9 1f       	adc	r31, r25
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	90 93 db 03 	sts	0x03DB, r25
    160a:	80 93 da 03 	sts	0x03DA, r24
				MENU_highlight_item();
    160e:	0e 94 12 0a 	call	0x1424	; 0x1424 <MENU_highlight_item>
    1612:	08 95       	ret
				}
			break;
		case DOWN:
		while(JOY_get_direction() == DOWN){}
    1614:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	e1 f3       	breq	.-8      	; 0x1614 <MENU_navigate+0x9c>
			if (line < current_menu->child_num){
    161c:	e0 91 d8 03 	lds	r30, 0x03D8
    1620:	f0 91 d9 03 	lds	r31, 0x03D9
    1624:	80 91 d6 03 	lds	r24, 0x03D6
    1628:	90 91 d7 03 	lds	r25, 0x03D7
    162c:	22 89       	ldd	r18, Z+18	; 0x12
    162e:	33 89       	ldd	r19, Z+19	; 0x13
    1630:	82 17       	cp	r24, r18
    1632:	93 07       	cpc	r25, r19
    1634:	a4 f4       	brge	.+40     	; 0x165e <MENU_navigate+0xe6>
				line = line + 1;
    1636:	9c 01       	movw	r18, r24
    1638:	2f 5f       	subi	r18, 0xFF	; 255
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	30 93 d7 03 	sts	0x03D7, r19
    1640:	20 93 d6 03 	sts	0x03D6, r18
				current_child = current_menu->child[line - 1];
    1644:	02 96       	adiw	r24, 0x02	; 2
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	e8 0f       	add	r30, r24
    164c:	f9 1f       	adc	r31, r25
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	90 93 db 03 	sts	0x03DB, r25
    1656:	80 93 da 03 	sts	0x03DA, r24
				MENU_highlight_item();
    165a:	0e 94 12 0a 	call	0x1424	; 0x1424 <MENU_highlight_item>
    165e:	08 95       	ret

00001660 <MENU_print_pause_screen>:
	OLED_pos(line, 0);
	OLED_print_arrow();
}

void MENU_print_pause_screen(int remaining_lives)
{
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	c8 2f       	mov	r28, r24
    1666:	d9 2f       	mov	r29, r25
	OLED_reset();
    1668:	0e 94 2a 05 	call	0xa54	; 0xa54 <OLED_reset>
	OLED_pos(3, 20);
    166c:	64 e1       	ldi	r22, 0x14	; 20
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_printf("You have %d lives left", remaining_lives);
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	84 ef       	ldi	r24, 0xF4	; 244
    167a:	92 e0       	ldi	r25, 0x02	; 2
    167c:	9f 93       	push	r25
    167e:	8f 93       	push	r24
    1680:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>

	OLED_pos(5, 20);
    1684:	64 e1       	ldi	r22, 0x14	; 20
    1686:	85 e0       	ldi	r24, 0x05	; 5
    1688:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_printf("Press joystick");
    168c:	8b e0       	ldi	r24, 0x0B	; 11
    168e:	93 e0       	ldi	r25, 0x03	; 3
    1690:	9f 93       	push	r25
    1692:	8f 93       	push	r24
    1694:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0

}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <MENU_print_game_screen>:

void MENU_print_game_screen(void){
	OLED_reset();
    16aa:	0e 94 2a 05 	call	0xa54	; 0xa54 <OLED_reset>
	OLED_pos(3, 30);
    16ae:	6e e1       	ldi	r22, 0x1E	; 30
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_printf("Play game :D");
    16b6:	8a e1       	ldi	r24, 0x1A	; 26
    16b8:	93 e0       	ldi	r25, 0x03	; 3
    16ba:	9f 93       	push	r25
    16bc:	8f 93       	push	r24
    16be:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	08 95       	ret

000016c8 <MENU_print_game_over_screen>:
}

void MENU_print_game_over_screen(int score){
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	c8 2f       	mov	r28, r24
    16ce:	d9 2f       	mov	r29, r25
	OLED_reset();
    16d0:	0e 94 2a 05 	call	0xa54	; 0xa54 <OLED_reset>
	OLED_pos(3, 30);
    16d4:	6e e1       	ldi	r22, 0x1E	; 30
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_printf("Game over...");
    16dc:	27 e2       	ldi	r18, 0x27	; 39
    16de:	33 e0       	ldi	r19, 0x03	; 3
    16e0:	3f 93       	push	r19
    16e2:	2f 93       	push	r18
    16e4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
	OLED_pos(4, 10);
    16e8:	6a e0       	ldi	r22, 0x0A	; 10
    16ea:	84 e0       	ldi	r24, 0x04	; 4
    16ec:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_printf("You lasted %d seconds", score);
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	84 e3       	ldi	r24, 0x34	; 52
    16f6:	93 e0       	ldi	r25, 0x03	; 3
    16f8:	9f 93       	push	r25
    16fa:	8f 93       	push	r24
    16fc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <MENU_print_cleared_highscores>:

void MENU_print_cleared_highscores(){
	OLED_reset();
    1712:	0e 94 2a 05 	call	0xa54	; 0xa54 <OLED_reset>
	OLED_pos(3, 15);
    1716:	6f e0       	ldi	r22, 0x0F	; 15
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_printf("Highscores cleared");
    171e:	8a e4       	ldi	r24, 0x4A	; 74
    1720:	93 e0       	ldi	r25, 0x03	; 3
    1722:	9f 93       	push	r25
    1724:	8f 93       	push	r24
    1726:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OLED_printf>
    172a:	2f ef       	ldi	r18, 0xFF	; 255
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	9d e1       	ldi	r25, 0x1D	; 29
    1730:	21 50       	subi	r18, 0x01	; 1
    1732:	80 40       	sbci	r24, 0x00	; 0
    1734:	90 40       	sbci	r25, 0x00	; 0
    1736:	e1 f7       	brne	.-8      	; 0x1730 <MENU_print_cleared_highscores+0x1e>
    1738:	00 c0       	rjmp	.+0      	; 0x173a <MENU_print_cleared_highscores+0x28>
    173a:	00 00       	nop
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	08 95       	ret

00001742 <MENU_select_item>:
}



void MENU_select_item(){
	if ((JOY_button() || JOY_get_direction() == RIGHT) && current_child!= NULL){
    1742:	0e 94 25 04 	call	0x84a	; 0x84a <JOY_button>
    1746:	89 2b       	or	r24, r25
    1748:	29 f4       	brne	.+10     	; 0x1754 <MENU_select_item+0x12>
    174a:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	09 f0       	breq	.+2      	; 0x1754 <MENU_select_item+0x12>
    1752:	4e c0       	rjmp	.+156    	; 0x17f0 <MENU_select_item+0xae>
    1754:	e0 91 da 03 	lds	r30, 0x03DA
    1758:	f0 91 db 03 	lds	r31, 0x03DB
    175c:	30 97       	sbiw	r30, 0x00	; 0
    175e:	09 f4       	brne	.+2      	; 0x1762 <MENU_select_item+0x20>
    1760:	47 c0       	rjmp	.+142    	; 0x17f0 <MENU_select_item+0xae>
		if (current_child->child[0] != NULL){
    1762:	84 81       	ldd	r24, Z+4	; 0x04
    1764:	95 81       	ldd	r25, Z+5	; 0x05
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	89 f0       	breq	.+34     	; 0x178c <MENU_select_item+0x4a>
			current_menu = current_child;
    176a:	f0 93 d9 03 	sts	0x03D9, r31
    176e:	e0 93 d8 03 	sts	0x03D8, r30
			current_child = current_child->child[0];
    1772:	90 93 db 03 	sts	0x03DB, r25
    1776:	80 93 da 03 	sts	0x03DA, r24
			line = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	90 93 d7 03 	sts	0x03D7, r25
    1782:	80 93 d6 03 	sts	0x03D6, r24
			MENU_print_menu();
    1786:	0e 94 44 0a 	call	0x1488	; 0x1488 <MENU_print_menu>
    178a:	2a c0       	rjmp	.+84     	; 0x17e0 <MENU_select_item+0x9e>
		}
		else if (current_child->functionPtr != NULL){
    178c:	04 88       	ldd	r0, Z+20	; 0x14
    178e:	f5 89       	ldd	r31, Z+21	; 0x15
    1790:	e0 2d       	mov	r30, r0
    1792:	30 97       	sbiw	r30, 0x00	; 0
    1794:	29 f1       	breq	.+74     	; 0x17e0 <MENU_select_item+0x9e>
			current_child->functionPtr();
    1796:	09 95       	icall
			if(current_child == &clear_highscores){
    1798:	80 91 da 03 	lds	r24, 0x03DA
    179c:	90 91 db 03 	lds	r25, 0x03DB
    17a0:	21 e0       	ldi	r18, 0x01	; 1
    17a2:	86 38       	cpi	r24, 0x86	; 134
    17a4:	92 07       	cpc	r25, r18
    17a6:	29 f4       	brne	.+10     	; 0x17b2 <MENU_select_item+0x70>
				MENU_print_cleared_highscores();
    17a8:	0e 94 89 0b 	call	0x1712	; 0x1712 <MENU_print_cleared_highscores>
				MENU_print_menu();
    17ac:	0e 94 44 0a 	call	0x1488	; 0x1488 <MENU_print_menu>
    17b0:	17 c0       	rjmp	.+46     	; 0x17e0 <MENU_select_item+0x9e>
			}
			else if(current_child == &highscores){
    17b2:	84 5f       	subi	r24, 0xF4	; 244
    17b4:	91 40       	sbci	r25, 0x01	; 1
    17b6:	a1 f4       	brne	.+40     	; 0x17e0 <MENU_select_item+0x9e>
				current_menu = current_child;
    17b8:	84 ef       	ldi	r24, 0xF4	; 244
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	90 93 d9 03 	sts	0x03D9, r25
    17c0:	80 93 d8 03 	sts	0x03D8, r24
				current_child = current_child->child[0];
    17c4:	80 91 f8 01 	lds	r24, 0x01F8
    17c8:	90 91 f9 01 	lds	r25, 0x01F9
    17cc:	90 93 db 03 	sts	0x03DB, r25
    17d0:	80 93 da 03 	sts	0x03DA, r24
				line = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	90 93 d7 03 	sts	0x03D7, r25
    17dc:	80 93 d6 03 	sts	0x03D6, r24
			}
		}
		while(JOY_button() || JOY_get_direction() == RIGHT);
    17e0:	0e 94 25 04 	call	0x84a	; 0x84a <JOY_button>
    17e4:	89 2b       	or	r24, r25
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <MENU_select_item+0x9e>
    17e8:	0e 94 95 04 	call	0x92a	; 0x92a <JOY_get_direction>
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	c1 f3       	breq	.-16     	; 0x17e0 <MENU_select_item+0x9e>
    17f0:	08 95       	ret

000017f2 <STATE_OPTION_set>:

state_t state;
int speed;

void STATE_OPTION_set(state_t new_state){
	state = new_state;
    17f2:	80 93 dc 03 	sts	0x03DC, r24
    17f6:	08 95       	ret

000017f8 <STATE_OPTION_get>:
}

state_t STATE_OPTION_get(void){
	return state;
}
    17f8:	80 91 dc 03 	lds	r24, 0x03DC
    17fc:	08 95       	ret

000017fe <STATE_OPTION_set_speed>:

void STATE_OPTION_set_speed(int new_speed){
	speed = new_speed;
    17fe:	90 93 de 03 	sts	0x03DE, r25
    1802:	80 93 dd 03 	sts	0x03DD, r24
    1806:	08 95       	ret

00001808 <STATE_OPTION_get_speed>:
}

int STATE_OPTION_get_speed(void){
	return speed;
    1808:	80 91 dd 03 	lds	r24, 0x03DD
    180c:	90 91 de 03 	lds	r25, 0x03DE
    1810:	08 95       	ret

00001812 <__divmodhi4>:
    1812:	97 fb       	bst	r25, 7
    1814:	07 2e       	mov	r0, r23
    1816:	16 f4       	brtc	.+4      	; 0x181c <__divmodhi4+0xa>
    1818:	00 94       	com	r0
    181a:	07 d0       	rcall	.+14     	; 0x182a <__divmodhi4_neg1>
    181c:	77 fd       	sbrc	r23, 7
    181e:	09 d0       	rcall	.+18     	; 0x1832 <__divmodhi4_neg2>
    1820:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
    1824:	07 fc       	sbrc	r0, 7
    1826:	05 d0       	rcall	.+10     	; 0x1832 <__divmodhi4_neg2>
    1828:	3e f4       	brtc	.+14     	; 0x1838 <__divmodhi4_exit>

0000182a <__divmodhi4_neg1>:
    182a:	90 95       	com	r25
    182c:	81 95       	neg	r24
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	08 95       	ret

00001832 <__divmodhi4_neg2>:
    1832:	70 95       	com	r23
    1834:	61 95       	neg	r22
    1836:	7f 4f       	sbci	r23, 0xFF	; 255

00001838 <__divmodhi4_exit>:
    1838:	08 95       	ret

0000183a <__udivmodhi4>:
    183a:	aa 1b       	sub	r26, r26
    183c:	bb 1b       	sub	r27, r27
    183e:	51 e1       	ldi	r21, 0x11	; 17
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <__udivmodhi4_ep>

00001842 <__udivmodhi4_loop>:
    1842:	aa 1f       	adc	r26, r26
    1844:	bb 1f       	adc	r27, r27
    1846:	a6 17       	cp	r26, r22
    1848:	b7 07       	cpc	r27, r23
    184a:	10 f0       	brcs	.+4      	; 0x1850 <__udivmodhi4_ep>
    184c:	a6 1b       	sub	r26, r22
    184e:	b7 0b       	sbc	r27, r23

00001850 <__udivmodhi4_ep>:
    1850:	88 1f       	adc	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	5a 95       	dec	r21
    1856:	a9 f7       	brne	.-22     	; 0x1842 <__udivmodhi4_loop>
    1858:	80 95       	com	r24
    185a:	90 95       	com	r25
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	08 95       	ret

00001862 <fdevopen>:
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
    186c:	8b 01       	movw	r16, r22
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	31 f4       	brne	.+12     	; 0x187e <fdevopen+0x1c>
    1872:	61 15       	cp	r22, r1
    1874:	71 05       	cpc	r23, r1
    1876:	19 f4       	brne	.+6      	; 0x187e <fdevopen+0x1c>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	38 c0       	rjmp	.+112    	; 0x18ee <fdevopen+0x8c>
    187e:	6e e0       	ldi	r22, 0x0E	; 14
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <calloc>
    188a:	fc 01       	movw	r30, r24
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	a1 f3       	breq	.-24     	; 0x1878 <fdevopen+0x16>
    1890:	80 e8       	ldi	r24, 0x80	; 128
    1892:	83 83       	std	Z+3, r24	; 0x03
    1894:	01 15       	cp	r16, r1
    1896:	11 05       	cpc	r17, r1
    1898:	71 f0       	breq	.+28     	; 0x18b6 <fdevopen+0x54>
    189a:	13 87       	std	Z+11, r17	; 0x0b
    189c:	02 87       	std	Z+10, r16	; 0x0a
    189e:	81 e8       	ldi	r24, 0x81	; 129
    18a0:	83 83       	std	Z+3, r24	; 0x03
    18a2:	80 91 df 03 	lds	r24, 0x03DF
    18a6:	90 91 e0 03 	lds	r25, 0x03E0
    18aa:	89 2b       	or	r24, r25
    18ac:	21 f4       	brne	.+8      	; 0x18b6 <fdevopen+0x54>
    18ae:	f0 93 e0 03 	sts	0x03E0, r31
    18b2:	e0 93 df 03 	sts	0x03DF, r30
    18b6:	20 97       	sbiw	r28, 0x00	; 0
    18b8:	c9 f0       	breq	.+50     	; 0x18ec <fdevopen+0x8a>
    18ba:	d1 87       	std	Z+9, r29	; 0x09
    18bc:	c0 87       	std	Z+8, r28	; 0x08
    18be:	83 81       	ldd	r24, Z+3	; 0x03
    18c0:	82 60       	ori	r24, 0x02	; 2
    18c2:	83 83       	std	Z+3, r24	; 0x03
    18c4:	80 91 e1 03 	lds	r24, 0x03E1
    18c8:	90 91 e2 03 	lds	r25, 0x03E2
    18cc:	89 2b       	or	r24, r25
    18ce:	71 f4       	brne	.+28     	; 0x18ec <fdevopen+0x8a>
    18d0:	f0 93 e2 03 	sts	0x03E2, r31
    18d4:	e0 93 e1 03 	sts	0x03E1, r30
    18d8:	80 91 e3 03 	lds	r24, 0x03E3
    18dc:	90 91 e4 03 	lds	r25, 0x03E4
    18e0:	89 2b       	or	r24, r25
    18e2:	21 f4       	brne	.+8      	; 0x18ec <fdevopen+0x8a>
    18e4:	f0 93 e4 03 	sts	0x03E4, r31
    18e8:	e0 93 e3 03 	sts	0x03E3, r30
    18ec:	cf 01       	movw	r24, r30
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <puts>:
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	e0 91 e1 03 	lds	r30, 0x03E1
    1904:	f0 91 e2 03 	lds	r31, 0x03E2
    1908:	23 81       	ldd	r18, Z+3	; 0x03
    190a:	21 ff       	sbrs	r18, 1
    190c:	1b c0       	rjmp	.+54     	; 0x1944 <puts+0x4c>
    190e:	ec 01       	movw	r28, r24
    1910:	00 e0       	ldi	r16, 0x00	; 0
    1912:	10 e0       	ldi	r17, 0x00	; 0
    1914:	89 91       	ld	r24, Y+
    1916:	60 91 e1 03 	lds	r22, 0x03E1
    191a:	70 91 e2 03 	lds	r23, 0x03E2
    191e:	db 01       	movw	r26, r22
    1920:	18 96       	adiw	r26, 0x08	; 8
    1922:	ed 91       	ld	r30, X+
    1924:	fc 91       	ld	r31, X
    1926:	19 97       	sbiw	r26, 0x09	; 9
    1928:	88 23       	and	r24, r24
    192a:	31 f0       	breq	.+12     	; 0x1938 <puts+0x40>
    192c:	09 95       	icall
    192e:	89 2b       	or	r24, r25
    1930:	89 f3       	breq	.-30     	; 0x1914 <puts+0x1c>
    1932:	0f ef       	ldi	r16, 0xFF	; 255
    1934:	1f ef       	ldi	r17, 0xFF	; 255
    1936:	ee cf       	rjmp	.-36     	; 0x1914 <puts+0x1c>
    1938:	8a e0       	ldi	r24, 0x0A	; 10
    193a:	09 95       	icall
    193c:	89 2b       	or	r24, r25
    193e:	11 f4       	brne	.+4      	; 0x1944 <puts+0x4c>
    1940:	c8 01       	movw	r24, r16
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <puts+0x50>
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	9f ef       	ldi	r25, 0xFF	; 255
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	08 95       	ret

00001952 <vfprintf>:
    1952:	ac e0       	ldi	r26, 0x0C	; 12
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef ea       	ldi	r30, 0xAF	; 175
    1958:	fc e0       	ldi	r31, 0x0C	; 12
    195a:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__>
    195e:	7c 01       	movw	r14, r24
    1960:	6b 01       	movw	r12, r22
    1962:	8a 01       	movw	r16, r20
    1964:	fc 01       	movw	r30, r24
    1966:	17 82       	std	Z+7, r1	; 0x07
    1968:	16 82       	std	Z+6, r1	; 0x06
    196a:	83 81       	ldd	r24, Z+3	; 0x03
    196c:	81 ff       	sbrs	r24, 1
    196e:	bd c1       	rjmp	.+890    	; 0x1cea <vfprintf+0x398>
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	4c 01       	movw	r8, r24
    1976:	f7 01       	movw	r30, r14
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	f6 01       	movw	r30, r12
    197c:	93 fd       	sbrc	r25, 3
    197e:	85 91       	lpm	r24, Z+
    1980:	93 ff       	sbrs	r25, 3
    1982:	81 91       	ld	r24, Z+
    1984:	6f 01       	movw	r12, r30
    1986:	88 23       	and	r24, r24
    1988:	09 f4       	brne	.+2      	; 0x198c <vfprintf+0x3a>
    198a:	ab c1       	rjmp	.+854    	; 0x1ce2 <vfprintf+0x390>
    198c:	85 32       	cpi	r24, 0x25	; 37
    198e:	39 f4       	brne	.+14     	; 0x199e <vfprintf+0x4c>
    1990:	93 fd       	sbrc	r25, 3
    1992:	85 91       	lpm	r24, Z+
    1994:	93 ff       	sbrs	r25, 3
    1996:	81 91       	ld	r24, Z+
    1998:	6f 01       	movw	r12, r30
    199a:	85 32       	cpi	r24, 0x25	; 37
    199c:	29 f4       	brne	.+10     	; 0x19a8 <vfprintf+0x56>
    199e:	b7 01       	movw	r22, r14
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    19a6:	e7 cf       	rjmp	.-50     	; 0x1976 <vfprintf+0x24>
    19a8:	51 2c       	mov	r5, r1
    19aa:	31 2c       	mov	r3, r1
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	20 32       	cpi	r18, 0x20	; 32
    19b0:	a0 f4       	brcc	.+40     	; 0x19da <vfprintf+0x88>
    19b2:	8b 32       	cpi	r24, 0x2B	; 43
    19b4:	69 f0       	breq	.+26     	; 0x19d0 <vfprintf+0x7e>
    19b6:	30 f4       	brcc	.+12     	; 0x19c4 <vfprintf+0x72>
    19b8:	80 32       	cpi	r24, 0x20	; 32
    19ba:	59 f0       	breq	.+22     	; 0x19d2 <vfprintf+0x80>
    19bc:	83 32       	cpi	r24, 0x23	; 35
    19be:	69 f4       	brne	.+26     	; 0x19da <vfprintf+0x88>
    19c0:	20 61       	ori	r18, 0x10	; 16
    19c2:	2c c0       	rjmp	.+88     	; 0x1a1c <vfprintf+0xca>
    19c4:	8d 32       	cpi	r24, 0x2D	; 45
    19c6:	39 f0       	breq	.+14     	; 0x19d6 <vfprintf+0x84>
    19c8:	80 33       	cpi	r24, 0x30	; 48
    19ca:	39 f4       	brne	.+14     	; 0x19da <vfprintf+0x88>
    19cc:	21 60       	ori	r18, 0x01	; 1
    19ce:	26 c0       	rjmp	.+76     	; 0x1a1c <vfprintf+0xca>
    19d0:	22 60       	ori	r18, 0x02	; 2
    19d2:	24 60       	ori	r18, 0x04	; 4
    19d4:	23 c0       	rjmp	.+70     	; 0x1a1c <vfprintf+0xca>
    19d6:	28 60       	ori	r18, 0x08	; 8
    19d8:	21 c0       	rjmp	.+66     	; 0x1a1c <vfprintf+0xca>
    19da:	27 fd       	sbrc	r18, 7
    19dc:	27 c0       	rjmp	.+78     	; 0x1a2c <vfprintf+0xda>
    19de:	30 ed       	ldi	r19, 0xD0	; 208
    19e0:	38 0f       	add	r19, r24
    19e2:	3a 30       	cpi	r19, 0x0A	; 10
    19e4:	78 f4       	brcc	.+30     	; 0x1a04 <vfprintf+0xb2>
    19e6:	26 ff       	sbrs	r18, 6
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <vfprintf+0xa4>
    19ea:	fa e0       	ldi	r31, 0x0A	; 10
    19ec:	5f 9e       	mul	r5, r31
    19ee:	30 0d       	add	r19, r0
    19f0:	11 24       	eor	r1, r1
    19f2:	53 2e       	mov	r5, r19
    19f4:	13 c0       	rjmp	.+38     	; 0x1a1c <vfprintf+0xca>
    19f6:	8a e0       	ldi	r24, 0x0A	; 10
    19f8:	38 9e       	mul	r3, r24
    19fa:	30 0d       	add	r19, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	33 2e       	mov	r3, r19
    1a00:	20 62       	ori	r18, 0x20	; 32
    1a02:	0c c0       	rjmp	.+24     	; 0x1a1c <vfprintf+0xca>
    1a04:	8e 32       	cpi	r24, 0x2E	; 46
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <vfprintf+0xbe>
    1a08:	26 fd       	sbrc	r18, 6
    1a0a:	6b c1       	rjmp	.+726    	; 0x1ce2 <vfprintf+0x390>
    1a0c:	20 64       	ori	r18, 0x40	; 64
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <vfprintf+0xca>
    1a10:	8c 36       	cpi	r24, 0x6C	; 108
    1a12:	11 f4       	brne	.+4      	; 0x1a18 <vfprintf+0xc6>
    1a14:	20 68       	ori	r18, 0x80	; 128
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <vfprintf+0xca>
    1a18:	88 36       	cpi	r24, 0x68	; 104
    1a1a:	41 f4       	brne	.+16     	; 0x1a2c <vfprintf+0xda>
    1a1c:	f6 01       	movw	r30, r12
    1a1e:	93 fd       	sbrc	r25, 3
    1a20:	85 91       	lpm	r24, Z+
    1a22:	93 ff       	sbrs	r25, 3
    1a24:	81 91       	ld	r24, Z+
    1a26:	6f 01       	movw	r12, r30
    1a28:	81 11       	cpse	r24, r1
    1a2a:	c1 cf       	rjmp	.-126    	; 0x19ae <vfprintf+0x5c>
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	9f 7d       	andi	r25, 0xDF	; 223
    1a30:	95 54       	subi	r25, 0x45	; 69
    1a32:	93 30       	cpi	r25, 0x03	; 3
    1a34:	28 f4       	brcc	.+10     	; 0x1a40 <vfprintf+0xee>
    1a36:	0c 5f       	subi	r16, 0xFC	; 252
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	ff e3       	ldi	r31, 0x3F	; 63
    1a3c:	f9 83       	std	Y+1, r31	; 0x01
    1a3e:	0d c0       	rjmp	.+26     	; 0x1a5a <vfprintf+0x108>
    1a40:	83 36       	cpi	r24, 0x63	; 99
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <vfprintf+0xfe>
    1a44:	83 37       	cpi	r24, 0x73	; 115
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <vfprintf+0x112>
    1a48:	83 35       	cpi	r24, 0x53	; 83
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <vfprintf+0xfc>
    1a4c:	5b c0       	rjmp	.+182    	; 0x1b04 <vfprintf+0x1b2>
    1a4e:	22 c0       	rjmp	.+68     	; 0x1a94 <vfprintf+0x142>
    1a50:	f8 01       	movw	r30, r16
    1a52:	80 81       	ld	r24, Z
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	0e 5f       	subi	r16, 0xFE	; 254
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	44 24       	eor	r4, r4
    1a5c:	43 94       	inc	r4
    1a5e:	51 2c       	mov	r5, r1
    1a60:	54 01       	movw	r10, r8
    1a62:	15 c0       	rjmp	.+42     	; 0x1a8e <vfprintf+0x13c>
    1a64:	38 01       	movw	r6, r16
    1a66:	f2 e0       	ldi	r31, 0x02	; 2
    1a68:	6f 0e       	add	r6, r31
    1a6a:	71 1c       	adc	r7, r1
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	a0 80       	ld	r10, Z
    1a70:	b1 80       	ldd	r11, Z+1	; 0x01
    1a72:	26 ff       	sbrs	r18, 6
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <vfprintf+0x12a>
    1a76:	65 2d       	mov	r22, r5
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <vfprintf+0x12e>
    1a7c:	6f ef       	ldi	r22, 0xFF	; 255
    1a7e:	7f ef       	ldi	r23, 0xFF	; 255
    1a80:	c5 01       	movw	r24, r10
    1a82:	2c 87       	std	Y+12, r18	; 0x0c
    1a84:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <strnlen>
    1a88:	2c 01       	movw	r4, r24
    1a8a:	83 01       	movw	r16, r6
    1a8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a8e:	2f 77       	andi	r18, 0x7F	; 127
    1a90:	22 2e       	mov	r2, r18
    1a92:	17 c0       	rjmp	.+46     	; 0x1ac2 <vfprintf+0x170>
    1a94:	38 01       	movw	r6, r16
    1a96:	f2 e0       	ldi	r31, 0x02	; 2
    1a98:	6f 0e       	add	r6, r31
    1a9a:	71 1c       	adc	r7, r1
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	a0 80       	ld	r10, Z
    1aa0:	b1 80       	ldd	r11, Z+1	; 0x01
    1aa2:	26 ff       	sbrs	r18, 6
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <vfprintf+0x15a>
    1aa6:	65 2d       	mov	r22, r5
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <vfprintf+0x15e>
    1aac:	6f ef       	ldi	r22, 0xFF	; 255
    1aae:	7f ef       	ldi	r23, 0xFF	; 255
    1ab0:	c5 01       	movw	r24, r10
    1ab2:	2c 87       	std	Y+12, r18	; 0x0c
    1ab4:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <strnlen_P>
    1ab8:	2c 01       	movw	r4, r24
    1aba:	2c 85       	ldd	r18, Y+12	; 0x0c
    1abc:	20 68       	ori	r18, 0x80	; 128
    1abe:	22 2e       	mov	r2, r18
    1ac0:	83 01       	movw	r16, r6
    1ac2:	23 fc       	sbrc	r2, 3
    1ac4:	1b c0       	rjmp	.+54     	; 0x1afc <vfprintf+0x1aa>
    1ac6:	83 2d       	mov	r24, r3
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	48 16       	cp	r4, r24
    1acc:	59 06       	cpc	r5, r25
    1ace:	b0 f4       	brcc	.+44     	; 0x1afc <vfprintf+0x1aa>
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    1ada:	3a 94       	dec	r3
    1adc:	f4 cf       	rjmp	.-24     	; 0x1ac6 <vfprintf+0x174>
    1ade:	f5 01       	movw	r30, r10
    1ae0:	27 fc       	sbrc	r2, 7
    1ae2:	85 91       	lpm	r24, Z+
    1ae4:	27 fe       	sbrs	r2, 7
    1ae6:	81 91       	ld	r24, Z+
    1ae8:	5f 01       	movw	r10, r30
    1aea:	b7 01       	movw	r22, r14
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    1af2:	31 10       	cpse	r3, r1
    1af4:	3a 94       	dec	r3
    1af6:	f1 e0       	ldi	r31, 0x01	; 1
    1af8:	4f 1a       	sub	r4, r31
    1afa:	51 08       	sbc	r5, r1
    1afc:	41 14       	cp	r4, r1
    1afe:	51 04       	cpc	r5, r1
    1b00:	71 f7       	brne	.-36     	; 0x1ade <vfprintf+0x18c>
    1b02:	e5 c0       	rjmp	.+458    	; 0x1cce <vfprintf+0x37c>
    1b04:	84 36       	cpi	r24, 0x64	; 100
    1b06:	11 f0       	breq	.+4      	; 0x1b0c <vfprintf+0x1ba>
    1b08:	89 36       	cpi	r24, 0x69	; 105
    1b0a:	39 f5       	brne	.+78     	; 0x1b5a <vfprintf+0x208>
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	27 ff       	sbrs	r18, 7
    1b10:	07 c0       	rjmp	.+14     	; 0x1b20 <vfprintf+0x1ce>
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	0c 5f       	subi	r16, 0xFC	; 252
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	08 c0       	rjmp	.+16     	; 0x1b30 <vfprintf+0x1de>
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	88 27       	eor	r24, r24
    1b26:	77 fd       	sbrc	r23, 7
    1b28:	80 95       	com	r24
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	0e 5f       	subi	r16, 0xFE	; 254
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	2f 76       	andi	r18, 0x6F	; 111
    1b32:	b2 2e       	mov	r11, r18
    1b34:	97 ff       	sbrs	r25, 7
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <vfprintf+0x1f8>
    1b38:	90 95       	com	r25
    1b3a:	80 95       	com	r24
    1b3c:	70 95       	com	r23
    1b3e:	61 95       	neg	r22
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	8f 4f       	sbci	r24, 0xFF	; 255
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	20 68       	ori	r18, 0x80	; 128
    1b48:	b2 2e       	mov	r11, r18
    1b4a:	2a e0       	ldi	r18, 0x0A	; 10
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	a4 01       	movw	r20, r8
    1b50:	0e 94 0d 10 	call	0x201a	; 0x201a <__ultoa_invert>
    1b54:	a8 2e       	mov	r10, r24
    1b56:	a8 18       	sub	r10, r8
    1b58:	44 c0       	rjmp	.+136    	; 0x1be2 <vfprintf+0x290>
    1b5a:	85 37       	cpi	r24, 0x75	; 117
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <vfprintf+0x216>
    1b5e:	2f 7e       	andi	r18, 0xEF	; 239
    1b60:	b2 2e       	mov	r11, r18
    1b62:	2a e0       	ldi	r18, 0x0A	; 10
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	25 c0       	rjmp	.+74     	; 0x1bb2 <vfprintf+0x260>
    1b68:	f2 2f       	mov	r31, r18
    1b6a:	f9 7f       	andi	r31, 0xF9	; 249
    1b6c:	bf 2e       	mov	r11, r31
    1b6e:	8f 36       	cpi	r24, 0x6F	; 111
    1b70:	c1 f0       	breq	.+48     	; 0x1ba2 <vfprintf+0x250>
    1b72:	18 f4       	brcc	.+6      	; 0x1b7a <vfprintf+0x228>
    1b74:	88 35       	cpi	r24, 0x58	; 88
    1b76:	79 f0       	breq	.+30     	; 0x1b96 <vfprintf+0x244>
    1b78:	b4 c0       	rjmp	.+360    	; 0x1ce2 <vfprintf+0x390>
    1b7a:	80 37       	cpi	r24, 0x70	; 112
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <vfprintf+0x232>
    1b7e:	88 37       	cpi	r24, 0x78	; 120
    1b80:	21 f0       	breq	.+8      	; 0x1b8a <vfprintf+0x238>
    1b82:	af c0       	rjmp	.+350    	; 0x1ce2 <vfprintf+0x390>
    1b84:	2f 2f       	mov	r18, r31
    1b86:	20 61       	ori	r18, 0x10	; 16
    1b88:	b2 2e       	mov	r11, r18
    1b8a:	b4 fe       	sbrs	r11, 4
    1b8c:	0d c0       	rjmp	.+26     	; 0x1ba8 <vfprintf+0x256>
    1b8e:	8b 2d       	mov	r24, r11
    1b90:	84 60       	ori	r24, 0x04	; 4
    1b92:	b8 2e       	mov	r11, r24
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <vfprintf+0x256>
    1b96:	24 ff       	sbrs	r18, 4
    1b98:	0a c0       	rjmp	.+20     	; 0x1bae <vfprintf+0x25c>
    1b9a:	9f 2f       	mov	r25, r31
    1b9c:	96 60       	ori	r25, 0x06	; 6
    1b9e:	b9 2e       	mov	r11, r25
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <vfprintf+0x25c>
    1ba2:	28 e0       	ldi	r18, 0x08	; 8
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	05 c0       	rjmp	.+10     	; 0x1bb2 <vfprintf+0x260>
    1ba8:	20 e1       	ldi	r18, 0x10	; 16
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x260>
    1bae:	20 e1       	ldi	r18, 0x10	; 16
    1bb0:	32 e0       	ldi	r19, 0x02	; 2
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	b7 fe       	sbrs	r11, 7
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <vfprintf+0x274>
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	0c 5f       	subi	r16, 0xFC	; 252
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <vfprintf+0x280>
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 5f       	subi	r16, 0xFE	; 254
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	a4 01       	movw	r20, r8
    1bd4:	0e 94 0d 10 	call	0x201a	; 0x201a <__ultoa_invert>
    1bd8:	a8 2e       	mov	r10, r24
    1bda:	a8 18       	sub	r10, r8
    1bdc:	fb 2d       	mov	r31, r11
    1bde:	ff 77       	andi	r31, 0x7F	; 127
    1be0:	bf 2e       	mov	r11, r31
    1be2:	b6 fe       	sbrs	r11, 6
    1be4:	0b c0       	rjmp	.+22     	; 0x1bfc <vfprintf+0x2aa>
    1be6:	2b 2d       	mov	r18, r11
    1be8:	2e 7f       	andi	r18, 0xFE	; 254
    1bea:	a5 14       	cp	r10, r5
    1bec:	50 f4       	brcc	.+20     	; 0x1c02 <vfprintf+0x2b0>
    1bee:	b4 fe       	sbrs	r11, 4
    1bf0:	0a c0       	rjmp	.+20     	; 0x1c06 <vfprintf+0x2b4>
    1bf2:	b2 fc       	sbrc	r11, 2
    1bf4:	08 c0       	rjmp	.+16     	; 0x1c06 <vfprintf+0x2b4>
    1bf6:	2b 2d       	mov	r18, r11
    1bf8:	2e 7e       	andi	r18, 0xEE	; 238
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <vfprintf+0x2b4>
    1bfc:	7a 2c       	mov	r7, r10
    1bfe:	2b 2d       	mov	r18, r11
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <vfprintf+0x2b6>
    1c02:	7a 2c       	mov	r7, r10
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <vfprintf+0x2b6>
    1c06:	75 2c       	mov	r7, r5
    1c08:	24 ff       	sbrs	r18, 4
    1c0a:	0d c0       	rjmp	.+26     	; 0x1c26 <vfprintf+0x2d4>
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ea 0d       	add	r30, r10
    1c10:	f1 1d       	adc	r31, r1
    1c12:	80 81       	ld	r24, Z
    1c14:	80 33       	cpi	r24, 0x30	; 48
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <vfprintf+0x2ca>
    1c18:	29 7e       	andi	r18, 0xE9	; 233
    1c1a:	09 c0       	rjmp	.+18     	; 0x1c2e <vfprintf+0x2dc>
    1c1c:	22 ff       	sbrs	r18, 2
    1c1e:	06 c0       	rjmp	.+12     	; 0x1c2c <vfprintf+0x2da>
    1c20:	73 94       	inc	r7
    1c22:	73 94       	inc	r7
    1c24:	04 c0       	rjmp	.+8      	; 0x1c2e <vfprintf+0x2dc>
    1c26:	82 2f       	mov	r24, r18
    1c28:	86 78       	andi	r24, 0x86	; 134
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <vfprintf+0x2dc>
    1c2c:	73 94       	inc	r7
    1c2e:	23 fd       	sbrc	r18, 3
    1c30:	13 c0       	rjmp	.+38     	; 0x1c58 <vfprintf+0x306>
    1c32:	20 ff       	sbrs	r18, 0
    1c34:	06 c0       	rjmp	.+12     	; 0x1c42 <vfprintf+0x2f0>
    1c36:	5a 2c       	mov	r5, r10
    1c38:	73 14       	cp	r7, r3
    1c3a:	18 f4       	brcc	.+6      	; 0x1c42 <vfprintf+0x2f0>
    1c3c:	53 0c       	add	r5, r3
    1c3e:	57 18       	sub	r5, r7
    1c40:	73 2c       	mov	r7, r3
    1c42:	73 14       	cp	r7, r3
    1c44:	68 f4       	brcc	.+26     	; 0x1c60 <vfprintf+0x30e>
    1c46:	b7 01       	movw	r22, r14
    1c48:	80 e2       	ldi	r24, 0x20	; 32
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	2c 87       	std	Y+12, r18	; 0x0c
    1c4e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    1c52:	73 94       	inc	r7
    1c54:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c56:	f5 cf       	rjmp	.-22     	; 0x1c42 <vfprintf+0x2f0>
    1c58:	73 14       	cp	r7, r3
    1c5a:	10 f4       	brcc	.+4      	; 0x1c60 <vfprintf+0x30e>
    1c5c:	37 18       	sub	r3, r7
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <vfprintf+0x310>
    1c60:	31 2c       	mov	r3, r1
    1c62:	24 ff       	sbrs	r18, 4
    1c64:	12 c0       	rjmp	.+36     	; 0x1c8a <vfprintf+0x338>
    1c66:	b7 01       	movw	r22, r14
    1c68:	80 e3       	ldi	r24, 0x30	; 48
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	2c 87       	std	Y+12, r18	; 0x0c
    1c6e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    1c72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c74:	22 ff       	sbrs	r18, 2
    1c76:	17 c0       	rjmp	.+46     	; 0x1ca6 <vfprintf+0x354>
    1c78:	21 ff       	sbrs	r18, 1
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <vfprintf+0x330>
    1c7c:	88 e5       	ldi	r24, 0x58	; 88
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <vfprintf+0x334>
    1c82:	88 e7       	ldi	r24, 0x78	; 120
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	b7 01       	movw	r22, r14
    1c88:	0c c0       	rjmp	.+24     	; 0x1ca2 <vfprintf+0x350>
    1c8a:	82 2f       	mov	r24, r18
    1c8c:	86 78       	andi	r24, 0x86	; 134
    1c8e:	59 f0       	breq	.+22     	; 0x1ca6 <vfprintf+0x354>
    1c90:	21 fd       	sbrc	r18, 1
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <vfprintf+0x346>
    1c94:	80 e2       	ldi	r24, 0x20	; 32
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <vfprintf+0x348>
    1c98:	8b e2       	ldi	r24, 0x2B	; 43
    1c9a:	27 fd       	sbrc	r18, 7
    1c9c:	8d e2       	ldi	r24, 0x2D	; 45
    1c9e:	b7 01       	movw	r22, r14
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    1ca6:	a5 14       	cp	r10, r5
    1ca8:	38 f4       	brcc	.+14     	; 0x1cb8 <vfprintf+0x366>
    1caa:	b7 01       	movw	r22, r14
    1cac:	80 e3       	ldi	r24, 0x30	; 48
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    1cb4:	5a 94       	dec	r5
    1cb6:	f7 cf       	rjmp	.-18     	; 0x1ca6 <vfprintf+0x354>
    1cb8:	aa 94       	dec	r10
    1cba:	f4 01       	movw	r30, r8
    1cbc:	ea 0d       	add	r30, r10
    1cbe:	f1 1d       	adc	r31, r1
    1cc0:	80 81       	ld	r24, Z
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    1cca:	a1 10       	cpse	r10, r1
    1ccc:	f5 cf       	rjmp	.-22     	; 0x1cb8 <vfprintf+0x366>
    1cce:	33 20       	and	r3, r3
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <vfprintf+0x382>
    1cd2:	51 ce       	rjmp	.-862    	; 0x1976 <vfprintf+0x24>
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	80 e2       	ldi	r24, 0x20	; 32
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <fputc>
    1cde:	3a 94       	dec	r3
    1ce0:	f6 cf       	rjmp	.-20     	; 0x1cce <vfprintf+0x37c>
    1ce2:	f7 01       	movw	r30, r14
    1ce4:	86 81       	ldd	r24, Z+6	; 0x06
    1ce6:	97 81       	ldd	r25, Z+7	; 0x07
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <vfprintf+0x39c>
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	9f ef       	ldi	r25, 0xFF	; 255
    1cee:	2c 96       	adiw	r28, 0x0c	; 12
    1cf0:	e2 e1       	ldi	r30, 0x12	; 18
    1cf2:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__>

00001cf6 <calloc>:
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	86 9f       	mul	r24, r22
    1d00:	80 01       	movw	r16, r0
    1d02:	87 9f       	mul	r24, r23
    1d04:	10 0d       	add	r17, r0
    1d06:	96 9f       	mul	r25, r22
    1d08:	10 0d       	add	r17, r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <malloc>
    1d12:	ec 01       	movw	r28, r24
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	29 f0       	breq	.+10     	; 0x1d22 <calloc+0x2c>
    1d18:	a8 01       	movw	r20, r16
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <memset>
    1d22:	ce 01       	movw	r24, r28
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	08 95       	ret

00001d2e <malloc>:
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	82 30       	cpi	r24, 0x02	; 2
    1d34:	91 05       	cpc	r25, r1
    1d36:	10 f4       	brcc	.+4      	; 0x1d3c <malloc+0xe>
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	e0 91 e7 03 	lds	r30, 0x03E7
    1d40:	f0 91 e8 03 	lds	r31, 0x03E8
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	30 97       	sbiw	r30, 0x00	; 0
    1d4e:	39 f1       	breq	.+78     	; 0x1d9e <malloc+0x70>
    1d50:	40 81       	ld	r20, Z
    1d52:	51 81       	ldd	r21, Z+1	; 0x01
    1d54:	48 17       	cp	r20, r24
    1d56:	59 07       	cpc	r21, r25
    1d58:	b8 f0       	brcs	.+46     	; 0x1d88 <malloc+0x5a>
    1d5a:	48 17       	cp	r20, r24
    1d5c:	59 07       	cpc	r21, r25
    1d5e:	71 f4       	brne	.+28     	; 0x1d7c <malloc+0x4e>
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	10 97       	sbiw	r26, 0x00	; 0
    1d66:	29 f0       	breq	.+10     	; 0x1d72 <malloc+0x44>
    1d68:	13 96       	adiw	r26, 0x03	; 3
    1d6a:	9c 93       	st	X, r25
    1d6c:	8e 93       	st	-X, r24
    1d6e:	12 97       	sbiw	r26, 0x02	; 2
    1d70:	2c c0       	rjmp	.+88     	; 0x1dca <malloc+0x9c>
    1d72:	90 93 e8 03 	sts	0x03E8, r25
    1d76:	80 93 e7 03 	sts	0x03E7, r24
    1d7a:	27 c0       	rjmp	.+78     	; 0x1dca <malloc+0x9c>
    1d7c:	21 15       	cp	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	31 f0       	breq	.+12     	; 0x1d8e <malloc+0x60>
    1d82:	42 17       	cp	r20, r18
    1d84:	53 07       	cpc	r21, r19
    1d86:	18 f0       	brcs	.+6      	; 0x1d8e <malloc+0x60>
    1d88:	a9 01       	movw	r20, r18
    1d8a:	db 01       	movw	r26, r22
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <malloc+0x62>
    1d8e:	ef 01       	movw	r28, r30
    1d90:	9a 01       	movw	r18, r20
    1d92:	bd 01       	movw	r22, r26
    1d94:	df 01       	movw	r26, r30
    1d96:	02 80       	ldd	r0, Z+2	; 0x02
    1d98:	f3 81       	ldd	r31, Z+3	; 0x03
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	d7 cf       	rjmp	.-82     	; 0x1d4c <malloc+0x1e>
    1d9e:	21 15       	cp	r18, r1
    1da0:	31 05       	cpc	r19, r1
    1da2:	f9 f0       	breq	.+62     	; 0x1de2 <malloc+0xb4>
    1da4:	28 1b       	sub	r18, r24
    1da6:	39 0b       	sbc	r19, r25
    1da8:	24 30       	cpi	r18, 0x04	; 4
    1daa:	31 05       	cpc	r19, r1
    1dac:	80 f4       	brcc	.+32     	; 0x1dce <malloc+0xa0>
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	61 15       	cp	r22, r1
    1db4:	71 05       	cpc	r23, r1
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <malloc+0x92>
    1db8:	fb 01       	movw	r30, r22
    1dba:	93 83       	std	Z+3, r25	; 0x03
    1dbc:	82 83       	std	Z+2, r24	; 0x02
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <malloc+0x9a>
    1dc0:	90 93 e8 03 	sts	0x03E8, r25
    1dc4:	80 93 e7 03 	sts	0x03E7, r24
    1dc8:	fe 01       	movw	r30, r28
    1dca:	32 96       	adiw	r30, 0x02	; 2
    1dcc:	44 c0       	rjmp	.+136    	; 0x1e56 <malloc+0x128>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	81 93       	st	Z+, r24
    1dd6:	91 93       	st	Z+, r25
    1dd8:	22 50       	subi	r18, 0x02	; 2
    1dda:	31 09       	sbc	r19, r1
    1ddc:	39 83       	std	Y+1, r19	; 0x01
    1dde:	28 83       	st	Y, r18
    1de0:	3a c0       	rjmp	.+116    	; 0x1e56 <malloc+0x128>
    1de2:	20 91 e5 03 	lds	r18, 0x03E5
    1de6:	30 91 e6 03 	lds	r19, 0x03E6
    1dea:	23 2b       	or	r18, r19
    1dec:	41 f4       	brne	.+16     	; 0x1dfe <malloc+0xd0>
    1dee:	20 91 02 01 	lds	r18, 0x0102
    1df2:	30 91 03 01 	lds	r19, 0x0103
    1df6:	30 93 e6 03 	sts	0x03E6, r19
    1dfa:	20 93 e5 03 	sts	0x03E5, r18
    1dfe:	20 91 00 01 	lds	r18, 0x0100
    1e02:	30 91 01 01 	lds	r19, 0x0101
    1e06:	21 15       	cp	r18, r1
    1e08:	31 05       	cpc	r19, r1
    1e0a:	41 f4       	brne	.+16     	; 0x1e1c <malloc+0xee>
    1e0c:	2d b7       	in	r18, 0x3d	; 61
    1e0e:	3e b7       	in	r19, 0x3e	; 62
    1e10:	40 91 04 01 	lds	r20, 0x0104
    1e14:	50 91 05 01 	lds	r21, 0x0105
    1e18:	24 1b       	sub	r18, r20
    1e1a:	35 0b       	sbc	r19, r21
    1e1c:	e0 91 e5 03 	lds	r30, 0x03E5
    1e20:	f0 91 e6 03 	lds	r31, 0x03E6
    1e24:	e2 17       	cp	r30, r18
    1e26:	f3 07       	cpc	r31, r19
    1e28:	a0 f4       	brcc	.+40     	; 0x1e52 <malloc+0x124>
    1e2a:	2e 1b       	sub	r18, r30
    1e2c:	3f 0b       	sbc	r19, r31
    1e2e:	28 17       	cp	r18, r24
    1e30:	39 07       	cpc	r19, r25
    1e32:	78 f0       	brcs	.+30     	; 0x1e52 <malloc+0x124>
    1e34:	ac 01       	movw	r20, r24
    1e36:	4e 5f       	subi	r20, 0xFE	; 254
    1e38:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3a:	24 17       	cp	r18, r20
    1e3c:	35 07       	cpc	r19, r21
    1e3e:	48 f0       	brcs	.+18     	; 0x1e52 <malloc+0x124>
    1e40:	4e 0f       	add	r20, r30
    1e42:	5f 1f       	adc	r21, r31
    1e44:	50 93 e6 03 	sts	0x03E6, r21
    1e48:	40 93 e5 03 	sts	0x03E5, r20
    1e4c:	81 93       	st	Z+, r24
    1e4e:	91 93       	st	Z+, r25
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <malloc+0x128>
    1e52:	e0 e0       	ldi	r30, 0x00	; 0
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	cf 01       	movw	r24, r30
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

00001e5e <free>:
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <free+0xa>
    1e66:	87 c0       	rjmp	.+270    	; 0x1f76 <free+0x118>
    1e68:	fc 01       	movw	r30, r24
    1e6a:	32 97       	sbiw	r30, 0x02	; 2
    1e6c:	13 82       	std	Z+3, r1	; 0x03
    1e6e:	12 82       	std	Z+2, r1	; 0x02
    1e70:	c0 91 e7 03 	lds	r28, 0x03E7
    1e74:	d0 91 e8 03 	lds	r29, 0x03E8
    1e78:	20 97       	sbiw	r28, 0x00	; 0
    1e7a:	81 f4       	brne	.+32     	; 0x1e9c <free+0x3e>
    1e7c:	20 81       	ld	r18, Z
    1e7e:	31 81       	ldd	r19, Z+1	; 0x01
    1e80:	28 0f       	add	r18, r24
    1e82:	39 1f       	adc	r19, r25
    1e84:	80 91 e5 03 	lds	r24, 0x03E5
    1e88:	90 91 e6 03 	lds	r25, 0x03E6
    1e8c:	82 17       	cp	r24, r18
    1e8e:	93 07       	cpc	r25, r19
    1e90:	79 f5       	brne	.+94     	; 0x1ef0 <free+0x92>
    1e92:	f0 93 e6 03 	sts	0x03E6, r31
    1e96:	e0 93 e5 03 	sts	0x03E5, r30
    1e9a:	6d c0       	rjmp	.+218    	; 0x1f76 <free+0x118>
    1e9c:	de 01       	movw	r26, r28
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	ae 17       	cp	r26, r30
    1ea4:	bf 07       	cpc	r27, r31
    1ea6:	50 f4       	brcc	.+20     	; 0x1ebc <free+0x5e>
    1ea8:	12 96       	adiw	r26, 0x02	; 2
    1eaa:	4d 91       	ld	r20, X+
    1eac:	5c 91       	ld	r21, X
    1eae:	13 97       	sbiw	r26, 0x03	; 3
    1eb0:	9d 01       	movw	r18, r26
    1eb2:	41 15       	cp	r20, r1
    1eb4:	51 05       	cpc	r21, r1
    1eb6:	09 f1       	breq	.+66     	; 0x1efa <free+0x9c>
    1eb8:	da 01       	movw	r26, r20
    1eba:	f3 cf       	rjmp	.-26     	; 0x1ea2 <free+0x44>
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
    1ebe:	a2 83       	std	Z+2, r26	; 0x02
    1ec0:	40 81       	ld	r20, Z
    1ec2:	51 81       	ldd	r21, Z+1	; 0x01
    1ec4:	84 0f       	add	r24, r20
    1ec6:	95 1f       	adc	r25, r21
    1ec8:	8a 17       	cp	r24, r26
    1eca:	9b 07       	cpc	r25, r27
    1ecc:	71 f4       	brne	.+28     	; 0x1eea <free+0x8c>
    1ece:	8d 91       	ld	r24, X+
    1ed0:	9c 91       	ld	r25, X
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	84 0f       	add	r24, r20
    1ed6:	95 1f       	adc	r25, r21
    1ed8:	02 96       	adiw	r24, 0x02	; 2
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
    1ede:	12 96       	adiw	r26, 0x02	; 2
    1ee0:	8d 91       	ld	r24, X+
    1ee2:	9c 91       	ld	r25, X
    1ee4:	13 97       	sbiw	r26, 0x03	; 3
    1ee6:	93 83       	std	Z+3, r25	; 0x03
    1ee8:	82 83       	std	Z+2, r24	; 0x02
    1eea:	21 15       	cp	r18, r1
    1eec:	31 05       	cpc	r19, r1
    1eee:	29 f4       	brne	.+10     	; 0x1efa <free+0x9c>
    1ef0:	f0 93 e8 03 	sts	0x03E8, r31
    1ef4:	e0 93 e7 03 	sts	0x03E7, r30
    1ef8:	3e c0       	rjmp	.+124    	; 0x1f76 <free+0x118>
    1efa:	d9 01       	movw	r26, r18
    1efc:	13 96       	adiw	r26, 0x03	; 3
    1efe:	fc 93       	st	X, r31
    1f00:	ee 93       	st	-X, r30
    1f02:	12 97       	sbiw	r26, 0x02	; 2
    1f04:	4d 91       	ld	r20, X+
    1f06:	5d 91       	ld	r21, X+
    1f08:	a4 0f       	add	r26, r20
    1f0a:	b5 1f       	adc	r27, r21
    1f0c:	ea 17       	cp	r30, r26
    1f0e:	fb 07       	cpc	r31, r27
    1f10:	79 f4       	brne	.+30     	; 0x1f30 <free+0xd2>
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	84 0f       	add	r24, r20
    1f18:	95 1f       	adc	r25, r21
    1f1a:	02 96       	adiw	r24, 0x02	; 2
    1f1c:	d9 01       	movw	r26, r18
    1f1e:	11 96       	adiw	r26, 0x01	; 1
    1f20:	9c 93       	st	X, r25
    1f22:	8e 93       	st	-X, r24
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	13 96       	adiw	r26, 0x03	; 3
    1f2a:	9c 93       	st	X, r25
    1f2c:	8e 93       	st	-X, r24
    1f2e:	12 97       	sbiw	r26, 0x02	; 2
    1f30:	e0 e0       	ldi	r30, 0x00	; 0
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	9b 81       	ldd	r25, Y+3	; 0x03
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <free+0xe4>
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ec 01       	movw	r28, r24
    1f40:	f9 cf       	rjmp	.-14     	; 0x1f34 <free+0xd6>
    1f42:	ce 01       	movw	r24, r28
    1f44:	02 96       	adiw	r24, 0x02	; 2
    1f46:	28 81       	ld	r18, Y
    1f48:	39 81       	ldd	r19, Y+1	; 0x01
    1f4a:	82 0f       	add	r24, r18
    1f4c:	93 1f       	adc	r25, r19
    1f4e:	20 91 e5 03 	lds	r18, 0x03E5
    1f52:	30 91 e6 03 	lds	r19, 0x03E6
    1f56:	28 17       	cp	r18, r24
    1f58:	39 07       	cpc	r19, r25
    1f5a:	69 f4       	brne	.+26     	; 0x1f76 <free+0x118>
    1f5c:	30 97       	sbiw	r30, 0x00	; 0
    1f5e:	29 f4       	brne	.+10     	; 0x1f6a <free+0x10c>
    1f60:	10 92 e8 03 	sts	0x03E8, r1
    1f64:	10 92 e7 03 	sts	0x03E7, r1
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <free+0x110>
    1f6a:	13 82       	std	Z+3, r1	; 0x03
    1f6c:	12 82       	std	Z+2, r1	; 0x02
    1f6e:	d0 93 e6 03 	sts	0x03E6, r29
    1f72:	c0 93 e5 03 	sts	0x03E5, r28
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <strnlen_P>:
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	05 90       	lpm	r0, Z+
    1f80:	61 50       	subi	r22, 0x01	; 1
    1f82:	70 40       	sbci	r23, 0x00	; 0
    1f84:	01 10       	cpse	r0, r1
    1f86:	d8 f7       	brcc	.-10     	; 0x1f7e <strnlen_P+0x2>
    1f88:	80 95       	com	r24
    1f8a:	90 95       	com	r25
    1f8c:	8e 0f       	add	r24, r30
    1f8e:	9f 1f       	adc	r25, r31
    1f90:	08 95       	ret

00001f92 <memset>:
    1f92:	dc 01       	movw	r26, r24
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <memset+0x6>
    1f96:	6d 93       	st	X+, r22
    1f98:	41 50       	subi	r20, 0x01	; 1
    1f9a:	50 40       	sbci	r21, 0x00	; 0
    1f9c:	e0 f7       	brcc	.-8      	; 0x1f96 <memset+0x4>
    1f9e:	08 95       	ret

00001fa0 <strnlen>:
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	61 50       	subi	r22, 0x01	; 1
    1fa4:	70 40       	sbci	r23, 0x00	; 0
    1fa6:	01 90       	ld	r0, Z+
    1fa8:	01 10       	cpse	r0, r1
    1faa:	d8 f7       	brcc	.-10     	; 0x1fa2 <strnlen+0x2>
    1fac:	80 95       	com	r24
    1fae:	90 95       	com	r25
    1fb0:	8e 0f       	add	r24, r30
    1fb2:	9f 1f       	adc	r25, r31
    1fb4:	08 95       	ret

00001fb6 <fputc>:
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	18 2f       	mov	r17, r24
    1fc0:	09 2f       	mov	r16, r25
    1fc2:	eb 01       	movw	r28, r22
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	81 fd       	sbrc	r24, 1
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <fputc+0x1a>
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	9f ef       	ldi	r25, 0xFF	; 255
    1fce:	20 c0       	rjmp	.+64     	; 0x2010 <fputc+0x5a>
    1fd0:	82 ff       	sbrs	r24, 2
    1fd2:	10 c0       	rjmp	.+32     	; 0x1ff4 <fputc+0x3e>
    1fd4:	4e 81       	ldd	r20, Y+6	; 0x06
    1fd6:	5f 81       	ldd	r21, Y+7	; 0x07
    1fd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fda:	3d 81       	ldd	r19, Y+5	; 0x05
    1fdc:	42 17       	cp	r20, r18
    1fde:	53 07       	cpc	r21, r19
    1fe0:	7c f4       	brge	.+30     	; 0x2000 <fputc+0x4a>
    1fe2:	e8 81       	ld	r30, Y
    1fe4:	f9 81       	ldd	r31, Y+1	; 0x01
    1fe6:	9f 01       	movw	r18, r30
    1fe8:	2f 5f       	subi	r18, 0xFF	; 255
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
    1fec:	39 83       	std	Y+1, r19	; 0x01
    1fee:	28 83       	st	Y, r18
    1ff0:	10 83       	st	Z, r17
    1ff2:	06 c0       	rjmp	.+12     	; 0x2000 <fputc+0x4a>
    1ff4:	e8 85       	ldd	r30, Y+8	; 0x08
    1ff6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ff8:	81 2f       	mov	r24, r17
    1ffa:	09 95       	icall
    1ffc:	89 2b       	or	r24, r25
    1ffe:	29 f7       	brne	.-54     	; 0x1fca <fputc+0x14>
    2000:	2e 81       	ldd	r18, Y+6	; 0x06
    2002:	3f 81       	ldd	r19, Y+7	; 0x07
    2004:	2f 5f       	subi	r18, 0xFF	; 255
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	3f 83       	std	Y+7, r19	; 0x07
    200a:	2e 83       	std	Y+6, r18	; 0x06
    200c:	81 2f       	mov	r24, r17
    200e:	90 2f       	mov	r25, r16
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	08 95       	ret

0000201a <__ultoa_invert>:
    201a:	fa 01       	movw	r30, r20
    201c:	aa 27       	eor	r26, r26
    201e:	28 30       	cpi	r18, 0x08	; 8
    2020:	51 f1       	breq	.+84     	; 0x2076 <__ultoa_invert+0x5c>
    2022:	20 31       	cpi	r18, 0x10	; 16
    2024:	81 f1       	breq	.+96     	; 0x2086 <__ultoa_invert+0x6c>
    2026:	e8 94       	clt
    2028:	6f 93       	push	r22
    202a:	6e 7f       	andi	r22, 0xFE	; 254
    202c:	6e 5f       	subi	r22, 0xFE	; 254
    202e:	7f 4f       	sbci	r23, 0xFF	; 255
    2030:	8f 4f       	sbci	r24, 0xFF	; 255
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	af 4f       	sbci	r26, 0xFF	; 255
    2036:	b1 e0       	ldi	r27, 0x01	; 1
    2038:	3e d0       	rcall	.+124    	; 0x20b6 <__ultoa_invert+0x9c>
    203a:	b4 e0       	ldi	r27, 0x04	; 4
    203c:	3c d0       	rcall	.+120    	; 0x20b6 <__ultoa_invert+0x9c>
    203e:	67 0f       	add	r22, r23
    2040:	78 1f       	adc	r23, r24
    2042:	89 1f       	adc	r24, r25
    2044:	9a 1f       	adc	r25, r26
    2046:	a1 1d       	adc	r26, r1
    2048:	68 0f       	add	r22, r24
    204a:	79 1f       	adc	r23, r25
    204c:	8a 1f       	adc	r24, r26
    204e:	91 1d       	adc	r25, r1
    2050:	a1 1d       	adc	r26, r1
    2052:	6a 0f       	add	r22, r26
    2054:	71 1d       	adc	r23, r1
    2056:	81 1d       	adc	r24, r1
    2058:	91 1d       	adc	r25, r1
    205a:	a1 1d       	adc	r26, r1
    205c:	20 d0       	rcall	.+64     	; 0x209e <__ultoa_invert+0x84>
    205e:	09 f4       	brne	.+2      	; 0x2062 <__ultoa_invert+0x48>
    2060:	68 94       	set
    2062:	3f 91       	pop	r19
    2064:	2a e0       	ldi	r18, 0x0A	; 10
    2066:	26 9f       	mul	r18, r22
    2068:	11 24       	eor	r1, r1
    206a:	30 19       	sub	r19, r0
    206c:	30 5d       	subi	r19, 0xD0	; 208
    206e:	31 93       	st	Z+, r19
    2070:	de f6       	brtc	.-74     	; 0x2028 <__ultoa_invert+0xe>
    2072:	cf 01       	movw	r24, r30
    2074:	08 95       	ret
    2076:	46 2f       	mov	r20, r22
    2078:	47 70       	andi	r20, 0x07	; 7
    207a:	40 5d       	subi	r20, 0xD0	; 208
    207c:	41 93       	st	Z+, r20
    207e:	b3 e0       	ldi	r27, 0x03	; 3
    2080:	0f d0       	rcall	.+30     	; 0x20a0 <__ultoa_invert+0x86>
    2082:	c9 f7       	brne	.-14     	; 0x2076 <__ultoa_invert+0x5c>
    2084:	f6 cf       	rjmp	.-20     	; 0x2072 <__ultoa_invert+0x58>
    2086:	46 2f       	mov	r20, r22
    2088:	4f 70       	andi	r20, 0x0F	; 15
    208a:	40 5d       	subi	r20, 0xD0	; 208
    208c:	4a 33       	cpi	r20, 0x3A	; 58
    208e:	18 f0       	brcs	.+6      	; 0x2096 <__ultoa_invert+0x7c>
    2090:	49 5d       	subi	r20, 0xD9	; 217
    2092:	31 fd       	sbrc	r19, 1
    2094:	40 52       	subi	r20, 0x20	; 32
    2096:	41 93       	st	Z+, r20
    2098:	02 d0       	rcall	.+4      	; 0x209e <__ultoa_invert+0x84>
    209a:	a9 f7       	brne	.-22     	; 0x2086 <__ultoa_invert+0x6c>
    209c:	ea cf       	rjmp	.-44     	; 0x2072 <__ultoa_invert+0x58>
    209e:	b4 e0       	ldi	r27, 0x04	; 4
    20a0:	a6 95       	lsr	r26
    20a2:	97 95       	ror	r25
    20a4:	87 95       	ror	r24
    20a6:	77 95       	ror	r23
    20a8:	67 95       	ror	r22
    20aa:	ba 95       	dec	r27
    20ac:	c9 f7       	brne	.-14     	; 0x20a0 <__ultoa_invert+0x86>
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	61 05       	cpc	r22, r1
    20b2:	71 05       	cpc	r23, r1
    20b4:	08 95       	ret
    20b6:	9b 01       	movw	r18, r22
    20b8:	ac 01       	movw	r20, r24
    20ba:	0a 2e       	mov	r0, r26
    20bc:	06 94       	lsr	r0
    20be:	57 95       	ror	r21
    20c0:	47 95       	ror	r20
    20c2:	37 95       	ror	r19
    20c4:	27 95       	ror	r18
    20c6:	ba 95       	dec	r27
    20c8:	c9 f7       	brne	.-14     	; 0x20bc <__ultoa_invert+0xa2>
    20ca:	62 0f       	add	r22, r18
    20cc:	73 1f       	adc	r23, r19
    20ce:	84 1f       	adc	r24, r20
    20d0:	95 1f       	adc	r25, r21
    20d2:	a0 1d       	adc	r26, r0
    20d4:	08 95       	ret

000020d6 <__prologue_saves__>:
    20d6:	2f 92       	push	r2
    20d8:	3f 92       	push	r3
    20da:	4f 92       	push	r4
    20dc:	5f 92       	push	r5
    20de:	6f 92       	push	r6
    20e0:	7f 92       	push	r7
    20e2:	8f 92       	push	r8
    20e4:	9f 92       	push	r9
    20e6:	af 92       	push	r10
    20e8:	bf 92       	push	r11
    20ea:	cf 92       	push	r12
    20ec:	df 92       	push	r13
    20ee:	ef 92       	push	r14
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	ca 1b       	sub	r28, r26
    2100:	db 0b       	sbc	r29, r27
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	09 94       	ijmp

0000210e <__epilogue_restores__>:
    210e:	2a 88       	ldd	r2, Y+18	; 0x12
    2110:	39 88       	ldd	r3, Y+17	; 0x11
    2112:	48 88       	ldd	r4, Y+16	; 0x10
    2114:	5f 84       	ldd	r5, Y+15	; 0x0f
    2116:	6e 84       	ldd	r6, Y+14	; 0x0e
    2118:	7d 84       	ldd	r7, Y+13	; 0x0d
    211a:	8c 84       	ldd	r8, Y+12	; 0x0c
    211c:	9b 84       	ldd	r9, Y+11	; 0x0b
    211e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2120:	b9 84       	ldd	r11, Y+9	; 0x09
    2122:	c8 84       	ldd	r12, Y+8	; 0x08
    2124:	df 80       	ldd	r13, Y+7	; 0x07
    2126:	ee 80       	ldd	r14, Y+6	; 0x06
    2128:	fd 80       	ldd	r15, Y+5	; 0x05
    212a:	0c 81       	ldd	r16, Y+4	; 0x04
    212c:	1b 81       	ldd	r17, Y+3	; 0x03
    212e:	aa 81       	ldd	r26, Y+2	; 0x02
    2130:	b9 81       	ldd	r27, Y+1	; 0x01
    2132:	ce 0f       	add	r28, r30
    2134:	d1 1d       	adc	r29, r1
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	ed 01       	movw	r28, r26
    2142:	08 95       	ret

00002144 <_exit>:
    2144:	f8 94       	cli

00002146 <__stop_program>:
    2146:	ff cf       	rjmp	.-2      	; 0x2146 <__stop_program>
